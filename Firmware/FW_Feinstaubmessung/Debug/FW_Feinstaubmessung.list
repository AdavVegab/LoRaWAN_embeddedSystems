
FW_Feinstaubmessung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b588  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016cc  0800b710  0800b710  0001b710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cddc  0800cddc  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  0800cddc  0800cddc  0001cddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cde4  0800cde4  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cde4  0800cde4  0001cde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cde8  0800cde8  0001cde8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800cdec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000054  0800ce40  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  0800ce40  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c2dd  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000312b  00000000  00000000  0003c361  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001638  00000000  00000000  0003f490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001510  00000000  00000000  00040ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002861f  00000000  00000000  00041fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013051  00000000  00000000  0006a5f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f679c  00000000  00000000  0007d648  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00173de4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ddc  00000000  00000000  00173e60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000054 	.word	0x20000054
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b6f8 	.word	0x0800b6f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000058 	.word	0x20000058
 80001c4:	0800b6f8 	.word	0x0800b6f8

080001c8 <__aeabi_ldivmod>:
 80001c8:	b97b      	cbnz	r3, 80001ea <__aeabi_ldivmod+0x22>
 80001ca:	b972      	cbnz	r2, 80001ea <__aeabi_ldivmod+0x22>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bfbe      	ittt	lt
 80001d0:	2000      	movlt	r0, #0
 80001d2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001d6:	e006      	blt.n	80001e6 <__aeabi_ldivmod+0x1e>
 80001d8:	bf08      	it	eq
 80001da:	2800      	cmpeq	r0, #0
 80001dc:	bf1c      	itt	ne
 80001de:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001e2:	f04f 30ff 	movne.w	r0, #4294967295
 80001e6:	f000 b9bd 	b.w	8000564 <__aeabi_idiv0>
 80001ea:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f2:	2900      	cmp	r1, #0
 80001f4:	db09      	blt.n	800020a <__aeabi_ldivmod+0x42>
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db1a      	blt.n	8000230 <__aeabi_ldivmod+0x68>
 80001fa:	f000 f84d 	bl	8000298 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4770      	bx	lr
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	db1b      	blt.n	800024c <__aeabi_ldivmod+0x84>
 8000214:	f000 f840 	bl	8000298 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4240      	negs	r0, r0
 8000224:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000228:	4252      	negs	r2, r2
 800022a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800022e:	4770      	bx	lr
 8000230:	4252      	negs	r2, r2
 8000232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000236:	f000 f82f 	bl	8000298 <__udivmoddi4>
 800023a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000242:	b004      	add	sp, #16
 8000244:	4240      	negs	r0, r0
 8000246:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024a:	4770      	bx	lr
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	f000 f821 	bl	8000298 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4252      	negs	r2, r2
 8000262:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000266:	4770      	bx	lr

08000268 <__aeabi_uldivmod>:
 8000268:	b953      	cbnz	r3, 8000280 <__aeabi_uldivmod+0x18>
 800026a:	b94a      	cbnz	r2, 8000280 <__aeabi_uldivmod+0x18>
 800026c:	2900      	cmp	r1, #0
 800026e:	bf08      	it	eq
 8000270:	2800      	cmpeq	r0, #0
 8000272:	bf1c      	itt	ne
 8000274:	f04f 31ff 	movne.w	r1, #4294967295
 8000278:	f04f 30ff 	movne.w	r0, #4294967295
 800027c:	f000 b972 	b.w	8000564 <__aeabi_idiv0>
 8000280:	f1ad 0c08 	sub.w	ip, sp, #8
 8000284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000294:	b004      	add	sp, #16
 8000296:	4770      	bx	lr

08000298 <__udivmoddi4>:
 8000298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800029c:	9e08      	ldr	r6, [sp, #32]
 800029e:	4604      	mov	r4, r0
 80002a0:	4688      	mov	r8, r1
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d14b      	bne.n	800033e <__udivmoddi4+0xa6>
 80002a6:	428a      	cmp	r2, r1
 80002a8:	4615      	mov	r5, r2
 80002aa:	d967      	bls.n	800037c <__udivmoddi4+0xe4>
 80002ac:	fab2 f282 	clz	r2, r2
 80002b0:	b14a      	cbz	r2, 80002c6 <__udivmoddi4+0x2e>
 80002b2:	f1c2 0720 	rsb	r7, r2, #32
 80002b6:	fa01 f302 	lsl.w	r3, r1, r2
 80002ba:	fa20 f707 	lsr.w	r7, r0, r7
 80002be:	4095      	lsls	r5, r2
 80002c0:	ea47 0803 	orr.w	r8, r7, r3
 80002c4:	4094      	lsls	r4, r2
 80002c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002ca:	0c23      	lsrs	r3, r4, #16
 80002cc:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d0:	fa1f fc85 	uxth.w	ip, r5
 80002d4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002dc:	fb07 f10c 	mul.w	r1, r7, ip
 80002e0:	4299      	cmp	r1, r3
 80002e2:	d909      	bls.n	80002f8 <__udivmoddi4+0x60>
 80002e4:	18eb      	adds	r3, r5, r3
 80002e6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ea:	f080 811b 	bcs.w	8000524 <__udivmoddi4+0x28c>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 8118 	bls.w	8000524 <__udivmoddi4+0x28c>
 80002f4:	3f02      	subs	r7, #2
 80002f6:	442b      	add	r3, r5
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000300:	fb0e 3310 	mls	r3, lr, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 fc0c 	mul.w	ip, r0, ip
 800030c:	45a4      	cmp	ip, r4
 800030e:	d909      	bls.n	8000324 <__udivmoddi4+0x8c>
 8000310:	192c      	adds	r4, r5, r4
 8000312:	f100 33ff 	add.w	r3, r0, #4294967295
 8000316:	f080 8107 	bcs.w	8000528 <__udivmoddi4+0x290>
 800031a:	45a4      	cmp	ip, r4
 800031c:	f240 8104 	bls.w	8000528 <__udivmoddi4+0x290>
 8000320:	3802      	subs	r0, #2
 8000322:	442c      	add	r4, r5
 8000324:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000328:	eba4 040c 	sub.w	r4, r4, ip
 800032c:	2700      	movs	r7, #0
 800032e:	b11e      	cbz	r6, 8000338 <__udivmoddi4+0xa0>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c6 4300 	strd	r4, r3, [r6]
 8000338:	4639      	mov	r1, r7
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xbe>
 8000342:	2e00      	cmp	r6, #0
 8000344:	f000 80eb 	beq.w	800051e <__udivmoddi4+0x286>
 8000348:	2700      	movs	r7, #0
 800034a:	e9c6 0100 	strd	r0, r1, [r6]
 800034e:	4638      	mov	r0, r7
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f783 	clz	r7, r3
 800035a:	2f00      	cmp	r7, #0
 800035c:	d147      	bne.n	80003ee <__udivmoddi4+0x156>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd0>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80fa 	bhi.w	800055c <__udivmoddi4+0x2c4>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4698      	mov	r8, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa0>
 8000376:	e9c6 4800 	strd	r4, r8, [r6]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa0>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xe8>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 808f 	bne.w	80004a8 <__udivmoddi4+0x210>
 800038a:	1b49      	subs	r1, r1, r5
 800038c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000390:	fa1f f885 	uxth.w	r8, r5
 8000394:	2701      	movs	r7, #1
 8000396:	fbb1 fcfe 	udiv	ip, r1, lr
 800039a:	0c23      	lsrs	r3, r4, #16
 800039c:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a4:	fb08 f10c 	mul.w	r1, r8, ip
 80003a8:	4299      	cmp	r1, r3
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x124>
 80003ac:	18eb      	adds	r3, r5, r3
 80003ae:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x122>
 80003b4:	4299      	cmp	r1, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2bc>
 80003ba:	4684      	mov	ip, r0
 80003bc:	1a59      	subs	r1, r3, r1
 80003be:	b2a3      	uxth	r3, r4
 80003c0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c4:	fb0e 1410 	mls	r4, lr, r0, r1
 80003c8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003cc:	fb08 f800 	mul.w	r8, r8, r0
 80003d0:	45a0      	cmp	r8, r4
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x14c>
 80003d4:	192c      	adds	r4, r5, r4
 80003d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x14a>
 80003dc:	45a0      	cmp	r8, r4
 80003de:	f200 80b6 	bhi.w	800054e <__udivmoddi4+0x2b6>
 80003e2:	4618      	mov	r0, r3
 80003e4:	eba4 0408 	sub.w	r4, r4, r8
 80003e8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003ec:	e79f      	b.n	800032e <__udivmoddi4+0x96>
 80003ee:	f1c7 0c20 	rsb	ip, r7, #32
 80003f2:	40bb      	lsls	r3, r7
 80003f4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003f8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003fc:	fa01 f407 	lsl.w	r4, r1, r7
 8000400:	fa20 f50c 	lsr.w	r5, r0, ip
 8000404:	fa21 f30c 	lsr.w	r3, r1, ip
 8000408:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800040c:	4325      	orrs	r5, r4
 800040e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000412:	0c2c      	lsrs	r4, r5, #16
 8000414:	fb08 3319 	mls	r3, r8, r9, r3
 8000418:	fa1f fa8e 	uxth.w	sl, lr
 800041c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000420:	fb09 f40a 	mul.w	r4, r9, sl
 8000424:	429c      	cmp	r4, r3
 8000426:	fa02 f207 	lsl.w	r2, r2, r7
 800042a:	fa00 f107 	lsl.w	r1, r0, r7
 800042e:	d90b      	bls.n	8000448 <__udivmoddi4+0x1b0>
 8000430:	eb1e 0303 	adds.w	r3, lr, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	f080 8087 	bcs.w	800054a <__udivmoddi4+0x2b2>
 800043c:	429c      	cmp	r4, r3
 800043e:	f240 8084 	bls.w	800054a <__udivmoddi4+0x2b2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	4473      	add	r3, lr
 8000448:	1b1b      	subs	r3, r3, r4
 800044a:	b2ad      	uxth	r5, r5
 800044c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000450:	fb08 3310 	mls	r3, r8, r0, r3
 8000454:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000458:	fb00 fa0a 	mul.w	sl, r0, sl
 800045c:	45a2      	cmp	sl, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x1da>
 8000460:	eb1e 0404 	adds.w	r4, lr, r4
 8000464:	f100 33ff 	add.w	r3, r0, #4294967295
 8000468:	d26b      	bcs.n	8000542 <__udivmoddi4+0x2aa>
 800046a:	45a2      	cmp	sl, r4
 800046c:	d969      	bls.n	8000542 <__udivmoddi4+0x2aa>
 800046e:	3802      	subs	r0, #2
 8000470:	4474      	add	r4, lr
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	eba4 040a 	sub.w	r4, r4, sl
 800047e:	454c      	cmp	r4, r9
 8000480:	46c2      	mov	sl, r8
 8000482:	464b      	mov	r3, r9
 8000484:	d354      	bcc.n	8000530 <__udivmoddi4+0x298>
 8000486:	d051      	beq.n	800052c <__udivmoddi4+0x294>
 8000488:	2e00      	cmp	r6, #0
 800048a:	d069      	beq.n	8000560 <__udivmoddi4+0x2c8>
 800048c:	ebb1 050a 	subs.w	r5, r1, sl
 8000490:	eb64 0403 	sbc.w	r4, r4, r3
 8000494:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000498:	40fd      	lsrs	r5, r7
 800049a:	40fc      	lsrs	r4, r7
 800049c:	ea4c 0505 	orr.w	r5, ip, r5
 80004a0:	e9c6 5400 	strd	r5, r4, [r6]
 80004a4:	2700      	movs	r7, #0
 80004a6:	e747      	b.n	8000338 <__udivmoddi4+0xa0>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f703 	lsr.w	r7, r0, r3
 80004b0:	4095      	lsls	r5, r2
 80004b2:	fa01 f002 	lsl.w	r0, r1, r2
 80004b6:	fa21 f303 	lsr.w	r3, r1, r3
 80004ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004be:	4338      	orrs	r0, r7
 80004c0:	0c01      	lsrs	r1, r0, #16
 80004c2:	fbb3 f7fe 	udiv	r7, r3, lr
 80004c6:	fa1f f885 	uxth.w	r8, r5
 80004ca:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d2:	fb07 f308 	mul.w	r3, r7, r8
 80004d6:	428b      	cmp	r3, r1
 80004d8:	fa04 f402 	lsl.w	r4, r4, r2
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x256>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004e4:	d22f      	bcs.n	8000546 <__udivmoddi4+0x2ae>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d92d      	bls.n	8000546 <__udivmoddi4+0x2ae>
 80004ea:	3f02      	subs	r7, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1acb      	subs	r3, r1, r3
 80004f0:	b281      	uxth	r1, r0
 80004f2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fe:	fb00 f308 	mul.w	r3, r0, r8
 8000502:	428b      	cmp	r3, r1
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x27e>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f100 3cff 	add.w	ip, r0, #4294967295
 800050c:	d217      	bcs.n	800053e <__udivmoddi4+0x2a6>
 800050e:	428b      	cmp	r3, r1
 8000510:	d915      	bls.n	800053e <__udivmoddi4+0x2a6>
 8000512:	3802      	subs	r0, #2
 8000514:	4429      	add	r1, r5
 8000516:	1ac9      	subs	r1, r1, r3
 8000518:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800051c:	e73b      	b.n	8000396 <__udivmoddi4+0xfe>
 800051e:	4637      	mov	r7, r6
 8000520:	4630      	mov	r0, r6
 8000522:	e709      	b.n	8000338 <__udivmoddi4+0xa0>
 8000524:	4607      	mov	r7, r0
 8000526:	e6e7      	b.n	80002f8 <__udivmoddi4+0x60>
 8000528:	4618      	mov	r0, r3
 800052a:	e6fb      	b.n	8000324 <__udivmoddi4+0x8c>
 800052c:	4541      	cmp	r1, r8
 800052e:	d2ab      	bcs.n	8000488 <__udivmoddi4+0x1f0>
 8000530:	ebb8 0a02 	subs.w	sl, r8, r2
 8000534:	eb69 020e 	sbc.w	r2, r9, lr
 8000538:	3801      	subs	r0, #1
 800053a:	4613      	mov	r3, r2
 800053c:	e7a4      	b.n	8000488 <__udivmoddi4+0x1f0>
 800053e:	4660      	mov	r0, ip
 8000540:	e7e9      	b.n	8000516 <__udivmoddi4+0x27e>
 8000542:	4618      	mov	r0, r3
 8000544:	e795      	b.n	8000472 <__udivmoddi4+0x1da>
 8000546:	4667      	mov	r7, ip
 8000548:	e7d1      	b.n	80004ee <__udivmoddi4+0x256>
 800054a:	4681      	mov	r9, r0
 800054c:	e77c      	b.n	8000448 <__udivmoddi4+0x1b0>
 800054e:	3802      	subs	r0, #2
 8000550:	442c      	add	r4, r5
 8000552:	e747      	b.n	80003e4 <__udivmoddi4+0x14c>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	442b      	add	r3, r5
 800055a:	e72f      	b.n	80003bc <__udivmoddi4+0x124>
 800055c:	4638      	mov	r0, r7
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xda>
 8000560:	4637      	mov	r7, r6
 8000562:	e6e9      	b.n	8000338 <__udivmoddi4+0xa0>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <aesroundkeys>:
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[11*16/sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	e021      	b.n	80005b8 <aesroundkeys+0x50>
        AESKEY[i] = swapmsbf(AESKEY[i]);
 8000574:	4a37      	ldr	r2, [pc, #220]	; (8000654 <aesroundkeys+0xec>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800057c:	061a      	lsls	r2, r3, #24
 800057e:	4935      	ldr	r1, [pc, #212]	; (8000654 <aesroundkeys+0xec>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000586:	021b      	lsls	r3, r3, #8
 8000588:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800058c:	431a      	orrs	r2, r3
 800058e:	4931      	ldr	r1, [pc, #196]	; (8000654 <aesroundkeys+0xec>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000596:	0a1b      	lsrs	r3, r3, #8
 8000598:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800059c:	431a      	orrs	r2, r3
 800059e:	492d      	ldr	r1, [pc, #180]	; (8000654 <aesroundkeys+0xec>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005a6:	0e1b      	lsrs	r3, r3, #24
 80005a8:	431a      	orrs	r2, r3
 80005aa:	492a      	ldr	r1, [pc, #168]	; (8000654 <aesroundkeys+0xec>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i=0; i<4; i++) {
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	3301      	adds	r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	ddda      	ble.n	8000574 <aesroundkeys+0xc>
    }
    
    b = AESKEY[3];
 80005be:	4b25      	ldr	r3, [pc, #148]	; (8000654 <aesroundkeys+0xec>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	603b      	str	r3, [r7, #0]
    for( ; i<44; i++ ) {
 80005c4:	e03c      	b.n	8000640 <aesroundkeys+0xd8>
        if( i%4==0 ) {
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f003 0303 	and.w	r3, r3, #3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d127      	bne.n	8000620 <aesroundkeys+0xb8>
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = (AES_S[u1(b >> 16)] << 24) ^
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	0c1b      	lsrs	r3, r3, #16
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <aesroundkeys+0xf0>)
 80005da:	5c9b      	ldrb	r3, [r3, r2]
 80005dc:	061a      	lsls	r2, r3, #24
                (AES_S[u1(b >>  8)] << 16) ^
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	4619      	mov	r1, r3
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <aesroundkeys+0xf0>)
 80005e8:	5c5b      	ldrb	r3, [r3, r1]
 80005ea:	041b      	lsls	r3, r3, #16
            b = (AES_S[u1(b >> 16)] << 24) ^
 80005ec:	405a      	eors	r2, r3
                (AES_S[u1(b)      ] <<  8) ^
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <aesroundkeys+0xf0>)
 80005f6:	5c5b      	ldrb	r3, [r3, r1]
 80005f8:	021b      	lsls	r3, r3, #8
                (AES_S[u1(b >>  8)] << 16) ^
 80005fa:	4053      	eors	r3, r2
                (AES_S[   b >> 24 ]      ) ^
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	0e12      	lsrs	r2, r2, #24
 8000600:	4915      	ldr	r1, [pc, #84]	; (8000658 <aesroundkeys+0xf0>)
 8000602:	5c8a      	ldrb	r2, [r1, r2]
                (AES_S[u1(b)      ] <<  8) ^
 8000604:	4053      	eors	r3, r2
 8000606:	461a      	mov	r2, r3
                 AES_RCON[(i-4)/4];
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b04      	subs	r3, #4
 800060c:	2b00      	cmp	r3, #0
 800060e:	da00      	bge.n	8000612 <aesroundkeys+0xaa>
 8000610:	3303      	adds	r3, #3
 8000612:	109b      	asrs	r3, r3, #2
 8000614:	4619      	mov	r1, r3
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <aesroundkeys+0xf4>)
 8000618:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            b = (AES_S[u1(b >> 16)] << 24) ^
 800061c:	4053      	eors	r3, r2
 800061e:	603b      	str	r3, [r7, #0]
        }
        AESKEY[i] = b ^= AESKEY[i-4];
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3b04      	subs	r3, #4
 8000624:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <aesroundkeys+0xec>)
 8000626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	4053      	eors	r3, r2
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4908      	ldr	r1, [pc, #32]	; (8000654 <aesroundkeys+0xec>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	683a      	ldr	r2, [r7, #0]
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( ; i<44; i++ ) {
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3301      	adds	r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b2b      	cmp	r3, #43	; 0x2b
 8000644:	ddbf      	ble.n	80005c6 <aesroundkeys+0x5e>
    }
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	200000a0 	.word	0x200000a0
 8000658:	0800bbd0 	.word	0x0800bbd0
 800065c:	0800bba8 	.word	0x0800bba8

08000660 <os_aes>:

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	; 0x30
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4613      	mov	r3, r2
 800066e:	80bb      	strh	r3, [r7, #4]
        
        aesroundkeys();
 8000670:	f7ff ff7a 	bl	8000568 <aesroundkeys>

        if( mode & AES_MICNOAUX ) {
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f003 0308 	and.w	r3, r3, #8
 800067a:	2b00      	cmp	r3, #0
 800067c:	d010      	beq.n	80006a0 <os_aes+0x40>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 800067e:	4b5a      	ldr	r3, [pc, #360]	; (80007e8 <os_aes+0x188>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	4b58      	ldr	r3, [pc, #352]	; (80007e8 <os_aes+0x188>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	4a57      	ldr	r2, [pc, #348]	; (80007e8 <os_aes+0x188>)
 800068a:	6093      	str	r3, [r2, #8]
 800068c:	4b56      	ldr	r3, [pc, #344]	; (80007e8 <os_aes+0x188>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a55      	ldr	r2, [pc, #340]	; (80007e8 <os_aes+0x188>)
 8000692:	6053      	str	r3, [r2, #4]
 8000694:	4b54      	ldr	r3, [pc, #336]	; (80007e8 <os_aes+0x188>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4a53      	ldr	r2, [pc, #332]	; (80007e8 <os_aes+0x188>)
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	f000 bca3 	b.w	8000fe6 <os_aes+0x986>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
 80006a0:	4b51      	ldr	r3, [pc, #324]	; (80007e8 <os_aes+0x188>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	061a      	lsls	r2, r3, #24
 80006a6:	4b50      	ldr	r3, [pc, #320]	; (80007e8 <os_aes+0x188>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80006b0:	431a      	orrs	r2, r3
 80006b2:	4b4d      	ldr	r3, [pc, #308]	; (80007e8 <os_aes+0x188>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	0a1b      	lsrs	r3, r3, #8
 80006b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80006bc:	431a      	orrs	r2, r3
 80006be:	4b4a      	ldr	r3, [pc, #296]	; (80007e8 <os_aes+0x188>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	0e1b      	lsrs	r3, r3, #24
 80006c4:	4313      	orrs	r3, r2
 80006c6:	4a48      	ldr	r2, [pc, #288]	; (80007e8 <os_aes+0x188>)
 80006c8:	6013      	str	r3, [r2, #0]
            AESAUX[1] = swapmsbf(AESAUX[1]);
 80006ca:	4b47      	ldr	r3, [pc, #284]	; (80007e8 <os_aes+0x188>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	061a      	lsls	r2, r3, #24
 80006d0:	4b45      	ldr	r3, [pc, #276]	; (80007e8 <os_aes+0x188>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80006da:	431a      	orrs	r2, r3
 80006dc:	4b42      	ldr	r3, [pc, #264]	; (80007e8 <os_aes+0x188>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80006e6:	431a      	orrs	r2, r3
 80006e8:	4b3f      	ldr	r3, [pc, #252]	; (80007e8 <os_aes+0x188>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	0e1b      	lsrs	r3, r3, #24
 80006ee:	4313      	orrs	r3, r2
 80006f0:	4a3d      	ldr	r2, [pc, #244]	; (80007e8 <os_aes+0x188>)
 80006f2:	6053      	str	r3, [r2, #4]
            AESAUX[2] = swapmsbf(AESAUX[2]);
 80006f4:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <os_aes+0x188>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	061a      	lsls	r2, r3, #24
 80006fa:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <os_aes+0x188>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000704:	431a      	orrs	r2, r3
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <os_aes+0x188>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	0a1b      	lsrs	r3, r3, #8
 800070c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000710:	431a      	orrs	r2, r3
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <os_aes+0x188>)
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	0e1b      	lsrs	r3, r3, #24
 8000718:	4313      	orrs	r3, r2
 800071a:	4a33      	ldr	r2, [pc, #204]	; (80007e8 <os_aes+0x188>)
 800071c:	6093      	str	r3, [r2, #8]
            AESAUX[3] = swapmsbf(AESAUX[3]);
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <os_aes+0x188>)
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	061a      	lsls	r2, r3, #24
 8000724:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <os_aes+0x188>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800072e:	431a      	orrs	r2, r3
 8000730:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <os_aes+0x188>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800073a:	431a      	orrs	r2, r3
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <os_aes+0x188>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	0e1b      	lsrs	r3, r3, #24
 8000742:	4313      	orrs	r3, r2
 8000744:	4a28      	ldr	r2, [pc, #160]	; (80007e8 <os_aes+0x188>)
 8000746:	60d3      	str	r3, [r2, #12]
        }

        while( (signed char)len > 0 ) {
 8000748:	f000 bc4d 	b.w	8000fe6 <os_aes+0x986>
            u4_t a0, a1, a2, a3;
            u4_t t0, t1, t2, t3;
            u4_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	2b00      	cmp	r3, #0
 8000754:	d109      	bne.n	800076a <os_aes+0x10a>
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f003 0302 	and.w	r3, r3, #2
 800075c:	2b00      	cmp	r3, #0
 800075e:	d011      	beq.n	8000784 <os_aes+0x124>
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f003 0308 	and.w	r3, r3, #8
 8000766:	2b00      	cmp	r3, #0
 8000768:	d10c      	bne.n	8000784 <os_aes+0x124>
                a0 = AESAUX[0];
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <os_aes+0x188>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
                a1 = AESAUX[1];
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <os_aes+0x188>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
                a2 = AESAUX[2];
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <os_aes+0x188>)
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
                a3 = AESAUX[3];
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <os_aes+0x188>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	e062      	b.n	800084a <os_aes+0x1ea>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	2b00      	cmp	r3, #0
 800078c:	d016      	beq.n	80007bc <os_aes+0x15c>
 800078e:	88bb      	ldrh	r3, [r7, #4]
 8000790:	2b10      	cmp	r3, #16
 8000792:	d813      	bhi.n	80007bc <os_aes+0x15c>
                a0 = a1 = a2 = a3 = 0; // load null block
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
 800079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
 80007a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 80007a4:	88bb      	ldrh	r3, [r7, #4]
 80007a6:	2b10      	cmp	r3, #16
 80007a8:	d101      	bne.n	80007ae <os_aes+0x14e>
 80007aa:	2210      	movs	r2, #16
 80007ac:	e000      	b.n	80007b0 <os_aes+0x150>
 80007ae:	2220      	movs	r2, #32
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	e046      	b.n	800084a <os_aes+0x1ea>
            } else
        LOADDATA: { // load data block (partially)
 80007bc:	bf00      	nop
                for(t0=0; t0<16; t0++) {
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
 80007c2:	e026      	b.n	8000812 <os_aes+0x1b2>
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	021a      	lsls	r2, r3, #8
 80007c8:	88bb      	ldrh	r3, [r7, #4]
 80007ca:	69f9      	ldr	r1, [r7, #28]
 80007cc:	4299      	cmp	r1, r3
 80007ce:	d204      	bcs.n	80007da <os_aes+0x17a>
 80007d0:	6839      	ldr	r1, [r7, #0]
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	440b      	add	r3, r1
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	e009      	b.n	80007ee <os_aes+0x18e>
 80007da:	88bb      	ldrh	r3, [r7, #4]
 80007dc:	69f9      	ldr	r1, [r7, #28]
 80007de:	4299      	cmp	r1, r3
 80007e0:	d104      	bne.n	80007ec <os_aes+0x18c>
 80007e2:	2380      	movs	r3, #128	; 0x80
 80007e4:	e003      	b.n	80007ee <os_aes+0x18e>
 80007e6:	bf00      	nop
 80007e8:	20000150 	.word	0x20000150
 80007ec:	2300      	movs	r3, #0
 80007ee:	4313      	orrs	r3, r2
 80007f0:	61bb      	str	r3, [r7, #24]
                    if((t0&3)==3) {
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	f003 0303 	and.w	r3, r3, #3
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d107      	bne.n	800080c <os_aes+0x1ac>
                        a0 = a1;
 80007fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                        a1 = a2;
 8000800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
                        a2 = a3;
 8000804:	6a3b      	ldr	r3, [r7, #32]
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
                        a3 = t1;
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	623b      	str	r3, [r7, #32]
                for(t0=0; t0<16; t0++) {
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	3301      	adds	r3, #1
 8000810:	61fb      	str	r3, [r7, #28]
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d9d5      	bls.n	80007c4 <os_aes+0x164>
                    }
                } 
                if( mode & AES_MIC ) {
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	2b00      	cmp	r3, #0
 8000820:	d013      	beq.n	800084a <os_aes+0x1ea>
                    a0 ^= AESAUX[0];
 8000822:	4ba0      	ldr	r3, [pc, #640]	; (8000aa4 <os_aes+0x444>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000828:	4053      	eors	r3, r2
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    a1 ^= AESAUX[1];
 800082c:	4b9d      	ldr	r3, [pc, #628]	; (8000aa4 <os_aes+0x444>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000832:	4053      	eors	r3, r2
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
                    a2 ^= AESAUX[2];
 8000836:	4b9b      	ldr	r3, [pc, #620]	; (8000aa4 <os_aes+0x444>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	4053      	eors	r3, r2
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
                    a3 ^= AESAUX[3];
 8000840:	4b98      	ldr	r3, [pc, #608]	; (8000aa4 <os_aes+0x444>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	6a3a      	ldr	r2, [r7, #32]
 8000846:	4053      	eors	r3, r2
 8000848:	623b      	str	r3, [r7, #32]
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
 800084a:	4b97      	ldr	r3, [pc, #604]	; (8000aa8 <os_aes+0x448>)
 800084c:	617b      	str	r3, [r7, #20]
            ke = ki + 8*4;
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	3380      	adds	r3, #128	; 0x80
 8000852:	613b      	str	r3, [r7, #16]
            a0 ^= ki[0];
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800085a:	4053      	eors	r3, r2
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
            a1 ^= ki[1];
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	3304      	adds	r3, #4
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000866:	4053      	eors	r3, r2
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
            a2 ^= ki[2];
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	3308      	adds	r3, #8
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000872:	4053      	eors	r3, r2
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
            a3 ^= ki[3];
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	330c      	adds	r3, #12
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	6a3a      	ldr	r2, [r7, #32]
 800087e:	4053      	eors	r3, r2
 8000880:	623b      	str	r3, [r7, #32]
            do {
                AES_key4 (t1,t2,t3,t0,4);
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	691b      	ldr	r3, [r3, #16]
 8000898:	61fb      	str	r3, [r7, #28]
                AES_expr4(t1,t2,t3,t0,a0);
 800089a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800089c:	b2db      	uxtb	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	4b82      	ldr	r3, [pc, #520]	; (8000aac <os_aes+0x44c>)
 80008a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4053      	eors	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ae:	0a1b      	lsrs	r3, r3, #8
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b7e      	ldr	r3, [pc, #504]	; (8000ab0 <os_aes+0x450>)
 80008b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	4053      	eors	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c2:	0c1b      	lsrs	r3, r3, #16
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b7a      	ldr	r3, [pc, #488]	; (8000ab4 <os_aes+0x454>)
 80008ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	4053      	eors	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d6:	0e1b      	lsrs	r3, r3, #24
 80008d8:	4a77      	ldr	r2, [pc, #476]	; (8000ab8 <os_aes+0x458>)
 80008da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008de:	69fa      	ldr	r2, [r7, #28]
 80008e0:	4053      	eors	r3, r2
 80008e2:	61fb      	str	r3, [r7, #28]
                AES_expr4(t2,t3,t0,t1,a1);
 80008e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b70      	ldr	r3, [pc, #448]	; (8000aac <os_aes+0x44c>)
 80008ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	4053      	eors	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b6c      	ldr	r3, [pc, #432]	; (8000ab0 <os_aes+0x450>)
 8000900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	4053      	eors	r3, r2
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090c:	0c1b      	lsrs	r3, r3, #16
 800090e:	b2db      	uxtb	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	4b68      	ldr	r3, [pc, #416]	; (8000ab4 <os_aes+0x454>)
 8000914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000918:	69fa      	ldr	r2, [r7, #28]
 800091a:	4053      	eors	r3, r2
 800091c:	61fb      	str	r3, [r7, #28]
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	0e1b      	lsrs	r3, r3, #24
 8000922:	4a65      	ldr	r2, [pc, #404]	; (8000ab8 <os_aes+0x458>)
 8000924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4053      	eors	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
                AES_expr4(t3,t0,t1,t2,a2);
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	b2db      	uxtb	r3, r3
 8000932:	461a      	mov	r2, r3
 8000934:	4b5d      	ldr	r3, [pc, #372]	; (8000aac <os_aes+0x44c>)
 8000936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	4053      	eors	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	0a1b      	lsrs	r3, r3, #8
 8000944:	b2db      	uxtb	r3, r3
 8000946:	461a      	mov	r2, r3
 8000948:	4b59      	ldr	r3, [pc, #356]	; (8000ab0 <os_aes+0x450>)
 800094a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	4053      	eors	r3, r2
 8000952:	61fb      	str	r3, [r7, #28]
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	0c1b      	lsrs	r3, r3, #16
 8000958:	b2db      	uxtb	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	4b55      	ldr	r3, [pc, #340]	; (8000ab4 <os_aes+0x454>)
 800095e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4053      	eors	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	0e1b      	lsrs	r3, r3, #24
 800096c:	4a52      	ldr	r2, [pc, #328]	; (8000ab8 <os_aes+0x458>)
 800096e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	4053      	eors	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
                AES_expr4(t0,t1,t2,t3,a3);
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	461a      	mov	r2, r3
 800097e:	4b4b      	ldr	r3, [pc, #300]	; (8000aac <os_aes+0x44c>)
 8000980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000984:	69fa      	ldr	r2, [r7, #28]
 8000986:	4053      	eors	r3, r2
 8000988:	61fb      	str	r3, [r7, #28]
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	b2db      	uxtb	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	4b47      	ldr	r3, [pc, #284]	; (8000ab0 <os_aes+0x450>)
 8000994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4053      	eors	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	0c1b      	lsrs	r3, r3, #16
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b43      	ldr	r3, [pc, #268]	; (8000ab4 <os_aes+0x454>)
 80009a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	4053      	eors	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	0e1b      	lsrs	r3, r3, #24
 80009b6:	4a40      	ldr	r2, [pc, #256]	; (8000ab8 <os_aes+0x458>)
 80009b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009bc:	68ba      	ldr	r2, [r7, #8]
 80009be:	4053      	eors	r3, r2
 80009c0:	60bb      	str	r3, [r7, #8]

                AES_key4 (a1,a2,a3,a0,8);
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d2:	623b      	str	r3, [r7, #32]
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	6a1b      	ldr	r3, [r3, #32]
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                AES_expr4(a1,a2,a3,a0,t0);
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	461a      	mov	r2, r3
 80009e0:	4b32      	ldr	r3, [pc, #200]	; (8000aac <os_aes+0x44c>)
 80009e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009e8:	4053      	eors	r3, r2
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	0a1b      	lsrs	r3, r3, #8
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <os_aes+0x450>)
 80009f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009fc:	4053      	eors	r3, r2
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	0c1b      	lsrs	r3, r3, #16
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <os_aes+0x454>)
 8000a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0e:	6a3a      	ldr	r2, [r7, #32]
 8000a10:	4053      	eors	r3, r2
 8000a12:	623b      	str	r3, [r7, #32]
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	0e1b      	lsrs	r3, r3, #24
 8000a18:	4a27      	ldr	r2, [pc, #156]	; (8000ab8 <os_aes+0x458>)
 8000a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a20:	4053      	eors	r3, r2
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
                AES_expr4(a2,a3,a0,a1,t1);
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <os_aes+0x44c>)
 8000a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a32:	4053      	eors	r3, r2
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <os_aes+0x450>)
 8000a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a44:	6a3a      	ldr	r2, [r7, #32]
 8000a46:	4053      	eors	r3, r2
 8000a48:	623b      	str	r3, [r7, #32]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	0c1b      	lsrs	r3, r3, #16
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <os_aes+0x454>)
 8000a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a5a:	4053      	eors	r3, r2
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	0e1b      	lsrs	r3, r3, #24
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <os_aes+0x458>)
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a6a:	4053      	eors	r3, r2
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
                AES_expr4(a3,a0,a1,a2,t2);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <os_aes+0x44c>)
 8000a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a7a:	6a3a      	ldr	r2, [r7, #32]
 8000a7c:	4053      	eors	r3, r2
 8000a7e:	623b      	str	r3, [r7, #32]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <os_aes+0x450>)
 8000a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a90:	4053      	eors	r3, r2
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <os_aes+0x454>)
 8000a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa2:	e00b      	b.n	8000abc <os_aes+0x45c>
 8000aa4:	20000150 	.word	0x20000150
 8000aa8:	200000a0 	.word	0x200000a0
 8000aac:	0800c8d0 	.word	0x0800c8d0
 8000ab0:	0800c4d0 	.word	0x0800c4d0
 8000ab4:	0800c0d0 	.word	0x0800c0d0
 8000ab8:	0800bcd0 	.word	0x0800bcd0
 8000abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000abe:	4053      	eors	r3, r2
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	0e1b      	lsrs	r3, r3, #24
 8000ac6:	4aa2      	ldr	r2, [pc, #648]	; (8000d50 <os_aes+0x6f0>)
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ace:	4053      	eors	r3, r2
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
                AES_expr4(a0,a1,a2,a3,t3);
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b9e      	ldr	r3, [pc, #632]	; (8000d54 <os_aes+0x6f4>)
 8000ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ae0:	4053      	eors	r3, r2
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b9a      	ldr	r3, [pc, #616]	; (8000d58 <os_aes+0x6f8>)
 8000aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000af4:	4053      	eors	r3, r2
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	0c1b      	lsrs	r3, r3, #16
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b96      	ldr	r3, [pc, #600]	; (8000d5c <os_aes+0x6fc>)
 8000b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b08:	4053      	eors	r3, r2
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	0e1b      	lsrs	r3, r3, #24
 8000b10:	4a8f      	ldr	r2, [pc, #572]	; (8000d50 <os_aes+0x6f0>)
 8000b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b16:	6a3a      	ldr	r2, [r7, #32]
 8000b18:	4053      	eors	r3, r2
 8000b1a:	623b      	str	r3, [r7, #32]
            } while( (ki+=8) < ke );
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3320      	adds	r3, #32
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	f4ff aeab 	bcc.w	8000882 <os_aes+0x222>

            AES_key4 (t1,t2,t3,t0,4);
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	69db      	ldr	r3, [r3, #28]
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	61fb      	str	r3, [r7, #28]
            AES_expr4(t1,t2,t3,t0,a0);
 8000b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b82      	ldr	r3, [pc, #520]	; (8000d54 <os_aes+0x6f4>)
 8000b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	4053      	eors	r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
 8000b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b7e      	ldr	r3, [pc, #504]	; (8000d58 <os_aes+0x6f8>)
 8000b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	4053      	eors	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	0c1b      	lsrs	r3, r3, #16
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b7a      	ldr	r3, [pc, #488]	; (8000d5c <os_aes+0x6fc>)
 8000b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	4053      	eors	r3, r2
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b80:	0e1b      	lsrs	r3, r3, #24
 8000b82:	4a73      	ldr	r2, [pc, #460]	; (8000d50 <os_aes+0x6f0>)
 8000b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b88:	69fa      	ldr	r2, [r7, #28]
 8000b8a:	4053      	eors	r3, r2
 8000b8c:	61fb      	str	r3, [r7, #28]
            AES_expr4(t2,t3,t0,t1,a1);
 8000b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b6f      	ldr	r3, [pc, #444]	; (8000d54 <os_aes+0x6f4>)
 8000b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	4053      	eors	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba2:	0a1b      	lsrs	r3, r3, #8
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b6b      	ldr	r3, [pc, #428]	; (8000d58 <os_aes+0x6f8>)
 8000baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	4053      	eors	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb6:	0c1b      	lsrs	r3, r3, #16
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b67      	ldr	r3, [pc, #412]	; (8000d5c <os_aes+0x6fc>)
 8000bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	4053      	eors	r3, r2
 8000bc6:	61fb      	str	r3, [r7, #28]
 8000bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bca:	0e1b      	lsrs	r3, r3, #24
 8000bcc:	4a60      	ldr	r2, [pc, #384]	; (8000d50 <os_aes+0x6f0>)
 8000bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4053      	eors	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
            AES_expr4(t3,t0,t1,t2,a2);
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b5d      	ldr	r3, [pc, #372]	; (8000d54 <os_aes+0x6f4>)
 8000be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	4053      	eors	r3, r2
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b59      	ldr	r3, [pc, #356]	; (8000d58 <os_aes+0x6f8>)
 8000bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf8:	69fa      	ldr	r2, [r7, #28]
 8000bfa:	4053      	eors	r3, r2
 8000bfc:	61fb      	str	r3, [r7, #28]
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	0c1b      	lsrs	r3, r3, #16
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b55      	ldr	r3, [pc, #340]	; (8000d5c <os_aes+0x6fc>)
 8000c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4053      	eors	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	0e1b      	lsrs	r3, r3, #24
 8000c16:	4a4e      	ldr	r2, [pc, #312]	; (8000d50 <os_aes+0x6f0>)
 8000c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	4053      	eors	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
            AES_expr4(t0,t1,t2,t3,a3);
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <os_aes+0x6f4>)
 8000c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	4053      	eors	r3, r2
 8000c32:	61fb      	str	r3, [r7, #28]
 8000c34:	6a3b      	ldr	r3, [r7, #32]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b46      	ldr	r3, [pc, #280]	; (8000d58 <os_aes+0x6f8>)
 8000c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4053      	eors	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
 8000c48:	6a3b      	ldr	r3, [r7, #32]
 8000c4a:	0c1b      	lsrs	r3, r3, #16
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b42      	ldr	r3, [pc, #264]	; (8000d5c <os_aes+0x6fc>)
 8000c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	4053      	eors	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	0e1b      	lsrs	r3, r3, #24
 8000c60:	4a3b      	ldr	r2, [pc, #236]	; (8000d50 <os_aes+0x6f0>)
 8000c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	4053      	eors	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]

            AES_expr(a0,t0,t1,t2,t3,8);
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	6a1b      	ldr	r3, [r3, #32]
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	0e1b      	lsrs	r3, r3, #24
 8000c76:	4a3a      	ldr	r2, [pc, #232]	; (8000d60 <os_aes+0x700>)
 8000c78:	5cd3      	ldrb	r3, [r2, r3]
 8000c7a:	061b      	lsls	r3, r3, #24
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c80:	4053      	eors	r3, r2
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <os_aes+0x700>)
 8000c8e:	5c9b      	ldrb	r3, [r3, r2]
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	461a      	mov	r2, r3
 8000c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c96:	4053      	eors	r3, r2
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <os_aes+0x700>)
 8000ca4:	5c9b      	ldrb	r3, [r3, r2]
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	461a      	mov	r2, r3
 8000caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cac:	4053      	eors	r3, r2
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <os_aes+0x700>)
 8000cb8:	5c9b      	ldrb	r3, [r3, r2]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbe:	4053      	eors	r3, r2
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
            AES_expr(a1,t1,t2,t3,t0,9);
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	0e1b      	lsrs	r3, r3, #24
 8000ccc:	4a24      	ldr	r2, [pc, #144]	; (8000d60 <os_aes+0x700>)
 8000cce:	5cd3      	ldrb	r3, [r2, r3]
 8000cd0:	061b      	lsls	r3, r3, #24
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd6:	4053      	eors	r3, r2
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	0c1b      	lsrs	r3, r3, #16
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <os_aes+0x700>)
 8000ce4:	5c9b      	ldrb	r3, [r3, r2]
 8000ce6:	041b      	lsls	r3, r3, #16
 8000ce8:	461a      	mov	r2, r3
 8000cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cec:	4053      	eors	r3, r2
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	0a1b      	lsrs	r3, r3, #8
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <os_aes+0x700>)
 8000cfa:	5c9b      	ldrb	r3, [r3, r2]
 8000cfc:	021b      	lsls	r3, r3, #8
 8000cfe:	461a      	mov	r2, r3
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	4053      	eors	r3, r2
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <os_aes+0x700>)
 8000d0e:	5c9b      	ldrb	r3, [r3, r2]
 8000d10:	461a      	mov	r2, r3
 8000d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d14:	4053      	eors	r3, r2
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
            AES_expr(a2,t2,t3,t0,t1,10);
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	0e1b      	lsrs	r3, r3, #24
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <os_aes+0x700>)
 8000d24:	5cd3      	ldrb	r3, [r2, r3]
 8000d26:	061b      	lsls	r3, r3, #24
 8000d28:	461a      	mov	r2, r3
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	4053      	eors	r3, r2
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	0c1b      	lsrs	r3, r3, #16
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <os_aes+0x700>)
 8000d3a:	5c9b      	ldrb	r3, [r3, r2]
 8000d3c:	041b      	lsls	r3, r3, #16
 8000d3e:	461a      	mov	r2, r3
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	4053      	eors	r3, r2
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	e009      	b.n	8000d64 <os_aes+0x704>
 8000d50:	0800bcd0 	.word	0x0800bcd0
 8000d54:	0800c8d0 	.word	0x0800c8d0
 8000d58:	0800c4d0 	.word	0x0800c4d0
 8000d5c:	0800c0d0 	.word	0x0800c0d0
 8000d60:	0800bbd0 	.word	0x0800bbd0
 8000d64:	4b66      	ldr	r3, [pc, #408]	; (8000f00 <os_aes+0x8a0>)
 8000d66:	5c9b      	ldrb	r3, [r3, r2]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	4053      	eors	r3, r2
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b61      	ldr	r3, [pc, #388]	; (8000f00 <os_aes+0x8a0>)
 8000d7a:	5c9b      	ldrb	r3, [r3, r2]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	4053      	eors	r3, r2
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
            AES_expr(a3,t3,t0,t1,t2,11);
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d88:	623b      	str	r3, [r7, #32]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	0e1b      	lsrs	r3, r3, #24
 8000d8e:	4a5c      	ldr	r2, [pc, #368]	; (8000f00 <os_aes+0x8a0>)
 8000d90:	5cd3      	ldrb	r3, [r2, r3]
 8000d92:	061b      	lsls	r3, r3, #24
 8000d94:	461a      	mov	r2, r3
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	4053      	eors	r3, r2
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	0c1b      	lsrs	r3, r3, #16
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b56      	ldr	r3, [pc, #344]	; (8000f00 <os_aes+0x8a0>)
 8000da6:	5c9b      	ldrb	r3, [r3, r2]
 8000da8:	041b      	lsls	r3, r3, #16
 8000daa:	461a      	mov	r2, r3
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	4053      	eors	r3, r2
 8000db0:	623b      	str	r3, [r7, #32]
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b51      	ldr	r3, [pc, #324]	; (8000f00 <os_aes+0x8a0>)
 8000dbc:	5c9b      	ldrb	r3, [r3, r2]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	6a3b      	ldr	r3, [r7, #32]
 8000dc4:	4053      	eors	r3, r2
 8000dc6:	623b      	str	r3, [r7, #32]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b4c      	ldr	r3, [pc, #304]	; (8000f00 <os_aes+0x8a0>)
 8000dd0:	5c9b      	ldrb	r3, [r3, r2]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
 8000dd6:	4053      	eors	r3, r2
 8000dd8:	623b      	str	r3, [r7, #32]
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d056      	beq.n	8000e92 <os_aes+0x832>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	111b      	asrs	r3, r3, #4
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d041      	beq.n	8000e78 <os_aes+0x818>
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
 8000df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df6:	0fdb      	lsrs	r3, r3, #31
 8000df8:	61fb      	str	r3, [r7, #28]
                        a0 = (a0 << 1) | (a1 >> 31);
 8000dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfc:	005a      	lsls	r2, r3, #1
 8000dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e00:	0fdb      	lsrs	r3, r3, #31
 8000e02:	4313      	orrs	r3, r2
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
                        a1 = (a1 << 1) | (a2 >> 31);
 8000e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e08:	005a      	lsls	r2, r3, #1
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	0fdb      	lsrs	r3, r3, #31
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
                        a2 = (a2 << 1) | (a3 >> 31);
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	005a      	lsls	r2, r3, #1
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	0fdb      	lsrs	r3, r3, #31
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
                        a3 = (a3 << 1);
 8000e1e:	6a3b      	ldr	r3, [r7, #32]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	623b      	str	r3, [r7, #32]
                        if( t0 ) a3 ^= 0x87;
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <os_aes+0x7d2>
 8000e2a:	6a3b      	ldr	r3, [r7, #32]
 8000e2c:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8000e30:	623b      	str	r3, [r7, #32]
                    } while( --t1 );
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	61bb      	str	r3, [r7, #24]
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1da      	bne.n	8000df4 <os_aes+0x794>

                    AESAUX[0] ^= a0;
 8000e3e:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <os_aes+0x8a4>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e44:	4053      	eors	r3, r2
 8000e46:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <os_aes+0x8a4>)
 8000e48:	6013      	str	r3, [r2, #0]
                    AESAUX[1] ^= a1;
 8000e4a:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <os_aes+0x8a4>)
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e50:	4053      	eors	r3, r2
 8000e52:	4a2c      	ldr	r2, [pc, #176]	; (8000f04 <os_aes+0x8a4>)
 8000e54:	6053      	str	r3, [r2, #4]
                    AESAUX[2] ^= a2;
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <os_aes+0x8a4>)
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	4053      	eors	r3, r2
 8000e5e:	4a29      	ldr	r2, [pc, #164]	; (8000f04 <os_aes+0x8a4>)
 8000e60:	6093      	str	r3, [r2, #8]
                    AESAUX[3] ^= a3;
 8000e62:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <os_aes+0x8a4>)
 8000e64:	68da      	ldr	r2, [r3, #12]
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	4053      	eors	r3, r2
 8000e6a:	4a26      	ldr	r2, [pc, #152]	; (8000f04 <os_aes+0x8a4>)
 8000e6c:	60d3      	str	r3, [r2, #12]
                    mode &= ~AES_MICSUB;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e74:	71fb      	strb	r3, [r7, #7]
                    goto LOADDATA;
 8000e76:	e4a2      	b.n	80007be <os_aes+0x15e>
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
 8000e78:	4a22      	ldr	r2, [pc, #136]	; (8000f04 <os_aes+0x8a4>)
 8000e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7c:	6013      	str	r3, [r2, #0]
                    AESAUX[1] = a1;
 8000e7e:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <os_aes+0x8a4>)
 8000e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e82:	6053      	str	r3, [r2, #4]
                    AESAUX[2] = a2;
 8000e84:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <os_aes+0x8a4>)
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	6093      	str	r3, [r2, #8]
                    AESAUX[3] = a3;
 8000e8a:	4a1e      	ldr	r2, [pc, #120]	; (8000f04 <os_aes+0x8a4>)
 8000e8c:	6a3b      	ldr	r3, [r7, #32]
 8000e8e:	60d3      	str	r3, [r2, #12]
 8000e90:	e095      	b.n	8000fbe <os_aes+0x95e>
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d035      	beq.n	8000f08 <os_aes+0x8a8>
                    t0 = (len > 16) ? 16: len;
 8000e9c:	88bb      	ldrh	r3, [r7, #4]
 8000e9e:	2b10      	cmp	r3, #16
 8000ea0:	bf28      	it	cs
 8000ea2:	2310      	movcs	r3, #16
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	61fb      	str	r3, [r7, #28]
                    for(t1=0; t1<t0; t1++) {
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
 8000eac:	e01d      	b.n	8000eea <os_aes+0x88a>
                        buf[t1] ^= (a0>>24);
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	7819      	ldrb	r1, [r3, #0]
 8000eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb8:	0e1b      	lsrs	r3, r3, #24
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	6838      	ldr	r0, [r7, #0]
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	4403      	add	r3, r0
 8000ec2:	404a      	eors	r2, r1
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	701a      	strb	r2, [r3, #0]
                        a0 <<= 8;
 8000ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if((t1&3)==3) {
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d105      	bne.n	8000ee4 <os_aes+0x884>
                            a0 = a1;
 8000ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
                            a1 = a2;
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
                            a2 = a3;
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
                    for(t1=0; t1<t0; t1++) {
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d3dd      	bcc.n	8000eae <os_aes+0x84e>
                        }
                    }
                    // update counter
                    AESAUX[3]++;
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <os_aes+0x8a4>)
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	4a02      	ldr	r2, [pc, #8]	; (8000f04 <os_aes+0x8a4>)
 8000efa:	60d3      	str	r3, [r2, #12]
 8000efc:	e05f      	b.n	8000fbe <os_aes+0x95e>
 8000efe:	bf00      	nop
 8000f00:	0800bbd0 	.word	0x0800bbd0
 8000f04:	20000150 	.word	0x20000150
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
 8000f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0a:	0e1b      	lsrs	r3, r3, #24
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f14:	0c1a      	lsrs	r2, r3, #16
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	0a1a      	lsrs	r2, r3, #8
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	3302      	adds	r3, #2
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	3303      	adds	r3, #3
 8000f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+4,  a1);
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	0e1a      	lsrs	r2, r3, #24
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	0c1a      	lsrs	r2, r3, #16
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	3305      	adds	r3, #5
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4e:	0a1a      	lsrs	r2, r3, #8
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	3306      	adds	r3, #6
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	701a      	strb	r2, [r3, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	3307      	adds	r3, #7
 8000f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+8,  a2);
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	0e1a      	lsrs	r2, r3, #24
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	3308      	adds	r3, #8
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	0c1a      	lsrs	r2, r3, #16
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	3309      	adds	r3, #9
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	0a1a      	lsrs	r2, r3, #8
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	330a      	adds	r3, #10
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	330b      	adds	r3, #11
 8000f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+12, a3);
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	0e1a      	lsrs	r2, r3, #24
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	330c      	adds	r3, #12
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	0c1a      	lsrs	r2, r3, #16
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	330d      	adds	r3, #13
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	0a1a      	lsrs	r2, r3, #8
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	330e      	adds	r3, #14
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	330f      	adds	r3, #15
 8000fb8:	6a3a      	ldr	r2, [r7, #32]
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	701a      	strb	r2, [r3, #0]
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d004      	beq.n	8000fd2 <os_aes+0x972>
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 0308 	and.w	r3, r3, #8
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d005      	beq.n	8000fde <os_aes+0x97e>
                buf += 16;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	3310      	adds	r3, #16
 8000fd6:	603b      	str	r3, [r7, #0]
                len -= 16;
 8000fd8:	88bb      	ldrh	r3, [r7, #4]
 8000fda:	3b10      	subs	r3, #16
 8000fdc:	80bb      	strh	r3, [r7, #4]
            }
            mode |= AES_MICNOAUX;
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f043 0308 	orr.w	r3, r3, #8
 8000fe4:	71fb      	strb	r3, [r7, #7]
        while( (signed char)len > 0 ) {
 8000fe6:	88bb      	ldrh	r3, [r7, #4]
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f73f abae 	bgt.w	800074c <os_aes+0xec>
        }
        return AESAUX[0];
 8000ff0:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <os_aes+0x99c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3730      	adds	r7, #48	; 0x30
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000150 	.word	0x20000150

08001000 <debug_init>:

/*  ************************************** */
/*    DO NOT CHANGE BELOW THIS LINE        */
/*  ************************************** */

void debug_init () {
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    // configure LED pin as output
    debug_led(0);
 8001004:	2000      	movs	r0, #0
 8001006:	f000 f807 	bl	8001018 <debug_led>

    // configure USART1 (115200/8N1, tx-only)

    // print banner
    debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 800100a:	4802      	ldr	r0, [pc, #8]	; (8001014 <debug_init+0x14>)
 800100c:	f000 f82e 	bl	800106c <debug_str>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	0800b710 	.word	0x0800b710

08001018 <debug_led>:

void debug_led (int val) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,val);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	461a      	mov	r2, r3
 8001026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <debug_led+0x20>)
 800102c:	f005 fcf6 	bl	8006a1c <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	48000800 	.word	0x48000800

0800103c <debug_char>:

void debug_char (char c) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  char buffer[] = "";
 8001046:	2300      	movs	r3, #0
 8001048:	733b      	strb	r3, [r7, #12]
  buffer[0]= c;
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	733b      	strb	r3, [r7, #12]
  HAL_UART_Transmit(&myUART,buffer,sizeof(buffer),HAL_MAX_DELAY);
 800104e:	f107 010c 	add.w	r1, r7, #12
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	2201      	movs	r2, #1
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <debug_char+0x2c>)
 800105a:	f009 fbd9 	bl	800a810 <HAL_UART_Transmit>
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000284 	.word	0x20000284

0800106c <debug_str>:
    int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
    while(n--)
        debug_char(*p++);
}

void debug_str (const char* str) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    while(*str) {
 8001074:	e006      	b.n	8001084 <debug_str+0x18>
        debug_char(*str++);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ffdc 	bl	800103c <debug_char>
    while(*str) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f4      	bne.n	8001076 <debug_str+0xa>
    }
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <debug_event>:
    while( b-buf < max && p > num );
    // return number of characters written
    return b - buf;
}

void debug_event (int ev) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
        [EV_LINK_DEAD]      = "LINK_DEAD",
        [EV_LINK_ALIVE]     = "LINK_ALIVE",
        [EV_SCAN_FOUND]     = "SCAN_FOUND",
        [EV_TXSTART]        = "EV_TXSTART",
    };
    debug_str((ev < sizeof(evnames)/sizeof(evnames[0])) ? evnames[ev] : "EV_UNKNOWN" );
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b11      	cmp	r3, #17
 80010a0:	d804      	bhi.n	80010ac <debug_event+0x18>
 80010a2:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <debug_event+0x34>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010aa:	e000      	b.n	80010ae <debug_event+0x1a>
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <debug_event+0x38>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ffdc 	bl	800106c <debug_str>
    debug_char('\r');
 80010b4:	200d      	movs	r0, #13
 80010b6:	f7ff ffc1 	bl	800103c <debug_char>
    debug_char('\n');
 80010ba:	200a      	movs	r0, #10
 80010bc:	f7ff ffbe 	bl	800103c <debug_char>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000000 	.word	0x20000000
 80010cc:	0800b754 	.word	0x0800b754

080010d0 <hal_io_init>:
} HAL;

// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (u1_t val) {
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss (u1_t val) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(NSS_GPIO_Port,NSS_Pin,val);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	461a      	mov	r2, r3
 8001102:	2140      	movs	r1, #64	; 0x40
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <hal_pin_nss+0x20>)
 8001106:	f005 fc89 	bl	8006a1c <HAL_GPIO_WritePin>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	48000400 	.word	0x48000400

08001118 <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (u1_t val) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
    if(val == 0 || val == 1) { // drive pin
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <hal_pin_rst+0x16>
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d112      	bne.n	8001154 <hal_pin_rst+0x3c>
    	GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <hal_pin_rst+0x5c>)
 8001142:	f005 f9dd 	bl	8006500 <HAL_GPIO_Init>

    	HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin,val);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	461a      	mov	r2, r3
 800114a:	2180      	movs	r1, #128	; 0x80
 800114c:	4809      	ldr	r0, [pc, #36]	; (8001174 <hal_pin_rst+0x5c>)
 800114e:	f005 fc65 	bl	8006a1c <HAL_GPIO_WritePin>
    if(val == 0 || val == 1) { // drive pin
 8001152:	e00b      	b.n	800116c <hal_pin_rst+0x54>

    } else { // keep pin floating
        GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	60bb      	str	r3, [r7, #8]
    	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	4619      	mov	r1, r3
 8001166:	4803      	ldr	r0, [pc, #12]	; (8001174 <hal_pin_rst+0x5c>)
 8001168:	f005 f9ca 	bl	8006500 <HAL_GPIO_Init>
    }
}
 800116c:	bf00      	nop
 800116e:	3730      	adds	r7, #48	; 0x30
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	48000800 	.word	0x48000800

08001178 <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if(GPIO_Pin_int == DIO0_Pin) {
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001188:	d102      	bne.n	8001190 <HAL_GPIO_EXTI_Callback+0x18>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 800118a:	2000      	movs	r0, #0
 800118c:	f004 fb40 	bl	8005810 <radio_irq_handler>
	}
	// DIO 1
	if(GPIO_Pin_int == DIO1_Pin) {
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001196:	d102      	bne.n	800119e <HAL_GPIO_EXTI_Callback+0x26>
	    // invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 8001198:	2001      	movs	r0, #1
 800119a:	f004 fb39 	bl	8005810 <radio_irq_handler>
	}
	// DIO 2
	if(GPIO_Pin_int == DIO2_Pin) {
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011a4:	d102      	bne.n	80011ac <HAL_GPIO_EXTI_Callback+0x34>
	    // invoke radio handler (on IRQ!)
	    radio_irq_handler(2);
 80011a6:	2002      	movs	r0, #2
 80011a8:	f004 fb32 	bl	8005810 <radio_irq_handler>
	}
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init () {
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi (u1_t out) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] ="";
 80011ce:	2300      	movs	r3, #0
 80011d0:	733b      	strb	r3, [r7, #12]
	char inbuffer[] ="";
 80011d2:	2300      	movs	r3, #0
 80011d4:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI,outbuffer,inbuffer,sizeof(outbuffer),HAL_MAX_DELAY);
 80011da:	f107 0208 	add.w	r2, r7, #8
 80011de:	f107 010c 	add.w	r1, r7, #12
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	4804      	ldr	r0, [pc, #16]	; (80011fc <hal_spi+0x38>)
 80011ec:	f007 fdd2 	bl	8008d94 <HAL_SPI_TransmitReceive>
	return inbuffer[0];
 80011f0:	7a3b      	ldrb	r3, [r7, #8]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000220 	.word	0x20000220

08001200 <hal_time_init>:


// -----------------------------------------------------------------------------
// TIME
static void hal_time_init () {
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <hal_ticks>:

u4_t hal_ticks () {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 8001216:	f000 f8af 	bl	8001378 <hal_disableIRQs>
    u4_t t = HAL.ticks;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <hal_ticks+0x58>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	607b      	str	r3, [r7, #4]
    u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <hal_ticks+0x5c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	807b      	strh	r3, [r7, #2]
    if(__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET){
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <hal_ticks+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b02      	cmp	r3, #2
 8001234:	d10d      	bne.n	8001252 <hal_ticks+0x42>
    	if(__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) !=RESET){
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <hal_ticks+0x5c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b02      	cmp	r3, #2
 8001242:	d106      	bne.n	8001252 <hal_ticks+0x42>
    		cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <hal_ticks+0x5c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	807b      	strh	r3, [r7, #2]
    		t++;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3301      	adds	r3, #1
 8001250:	607b      	str	r3, [r7, #4]
        }
     }
    hal_enableIRQs();
 8001252:	f000 f8a1 	bl	8001398 <hal_enableIRQs>
    return (t<<16)|cnt;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	4313      	orrs	r3, r2
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000070 	.word	0x20000070
 800126c:	20000160 	.word	0x20000160

08001270 <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    u4_t t = hal_ticks();
 8001278:	f7ff ffca 	bl	8001210 <hal_ticks>
 800127c:	60f8      	str	r0, [r7, #12]
    s4_t d = time - t;
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	60bb      	str	r3, [r7, #8]
    if( d<=0 ) return 0;    // in the past
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	dc01      	bgt.n	8001290 <deltaticks+0x20>
 800128c:	2300      	movs	r3, #0
 800128e:	e008      	b.n	80012a2 <deltaticks+0x32>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	141b      	asrs	r3, r3, #16
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <deltaticks+0x2e>
 8001298:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800129c:	e001      	b.n	80012a2 <deltaticks+0x32>
    return (u2_t)d;
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	b29b      	uxth	r3, r3
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <hal_waitUntil>:

void hal_waitUntil (u4_t time) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
    while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
 80012b2:	bf00      	nop
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ffdb 	bl	8001270 <deltaticks>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f9      	bne.n	80012b4 <hal_waitUntil+0xa>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
    u2_t dt;
    myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <hal_checkTimer+0x78>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	691a      	ldr	r2, [r3, #16]
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <hal_checkTimer+0x78>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0202 	bic.w	r2, r2, #2
 80012de:	611a      	str	r2, [r3, #16]
    if((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffc5 	bl	8001270 <deltaticks>
 80012e6:	4603      	mov	r3, r0
 80012e8:	81fb      	strh	r3, [r7, #14]
 80012ea:	89fb      	ldrh	r3, [r7, #14]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d809      	bhi.n	8001304 <hal_checkTimer+0x3c>
    	myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <hal_checkTimer+0x78>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <hal_checkTimer+0x78>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0202 	bic.w	r2, r2, #2
 80012fe:	60da      	str	r2, [r3, #12]
        return 1;
 8001300:	2301      	movs	r3, #1
 8001302:	e018      	b.n	8001336 <hal_checkTimer+0x6e>
    } else { // rewind timer (fully or to exact time))
    	myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <hal_checkTimer+0x78>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800130a:	89fa      	ldrh	r2, [r7, #14]
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <hal_checkTimer+0x78>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	440a      	add	r2, r1
 8001312:	635a      	str	r2, [r3, #52]	; 0x34
    	myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <hal_checkTimer+0x78>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <hal_checkTimer+0x78>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0202 	orr.w	r2, r2, #2
 8001322:	60da      	str	r2, [r3, #12]
    	myTIMER.Instance->CCER |= TIM_CCER_CC1E;   // enable capture/compare uint 2
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <hal_checkTimer+0x78>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6a1a      	ldr	r2, [r3, #32]
 800132a:	4b05      	ldr	r3, [pc, #20]	; (8001340 <hal_checkTimer+0x78>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	621a      	str	r2, [r3, #32]
        return 0;
 8001334:	2300      	movs	r3, #0
    }
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000160 	.word	0x20000160

08001344 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == myTIMER.Instance){
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d104      	bne.n	8001362 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL.ticks++;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	3301      	adds	r3, #1
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001360:	6053      	str	r3, [r2, #4]
    }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000160 	.word	0x20000160
 8001374:	20000070 	.word	0x20000070

08001378 <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs () {
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
	__disable_irq();
	//__set_BASEPRI(1 << 4);
    HAL.irqlevel++;
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <hal_disableIRQs+0x1c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	3301      	adds	r3, #1
 8001384:	4a03      	ldr	r2, [pc, #12]	; (8001394 <hal_disableIRQs+0x1c>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000070 	.word	0x20000070

08001398 <hal_enableIRQs>:

void hal_enableIRQs () {
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
    if(--HAL.irqlevel == 0) {
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <hal_enableIRQs+0x24>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	4a06      	ldr	r2, [pc, #24]	; (80013bc <hal_enableIRQs+0x24>)
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <hal_enableIRQs+0x24>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d100      	bne.n	80013b0 <hal_enableIRQs+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 80013ae:	b662      	cpsie	i
		__enable_irq();
    	//__set_BASEPRI(0);
    }
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000070 	.word	0x20000070

080013c0 <hal_sleep>:

void hal_sleep () {
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
    // suspend execution until IRQ, regardless of the CPSR I-bit
    __WFI();
 80013c4:	bf30      	wfi
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <hal_init>:

// -----------------------------------------------------------------------------

void hal_init () {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
    memset(&HAL, 0x00, sizeof(HAL));
 80013d4:	2208      	movs	r2, #8
 80013d6:	2100      	movs	r1, #0
 80013d8:	4807      	ldr	r0, [pc, #28]	; (80013f8 <hal_init+0x28>)
 80013da:	f00a f984 	bl	800b6e6 <memset>
    hal_disableIRQs();
 80013de:	f7ff ffcb 	bl	8001378 <hal_disableIRQs>
    // configure radio I/O and interrupt handler
    hal_io_init();
 80013e2:	f7ff fe75 	bl	80010d0 <hal_io_init>
    // configure radio SPI
    hal_spi_init();
 80013e6:	f7ff fee5 	bl	80011b4 <hal_spi_init>
    // configure timer and interrupt handler
    hal_time_init();
 80013ea:	f7ff ff09 	bl	8001200 <hal_time_init>
    hal_enableIRQs();
 80013ee:	f7ff ffd3 	bl	8001398 <hal_enableIRQs>
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000070 	.word	0x20000070

080013fc <hal_failed>:

void hal_failed () {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
    // HALT...
    hal_disableIRQs();
 8001400:	f7ff ffba 	bl	8001378 <hal_disableIRQs>
    hal_sleep();
 8001404:	f7ff ffdc 	bl	80013c0 <hal_sleep>
    while(1);
 8001408:	e7fe      	b.n	8001408 <hal_failed+0xc>

0800140a <getSf>:
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	80fb      	strh	r3, [r7, #6]
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <getBw>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	80fb      	strh	r3, [r7, #6]
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	b29b      	uxth	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <getCr>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	80fb      	strh	r3, [r7, #6]
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	b29b      	uxth	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	460a      	mov	r2, r1
 800147c:	80fb      	strh	r3, [r7, #6]
 800147e:	4613      	mov	r3, r2
 8001480:	717b      	strb	r3, [r7, #5]
 8001482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001486:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800148a:	b21a      	sxth	r2, r3
 800148c:	797b      	ldrb	r3, [r7, #5]
 800148e:	015b      	lsls	r3, r3, #5
 8001490:	b21b      	sxth	r3, r3
 8001492:	4313      	orrs	r3, r2
 8001494:	b21b      	sxth	r3, r3
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	09db      	lsrs	r3, r3, #7
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	80fb      	strh	r3, [r7, #6]
 80014d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014d8:	b21a      	sxth	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	01db      	lsls	r3, r3, #7
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	80fb      	strh	r3, [r7, #6]
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	b29b      	uxth	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	80fb      	strh	r3, [r7, #6]
 800151c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	b21a      	sxth	r2, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21b      	sxth	r3, r3
 800152e:	b29b      	uxth	r3, r3
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <updr2rps>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	3301      	adds	r3, #1
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <updr2rps+0x20>)
 800154c:	5cd3      	ldrb	r3, [r2, r3]
 800154e:	b29b      	uxth	r3, r3
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	0800ccd0 	.word	0x0800ccd0

08001560 <dndr2rps>:
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ffe5 	bl	800153c <updr2rps>
 8001572:	4603      	mov	r3, r0
 8001574:	2101      	movs	r1, #1
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ffa4 	bl	80014c4 <setNocrc>
 800157c:	4603      	mov	r3, r0
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <decDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <decDR+0x2c>)
 8001596:	5cd3      	ldrb	r3, [r2, r3]
 8001598:	2bff      	cmp	r3, #255	; 0xff
 800159a:	d003      	beq.n	80015a4 <decDR+0x1c>
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	3b01      	subs	r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	e000      	b.n	80015a6 <decDR+0x1e>
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	0800ccd0 	.word	0x0800ccd0

080015b8 <validDR>:
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	3301      	adds	r3, #1
 80015c6:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <validDR+0x28>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
 80015ca:	2bff      	cmp	r3, #255	; 0xff
 80015cc:	bf14      	ite	ne
 80015ce:	2301      	movne	r3, #1
 80015d0:	2300      	moveq	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	0800ccd0 	.word	0x0800ccd0

080015e4 <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	460a      	mov	r2, r1
 80015ee:	71fb      	strb	r3, [r7, #7]
 80015f0:	4613      	mov	r3, r2
 80015f2:	71bb      	strb	r3, [r7, #6]
 80015f4:	e005      	b.n	8001602 <lowerDR+0x1e>
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ffc5 	bl	8001588 <decDR>
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
 8001602:	79bb      	ldrb	r3, [r7, #6]
 8001604:	1e5a      	subs	r2, r3, #1
 8001606:	71ba      	strb	r2, [r7, #6]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f4      	bne.n	80015f6 <lowerDR+0x12>
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <os_rlsbf2>:
// BEG OS - default implementations for certain OS suport functions

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2 (xref2cu1_t buf) {
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
    return (u2_t)(buf[0] | (buf[1]<<8));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b21a      	sxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3301      	adds	r3, #1
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b21b      	sxth	r3, r3
 8001632:	b29b      	uxth	r3, r3
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4 (xref2cu1_t buf) {
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[0] | (buf[1]<<8) | ((u4_t)buf[2]<<16) | ((u4_t)buf[3]<<24));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3301      	adds	r3, #1
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	4313      	orrs	r3, r2
 8001658:	461a      	mov	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3302      	adds	r3, #2
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	041b      	lsls	r3, r3, #16
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3303      	adds	r3, #3
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	061b      	lsls	r3, r3, #24
 800166c:	4313      	orrs	r3, r2
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <os_rmsbf4>:
#endif


#if !defined(os_rmsbf4)
u4_t os_rmsbf4 (xref2cu1_t buf) {
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[3] | (buf[2]<<8) | ((u4_t)buf[1]<<16) | ((u4_t)buf[0]<<24));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3303      	adds	r3, #3
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3302      	adds	r3, #2
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	4313      	orrs	r3, r2
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3301      	adds	r3, #1
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	061b      	lsls	r3, r3, #24
 80016a6:	4313      	orrs	r3, r2
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
    buf[0] = v;
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 80016c8:	887b      	ldrh	r3, [r7, #2]
 80016ca:	0a1b      	lsrs	r3, r3, #8
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3301      	adds	r3, #1
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (xref2u1_t buf, u4_t v) {
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
    buf[0] = v;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	0a1a      	lsrs	r2, r3, #8
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3301      	adds	r3, #1
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>16;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	0c1a      	lsrs	r2, r3, #16
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3302      	adds	r3, #2
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	701a      	strb	r2, [r3, #0]
    buf[3] = v>>24;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	0e1a      	lsrs	r2, r3, #24
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3303      	adds	r3, #3
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	701a      	strb	r2, [r3, #0]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (xref2u1_t buf, u4_t v) {
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
    buf[3] = v;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3303      	adds	r3, #3
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>8;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	0a1a      	lsrs	r2, r3, #8
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3302      	adds	r3, #2
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>16;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	0c1a      	lsrs	r2, r3, #16
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3301      	adds	r3, #1
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	701a      	strb	r2, [r3, #0]
    buf[0] = v>>24;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	0e1b      	lsrs	r3, r3, #24
 8001754:	b2da      	uxtb	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	701a      	strb	r2, [r3, #0]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel (void) {
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
    return MCMD_DEVS_BATT_NOINFO;
 800176a:	23ff      	movs	r3, #255	; 0xff
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16 (xref2u1_t data, uint len) {
 8001776:	b480      	push	{r7}
 8001778:	b087      	sub	sp, #28
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
    u2_t remainder = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	82fb      	strh	r3, [r7, #22]
    u2_t polynomial = 0x1021;
 8001784:	f241 0321 	movw	r3, #4129	; 0x1021
 8001788:	81bb      	strh	r3, [r7, #12]
    for( uint i = 0; i < len; i++ ) {
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	e026      	b.n	80017de <os_crc16+0x68>
        remainder ^= data[i] << 8;
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4413      	add	r3, r2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	b21a      	sxth	r2, r3
 800179c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017a0:	4053      	eors	r3, r2
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 80017a6:	2308      	movs	r3, #8
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e012      	b.n	80017d2 <os_crc16+0x5c>
            if( (remainder & 0x8000) )
 80017ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da08      	bge.n	80017c6 <os_crc16+0x50>
                remainder = (remainder << 1) ^ polynomial;
 80017b4:	8afb      	ldrh	r3, [r7, #22]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	b21a      	sxth	r2, r3
 80017ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017be:	4053      	eors	r3, r2
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	82fb      	strh	r3, [r7, #22]
 80017c4:	e002      	b.n	80017cc <os_crc16+0x56>
            else 
                remainder <<= 1;
 80017c6:	8afb      	ldrh	r3, [r7, #22]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1e9      	bne.n	80017ac <os_crc16+0x36>
    for( uint i = 0; i < len; i++ ) {
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	3301      	adds	r3, #1
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3d4      	bcc.n	8001790 <os_crc16+0x1a>
        }
    }
    return remainder;
 80017e6:	8afb      	ldrh	r3, [r7, #22]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <micB0>:
// ================================================================================

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	603b      	str	r3, [r7, #0]
    os_clearMem(AESaux,16);
 8001802:	2210      	movs	r2, #16
 8001804:	2100      	movs	r1, #0
 8001806:	4810      	ldr	r0, [pc, #64]	; (8001848 <micB0+0x54>)
 8001808:	f009 ff6d 	bl	800b6e6 <memset>
    AESaux[0]  = 0x49;
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <micB0+0x54>)
 800180e:	2249      	movs	r2, #73	; 0x49
 8001810:	701a      	strb	r2, [r3, #0]
    AESaux[5]  = dndir?1:0;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf14      	ite	ne
 8001818:	2301      	movne	r3, #1
 800181a:	2300      	moveq	r3, #0
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <micB0+0x58>)
 8001820:	701a      	strb	r2, [r3, #0]
    AESaux[15] = len;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <micB0+0x5c>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <micB0+0x60>)
 800182c:	68f9      	ldr	r1, [r7, #12]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff57 	bl	80016e2 <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <micB0+0x64>)
 8001836:	68b9      	ldr	r1, [r7, #8]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff52 	bl	80016e2 <os_wlsbf4>
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000150 	.word	0x20000150
 800184c:	20000155 	.word	0x20000155
 8001850:	2000015f 	.word	0x2000015f
 8001854:	20000156 	.word	0x20000156
 8001858:	2000015a 	.word	0x2000015a

0800185c <aes_verifyMic>:


static int aes_verifyMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	68b8      	ldr	r0, [r7, #8]
 8001872:	f7ff ffbf 	bl	80017f4 <micB0>
    os_copyMem(AESkey,key,16);
 8001876:	2210      	movs	r2, #16
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	480d      	ldr	r0, [pc, #52]	; (80018b0 <aes_verifyMic+0x54>)
 800187c:	f009 ff28 	bl	800b6d0 <memcpy>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	b29b      	uxth	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	6a39      	ldr	r1, [r7, #32]
 8001888:	2002      	movs	r0, #2
 800188a:	f7fe fee9 	bl	8000660 <os_aes>
 800188e:	4604      	mov	r4, r0
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	6a3a      	ldr	r2, [r7, #32]
 8001894:	4413      	add	r3, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff feef 	bl	800167a <os_rmsbf4>
 800189c:	4603      	mov	r3, r0
 800189e:	429c      	cmp	r4, r3
 80018a0:	bf0c      	ite	eq
 80018a2:	2301      	moveq	r3, #1
 80018a4:	2300      	movne	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd90      	pop	{r4, r7, pc}
 80018b0:	200000a0 	.word	0x200000a0

080018b4 <aes_appendMic>:


static void aes_appendMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	68b8      	ldr	r0, [r7, #8]
 80018ca:	f7ff ff93 	bl	80017f4 <micB0>
    os_copyMem(AESkey,key,16);
 80018ce:	2210      	movs	r2, #16
 80018d0:	68f9      	ldr	r1, [r7, #12]
 80018d2:	480b      	ldr	r0, [pc, #44]	; (8001900 <aes_appendMic+0x4c>)
 80018d4:	f009 fefc 	bl	800b6d0 <memcpy>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	6a3a      	ldr	r2, [r7, #32]
 80018dc:	18d4      	adds	r4, r2, r3
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	6a39      	ldr	r1, [r7, #32]
 80018e6:	2002      	movs	r0, #2
 80018e8:	f7fe feba 	bl	8000660 <os_aes>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4619      	mov	r1, r3
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7ff ff17 	bl	8001724 <os_wmsbf4>
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd90      	pop	{r4, r7, pc}
 80018fe:	bf00      	nop
 8001900:	200000a0 	.word	0x200000a0

08001904 <aes_appendMic0>:


static void aes_appendMic0 (xref2u1_t pdu, int len) {
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 800190e:	480b      	ldr	r0, [pc, #44]	; (800193c <aes_appendMic0+0x38>)
 8001910:	f002 fea6 	bl	8004660 <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	18d4      	adds	r4, r2, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b29b      	uxth	r3, r3
 800191e:	461a      	mov	r2, r3
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	200a      	movs	r0, #10
 8001924:	f7fe fe9c 	bl	8000660 <os_aes>
 8001928:	4603      	mov	r3, r0
 800192a:	4619      	mov	r1, r3
 800192c:	4620      	mov	r0, r4
 800192e:	f7ff fef9 	bl	8001724 <os_wmsbf4>
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bd90      	pop	{r4, r7, pc}
 800193a:	bf00      	nop
 800193c:	200000a0 	.word	0x200000a0

08001940 <aes_verifyMic0>:


static int aes_verifyMic0 (xref2u1_t pdu, int len) {
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <aes_verifyMic0+0x40>)
 800194c:	f002 fe88 	bl	8004660 <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	200a      	movs	r0, #10
 800195a:	f7fe fe81 	bl	8000660 <os_aes>
 800195e:	4604      	mov	r4, r0
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fe87 	bl	800167a <os_rmsbf4>
 800196c:	4603      	mov	r3, r0
 800196e:	429c      	cmp	r4, r3
 8001970:	bf0c      	ite	eq
 8001972:	2301      	moveq	r3, #1
 8001974:	2300      	movne	r3, #0
 8001976:	b2db      	uxtb	r3, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bd90      	pop	{r4, r7, pc}
 8001980:	200000a0 	.word	0x200000a0

08001984 <aes_encrypt>:


static void aes_encrypt (xref2u1_t pdu, int len) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 800198e:	4807      	ldr	r0, [pc, #28]	; (80019ac <aes_encrypt+0x28>)
 8001990:	f002 fe66 	bl	8004660 <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	461a      	mov	r2, r3
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	2000      	movs	r0, #0
 800199e:	f7fe fe5f 	bl	8000660 <os_aes>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200000a0 	.word	0x200000a0

080019b0 <aes_cipher>:


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
    if( len <= 0 )
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	dd29      	ble.n	8001a18 <aes_cipher+0x68>
        return;
    os_clearMem(AESaux, 16);
 80019c4:	2210      	movs	r2, #16
 80019c6:	2100      	movs	r1, #0
 80019c8:	4815      	ldr	r0, [pc, #84]	; (8001a20 <aes_cipher+0x70>)
 80019ca:	f009 fe8c 	bl	800b6e6 <memset>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <aes_cipher+0x74>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
 80019d4:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <aes_cipher+0x70>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	7013      	strb	r3, [r2, #0]
    AESaux[5] = dndir?1:0;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf14      	ite	ne
 80019e0:	2301      	movne	r3, #1
 80019e2:	2300      	moveq	r3, #0
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <aes_cipher+0x78>)
 80019e8:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <aes_cipher+0x7c>)
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fe77 	bl	80016e2 <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <aes_cipher+0x80>)
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fe72 	bl	80016e2 <os_wlsbf4>
    os_copyMem(AESkey,key,16);
 80019fe:	2210      	movs	r2, #16
 8001a00:	68f9      	ldr	r1, [r7, #12]
 8001a02:	480c      	ldr	r0, [pc, #48]	; (8001a34 <aes_cipher+0x84>)
 8001a04:	f009 fe64 	bl	800b6d0 <memcpy>
    os_aes(AES_CTR, payload, len);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	69b9      	ldr	r1, [r7, #24]
 8001a10:	2004      	movs	r0, #4
 8001a12:	f7fe fe25 	bl	8000660 <os_aes>
 8001a16:	e000      	b.n	8001a1a <aes_cipher+0x6a>
        return;
 8001a18:	bf00      	nop
}
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000150 	.word	0x20000150
 8001a24:	2000015f 	.word	0x2000015f
 8001a28:	20000155 	.word	0x20000155
 8001a2c:	20000156 	.word	0x20000156
 8001a30:	2000015a 	.word	0x2000015a
 8001a34:	200000a0 	.word	0x200000a0

08001a38 <aes_sessKeys>:


static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	4603      	mov	r3, r0
 8001a46:	81fb      	strh	r3, [r7, #14]
    os_clearMem(nwkkey, 16);
 8001a48:	2210      	movs	r2, #16
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f009 fe4a 	bl	800b6e6 <memset>
    nwkkey[0] = 0x01;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	2206      	movs	r2, #6
 8001a5e:	68b9      	ldr	r1, [r7, #8]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f009 fe35 	bl	800b6d0 <memcpy>
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3307      	adds	r3, #7
 8001a6a:	89fa      	ldrh	r2, [r7, #14]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fe20 	bl	80016b4 <os_wlsbf2>
    os_copyMem(artkey, nwkkey, 16);
 8001a74:	2210      	movs	r2, #16
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	6838      	ldr	r0, [r7, #0]
 8001a7a:	f009 fe29 	bl	800b6d0 <memcpy>
    artkey[0] = 0x02;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2202      	movs	r2, #2
 8001a82:	701a      	strb	r2, [r3, #0]

    os_getDevKey(AESkey);
 8001a84:	4809      	ldr	r0, [pc, #36]	; (8001aac <aes_sessKeys+0x74>)
 8001a86:	f002 fdeb 	bl	8004660 <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7fe fde6 	bl	8000660 <os_aes>
    os_getDevKey(AESkey);
 8001a94:	4805      	ldr	r0, [pc, #20]	; (8001aac <aes_sessKeys+0x74>)
 8001a96:	f002 fde3 	bl	8004660 <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	6839      	ldr	r1, [r7, #0]
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7fe fdde 	bl	8000660 <os_aes>
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200000a0 	.word	0x200000a0

08001ab0 <getSensitivity>:
    { 141-135,  141-132, 141-129 },  // SF10
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	80fb      	strh	r3, [r7, #6]
    return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fca4 	bl	800140a <getSf>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461c      	mov	r4, r3
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fcae 	bl	800142a <getBw>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4a06      	ldr	r2, [pc, #24]	; (8001aec <getSensitivity+0x3c>)
 8001ad4:	4623      	mov	r3, r4
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4423      	add	r3, r4
 8001ada:	4413      	add	r3, r2
 8001adc:	440b      	add	r3, r1
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	3b8d      	subs	r3, #141	; 0x8d
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd90      	pop	{r4, r7, pc}
 8001aea:	bf00      	nop
 8001aec:	0800ccec 	.word	0x0800ccec

08001af0 <calcAirTime>:

ostime_t calcAirTime (rps_t rps, u1_t plen) {
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	460a      	mov	r2, r1
 8001afa:	80fb      	strh	r3, [r7, #6]
 8001afc:	4613      	mov	r3, r2
 8001afe:	717b      	strb	r3, [r7, #5]
    u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fc91 	bl	800142a <getBw>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	72fb      	strb	r3, [r7, #11]
    u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fc7b 	bl	800140a <getSf>
 8001b14:	4603      	mov	r3, r0
 8001b16:	72bb      	strb	r3, [r7, #10]
    if( sf == FSK ) {
 8001b18:	7abb      	ldrb	r3, [r7, #10]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10c      	bne.n	8001b38 <calcAirTime+0x48>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
 8001b1e:	797b      	ldrb	r3, [r7, #5]
 8001b20:	330b      	adds	r3, #11
            * (s4_t)OSTICKS_PER_SEC / /*kbit/s*/50000;
 8001b22:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8001b26:	fb02 f303 	mul.w	r3, r2, r3
 8001b2a:	4a3c      	ldr	r2, [pc, #240]	; (8001c1c <calcAirTime+0x12c>)
 8001b2c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b30:	1312      	asrs	r2, r2, #12
 8001b32:	17db      	asrs	r3, r3, #31
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	e06d      	b.n	8001c14 <calcAirTime+0x124>
    }
    u1_t sfx = 4*(sf+(7-SF7));
 8001b38:	7abb      	ldrb	r3, [r7, #10]
 8001b3a:	3306      	adds	r3, #6
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	75fb      	strb	r3, [r7, #23]
    u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 8001b42:	7abb      	ldrb	r3, [r7, #10]
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d901      	bls.n	8001b4c <calcAirTime+0x5c>
 8001b48:	2308      	movs	r3, #8
 8001b4a:	e000      	b.n	8001b4e <calcAirTime+0x5e>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	7dfa      	ldrb	r2, [r7, #23]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	727b      	strb	r3, [r7, #9]
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
 8001b54:	797b      	ldrb	r3, [r7, #5]
 8001b56:	00da      	lsls	r2, r3, #3
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f103 041c 	add.w	r4, r3, #28
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fc9e 	bl	80014a4 <getNocrc>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <calcAirTime+0x82>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <calcAirTime+0x84>
 8001b72:	2310      	movs	r3, #16
 8001b74:	441c      	add	r4, r3
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fcba 	bl	80014f2 <getIh>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <calcAirTime+0x98>
 8001b84:	2314      	movs	r3, #20
 8001b86:	e000      	b.n	8001b8a <calcAirTime+0x9a>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	1ae3      	subs	r3, r4, r3
 8001b8c:	613b      	str	r3, [r7, #16]
    if( tmp > 0 ) {
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	dd15      	ble.n	8001bc0 <calcAirTime+0xd0>
        tmp = (tmp + q - 1) / q;
 8001b94:	7a7a      	ldrb	r2, [r7, #9]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4413      	add	r3, r2
 8001b9a:	1e5a      	subs	r2, r3, #1
 8001b9c:	7a7b      	ldrb	r3, [r7, #9]
 8001b9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ba2:	613b      	str	r3, [r7, #16]
        tmp *= getCr(rps)+5;
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fc51 	bl	800144e <getCr>
 8001bac:	4603      	mov	r3, r0
 8001bae:	1d5a      	adds	r2, r3, #5
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
 8001bb6:	613b      	str	r3, [r7, #16]
        tmp += 8;
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	3308      	adds	r3, #8
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	e001      	b.n	8001bc4 <calcAirTime+0xd4>
    } else {
        tmp = 8;
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	613b      	str	r3, [r7, #16]
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	3331      	adds	r3, #49	; 0x31
 8001bca:	613b      	str	r3, [r7, #16]
    //
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
 8001bcc:	7aba      	ldrb	r2, [r7, #10]
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	75fb      	strb	r3, [r7, #23]
    int div = 15625;
 8001bd8:	f643 5309 	movw	r3, #15625	; 0x3d09
 8001bdc:	60fb      	str	r3, [r7, #12]
    if( sfx > 4 ) {
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d907      	bls.n	8001bf4 <calcAirTime+0x104>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	3b04      	subs	r3, #4
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	fa42 f303 	asr.w	r3, r2, r3
 8001bee:	60fb      	str	r3, [r7, #12]
        sfx = 4;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	75fb      	strb	r3, [r7, #23]
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * OSTICKS_PER_SEC + div/2) / div;
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001c00:	fb02 f203 	mul.w	r2, r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	0fd9      	lsrs	r1, r3, #31
 8001c08:	440b      	add	r3, r1
 8001c0a:	105b      	asrs	r3, r3, #1
 8001c0c:	441a      	add	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}
 8001c1c:	14f8b589 	.word	0x14f8b589

08001c20 <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
};


static ostime_t calcRxWindow (u1_t secs, dr_t dr) {
 8001c20:	b480      	push	{r7}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	460a      	mov	r2, r1
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	71bb      	strb	r3, [r7, #6]
    ostime_t rxoff, err;
    if( secs==0 ) {
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d108      	bne.n	8001c48 <calcRxWindow+0x28>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <calcRxWindow+0xa0>)
 8001c38:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8001c3c:	617b      	str	r3, [r7, #20]
        err = LMIC.lastDriftDiff;
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <calcRxWindow+0xa0>)
 8001c40:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	e011      	b.n	8001c6c <calcRxWindow+0x4c>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <calcRxWindow+0xa0>)
 8001c4a:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8001c4e:	461a      	mov	r2, r3
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	fb03 f302 	mul.w	r3, r3, r2
 8001c56:	11db      	asrs	r3, r3, #7
 8001c58:	617b      	str	r3, [r7, #20]
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <calcRxWindow+0xa0>)
 8001c5c:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8001c60:	461a      	mov	r2, r3
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	fb03 f302 	mul.w	r3, r3, r2
 8001c68:	11db      	asrs	r3, r3, #7
 8001c6a:	613b      	str	r3, [r7, #16]
    }
    u1_t rxsyms = MINRX_SYMS;
 8001c6c:	2305      	movs	r3, #5
 8001c6e:	73fb      	strb	r3, [r7, #15]
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
 8001c70:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <calcRxWindow+0xa0>)
 8001c72:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <calcRxWindow+0xa0>)
 8001c7a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8001c7e:	fb03 f302 	mul.w	r3, r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4413      	add	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 8001c88:	79bb      	ldrb	r3, [r7, #6]
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <calcRxWindow+0xa4>)
 8001c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	3305      	adds	r3, #5
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <calcRxWindow+0xa0>)
 8001c9e:	741a      	strb	r2, [r3, #16]

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	3b08      	subs	r3, #8
 8001ca4:	79ba      	ldrb	r2, [r7, #6]
 8001ca6:	4907      	ldr	r1, [pc, #28]	; (8001cc4 <calcRxWindow+0xa4>)
 8001ca8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001cac:	fb02 f203 	mul.w	r2, r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	4413      	add	r3, r2
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	371c      	adds	r7, #28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	20000304 	.word	0x20000304
 8001cc4:	0800cd10 	.word	0x0800cd10

08001cc8 <calcBcnRxWindowFromMillis>:


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
 8001cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	460a      	mov	r2, r1
 8001cd2:	71fb      	strb	r3, [r7, #7]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	71bb      	strb	r3, [r7, #6]
    if( ini ) {
 8001cd8:	79bb      	ldrb	r3, [r7, #6]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d014      	beq.n	8001d08 <calcBcnRxWindowFromMillis+0x40>
        LMIC.drift = 0;
 8001cde:	4b38      	ldr	r3, [pc, #224]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
        LMIC.maxDriftDiff = 0;
 8001ce6:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
        LMIC.missedBcns = 0;
 8001cee:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
 8001cf6:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001cf8:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001cfc:	f043 030c 	orr.w	r3, r3, #12
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001d04:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
    }
    ostime_t hsym = dr2hsym(DR_BCN);
 8001d08:	2342      	movs	r3, #66	; 0x42
 8001d0a:	60fb      	str	r3, [r7, #12]
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 8001d0c:	79fd      	ldrb	r5, [r7, #7]
 8001d0e:	f04f 0600 	mov.w	r6, #0
 8001d12:	462b      	mov	r3, r5
 8001d14:	4634      	mov	r4, r6
 8001d16:	f04f 0100 	mov.w	r1, #0
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	0162      	lsls	r2, r4, #5
 8001d20:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001d24:	0159      	lsls	r1, r3, #5
 8001d26:	460b      	mov	r3, r1
 8001d28:	4614      	mov	r4, r2
 8001d2a:	1b5b      	subs	r3, r3, r5
 8001d2c:	eb64 0406 	sbc.w	r4, r4, r6
 8001d30:	f04f 0100 	mov.w	r1, #0
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	00a2      	lsls	r2, r4, #2
 8001d3a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001d3e:	0099      	lsls	r1, r3, #2
 8001d40:	460b      	mov	r3, r1
 8001d42:	4614      	mov	r4, r2
 8001d44:	195b      	adds	r3, r3, r5
 8001d46:	eb44 0406 	adc.w	r4, r4, r6
 8001d4a:	f04f 0100 	mov.w	r1, #0
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	0222      	lsls	r2, r4, #8
 8001d54:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8001d58:	0219      	lsls	r1, r3, #8
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4614      	mov	r4, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4622      	mov	r2, r4
 8001d62:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001d66:	f04f 0400 	mov.w	r4, #0
 8001d6a:	18cd      	adds	r5, r1, r3
 8001d6c:	eb42 0604 	adc.w	r6, r2, r4
 8001d70:	4628      	mov	r0, r5
 8001d72:	4631      	mov	r1, r6
 8001d74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	f7fe fa24 	bl	80001c8 <__aeabi_ldivmod>
 8001d80:	4603      	mov	r3, r0
 8001d82:	460c      	mov	r4, r1
 8001d84:	461a      	mov	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3305      	adds	r3, #5
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001d94:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001d9a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001d9e:	f503 127a 	add.w	r2, r3, #4096000	; 0x3e8000
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001da4:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8001da8:	3b08      	subs	r3, #8
 8001daa:	68f9      	ldr	r1, [r7, #12]
 8001dac:	fb01 f303 	mul.w	r3, r1, r3
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	4a03      	ldr	r2, [pc, #12]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001db4:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc0:	20000304 	.word	0x20000304

08001dc4 <rxschedInit>:


// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (xref2rxsched_t rxsched) {
 8001dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
    os_clearMem(AESkey,16);
 8001dce:	2210      	movs	r2, #16
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	484b      	ldr	r0, [pc, #300]	; (8001f00 <rxschedInit+0x13c>)
 8001dd4:	f009 fc87 	bl	800b6e6 <memset>
    os_clearMem(LMIC.frame+8,8);
 8001dd8:	4b4a      	ldr	r3, [pc, #296]	; (8001f04 <rxschedInit+0x140>)
 8001dda:	2208      	movs	r2, #8
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f009 fc81 	bl	800b6e6 <memset>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 8001de4:	4b48      	ldr	r3, [pc, #288]	; (8001f08 <rxschedInit+0x144>)
 8001de6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8001dea:	4619      	mov	r1, r3
 8001dec:	4847      	ldr	r0, [pc, #284]	; (8001f0c <rxschedInit+0x148>)
 8001dee:	f7ff fc78 	bl	80016e2 <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
 8001df2:	4a47      	ldr	r2, [pc, #284]	; (8001f10 <rxschedInit+0x14c>)
 8001df4:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <rxschedInit+0x144>)
 8001df6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f7ff fc70 	bl	80016e2 <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
 8001e02:	2210      	movs	r2, #16
 8001e04:	4941      	ldr	r1, [pc, #260]	; (8001f0c <rxschedInit+0x148>)
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7fe fc2a 	bl	8000660 <os_aes>
    u1_t intvExp = rxsched->intvExp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	785b      	ldrb	r3, [r3, #1]
 8001e10:	73fb      	strb	r3, [r7, #15]
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 8001e12:	483e      	ldr	r0, [pc, #248]	; (8001f0c <rxschedInit+0x148>)
 8001e14:	f7ff fbff 	bl	8001616 <os_rlsbf2>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	f1c3 0307 	rsb	r3, r3, #7
 8001e22:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e26:	fa42 f303 	asr.w	r3, r2, r3
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	60bb      	str	r3, [r7, #8]
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8001e2e:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <rxschedInit+0x144>)
 8001e30:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001e34:	f503 3884 	add.w	r8, r3, #67584	; 0x10800
 8001e38:	f508 7880 	add.w	r8, r8, #256	; 0x100
                       BCN_RESERVE_osticks +
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	461d      	mov	r5, r3
 8001e40:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001e44:	462b      	mov	r3, r5
 8001e46:	4634      	mov	r4, r6
 8001e48:	f04f 0100 	mov.w	r1, #0
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	0162      	lsls	r2, r4, #5
 8001e52:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001e56:	0159      	lsls	r1, r3, #5
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4614      	mov	r4, r2
 8001e5c:	1b5b      	subs	r3, r3, r5
 8001e5e:	eb64 0406 	sbc.w	r4, r4, r6
 8001e62:	f04f 0100 	mov.w	r1, #0
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	00a2      	lsls	r2, r4, #2
 8001e6c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001e70:	0099      	lsls	r1, r3, #2
 8001e72:	460b      	mov	r3, r1
 8001e74:	4614      	mov	r4, r2
 8001e76:	195b      	adds	r3, r3, r5
 8001e78:	eb44 0406 	adc.w	r4, r4, r6
 8001e7c:	f04f 0100 	mov.w	r1, #0
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	0122      	lsls	r2, r4, #4
 8001e86:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8001e8a:	0119      	lsls	r1, r3, #4
 8001e8c:	1ac9      	subs	r1, r1, r3
 8001e8e:	eb62 0204 	sbc.w	r2, r2, r4
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	f04f 0400 	mov.w	r4, #0
 8001e9a:	0254      	lsls	r4, r2, #9
 8001e9c:	ea44 54d1 	orr.w	r4, r4, r1, lsr #23
 8001ea0:	024b      	lsls	r3, r1, #9
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4622      	mov	r2, r4
 8001ea6:	4608      	mov	r0, r1
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	f7fe f989 	bl	80001c8 <__aeabi_ldivmod>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	460c      	mov	r4, r1
                       BCN_RESERVE_osticks +
 8001eba:	eb08 0203 	add.w	r2, r8, r3
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	605a      	str	r2, [r3, #4]
    rxsched->slot   = 0;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	709a      	strb	r2, [r3, #2]
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685c      	ldr	r4, [r3, #4]
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	f7ff fe9d 	bl	8001c20 <calcRxWindow>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	1ae2      	subs	r2, r4, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <rxschedInit+0x144>)
 8001ef0:	7c1a      	ldrb	r2, [r3, #16]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	70da      	strb	r2, [r3, #3]
}
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f00:	200000a0 	.word	0x200000a0
 8001f04:	20000454 	.word	0x20000454
 8001f08:	20000304 	.word	0x20000304
 8001f0c:	2000044c 	.word	0x2000044c
 8001f10:	20000450 	.word	0x20000450

08001f14 <rxschedNext>:


static bit_t rxschedNext (xref2rxsched_t rxsched, ostime_t cando) {
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  again:
    if( rxsched->rxtime - cando >= 0 )
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	db01      	blt.n	8001f2e <rxschedNext+0x1a>
        return 1;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e03a      	b.n	8001fa4 <rxschedNext+0x90>
    u1_t slot;
    if( (slot=rxsched->slot) >= 128 )
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	789b      	ldrb	r3, [r3, #2]
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	da01      	bge.n	8001f40 <rxschedNext+0x2c>
        return 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e031      	b.n	8001fa4 <rxschedNext+0x90>
    u1_t intv = 1<<rxsched->intvExp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	785b      	ldrb	r3, [r3, #1]
 8001f44:	461a      	mov	r2, r3
 8001f46:	2301      	movs	r3, #1
 8001f48:	4093      	lsls	r3, r2
 8001f4a:	73bb      	strb	r3, [r7, #14]
    if( (rxsched->slot = (slot += (intv))) >= 128 )
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	7bbb      	ldrb	r3, [r7, #14]
 8001f50:	4413      	add	r3, r2
 8001f52:	73fb      	strb	r3, [r7, #15]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	709a      	strb	r2, [r3, #2]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	789b      	ldrb	r3, [r3, #2]
 8001f5e:	b25b      	sxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	da01      	bge.n	8001f68 <rxschedNext+0x54>
        return 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e01d      	b.n	8001fa4 <rxschedNext+0x90>
    rxsched->rxtime = rxsched->rxbase
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6859      	ldr	r1, [r3, #4]
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	049b      	lsls	r3, r3, #18
 8001f76:	11db      	asrs	r3, r3, #7
 8001f78:	18cc      	adds	r4, r1, r3
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	7bbb      	ldrb	r3, [r7, #14]
 8001f7e:	4413      	add	r3, r2
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	3302      	adds	r3, #2
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	f7ff fe47 	bl	8001c20 <calcRxWindow>
 8001f92:	4603      	mov	r3, r0
 8001f94:	1ae2      	subs	r2, r4, r3
    rxsched->rxtime = rxsched->rxbase
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <rxschedNext+0x98>)
 8001f9c:	7c1a      	ldrb	r2, [r3, #16]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	70da      	strb	r2, [r3, #3]
    goto again;
 8001fa2:	e7bc      	b.n	8001f1e <rxschedNext+0xa>
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd90      	pop	{r4, r7, pc}
 8001fac:	20000304 	.word	0x20000304

08001fb0 <rndDelay>:


static ostime_t rndDelay (u1_t secSpan) {
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
    u2_t r = os_getRndU2();
 8001fba:	f003 fc03 	bl	80057c4 <radio_rand1>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	b21c      	sxth	r4, r3
 8001fc4:	f003 fbfe 	bl	80057c4 <radio_rand1>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	4323      	orrs	r3, r4
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	817b      	strh	r3, [r7, #10]
    ostime_t delay = r;
 8001fd2:	897b      	ldrh	r3, [r7, #10]
 8001fd4:	60fb      	str	r3, [r7, #12]
    if( delay > OSTICKS_PER_SEC )
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001fdc:	dd0b      	ble.n	8001ff6 <rndDelay+0x46>
        delay = r % (u2_t)OSTICKS_PER_SEC;
 8001fde:	897b      	ldrh	r3, [r7, #10]
 8001fe0:	4a11      	ldr	r2, [pc, #68]	; (8002028 <rndDelay+0x78>)
 8001fe2:	fba2 1203 	umull	r1, r2, r2, r3
 8001fe6:	0ad2      	lsrs	r2, r2, #11
 8001fe8:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8001fec:	fb01 f202 	mul.w	r2, r1, r2
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	60fb      	str	r3, [r7, #12]
    if( secSpan > 0 )
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d010      	beq.n	800201e <rndDelay+0x6e>
        delay += ((u1_t)r % secSpan) * OSTICKS_PER_SEC;
 8001ffc:	897b      	ldrh	r3, [r7, #10]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	79fa      	ldrb	r2, [r7, #7]
 8002002:	fbb3 f1f2 	udiv	r1, r3, r2
 8002006:	fb02 f201 	mul.w	r2, r2, r1
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002014:	fb03 f302 	mul.w	r3, r3, r2
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
    return delay;
 800201e:	68fb      	ldr	r3, [r7, #12]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	bd90      	pop	{r4, r7, pc}
 8002028:	10624dd3 	.word	0x10624dd3

0800202c <txDelay>:


static void txDelay (ostime_t reftime, u1_t secSpan) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
    reftime += rndDelay(secSpan);
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ffb8 	bl	8001fb0 <rndDelay>
 8002040:	4602      	mov	r2, r0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	607b      	str	r3, [r7, #4]
    if( LMIC.globalDutyRate == 0  ||  (reftime - LMIC.globalDutyAvail) > 0 ) {
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <txDelay+0x58>)
 800204a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d006      	beq.n	8002060 <txDelay+0x34>
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <txDelay+0x58>)
 8002054:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	dd0c      	ble.n	800207a <txDelay+0x4e>
        LMIC.globalDutyAvail = reftime;
 8002060:	4a08      	ldr	r2, [pc, #32]	; (8002084 <txDelay+0x58>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        LMIC.opmode |= OP_RNDTX;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <txDelay+0x58>)
 800206a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800206e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <txDelay+0x58>)
 8002076:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    }
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000304 	.word	0x20000304

08002088 <setDrJoin>:


static void setDrJoin (u1_t reason, u1_t dr) {
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	460a      	mov	r2, r1
 8002092:	71fb      	strb	r3, [r7, #7]
 8002094:	4613      	mov	r3, r2
 8002096:	71bb      	strb	r3, [r7, #6]
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <setDrJoin+0x24>)
 800209a:	79bb      	ldrb	r3, [r7, #6]
 800209c:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
    DO_DEVDB(LMIC.datarate,datarate);
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	20000304 	.word	0x20000304

080020b0 <setDrTxpow>:


static void setDrTxpow (u1_t reason, u1_t dr, s1_t pow) {
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
 80020ba:	460b      	mov	r3, r1
 80020bc:	71bb      	strb	r3, [r7, #6]
 80020be:	4613      	mov	r3, r2
 80020c0:	717b      	strb	r3, [r7, #5]
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    
    if( pow != KEEP_TXPOW )
 80020c2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80020c6:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80020ca:	d003      	beq.n	80020d4 <setDrTxpow+0x24>
        LMIC.adrTxPow = pow;
 80020cc:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <setDrTxpow+0x58>)
 80020ce:	797b      	ldrb	r3, [r7, #5]
 80020d0:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
    if( LMIC.datarate != dr ) {
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <setDrTxpow+0x58>)
 80020d6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80020da:	79ba      	ldrb	r2, [r7, #6]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d00c      	beq.n	80020fa <setDrTxpow+0x4a>
        LMIC.datarate = dr;
 80020e0:	4a09      	ldr	r2, [pc, #36]	; (8002108 <setDrTxpow+0x58>)
 80020e2:	79bb      	ldrb	r3, [r7, #6]
 80020e4:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <setDrTxpow+0x58>)
 80020ea:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80020ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <setDrTxpow+0x58>)
 80020f6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000304 	.word	0x20000304

0800210c <initDefaultChannels>:
    // Default operational frequencies
    EU868_F1|BAND_CENTI, EU868_F2|BAND_CENTI, EU868_F3|BAND_CENTI,
    EU868_F4|BAND_MILLI, EU868_F5|BAND_MILLI, EU868_F6|BAND_DECI
};

static void initDefaultChannels (bit_t join) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
    os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 8002116:	2240      	movs	r2, #64	; 0x40
 8002118:	2100      	movs	r1, #0
 800211a:	483a      	ldr	r0, [pc, #232]	; (8002204 <initDefaultChannels+0xf8>)
 800211c:	f009 fae3 	bl	800b6e6 <memset>
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 8002120:	2220      	movs	r2, #32
 8002122:	2100      	movs	r1, #0
 8002124:	4838      	ldr	r0, [pc, #224]	; (8002208 <initDefaultChannels+0xfc>)
 8002126:	f009 fade 	bl	800b6e6 <memset>
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 800212a:	2220      	movs	r2, #32
 800212c:	2100      	movs	r1, #0
 800212e:	4837      	ldr	r0, [pc, #220]	; (800220c <initDefaultChannels+0x100>)
 8002130:	f009 fad9 	bl	800b6e6 <memset>

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 8002134:	4b36      	ldr	r3, [pc, #216]	; (8002210 <initDefaultChannels+0x104>)
 8002136:	223f      	movs	r2, #63	; 0x3f
 8002138:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <initDefaultChannels+0x3a>
 8002142:	2300      	movs	r3, #0
 8002144:	e000      	b.n	8002148 <initDefaultChannels+0x3c>
 8002146:	2306      	movs	r3, #6
 8002148:	73fb      	strb	r3, [r7, #15]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 800214a:	2300      	movs	r3, #0
 800214c:	73bb      	strb	r3, [r7, #14]
 800214e:	e014      	b.n	800217a <initDefaultChannels+0x6e>
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	7bbb      	ldrb	r3, [r7, #14]
 8002154:	492f      	ldr	r1, [pc, #188]	; (8002214 <initDefaultChannels+0x108>)
 8002156:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800215a:	492d      	ldr	r1, [pc, #180]	; (8002210 <initDefaultChannels+0x104>)
 800215c:	3310      	adds	r3, #16
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
 8002162:	7bbb      	ldrb	r3, [r7, #14]
 8002164:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <initDefaultChannels+0x104>)
 8002166:	3340      	adds	r3, #64	; 0x40
 8002168:	213f      	movs	r1, #63	; 0x3f
 800216a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 800216e:	7bbb      	ldrb	r3, [r7, #14]
 8002170:	3301      	adds	r3, #1
 8002172:	73bb      	strb	r3, [r7, #14]
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	3301      	adds	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
 800217a:	7bbb      	ldrb	r3, [r7, #14]
 800217c:	2b05      	cmp	r3, #5
 800217e:	d9e7      	bls.n	8002150 <initDefaultChannels+0x44>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

    LMIC.bands[BAND_MILLI].txcap    = 1000;  // 0.1%
 8002180:	4b23      	ldr	r3, [pc, #140]	; (8002210 <initDefaultChannels+0x104>)
 8002182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002186:	841a      	strh	r2, [r3, #32]
    LMIC.bands[BAND_MILLI].txpow    = 14;
 8002188:	4b21      	ldr	r3, [pc, #132]	; (8002210 <initDefaultChannels+0x104>)
 800218a:	220e      	movs	r2, #14
 800218c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002190:	f003 fb18 	bl	80057c4 <radio_rand1>
 8002194:	4603      	mov	r3, r0
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	b2da      	uxtb	r2, r3
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <initDefaultChannels+0x104>)
 800219e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    LMIC.bands[BAND_CENTI].txcap    = 100;   // 1%
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <initDefaultChannels+0x104>)
 80021a4:	2264      	movs	r2, #100	; 0x64
 80021a6:	851a      	strh	r2, [r3, #40]	; 0x28
    LMIC.bands[BAND_CENTI].txpow    = 14;
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <initDefaultChannels+0x104>)
 80021aa:	220e      	movs	r2, #14
 80021ac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 80021b0:	f003 fb08 	bl	80057c4 <radio_rand1>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b14      	ldr	r3, [pc, #80]	; (8002210 <initDefaultChannels+0x104>)
 80021be:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <initDefaultChannels+0x104>)
 80021c4:	220a      	movs	r2, #10
 80021c6:	861a      	strh	r2, [r3, #48]	; 0x30
    LMIC.bands[BAND_DECI ].txpow    = 27;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <initDefaultChannels+0x104>)
 80021ca:	221b      	movs	r2, #27
 80021cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
 80021d0:	f003 faf8 	bl	80057c4 <radio_rand1>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <initDefaultChannels+0x104>)
 80021de:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
 80021e2:	f002 fdc9 	bl	8004d78 <os_getTime>
 80021e6:	4602      	mov	r2, r0
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <initDefaultChannels+0x104>)
 80021ea:	635a      	str	r2, [r3, #52]	; 0x34
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <initDefaultChannels+0x104>)
 80021ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    LMIC.bands[BAND_CENTI].avail =
 80021f0:	4a07      	ldr	r2, [pc, #28]	; (8002210 <initDefaultChannels+0x104>)
 80021f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <initDefaultChannels+0x104>)
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    LMIC.bands[BAND_MILLI].avail = 
 80021f8:	4a05      	ldr	r2, [pc, #20]	; (8002210 <initDefaultChannels+0x104>)
 80021fa:	6253      	str	r3, [r2, #36]	; 0x24
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000344 	.word	0x20000344
 8002208:	20000384 	.word	0x20000384
 800220c:	20000324 	.word	0x20000324
 8002210:	20000304 	.word	0x20000304
 8002214:	0800cd30 	.word	0x0800cd30

08002218 <LMIC_setupChannel>:
    b->avail = os_getTime();
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    return 1;
}

bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6039      	str	r1, [r7, #0]
 8002220:	4611      	mov	r1, r2
 8002222:	461a      	mov	r2, r3
 8002224:	4603      	mov	r3, r0
 8002226:	71fb      	strb	r3, [r7, #7]
 8002228:	460b      	mov	r3, r1
 800222a:	80bb      	strh	r3, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	71bb      	strb	r3, [r7, #6]
    if( chidx >= MAX_CHANNELS )
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	2b0f      	cmp	r3, #15
 8002234:	d901      	bls.n	800223a <LMIC_setupChannel+0x22>
        return 0;
 8002236:	2300      	movs	r3, #0
 8002238:	e054      	b.n	80022e4 <LMIC_setupChannel+0xcc>
    if( band == -1 ) {
 800223a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800223e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002242:	d121      	bne.n	8002288 <LMIC_setupChannel+0x70>
        if( freq >= 869400000 && freq <= 869650000 )
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <LMIC_setupChannel+0xd8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d908      	bls.n	800225e <LMIC_setupChannel+0x46>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4a29      	ldr	r2, [pc, #164]	; (80022f4 <LMIC_setupChannel+0xdc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d804      	bhi.n	800225e <LMIC_setupChannel+0x46>
            freq |= BAND_DECI;   // 10% 27dBm
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	f043 0302 	orr.w	r3, r3, #2
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	e021      	b.n	80022a2 <LMIC_setupChannel+0x8a>
        else if( (freq >= 868000000 && freq <= 868600000) ||
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <LMIC_setupChannel+0xe0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d903      	bls.n	800226e <LMIC_setupChannel+0x56>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	4a24      	ldr	r2, [pc, #144]	; (80022fc <LMIC_setupChannel+0xe4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d907      	bls.n	800227e <LMIC_setupChannel+0x66>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	4a23      	ldr	r2, [pc, #140]	; (8002300 <LMIC_setupChannel+0xe8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d915      	bls.n	80022a2 <LMIC_setupChannel+0x8a>
                 (freq >= 869700000 && freq <= 870000000)  )
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	4a22      	ldr	r2, [pc, #136]	; (8002304 <LMIC_setupChannel+0xec>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d811      	bhi.n	80022a2 <LMIC_setupChannel+0x8a>
            freq |= BAND_CENTI;  // 1% 14dBm 
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	e00c      	b.n	80022a2 <LMIC_setupChannel+0x8a>
        else 
            freq |= BAND_MILLI;  // 0.1% 14dBm
    } else {
        if( band > BAND_AUX ) return 0;
 8002288:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800228c:	2b03      	cmp	r3, #3
 800228e:	dd01      	ble.n	8002294 <LMIC_setupChannel+0x7c>
 8002290:	2300      	movs	r3, #0
 8002292:	e027      	b.n	80022e4 <LMIC_setupChannel+0xcc>
        freq = (freq&~3) | band;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800229e:	4313      	orrs	r3, r2
 80022a0:	603b      	str	r3, [r7, #0]
    }
    LMIC.channelFreq [chidx] = freq;
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	4918      	ldr	r1, [pc, #96]	; (8002308 <LMIC_setupChannel+0xf0>)
 80022a6:	3310      	adds	r3, #16
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
 80022ae:	88bb      	ldrh	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <LMIC_setupChannel+0xa0>
 80022b4:	88ba      	ldrh	r2, [r7, #4]
 80022b6:	e000      	b.n	80022ba <LMIC_setupChannel+0xa2>
 80022b8:	223f      	movs	r2, #63	; 0x3f
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	4912      	ldr	r1, [pc, #72]	; (8002308 <LMIC_setupChannel+0xf0>)
 80022be:	3340      	adds	r3, #64	; 0x40
 80022c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    LMIC.channelMap |= 1<<chidx;  // enabled right away
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <LMIC_setupChannel+0xf0>)
 80022c6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80022ca:	b21a      	sxth	r2, r3
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	4313      	orrs	r3, r2
 80022d8:	b21b      	sxth	r3, r3
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <LMIC_setupChannel+0xf0>)
 80022de:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    return 1;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	33d1fdbf 	.word	0x33d1fdbf
 80022f4:	33d5ce50 	.word	0x33d5ce50
 80022f8:	33bca0ff 	.word	0x33bca0ff
 80022fc:	33c5c8c0 	.word	0x33c5c8c0
 8002300:	33d6919f 	.word	0x33d6919f
 8002304:	33db2580 	.word	0x33db2580
 8002308:	20000304 	.word	0x20000304

0800230c <convFreq>:
    LMIC.channelFreq[channel] = 0;
    LMIC.channelDrMap[channel] = 0;
    LMIC.channelMap &= ~(1<<channel);
}

static u4_t convFreq (xref2u1_t ptr) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
    u4_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff f991 	bl	8001640 <os_rlsbf4>
 800231e:	4603      	mov	r3, r0
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	2264      	movs	r2, #100	; 0x64
 8002324:	fb02 f303 	mul.w	r3, r2, r3
 8002328:	60fb      	str	r3, [r7, #12]
    if( freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX )
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a06      	ldr	r2, [pc, #24]	; (8002348 <convFreq+0x3c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d903      	bls.n	800233a <convFreq+0x2e>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a05      	ldr	r2, [pc, #20]	; (800234c <convFreq+0x40>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <convFreq+0x32>
        freq = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
    return freq;
 800233e:	68fb      	ldr	r3, [r7, #12]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	337055bf 	.word	0x337055bf
 800234c:	33db2580 	.word	0x33db2580

08002350 <mapChannels>:

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	460a      	mov	r2, r1
 800235a:	71fb      	strb	r3, [r7, #7]
 800235c:	4613      	mov	r3, r2
 800235e:	80bb      	strh	r3, [r7, #4]
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10a      	bne.n	800237c <mapChannels+0x2c>
 8002366:	88bb      	ldrh	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <mapChannels+0x2c>
 800236c:	88ba      	ldrh	r2, [r7, #4]
 800236e:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <mapChannels+0x90>)
 8002370:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002374:	43db      	mvns	r3, r3
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <mapChannels+0x30>
        return 0;  // illegal input
 800237c:	2300      	movs	r3, #0
 800237e:	e028      	b.n	80023d2 <mapChannels+0x82>
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]
 8002384:	e01d      	b.n	80023c2 <mapChannels+0x72>
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
 8002386:	88ba      	ldrh	r2, [r7, #4]
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	fa42 f303 	asr.w	r3, r2, r3
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d012      	beq.n	80023bc <mapChannels+0x6c>
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <mapChannels+0x90>)
 800239a:	3310      	adds	r3, #16
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10b      	bne.n	80023bc <mapChannels+0x6c>
            chmap &= ~(1<<chnl); // ignore - channel is not defined
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2201      	movs	r2, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	b21a      	sxth	r2, r3
 80023b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80023b6:	4013      	ands	r3, r2
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	80bb      	strh	r3, [r7, #4]
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	3301      	adds	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	2b0f      	cmp	r3, #15
 80023c6:	d9de      	bls.n	8002386 <mapChannels+0x36>
    }
    LMIC.channelMap = chmap;
 80023c8:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <mapChannels+0x90>)
 80023ca:	88bb      	ldrh	r3, [r7, #4]
 80023cc:	f8a2 30a0 	strh.w	r3, [r2, #160]	; 0xa0
    return 1;
 80023d0:	2301      	movs	r3, #1
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000304 	.word	0x20000304

080023e4 <updateTx>:


static void updateTx (ostime_t txbeg) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
    u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 80023ec:	4b21      	ldr	r3, [pc, #132]	; (8002474 <updateTx+0x90>)
 80023ee:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80023f2:	4a20      	ldr	r2, [pc, #128]	; (8002474 <updateTx+0x90>)
 80023f4:	3310      	adds	r3, #16
 80023f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fa:	617b      	str	r3, [r7, #20]
    // Update global/band specific duty cycle stats
    ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 80023fc:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <updateTx+0x90>)
 80023fe:	89da      	ldrh	r2, [r3, #14]
 8002400:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <updateTx+0x90>)
 8002402:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8002406:	4619      	mov	r1, r3
 8002408:	4610      	mov	r0, r2
 800240a:	f7ff fb71 	bl	8001af0 <calcAirTime>
 800240e:	6138      	str	r0, [r7, #16]
    // Update channel/global duty cycle stats
    xref2band_t band = &LMIC.bands[freq & 0x3];
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	3304      	adds	r3, #4
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4a16      	ldr	r2, [pc, #88]	; (8002474 <updateTx+0x90>)
 800241c:	4413      	add	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
    LMIC.freq  = freq & ~(u4_t)3;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f023 0303 	bic.w	r3, r3, #3
 8002426:	4a13      	ldr	r2, [pc, #76]	; (8002474 <updateTx+0x90>)
 8002428:	6093      	str	r3, [r2, #8]
    LMIC.txpow = band->txpow;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8002430:	4b10      	ldr	r3, [pc, #64]	; (8002474 <updateTx+0x90>)
 8002432:	749a      	strb	r2, [r3, #18]
    band->avail = txbeg + airtime * band->txcap;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	fb03 f202 	mul.w	r2, r3, r2
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	441a      	add	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	605a      	str	r2, [r3, #4]
    if( LMIC.globalDutyRate != 0 )
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <updateTx+0x90>)
 800244a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00b      	beq.n	800246a <updateTx+0x86>
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <updateTx+0x90>)
 8002454:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8002458:	461a      	mov	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	fa03 f202 	lsl.w	r2, r3, r2
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	4a03      	ldr	r2, [pc, #12]	; (8002474 <updateTx+0x90>)
 8002466:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000304 	.word	0x20000304

08002478 <nextTx>:

static ostime_t nextTx (ostime_t now) {
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
    u1_t bmap=0xF;
 8002480:	230f      	movs	r3, #15
 8002482:	75fb      	strb	r3, [r7, #23]
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	4b48      	ldr	r3, [pc, #288]	; (80025a8 <nextTx+0x130>)
 8002488:	4413      	add	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        u1_t band=0;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
        for( u1_t bi=0; bi<4; bi++ ) {
 8002490:	2300      	movs	r3, #0
 8002492:	73bb      	strb	r3, [r7, #14]
 8002494:	e01d      	b.n	80024d2 <nextTx+0x5a>
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
 8002496:	7dfa      	ldrb	r2, [r7, #23]
 8002498:	7bbb      	ldrb	r3, [r7, #14]
 800249a:	fa42 f303 	asr.w	r3, r2, r3
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d012      	beq.n	80024cc <nextTx+0x54>
 80024a6:	7bbb      	ldrb	r3, [r7, #14]
 80024a8:	4a40      	ldr	r2, [pc, #256]	; (80025ac <nextTx+0x134>)
 80024aa:	3304      	adds	r3, #4
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	dd08      	ble.n	80024cc <nextTx+0x54>
                mintime = LMIC.bands[band = bi].avail;
 80024ba:	7bbb      	ldrb	r3, [r7, #14]
 80024bc:	73fb      	strb	r3, [r7, #15]
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	4a3a      	ldr	r2, [pc, #232]	; (80025ac <nextTx+0x134>)
 80024c2:	3304      	adds	r3, #4
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	613b      	str	r3, [r7, #16]
        for( u1_t bi=0; bi<4; bi++ ) {
 80024cc:	7bbb      	ldrb	r3, [r7, #14]
 80024ce:	3301      	adds	r3, #1
 80024d0:	73bb      	strb	r3, [r7, #14]
 80024d2:	7bbb      	ldrb	r3, [r7, #14]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d9de      	bls.n	8002496 <nextTx+0x1e>
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	4a34      	ldr	r2, [pc, #208]	; (80025ac <nextTx+0x134>)
 80024dc:	3304      	adds	r3, #4
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4413      	add	r3, r2
 80024e2:	78db      	ldrb	r3, [r3, #3]
 80024e4:	737b      	strb	r3, [r7, #13]
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 80024e6:	2300      	movs	r3, #0
 80024e8:	733b      	strb	r3, [r7, #12]
 80024ea:	e042      	b.n	8002572 <nextTx+0xfa>
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
 80024ec:	7b7b      	ldrb	r3, [r7, #13]
 80024ee:	3301      	adds	r3, #1
 80024f0:	737b      	strb	r3, [r7, #13]
 80024f2:	7b7b      	ldrb	r3, [r7, #13]
 80024f4:	2b0f      	cmp	r3, #15
 80024f6:	d902      	bls.n	80024fe <nextTx+0x86>
                chnl -=  MAX_CHANNELS;
 80024f8:	7b7b      	ldrb	r3, [r7, #13]
 80024fa:	3b10      	subs	r3, #16
 80024fc:	737b      	strb	r3, [r7, #13]
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 80024fe:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <nextTx+0x134>)
 8002500:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002504:	461a      	mov	r2, r3
 8002506:	7b7b      	ldrb	r3, [r7, #13]
 8002508:	fa42 f303 	asr.w	r3, r2, r3
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d02b      	beq.n	800256c <nextTx+0xf4>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 8002514:	7b7b      	ldrb	r3, [r7, #13]
 8002516:	4a25      	ldr	r2, [pc, #148]	; (80025ac <nextTx+0x134>)
 8002518:	3340      	adds	r3, #64	; 0x40
 800251a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800251e:	461a      	mov	r2, r3
 8002520:	4b22      	ldr	r3, [pc, #136]	; (80025ac <nextTx+0x134>)
 8002522:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	fa42 f303 	asr.w	r3, r2, r3
 800252e:	f003 0301 	and.w	r3, r3, #1
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 8002532:	2b00      	cmp	r3, #0
 8002534:	d01a      	beq.n	800256c <nextTx+0xf4>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	7b7b      	ldrb	r3, [r7, #13]
 800253a:	491c      	ldr	r1, [pc, #112]	; (80025ac <nextTx+0x134>)
 800253c:	3310      	adds	r3, #16
 800253e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002542:	f003 0303 	and.w	r3, r3, #3
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 8002546:	429a      	cmp	r2, r3
 8002548:	d110      	bne.n	800256c <nextTx+0xf4>
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	4917      	ldr	r1, [pc, #92]	; (80025ac <nextTx+0x134>)
 800254e:	1d13      	adds	r3, r2, #4
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	440b      	add	r3, r1
 8002554:	7b79      	ldrb	r1, [r7, #13]
 8002556:	70d9      	strb	r1, [r3, #3]
 8002558:	4914      	ldr	r1, [pc, #80]	; (80025ac <nextTx+0x134>)
 800255a:	1d13      	adds	r3, r2, #4
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	440b      	add	r3, r1
 8002560:	78da      	ldrb	r2, [r3, #3]
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <nextTx+0x134>)
 8002564:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
                return mintime;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	e016      	b.n	800259a <nextTx+0x122>
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 800256c:	7b3b      	ldrb	r3, [r7, #12]
 800256e:	3301      	adds	r3, #1
 8002570:	733b      	strb	r3, [r7, #12]
 8002572:	7b3b      	ldrb	r3, [r7, #12]
 8002574:	2b0f      	cmp	r3, #15
 8002576:	d9b9      	bls.n	80024ec <nextTx+0x74>
            }
        }
        if( (bmap &= ~(1<<band)) == 0 ) {
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2201      	movs	r2, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	b25b      	sxtb	r3, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	b25a      	sxtb	r2, r3
 8002586:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800258a:	4013      	ands	r3, r2
 800258c:	b25b      	sxtb	r3, r3
 800258e:	75fb      	strb	r3, [r7, #23]
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	2b00      	cmp	r3, #0
 8002594:	f47f af76 	bne.w	8002484 <nextTx+0xc>
            // No feasible channel  found!
            return mintime;
 8002598:	693b      	ldr	r3, [r7, #16]
        }
    } while(1);
}
 800259a:	4618      	mov	r0, r3
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	44aa2000 	.word	0x44aa2000
 80025ac:	20000304 	.word	0x20000304

080025b0 <setBcnRxParams>:


static void setBcnRxParams (void) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
    LMIC.dataLen = 0;
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <setBcnRxParams+0x48>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t)3;
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <setBcnRxParams+0x48>)
 80025be:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 80025c2:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <setBcnRxParams+0x48>)
 80025c4:	3310      	adds	r3, #16
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	f023 0303 	bic.w	r3, r3, #3
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <setBcnRxParams+0x48>)
 80025d0:	6093      	str	r3, [r2, #8]
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
 80025d2:	2003      	movs	r0, #3
 80025d4:	f7fe ffc4 	bl	8001560 <dndr2rps>
 80025d8:	4603      	mov	r3, r0
 80025da:	2101      	movs	r1, #1
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe ff71 	bl	80014c4 <setNocrc>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2111      	movs	r1, #17
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe ff92 	bl	8001510 <setIh>
 80025ec:	4603      	mov	r3, r0
 80025ee:	461a      	mov	r2, r3
 80025f0:	4b01      	ldr	r3, [pc, #4]	; (80025f8 <setBcnRxParams+0x48>)
 80025f2:	81da      	strh	r2, [r3, #14]
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000304 	.word	0x20000304

080025fc <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop (void) {
 80025fc:	b598      	push	{r3, r4, r7, lr}
 80025fe:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 8002600:	f003 f8e0 	bl	80057c4 <radio_rand1>
 8002604:	4603      	mov	r3, r0
 8002606:	461a      	mov	r2, r3
 8002608:	4b15      	ldr	r3, [pc, #84]	; (8002660 <initJoinLoop+0x64>)
 800260a:	fba3 1302 	umull	r1, r3, r3, r2
 800260e:	0899      	lsrs	r1, r3, #2
 8002610:	460b      	mov	r3, r1
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	440b      	add	r3, r1
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	b2da      	uxtb	r2, r3
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <initJoinLoop+0x68>)
 800261e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
#endif
    LMIC.adrTxPow = 14;
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <initJoinLoop+0x68>)
 8002624:	220e      	movs	r2, #14
 8002626:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
    setDrJoin(DRCHG_SET, DR_SF7);
 800262a:	2105      	movs	r1, #5
 800262c:	2000      	movs	r0, #0
 800262e:	f7ff fd2b 	bl	8002088 <setDrJoin>
    initDefaultChannels(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f7ff fd6a 	bl	800210c <initDefaultChannels>
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <initJoinLoop+0x68>)
 800263a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800263e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <initJoinLoop+0x4e>
 8002646:	f7fe fed9 	bl	80013fc <hal_failed>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <initJoinLoop+0x68>)
 800264c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800264e:	2008      	movs	r0, #8
 8002650:	f7ff fcae 	bl	8001fb0 <rndDelay>
 8002654:	4603      	mov	r3, r0
 8002656:	4423      	add	r3, r4
 8002658:	4a02      	ldr	r2, [pc, #8]	; (8002664 <initJoinLoop+0x68>)
 800265a:	6013      	str	r3, [r2, #0]
}
 800265c:	bf00      	nop
 800265e:	bd98      	pop	{r3, r4, r7, pc}
 8002660:	aaaaaaab 	.word	0xaaaaaaab
 8002664:	20000304 	.word	0x20000304

08002668 <nextJoinState>:


static ostime_t nextJoinState (void) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
    u1_t failed = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	71fb      	strb	r3, [r7, #7]

    // Try 869.x and then 864.x with same DR
    // If both fail try next lower datarate
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
 8002672:	4b30      	ldr	r3, [pc, #192]	; (8002734 <nextJoinState+0xcc>)
 8002674:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002678:	3301      	adds	r3, #1
 800267a:	b2da      	uxtb	r2, r3
 800267c:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <nextJoinState+0xcc>)
 800267e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8002682:	4b2c      	ldr	r3, [pc, #176]	; (8002734 <nextJoinState+0xcc>)
 8002684:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002688:	2b06      	cmp	r3, #6
 800268a:	d103      	bne.n	8002694 <nextJoinState+0x2c>
        LMIC.txChnl = 0;
 800268c:	4b29      	ldr	r3, [pc, #164]	; (8002734 <nextJoinState+0xcc>)
 800268e:	2200      	movs	r2, #0
 8002690:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    if( (++LMIC.txCnt & 1) == 0 ) {
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <nextJoinState+0xcc>)
 8002696:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 800269a:	3301      	adds	r3, #1
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4b25      	ldr	r3, [pc, #148]	; (8002734 <nextJoinState+0xcc>)
 80026a0:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
 80026a4:	4b23      	ldr	r3, [pc, #140]	; (8002734 <nextJoinState+0xcc>)
 80026a6:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d112      	bne.n	80026d8 <nextJoinState+0x70>
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <nextJoinState+0xcc>)
 80026b4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <nextJoinState+0x5a>
            failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 80026bc:	2301      	movs	r3, #1
 80026be:	71fb      	strb	r3, [r7, #7]
 80026c0:	e00a      	b.n	80026d8 <nextJoinState+0x70>
        else
            setDrJoin(DRCHG_NOJACC, decDR((dr_t)LMIC.datarate));
 80026c2:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <nextJoinState+0xcc>)
 80026c4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe ff5d 	bl	8001588 <decDR>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4619      	mov	r1, r3
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff fcd8 	bl	8002088 <setDrJoin>
    }
    // Clear NEXTCHNL because join state engine controls channel hopping
    LMIC.opmode &= ~OP_NEXTCHNL;
 80026d8:	4b16      	ldr	r3, [pc, #88]	; (8002734 <nextJoinState+0xcc>)
 80026da:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80026de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	4b13      	ldr	r3, [pc, #76]	; (8002734 <nextJoinState+0xcc>)
 80026e6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
 80026ea:	f002 fb45 	bl	8004d78 <os_getTime>
 80026ee:	6038      	str	r0, [r7, #0]
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
 80026f0:	4b10      	ldr	r3, [pc, #64]	; (8002734 <nextJoinState+0xcc>)
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	da02      	bge.n	8002702 <nextJoinState+0x9a>
        time = LMIC.bands[BAND_MILLI].avail;
 80026fc:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <nextJoinState+0xcc>)
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	603b      	str	r3, [r7, #0]
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <nextJoinState+0xcc>)
 8002704:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002708:	461a      	mov	r2, r3
 800270a:	23ff      	movs	r3, #255	; 0xff
 800270c:	4113      	asrs	r3, r2
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fc4d 	bl	8001fb0 <rndDelay>
 8002716:	4603      	mov	r3, r0
 8002718:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800271c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    LMIC.txend = time +
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	4413      	add	r3, r2
 8002724:	4a03      	ldr	r2, [pc, #12]	; (8002734 <nextJoinState+0xcc>)
 8002726:	6013      	str	r3, [r2, #0]
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
 8002728:	79fb      	ldrb	r3, [r7, #7]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000304 	.word	0x20000304

08002738 <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif


static void runEngineUpdate (xref2osjob_t osjob) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
    engineUpdate();
 8002740:	f001 fcf2 	bl	8004128 <engineUpdate>
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <reportEvent>:


static void reportEvent (ev_t ev) {
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	4618      	mov	r0, r3
 800275a:	f001 fff5 	bl	8004748 <onEvent>
    engineUpdate();
 800275e:	f001 fce3 	bl	8004128 <engineUpdate>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <runReset>:


static void runReset (xref2osjob_t osjob) {
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
    // Disable session
    LMIC_reset();
 8002772:	f001 fea3 	bl	80044bc <LMIC_reset>
    LMIC_startJoining();
 8002776:	f001 fa4b 	bl	8003c10 <LMIC_startJoining>
    reportEvent(EV_RESET);
 800277a:	200c      	movs	r0, #12
 800277c:	f7ff ffe6 	bl	800274c <reportEvent>
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <stateJustJoined>:

static void stateJustJoined (void) {
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <stateJustJoined+0xc4>)
 800278e:	2200      	movs	r2, #0
 8002790:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8002794:	4b2d      	ldr	r3, [pc, #180]	; (800284c <stateJustJoined+0xc4>)
 8002796:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800279a:	4a2c      	ldr	r2, [pc, #176]	; (800284c <stateJustJoined+0xc4>)
 800279c:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    LMIC.rejoinCnt   = 0;
 80027a0:	4b2a      	ldr	r3, [pc, #168]	; (800284c <stateJustJoined+0xc4>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 80027a8:	4b28      	ldr	r3, [pc, #160]	; (800284c <stateJustJoined+0xc4>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
 80027b0:	4b26      	ldr	r3, [pc, #152]	; (800284c <stateJustJoined+0xc4>)
 80027b2:	f893 2126 	ldrb.w	r2, [r3, #294]	; 0x126
 80027b6:	4b25      	ldr	r3, [pc, #148]	; (800284c <stateJustJoined+0xc4>)
 80027b8:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
 80027bc:	4b23      	ldr	r3, [pc, #140]	; (800284c <stateJustJoined+0xc4>)
 80027be:	f893 2125 	ldrb.w	r2, [r3, #293]	; 0x125
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <stateJustJoined+0xc4>)
 80027c4:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 80027c8:	4b20      	ldr	r3, [pc, #128]	; (800284c <stateJustJoined+0xc4>)
 80027ca:	f893 2122 	ldrb.w	r2, [r3, #290]	; 0x122
 80027ce:	4b1f      	ldr	r3, [pc, #124]	; (800284c <stateJustJoined+0xc4>)
 80027d0:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    LMIC.moreData    = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <stateJustJoined+0xc4>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 80027dc:	4b1b      	ldr	r3, [pc, #108]	; (800284c <stateJustJoined+0xc4>)
 80027de:	f893 2129 	ldrb.w	r2, [r3, #297]	; 0x129
 80027e2:	4b1a      	ldr	r3, [pc, #104]	; (800284c <stateJustJoined+0xc4>)
 80027e4:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 80027e8:	4b18      	ldr	r3, [pc, #96]	; (800284c <stateJustJoined+0xc4>)
 80027ea:	f893 212a 	ldrb.w	r2, [r3, #298]	; 0x12a
 80027ee:	4b17      	ldr	r3, [pc, #92]	; (800284c <stateJustJoined+0xc4>)
 80027f0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 80027f4:	4b15      	ldr	r3, [pc, #84]	; (800284c <stateJustJoined+0xc4>)
 80027f6:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <stateJustJoined+0xc4>)
 80027fc:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    LMIC.pingSetAns  = 0;
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <stateJustJoined+0xc4>)
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
    LMIC.upRepeat    = 0;
 8002808:	4b10      	ldr	r3, [pc, #64]	; (800284c <stateJustJoined+0xc4>)
 800280a:	2200      	movs	r2, #0
 800280c:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
    LMIC.adrAckReq   = LINK_CHECK_INIT;
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <stateJustJoined+0xc4>)
 8002812:	22f4      	movs	r2, #244	; 0xf4
 8002814:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
    LMIC.dn2Dr       = DR_DNW2;
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <stateJustJoined+0xc4>)
 800281a:	2200      	movs	r2, #0
 800281c:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
    LMIC.dn2Freq     = FREQ_DNW2;
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <stateJustJoined+0xc4>)
 8002822:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <stateJustJoined+0xc8>)
 8002824:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    LMIC.bcnChnl     = CHNL_BCN;
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <stateJustJoined+0xc4>)
 800282a:	2205      	movs	r2, #5
 800282c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
    LMIC.ping.freq   = FREQ_PING;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <stateJustJoined+0xc4>)
 8002832:	4a07      	ldr	r2, [pc, #28]	; (8002850 <stateJustJoined+0xc8>)
 8002834:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    LMIC.ping.dr     = DR_PING;
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <stateJustJoined+0xc4>)
 800283a:	2203      	movs	r2, #3
 800283c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20000304 	.word	0x20000304
 8002850:	33d3e608 	.word	0x33d3e608

08002854 <decodeBeacon>:
// ================================================================================
// Decoding frames


// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <decodeBeacon+0x120>)
 800285c:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8002860:	2b11      	cmp	r3, #17
 8002862:	d001      	beq.n	8002868 <decodeBeacon+0x14>
 8002864:	f7fe fdca 	bl	80013fc <hal_failed>
    xref2u1_t d = LMIC.frame;
 8002868:	4b43      	ldr	r3, [pc, #268]	; (8002978 <decodeBeacon+0x124>)
 800286a:	607b      	str	r3, [r7, #4]
    if(
#if defined CFG_eu868
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3307      	adds	r3, #7
 8002870:	781c      	ldrb	r4, [r3, #0]
 8002872:	2107      	movs	r1, #7
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7fe ff7e 	bl	8001776 <os_crc16>
 800287a:	4603      	mov	r3, r0
 800287c:	b2db      	uxtb	r3, r3
    if(
 800287e:	429c      	cmp	r4, r3
 8002880:	d001      	beq.n	8002886 <decodeBeacon+0x32>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
 8002882:	2300      	movs	r3, #0
 8002884:	e071      	b.n	800296a <decodeBeacon+0x116>
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe feda 	bl	8001640 <os_rlsbf4>
 800288c:	4603      	mov	r3, r0
 800288e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002892:	603b      	str	r3, [r7, #0]
    if( bcnnetid != LMIC.netid )
 8002894:	4b37      	ldr	r3, [pc, #220]	; (8002974 <decodeBeacon+0x120>)
 8002896:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d002      	beq.n	80028a6 <decodeBeacon+0x52>
        return -1;  // not the beacon we're looking for
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
 80028a4:	e061      	b.n	800296a <decodeBeacon+0x116>

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
 80028a6:	4b33      	ldr	r3, [pc, #204]	; (8002974 <decodeBeacon+0x120>)
 80028a8:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80028ac:	f023 0303 	bic.w	r3, r3, #3
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4b30      	ldr	r3, [pc, #192]	; (8002974 <decodeBeacon+0x120>)
 80028b4:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
 80028b8:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <decodeBeacon+0x120>)
 80028ba:	f993 200d 	ldrsb.w	r2, [r3, #13]
 80028be:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <decodeBeacon+0x120>)
 80028c0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    LMIC.bcninfo.rssi   = LMIC.rssi;
 80028c4:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <decodeBeacon+0x120>)
 80028c6:	f993 200c 	ldrsb.w	r2, [r3, #12]
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <decodeBeacon+0x120>)
 80028cc:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 80028d0:	4b28      	ldr	r3, [pc, #160]	; (8002974 <decodeBeacon+0x120>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 80028d8:	3b0c      	subs	r3, #12
 80028da:	4a26      	ldr	r2, [pc, #152]	; (8002974 <decodeBeacon+0x120>)
 80028dc:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3303      	adds	r3, #3
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe feab 	bl	8001640 <os_rlsbf4>
 80028ea:	4602      	mov	r2, r0
 80028ec:	4b21      	ldr	r3, [pc, #132]	; (8002974 <decodeBeacon+0x120>)
 80028ee:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    LMIC.bcninfo.flags |= BCN_PARTIAL;
 80028f2:	4b20      	ldr	r3, [pc, #128]	; (8002974 <decodeBeacon+0x120>)
 80028f4:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <decodeBeacon+0x120>)
 8002900:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	330f      	adds	r3, #15
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fe84 	bl	8001616 <os_rlsbf2>
 800290e:	4603      	mov	r3, r0
 8002910:	461c      	mov	r4, r3
 8002912:	210f      	movs	r1, #15
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7fe ff2e 	bl	8001776 <os_crc16>
 800291a:	4603      	mov	r3, r0
 800291c:	429c      	cmp	r4, r3
 800291e:	d001      	beq.n	8002924 <decodeBeacon+0xd0>
        return 1;
 8002920:	2301      	movs	r3, #1
 8002922:	e022      	b.n	800296a <decodeBeacon+0x116>
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3308      	adds	r3, #8
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fe89 	bl	8001640 <os_rlsbf4>
 800292e:	4603      	mov	r3, r0
 8002930:	121b      	asrs	r3, r3, #8
 8002932:	4a10      	ldr	r2, [pc, #64]	; (8002974 <decodeBeacon+0x120>)
 8002934:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	330b      	adds	r3, #11
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fe7f 	bl	8001640 <os_rlsbf4>
 8002942:	4603      	mov	r3, r0
 8002944:	121b      	asrs	r3, r3, #8
 8002946:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <decodeBeacon+0x120>)
 8002948:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7a1a      	ldrb	r2, [r3, #8]
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <decodeBeacon+0x120>)
 8002952:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
    LMIC.bcninfo.flags |= BCN_FULL;
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <decodeBeacon+0x120>)
 8002958:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800295c:	f043 0302 	orr.w	r3, r3, #2
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4b04      	ldr	r3, [pc, #16]	; (8002974 <decodeBeacon+0x120>)
 8002964:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
    return 2;
 8002968:	2302      	movs	r3, #2
}
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bd90      	pop	{r4, r7, pc}
 8002972:	bf00      	nop
 8002974:	20000304 	.word	0x20000304
 8002978:	2000044c 	.word	0x2000044c

0800297c <decodeFrame>:


static bit_t decodeFrame (void) {
 800297c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800297e:	b09d      	sub	sp, #116	; 0x74
 8002980:	af02      	add	r7, sp, #8
    xref2u1_t d = LMIC.frame;
 8002982:	4b97      	ldr	r3, [pc, #604]	; (8002be0 <decodeFrame+0x264>)
 8002984:	653b      	str	r3, [r7, #80]	; 0x50
    u1_t hdr    = d[0];
 8002986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    u1_t ftype  = hdr & HDR_FTYPE;
 800298e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002992:	f023 031f 	bic.w	r3, r3, #31
 8002996:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    int  dlen   = LMIC.dataLen;
 800299a:	4b92      	ldr	r3, [pc, #584]	; (8002be4 <decodeFrame+0x268>)
 800299c:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80029a0:	64bb      	str	r3, [r7, #72]	; 0x48
    if( dlen < OFF_DAT_OPTS+4 ||
 80029a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a4:	2b0b      	cmp	r3, #11
 80029a6:	dd0d      	ble.n	80029c4 <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 80029a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80029ac:	f003 0303 	and.w	r3, r3, #3
    if( dlen < OFF_DAT_OPTS+4 ||
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d107      	bne.n	80029c4 <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 80029b4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80029b8:	2b60      	cmp	r3, #96	; 0x60
 80029ba:	d012      	beq.n	80029e2 <decodeFrame+0x66>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
 80029bc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80029c0:	2ba0      	cmp	r3, #160	; 0xa0
 80029c2:	d00e      	beq.n	80029e2 <decodeFrame+0x66>
        // Basic sanity checks failed
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
 80029c4:	bf00      	nop
 80029c6:	e006      	b.n	80029d6 <decodeFrame+0x5a>
    if( addr != LMIC.devaddr ) {
        EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
 80029c8:	bf00      	nop
 80029ca:	e004      	b.n	80029d6 <decodeFrame+0x5a>
    }
    if( poff > pend ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
 80029cc:	bf00      	nop
 80029ce:	e002      	b.n	80029d6 <decodeFrame+0x5a>
        EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
                           e_.eui1   = MAIN::CDEV->getEui(),
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
 80029d0:	bf00      	nop
 80029d2:	e000      	b.n	80029d6 <decodeFrame+0x5a>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 80029d4:	bf00      	nop
        LMIC.dataLen = 0;
 80029d6:	4b83      	ldr	r3, [pc, #524]	; (8002be4 <decodeFrame+0x268>)
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
        return 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	e331      	b.n	8003046 <decodeFrame+0x6ca>
    int  fct   = d[OFF_DAT_FCT];
 80029e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e4:	3305      	adds	r3, #5
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	647b      	str	r3, [r7, #68]	; 0x44
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
 80029ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ec:	3301      	adds	r3, #1
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe fe26 	bl	8001640 <os_rlsbf4>
 80029f4:	6438      	str	r0, [r7, #64]	; 0x40
    u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 80029f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f8:	3306      	adds	r3, #6
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fe0b 	bl	8001616 <os_rlsbf2>
 8002a00:	4603      	mov	r3, r0
 8002a02:	63fb      	str	r3, [r7, #60]	; 0x3c
    int  olen  = fct & FCT_OPTLEN;
 8002a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	63bb      	str	r3, [r7, #56]	; 0x38
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 8002a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a0e:	115b      	asrs	r3, r3, #5
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
    int  poff  = OFF_DAT_OPTS+olen;
 8002a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a18:	3308      	adds	r3, #8
 8002a1a:	667b      	str	r3, [r7, #100]	; 0x64
    int  pend  = dlen-4;  // MIC
 8002a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a1e:	3b04      	subs	r3, #4
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
    if( addr != LMIC.devaddr ) {
 8002a22:	4b70      	ldr	r3, [pc, #448]	; (8002be4 <decodeFrame+0x268>)
 8002a24:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002a28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d1cc      	bne.n	80029c8 <decodeFrame+0x4c>
    if( poff > pend ) {
 8002a2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a32:	429a      	cmp	r2, r3
 8002a34:	dcca      	bgt.n	80029cc <decodeFrame+0x50>
    int port = -1;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3a:	663b      	str	r3, [r7, #96]	; 0x60
    int replayConf = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if( pend > poff )
 8002a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a44:	429a      	cmp	r2, r3
 8002a46:	dd07      	ble.n	8002a58 <decodeFrame+0xdc>
        port = d[poff++];
 8002a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	667a      	str	r2, [r7, #100]	; 0x64
 8002a4e:	461a      	mov	r2, r3
 8002a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a52:	4413      	add	r3, r2
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	663b      	str	r3, [r7, #96]	; 0x60
    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);
 8002a58:	4b62      	ldr	r3, [pc, #392]	; (8002be4 <decodeFrame+0x268>)
 8002a5a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002a5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a60:	b291      	uxth	r1, r2
 8002a62:	4a60      	ldr	r2, [pc, #384]	; (8002be4 <decodeFrame+0x268>)
 8002a64:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8002a68:	b292      	uxth	r2, r2
 8002a6a:	1a8a      	subs	r2, r1, r2
 8002a6c:	b292      	uxth	r2, r2
 8002a6e:	4413      	add	r3, r2
 8002a70:	63fb      	str	r3, [r7, #60]	; 0x3c
    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
 8002a72:	4b5c      	ldr	r3, [pc, #368]	; (8002be4 <decodeFrame+0x268>)
 8002a74:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 8002a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	2301      	movs	r3, #1
 8002a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a84:	4858      	ldr	r0, [pc, #352]	; (8002be8 <decodeFrame+0x26c>)
 8002a86:	f7fe fee9 	bl	800185c <aes_verifyMic>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d09f      	beq.n	80029d0 <decodeFrame+0x54>
    if( seqno < LMIC.seqnoDn ) {
 8002a90:	4b54      	ldr	r3, [pc, #336]	; (8002be4 <decodeFrame+0x268>)
 8002a92:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002a96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d21a      	bcs.n	8002ad2 <decodeFrame+0x156>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
 8002a9c:	4b51      	ldr	r3, [pc, #324]	; (8002be4 <decodeFrame+0x268>)
 8002a9e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	db94      	blt.n	80029d4 <decodeFrame+0x58>
        }
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
 8002aaa:	4b4e      	ldr	r3, [pc, #312]	; (8002be4 <decodeFrame+0x268>)
 8002aac:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d185      	bne.n	80029c4 <decodeFrame+0x48>
 8002ab8:	4b4a      	ldr	r3, [pc, #296]	; (8002be4 <decodeFrame+0x268>)
 8002aba:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d080      	beq.n	80029c4 <decodeFrame+0x48>
 8002ac2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002ac6:	2ba0      	cmp	r3, #160	; 0xa0
 8002ac8:	f47f af7c 	bne.w	80029c4 <decodeFrame+0x48>
                                e_.info2  = seqno));
            goto norx;
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
 8002acc:	2301      	movs	r3, #1
 8002ace:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ad0:	e00e      	b.n	8002af0 <decodeFrame+0x174>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
 8002ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	4a43      	ldr	r2, [pc, #268]	; (8002be4 <decodeFrame+0x268>)
 8002ad8:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 8002adc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002ae0:	2ba0      	cmp	r3, #160	; 0xa0
 8002ae2:	d101      	bne.n	8002ae8 <decodeFrame+0x16c>
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	e000      	b.n	8002aea <decodeFrame+0x16e>
 8002ae8:	2200      	movs	r2, #0
 8002aea:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <decodeFrame+0x268>)
 8002aec:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
 8002af0:	4b3c      	ldr	r3, [pc, #240]	; (8002be4 <decodeFrame+0x268>)
 8002af2:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d104      	bne.n	8002b04 <decodeFrame+0x188>
 8002afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <decodeFrame+0x19a>
        LMIC.opmode |= OP_POLL;
 8002b04:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <decodeFrame+0x268>)
 8002b06:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002b0a:	f043 0310 	orr.w	r3, r3, #16
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <decodeFrame+0x268>)
 8002b12:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
 8002b16:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <decodeFrame+0x268>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8002b1e:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <decodeFrame+0x268>)
 8002b20:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
 8002b24:	4b2f      	ldr	r3, [pc, #188]	; (8002be4 <decodeFrame+0x268>)
 8002b26:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8002b2a:	4b2e      	ldr	r3, [pc, #184]	; (8002be4 <decodeFrame+0x268>)
 8002b2c:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 8002b30:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8002b34:	d003      	beq.n	8002b3e <decodeFrame+0x1c2>
        LMIC.adrAckReq = LINK_CHECK_INIT;
 8002b36:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <decodeFrame+0x268>)
 8002b38:	22f4      	movs	r2, #244	; 0xf4
 8002b3a:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 8002b3e:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <decodeFrame+0x268>)
 8002b40:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002b44:	f1a3 0440 	sub.w	r4, r3, #64	; 0x40
 8002b48:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <decodeFrame+0x268>)
 8002b4a:	89db      	ldrh	r3, [r3, #14]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe ffaf 	bl	8001ab0 <getSensitivity>
 8002b52:	4603      	mov	r3, r0
 8002b54:	1ae3      	subs	r3, r4, r3
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 8002b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	db05      	blt.n	8002b6a <decodeFrame+0x1ee>
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	2bfe      	cmp	r3, #254	; 0xfe
 8002b62:	bfa8      	it	ge
 8002b64:	23fe      	movge	r3, #254	; 0xfe
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	e000      	b.n	8002b6c <decodeFrame+0x1f0>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <decodeFrame+0x268>)
 8002b6e:	f882 3124 	strb.w	r3, [r2, #292]	; 0x124

    xref2u1_t opts = &d[OFF_DAT_OPTS];
 8002b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b74:	3308      	adds	r3, #8
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
    int oidx = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	65bb      	str	r3, [r7, #88]	; 0x58
    while( oidx < olen ) {
 8002b7c:	e1f5      	b.n	8002f6a <decodeFrame+0x5ee>
        switch( opts[oidx] ) {
 8002b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	3b02      	subs	r3, #2
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	f200 81f4 	bhi.w	8002f76 <decodeFrame+0x5fa>
 8002b8e:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <decodeFrame+0x218>)
 8002b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b94:	08002bd9 	.word	0x08002bd9
 8002b98:	08002bed 	.word	0x08002bed
 8002b9c:	08002d4b 	.word	0x08002d4b
 8002ba0:	08002cc7 	.word	0x08002cc7
 8002ba4:	08002cb7 	.word	0x08002cb7
 8002ba8:	08002d99 	.word	0x08002d99
 8002bac:	08002f77 	.word	0x08002f77
 8002bb0:	08002f77 	.word	0x08002f77
 8002bb4:	08002f77 	.word	0x08002f77
 8002bb8:	08002f77 	.word	0x08002f77
 8002bbc:	08002f77 	.word	0x08002f77
 8002bc0:	08002f77 	.word	0x08002f77
 8002bc4:	08002f77 	.word	0x08002f77
 8002bc8:	08002f77 	.word	0x08002f77
 8002bcc:	08002f77 	.word	0x08002f77
 8002bd0:	08002e29 	.word	0x08002e29
 8002bd4:	08002e75 	.word	0x08002e75
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
 8002bd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bda:	3303      	adds	r3, #3
 8002bdc:	65bb      	str	r3, [r7, #88]	; 0x58
            continue;
 8002bde:	e1c4      	b.n	8002f6a <decodeFrame+0x5ee>
 8002be0:	2000044c 	.word	0x2000044c
 8002be4:	20000304 	.word	0x20000304
 8002be8:	200003f8 	.word	0x200003f8
        }
        case MCMD_LADR_REQ: {
            u1_t p1     = opts[oidx+1];            // txpow + DR
 8002bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bee:	3301      	adds	r3, #1
 8002bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	74bb      	strb	r3, [r7, #18]
            u2_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
 8002bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bfa:	3302      	adds	r3, #2
 8002bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bfe:	4413      	add	r3, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe fd08 	bl	8001616 <os_rlsbf2>
 8002c06:	4603      	mov	r3, r0
 8002c08:	823b      	strh	r3, [r7, #16]
            u1_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
 8002c0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c10:	4413      	add	r3, r2
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	f023 030f 	bic.w	r3, r3, #15
 8002c18:	73fb      	strb	r3, [r7, #15]
            u1_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
 8002c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c20:	4413      	add	r3, r2
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	73bb      	strb	r3, [r7, #14]
            oidx += 5;
 8002c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c2c:	3305      	adds	r3, #5
 8002c2e:	65bb      	str	r3, [r7, #88]	; 0x58

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
 8002c30:	4b8e      	ldr	r3, [pc, #568]	; (8002e6c <decodeFrame+0x4f0>)
 8002c32:	2287      	movs	r2, #135	; 0x87
 8002c34:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
 8002c38:	8a3a      	ldrh	r2, [r7, #16]
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fb86 	bl	8002350 <mapChannels>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d108      	bne.n	8002c5c <decodeFrame+0x2e0>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 8002c4a:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <decodeFrame+0x4f0>)
 8002c4c:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b85      	ldr	r3, [pc, #532]	; (8002e6c <decodeFrame+0x4f0>)
 8002c58:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
 8002c5c:	7cbb      	ldrb	r3, [r7, #18]
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	737b      	strb	r3, [r7, #13]
            if( !validDR(dr) ) {
 8002c62:	7b7b      	ldrb	r3, [r7, #13]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe fca7 	bl	80015b8 <validDR>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d108      	bne.n	8002c82 <decodeFrame+0x306>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 8002c70:	4b7e      	ldr	r3, [pc, #504]	; (8002e6c <decodeFrame+0x4f0>)
 8002c72:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8002c76:	f023 0302 	bic.w	r3, r3, #2
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	4b7b      	ldr	r3, [pc, #492]	; (8002e6c <decodeFrame+0x4f0>)
 8002c7e:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
 8002c82:	4b7a      	ldr	r3, [pc, #488]	; (8002e6c <decodeFrame+0x4f0>)
 8002c84:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8002c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c8c:	2b07      	cmp	r3, #7
 8002c8e:	d10d      	bne.n	8002cac <decodeFrame+0x330>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
 8002c90:	4a76      	ldr	r2, [pc, #472]	; (8002e6c <decodeFrame+0x4f0>)
 8002c92:	7bbb      	ldrb	r3, [r7, #14]
 8002c94:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 8002c98:	7cbb      	ldrb	r3, [r7, #18]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	4a74      	ldr	r2, [pc, #464]	; (8002e70 <decodeFrame+0x4f4>)
 8002ca0:	56d2      	ldrsb	r2, [r2, r3]
 8002ca2:	7b7b      	ldrb	r3, [r7, #13]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	2004      	movs	r0, #4
 8002ca8:	f7ff fa02 	bl	80020b0 <setDrTxpow>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 8002cac:	4b6f      	ldr	r3, [pc, #444]	; (8002e6c <decodeFrame+0x4f0>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
            continue;
 8002cb4:	e159      	b.n	8002f6a <decodeFrame+0x5ee>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
 8002cb6:	4b6d      	ldr	r3, [pc, #436]	; (8002e6c <decodeFrame+0x4f0>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
            oidx += 1;
 8002cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	65bb      	str	r3, [r7, #88]	; 0x58
            continue;
 8002cc4:	e151      	b.n	8002f6a <decodeFrame+0x5ee>
        }
        case MCMD_DN2P_SET: {
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
 8002cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc8:	3301      	adds	r3, #1
 8002cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ccc:	4413      	add	r3, r2
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	76bb      	strb	r3, [r7, #26]
            u4_t freq = convFreq(&opts[oidx+2]);
 8002cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd8:	3302      	adds	r3, #2
 8002cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cdc:	4413      	add	r3, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fb14 	bl	800230c <convFreq>
 8002ce4:	6178      	str	r0, [r7, #20]
            oidx += 5;
 8002ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ce8:	3305      	adds	r3, #5
 8002cea:	65bb      	str	r3, [r7, #88]	; 0x58
            LMIC.dn2Ans = 0x80;   // answer pending
 8002cec:	4b5f      	ldr	r3, [pc, #380]	; (8002e6c <decodeFrame+0x4f0>)
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            if( validDR(dr) )
 8002cf4:	7ebb      	ldrb	r3, [r7, #26]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fc5e 	bl	80015b8 <validDR>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d008      	beq.n	8002d14 <decodeFrame+0x398>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 8002d02:	4b5a      	ldr	r3, [pc, #360]	; (8002e6c <decodeFrame+0x4f0>)
 8002d04:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4b57      	ldr	r3, [pc, #348]	; (8002e6c <decodeFrame+0x4f0>)
 8002d10:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            if( freq != 0 )
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <decodeFrame+0x3b0>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 8002d1a:	4b54      	ldr	r3, [pc, #336]	; (8002e6c <decodeFrame+0x4f0>)
 8002d1c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4b51      	ldr	r3, [pc, #324]	; (8002e6c <decodeFrame+0x4f0>)
 8002d28:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
 8002d2c:	4b4f      	ldr	r3, [pc, #316]	; (8002e6c <decodeFrame+0x4f0>)
 8002d2e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002d32:	2b83      	cmp	r3, #131	; 0x83
 8002d34:	f040 8119 	bne.w	8002f6a <decodeFrame+0x5ee>
                LMIC.dn2Dr = dr;
 8002d38:	4a4c      	ldr	r2, [pc, #304]	; (8002e6c <decodeFrame+0x4f0>)
 8002d3a:	7ebb      	ldrb	r3, [r7, #26]
 8002d3c:	f882 312b 	strb.w	r3, [r2, #299]	; 0x12b
                LMIC.dn2Freq = freq;
 8002d40:	4a4a      	ldr	r2, [pc, #296]	; (8002e6c <decodeFrame+0x4f0>)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
                DO_DEVDB(LMIC.dn2Dr,dn2Dr);
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
            continue;
 8002d48:	e10f      	b.n	8002f6a <decodeFrame+0x5ee>
        }
        case MCMD_DCAP_REQ: {
            u1_t cap = opts[oidx+1];
 8002d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d50:	4413      	add	r3, r2
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	74fb      	strb	r3, [r7, #19]
            oidx += 2;
 8002d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d58:	3302      	adds	r3, #2
 8002d5a:	65bb      	str	r3, [r7, #88]	; 0x58
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
 8002d5c:	7cfb      	ldrb	r3, [r7, #19]
 8002d5e:	2bff      	cmp	r3, #255	; 0xff
 8002d60:	d108      	bne.n	8002d74 <decodeFrame+0x3f8>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 8002d62:	4b42      	ldr	r3, [pc, #264]	; (8002e6c <decodeFrame+0x4f0>)
 8002d64:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <decodeFrame+0x4f0>)
 8002d70:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            LMIC.globalDutyRate  = cap & 0xF;
 8002d74:	7cfb      	ldrb	r3, [r7, #19]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <decodeFrame+0x4f0>)
 8002d7e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
            LMIC.globalDutyAvail = os_getTime();
 8002d82:	f001 fff9 	bl	8004d78 <os_getTime>
 8002d86:	4602      	mov	r2, r0
 8002d88:	4b38      	ldr	r3, [pc, #224]	; (8002e6c <decodeFrame+0x4f0>)
 8002d8a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
 8002d8e:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <decodeFrame+0x4f0>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            continue;
 8002d96:	e0e8      	b.n	8002f6a <decodeFrame+0x5ee>
        }
        case MCMD_SNCH_REQ: {
            u1_t chidx = opts[oidx+1];  // channel
 8002d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d9e:	4413      	add	r3, r2
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            u4_t freq  = convFreq(&opts[oidx+2]); // freq
 8002da6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002da8:	3302      	adds	r3, #2
 8002daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dac:	4413      	add	r3, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff faac 	bl	800230c <convFreq>
 8002db4:	61f8      	str	r0, [r7, #28]
            u1_t drs   = opts[oidx+5];  // datarate span
 8002db6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002db8:	3305      	adds	r3, #5
 8002dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dbc:	4413      	add	r3, r2
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	76fb      	strb	r3, [r7, #27]
            LMIC.snchAns = 0x80;
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <decodeFrame+0x4f0>)
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d027      	beq.n	8002e20 <decodeFrame+0x4a4>
 8002dd0:	7efb      	ldrb	r3, [r7, #27]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	b21a      	sxth	r2, r3
 8002de0:	7efb      	ldrb	r3, [r7, #27]
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f1c3 030f 	rsb	r3, r3, #15
 8002dea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002dee:	fa41 f303 	asr.w	r3, r1, r3
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	4013      	ands	r3, r2
 8002df6:	b21b      	sxth	r3, r3
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002e02:	69f9      	ldr	r1, [r7, #28]
 8002e04:	f7ff fa08 	bl	8002218 <LMIC_setupChannel>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <decodeFrame+0x4a4>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <decodeFrame+0x4f0>)
 8002e10:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8002e14:	f043 0303 	orr.w	r3, r3, #3
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <decodeFrame+0x4f0>)
 8002e1c:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
            oidx += 6;
 8002e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e22:	3306      	adds	r3, #6
 8002e24:	65bb      	str	r3, [r7, #88]	; 0x58
            continue;
 8002e26:	e0a0      	b.n	8002f6a <decodeFrame+0x5ee>
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
 8002e28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e2e:	4413      	add	r3, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fa6b 	bl	800230c <convFreq>
 8002e36:	6278      	str	r0, [r7, #36]	; 0x24
            oidx += 4;
 8002e38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	65bb      	str	r3, [r7, #88]	; 0x58
            u1_t flags = 0x80;
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            if( freq != 0 ) {
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <decodeFrame+0x4e2>
                flags |= MCMD_PING_ANS_FQACK;
 8002e4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                LMIC.ping.freq = freq;
 8002e56:	4a05      	ldr	r2, [pc, #20]	; (8002e6c <decodeFrame+0x4f0>)
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
 8002e5e:	4a03      	ldr	r2, [pc, #12]	; (8002e6c <decodeFrame+0x4f0>)
 8002e60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e64:	f882 3133 	strb.w	r3, [r2, #307]	; 0x133
            continue;
 8002e68:	e07f      	b.n	8002f6a <decodeFrame+0x5ee>
 8002e6a:	bf00      	nop
 8002e6c:	20000304 	.word	0x20000304
 8002e70:	0800ccdc 	.word	0x0800ccdc
        }
        case MCMD_BCNI_ANS: {
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
 8002e74:	4b76      	ldr	r3, [pc, #472]	; (8003050 <decodeFrame+0x6d4>)
 8002e76:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d16f      	bne.n	8002f62 <decodeFrame+0x5e6>
                LMIC.bcnChnl = opts[oidx+3];
 8002e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e84:	3303      	adds	r3, #3
 8002e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e88:	4413      	add	r3, r2
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	4b70      	ldr	r3, [pc, #448]	; (8003050 <decodeFrame+0x6d4>)
 8002e8e:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
 8002e92:	4b6f      	ldr	r3, [pc, #444]	; (8003050 <decodeFrame+0x6d4>)
 8002e94:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002e98:	f043 0302 	orr.w	r3, r3, #2
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	4b6c      	ldr	r3, [pc, #432]	; (8003050 <decodeFrame+0x6d4>)
 8002ea0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
 8002ea4:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <decodeFrame+0x6d4>)
 8002ea6:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <decodeFrame+0x536>
 8002eae:	f7fe faa5 	bl	80013fc <hal_failed>
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8002eb2:	4b67      	ldr	r3, [pc, #412]	; (8003050 <decodeFrame+0x6d4>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	607b      	str	r3, [r7, #4]
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
 8002eb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eba:	3301      	adds	r3, #1
 8002ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ebe:	4413      	add	r3, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe fba8 	bl	8001616 <os_rlsbf2>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	b29d      	uxth	r5, r3
 8002eca:	f04f 0600 	mov.w	r6, #0
 8002ece:	462b      	mov	r3, r5
 8002ed0:	4634      	mov	r4, r6
 8002ed2:	f04f 0100 	mov.w	r1, #0
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	0162      	lsls	r2, r4, #5
 8002edc:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002ee0:	0159      	lsls	r1, r3, #5
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4614      	mov	r4, r2
 8002ee6:	1b5b      	subs	r3, r3, r5
 8002ee8:	eb64 0406 	sbc.w	r4, r4, r6
 8002eec:	f04f 0100 	mov.w	r1, #0
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	00a2      	lsls	r2, r4, #2
 8002ef6:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002efa:	0099      	lsls	r1, r3, #2
 8002efc:	460b      	mov	r3, r1
 8002efe:	4614      	mov	r4, r2
 8002f00:	195b      	adds	r3, r3, r5
 8002f02:	eb44 0406 	adc.w	r4, r4, r6
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	0122      	lsls	r2, r4, #4
 8002f10:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8002f14:	0119      	lsls	r1, r3, #4
 8002f16:	1ac9      	subs	r1, r1, r3
 8002f18:	eb62 0204 	sbc.w	r2, r2, r4
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	f04f 0400 	mov.w	r4, #0
 8002f24:	0254      	lsls	r4, r2, #9
 8002f26:	ea44 54d1 	orr.w	r4, r4, r1, lsr #23
 8002f2a:	024b      	lsls	r3, r1, #9
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4622      	mov	r2, r4
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	f7fd f944 	bl	80001c8 <__aeabi_ldivmod>
 8002f40:	4603      	mov	r3, r0
 8002f42:	460c      	mov	r4, r1
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	441a      	add	r2, r3
                                       + ms2osticksCeil(MCMD_BCNI_TUNIT/2)
                                       - BCN_INTV_osticks);
 8002f48:	4b42      	ldr	r3, [pc, #264]	; (8003054 <decodeFrame+0x6d8>)
 8002f4a:	4413      	add	r3, r2
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8002f4c:	4a40      	ldr	r2, [pc, #256]	; (8003050 <decodeFrame+0x6d4>)
 8002f4e:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
                LMIC.bcninfo.flags = 0;  // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 8002f52:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <decodeFrame+0x6d4>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
                calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT,1);  // error of +/-N ms 
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	201e      	movs	r0, #30
 8002f5e:	f7fe feb3 	bl	8001cc8 <calcBcnRxWindowFromMillis>
                                     e_.info    = (LMIC.missedBcns |
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
            oidx += 4;
 8002f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f64:	3304      	adds	r3, #4
 8002f66:	65bb      	str	r3, [r7, #88]	; 0x58
            continue;
 8002f68:	bf00      	nop
    while( oidx < olen ) {
 8002f6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	f6ff ae05 	blt.w	8002b7e <decodeFrame+0x202>
 8002f74:	e000      	b.n	8002f78 <decodeFrame+0x5fc>
        }
        EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = Base::lsbf4(&d[pend]),
                           e_.info2  = Base::msbf4(&opts[oidx])));
        break;
 8002f76:	bf00      	nop
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
 8002f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d11d      	bne.n	8002fba <decodeFrame+0x63e>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
 8002f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	db1a      	blt.n	8002fba <decodeFrame+0x63e>
 8002f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	dd15      	ble.n	8002fba <decodeFrame+0x63e>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
 8002f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	dc01      	bgt.n	8002f98 <decodeFrame+0x61c>
 8002f94:	4830      	ldr	r0, [pc, #192]	; (8003058 <decodeFrame+0x6dc>)
 8002f96:	e000      	b.n	8002f9a <decodeFrame+0x61e>
 8002f98:	4830      	ldr	r0, [pc, #192]	; (800305c <decodeFrame+0x6e0>)
 8002f9a:	4b2d      	ldr	r3, [pc, #180]	; (8003050 <decodeFrame+0x6d4>)
 8002f9c:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
 8002fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fa2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002fa4:	4413      	add	r3, r2
 8002fa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fa8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002faa:	1a8a      	subs	r2, r1, r2
 8002fac:	9201      	str	r2, [sp, #4]
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	f7fe fcfb 	bl	80019b0 <aes_cipher>
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = Base::lsbf4(&d[pend]),
                            e_.info2  = seqno));
    }

    if( // NWK acks but we don't have a frame pending
 8002fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbc:	2b00      	cmp	r3, #0
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
 8002fbe:	4b24      	ldr	r3, [pc, #144]	; (8003050 <decodeFrame+0x6d4>)
 8002fc0:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d010      	beq.n	8002fea <decodeFrame+0x66e>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 8002fc8:	4b21      	ldr	r3, [pc, #132]	; (8003050 <decodeFrame+0x6d4>)
 8002fca:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fd2:	2a00      	cmp	r2, #0
 8002fd4:	d002      	beq.n	8002fdc <decodeFrame+0x660>
 8002fd6:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002fda:	e000      	b.n	8002fde <decodeFrame+0x662>
 8002fdc:	2240      	movs	r2, #64	; 0x40
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	b25b      	sxtb	r3, r3
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <decodeFrame+0x6d4>)
 8002fe6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145

    if( port < 0 ) {
 8002fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	da12      	bge.n	8003016 <decodeFrame+0x69a>
        LMIC.txrxFlags |= TXRX_NOPORT;
 8002ff0:	4b17      	ldr	r3, [pc, #92]	; (8003050 <decodeFrame+0x6d4>)
 8002ff2:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8002ff6:	f043 0320 	orr.w	r3, r3, #32
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	4b14      	ldr	r3, [pc, #80]	; (8003050 <decodeFrame+0x6d4>)
 8002ffe:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        LMIC.dataBeg = poff;
 8003002:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <decodeFrame+0x6d4>)
 8003008:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
        LMIC.dataLen = 0;
 800300c:	4b10      	ldr	r3, [pc, #64]	; (8003050 <decodeFrame+0x6d4>)
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8003014:	e016      	b.n	8003044 <decodeFrame+0x6c8>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
 8003016:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <decodeFrame+0x6d4>)
 8003018:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 800301c:	f043 0310 	orr.w	r3, r3, #16
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <decodeFrame+0x6d4>)
 8003024:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        LMIC.dataBeg = poff;
 8003028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800302a:	b2da      	uxtb	r2, r3
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <decodeFrame+0x6d4>)
 800302e:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
        LMIC.dataLen = pend-poff;
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	b2da      	uxtb	r2, r3
 8003036:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003038:	b2db      	uxtb	r3, r3
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <decodeFrame+0x6d4>)
 8003040:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    }
    return 1;
 8003044:	2301      	movs	r3, #1
}
 8003046:	4618      	mov	r0, r3
 8003048:	376c      	adds	r7, #108	; 0x6c
 800304a:	46bd      	mov	sp, r7
 800304c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800304e:	bf00      	nop
 8003050:	20000304 	.word	0x20000304
 8003054:	ffc181e0 	.word	0xffc181e0
 8003058:	200003f8 	.word	0x200003f8
 800305c:	20000408 	.word	0x20000408

08003060 <setupRx2>:

// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
    LMIC.txrxFlags = TXRX_DNW2;
 8003064:	4b0d      	ldr	r3, [pc, #52]	; (800309c <setupRx2+0x3c>)
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <setupRx2+0x3c>)
 800306e:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fa74 	bl	8001560 <dndr2rps>
 8003078:	4603      	mov	r3, r0
 800307a:	461a      	mov	r2, r3
 800307c:	4b07      	ldr	r3, [pc, #28]	; (800309c <setupRx2+0x3c>)
 800307e:	81da      	strh	r2, [r3, #14]
    LMIC.freq = LMIC.dn2Freq;
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <setupRx2+0x3c>)
 8003082:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8003086:	4a05      	ldr	r2, [pc, #20]	; (800309c <setupRx2+0x3c>)
 8003088:	6093      	str	r3, [r2, #8]
    LMIC.dataLen = 0;
 800308a:	4b04      	ldr	r3, [pc, #16]	; (800309c <setupRx2+0x3c>)
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    os_radio(RADIO_RX);
 8003092:	2002      	movs	r0, #2
 8003094:	f002 fc92 	bl	80059bc <os_radio>
}
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20000304 	.word	0x20000304

080030a0 <schedRx2>:


static void schedRx2 (ostime_t delay, osjobcb_t func) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <schedRx2+0x44>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	18d1      	adds	r1, r2, r3
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <schedRx2+0x44>)
 80030b4:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <schedRx2+0x48>)
 80030bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	440b      	add	r3, r1
 80030c8:	4a06      	ldr	r2, [pc, #24]	; (80030e4 <schedRx2+0x44>)
 80030ca:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <schedRx2+0x44>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	3b40      	subs	r3, #64	; 0x40
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	4619      	mov	r1, r3
 80030d6:	4805      	ldr	r0, [pc, #20]	; (80030ec <schedRx2+0x4c>)
 80030d8:	f001 feb8 	bl	8004e4c <os_setTimedCallback>
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000304 	.word	0x20000304
 80030e8:	0800cd10 	.word	0x0800cd10
 80030ec:	20000318 	.word	0x20000318

080030f0 <setupRx1>:

static void setupRx1 (osjobcb_t func) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
    LMIC.txrxFlags = TXRX_DNW1;
 80030f8:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <setupRx1+0x40>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <setupRx1+0x40>)
 8003102:	89db      	ldrh	r3, [r3, #14]
 8003104:	2101      	movs	r1, #1
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe f9dc 	bl	80014c4 <setNocrc>
 800310c:	4603      	mov	r3, r0
 800310e:	461a      	mov	r2, r3
 8003110:	4b07      	ldr	r3, [pc, #28]	; (8003130 <setupRx1+0x40>)
 8003112:	81da      	strh	r2, [r3, #14]
    LMIC.dataLen = 0;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <setupRx1+0x40>)
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    LMIC.osjob.func = func;
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <setupRx1+0x40>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	61d3      	str	r3, [r2, #28]
    os_radio(RADIO_RX);
 8003122:	2002      	movs	r0, #2
 8003124:	f002 fc4a 	bl	80059bc <os_radio>
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000304 	.word	0x20000304

08003134 <txDone>:


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
 800313e:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <txDone+0x94>)
 8003140:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003144:	461a      	mov	r2, r3
 8003146:	f240 6302 	movw	r3, #1538	; 0x602
 800314a:	4013      	ands	r3, r2
 800314c:	f240 4202 	movw	r2, #1026	; 0x402
 8003150:	4293      	cmp	r3, r2
 8003152:	d10b      	bne.n	800316c <txDone+0x38>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 8003154:	481d      	ldr	r0, [pc, #116]	; (80031cc <txDone+0x98>)
 8003156:	f7fe fe35 	bl	8001dc4 <rxschedInit>
        LMIC.opmode |= OP_PINGINI;
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <txDone+0x94>)
 800315c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003160:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003164:	b29a      	uxth	r2, r3
 8003166:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <txDone+0x94>)
 8003168:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    setRx1Params();
    // LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
    // Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
    // into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
    if( /* TX datarate */LMIC.rxsyms == DR_FSK ) {
 800316c:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <txDone+0x94>)
 800316e:	7c1b      	ldrb	r3, [r3, #16]
 8003170:	2b07      	cmp	r3, #7
 8003172:	d10a      	bne.n	800318a <txDone+0x56>
        LMIC.rxtime = LMIC.txend + delay - PRERX_FSK*us2osticksRound(160);
 8003174:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <txDone+0x94>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4413      	add	r3, r2
 800317c:	3b05      	subs	r3, #5
 800317e:	4a12      	ldr	r2, [pc, #72]	; (80031c8 <txDone+0x94>)
 8003180:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = RXLEN_FSK;
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <txDone+0x94>)
 8003184:	2208      	movs	r2, #8
 8003186:	741a      	strb	r2, [r3, #16]
 8003188:	e012      	b.n	80031b0 <txDone+0x7c>
    }
    else
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <txDone+0x94>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	18d1      	adds	r1, r2, r3
 8003192:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <txDone+0x94>)
 8003194:	7c5b      	ldrb	r3, [r3, #17]
 8003196:	461a      	mov	r2, r3
 8003198:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <txDone+0x9c>)
 800319a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	440b      	add	r3, r1
 80031a6:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <txDone+0x94>)
 80031a8:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = MINRX_SYMS;
 80031aa:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <txDone+0x94>)
 80031ac:	2205      	movs	r2, #5
 80031ae:	741a      	strb	r2, [r3, #16]
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <txDone+0x94>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	3b40      	subs	r3, #64	; 0x40
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	4619      	mov	r1, r3
 80031ba:	4806      	ldr	r0, [pc, #24]	; (80031d4 <txDone+0xa0>)
 80031bc:	f001 fe46 	bl	8004e4c <os_setTimedCallback>
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000304 	.word	0x20000304
 80031cc:	20000438 	.word	0x20000438
 80031d0:	0800cd10 	.word	0x0800cd10
 80031d4:	20000318 	.word	0x20000318

080031d8 <onJoinFailed>:


// ======================================== Join frames


static void onJoinFailed (xref2osjob_t osjob) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
 80031e0:	2008      	movs	r0, #8
 80031e2:	f7ff fab3 	bl	800274c <reportEvent>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <processJoinAccept>:


static bit_t processJoinAccept (void) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 80031f6:	4b99      	ldr	r3, [pc, #612]	; (800345c <processJoinAccept+0x26c>)
 80031f8:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d106      	bne.n	800320e <processJoinAccept+0x1e>
 8003200:	4b96      	ldr	r3, [pc, #600]	; (800345c <processJoinAccept+0x26c>)
 8003202:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <processJoinAccept+0x1e>
 800320a:	f7fe f8f7 	bl	80013fc <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 800320e:	4b93      	ldr	r3, [pc, #588]	; (800345c <processJoinAccept+0x26c>)
 8003210:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <processJoinAccept+0x30>
 800321c:	f7fe f8ee 	bl	80013fc <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8003220:	4b8e      	ldr	r3, [pc, #568]	; (800345c <processJoinAccept+0x26c>)
 8003222:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003226:	2b00      	cmp	r3, #0
 8003228:	d14c      	bne.n	80032c4 <processJoinAccept+0xd4>
      nojoinframe:
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <processJoinAccept+0x40>
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
 800322e:	bf00      	nop
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
 8003230:	4b8a      	ldr	r3, [pc, #552]	; (800345c <processJoinAccept+0x26c>)
 8003232:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d123      	bne.n	8003286 <processJoinAccept+0x96>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 800323e:	4b87      	ldr	r3, [pc, #540]	; (800345c <processJoinAccept+0x26c>)
 8003240:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <processJoinAccept+0x60>
 800324c:	f7fe f8d6 	bl	80013fc <hal_failed>
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
 8003250:	4b82      	ldr	r3, [pc, #520]	; (800345c <processJoinAccept+0x26c>)
 8003252:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003256:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800325a:	b29a      	uxth	r2, r3
 800325c:	4b7f      	ldr	r3, [pc, #508]	; (800345c <processJoinAccept+0x26c>)
 800325e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            if( LMIC.rejoinCnt < 10 )
 8003262:	4b7e      	ldr	r3, [pc, #504]	; (800345c <processJoinAccept+0x26c>)
 8003264:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8003268:	2b09      	cmp	r3, #9
 800326a:	d807      	bhi.n	800327c <processJoinAccept+0x8c>
                LMIC.rejoinCnt++;
 800326c:	4b7b      	ldr	r3, [pc, #492]	; (800345c <processJoinAccept+0x26c>)
 800326e:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8003272:	3301      	adds	r3, #1
 8003274:	b2da      	uxtb	r2, r3
 8003276:	4b79      	ldr	r3, [pc, #484]	; (800345c <processJoinAccept+0x26c>)
 8003278:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
            reportEvent(EV_REJOIN_FAILED);
 800327c:	2009      	movs	r0, #9
 800327e:	f7ff fa65 	bl	800274c <reportEvent>
            return 1;
 8003282:	2301      	movs	r3, #1
 8003284:	e0e6      	b.n	8003454 <processJoinAccept+0x264>
        LMIC.opmode &= ~OP_TXRXPEND;
 8003286:	4b75      	ldr	r3, [pc, #468]	; (800345c <processJoinAccept+0x26c>)
 8003288:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800328c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003290:	b29a      	uxth	r2, r3
 8003292:	4b72      	ldr	r3, [pc, #456]	; (800345c <processJoinAccept+0x26c>)
 8003294:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        ostime_t delay = nextJoinState();
 8003298:	f7ff f9e6 	bl	8002668 <nextJoinState>
 800329c:	6078      	str	r0, [r7, #4]
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800329e:	f001 fd6b 	bl	8004d78 <os_getTime>
 80032a2:	4602      	mov	r2, r0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	18d1      	adds	r1, r2, r3
                            (delay&1) != 0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f003 0301 	and.w	r3, r3, #1
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <processJoinAccept+0xc6>
 80032b2:	4b6b      	ldr	r3, [pc, #428]	; (8003460 <processJoinAccept+0x270>)
 80032b4:	e000      	b.n	80032b8 <processJoinAccept+0xc8>
 80032b6:	4b6b      	ldr	r3, [pc, #428]	; (8003464 <processJoinAccept+0x274>)
 80032b8:	461a      	mov	r2, r3
 80032ba:	486b      	ldr	r0, [pc, #428]	; (8003468 <processJoinAccept+0x278>)
 80032bc:	f001 fdc6 	bl	8004e4c <os_setTimedCallback>
        return 1;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0c7      	b.n	8003454 <processJoinAccept+0x264>
    u1_t hdr  = LMIC.frame[0];
 80032c4:	4b65      	ldr	r3, [pc, #404]	; (800345c <processJoinAccept+0x26c>)
 80032c6:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80032ca:	757b      	strb	r3, [r7, #21]
    u1_t dlen = LMIC.dataLen;
 80032cc:	4b63      	ldr	r3, [pc, #396]	; (800345c <processJoinAccept+0x26c>)
 80032ce:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80032d2:	75fb      	strb	r3, [r7, #23]
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	3b04      	subs	r3, #4
 80032d8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80032dc:	4a5f      	ldr	r2, [pc, #380]	; (800345c <processJoinAccept+0x26c>)
 80032de:	4413      	add	r3, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe f9ad 	bl	8001640 <os_rlsbf4>
 80032e6:	6138      	str	r0, [r7, #16]
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
 80032e8:	7dfb      	ldrb	r3, [r7, #23]
 80032ea:	2b11      	cmp	r3, #17
 80032ec:	d002      	beq.n	80032f4 <processJoinAccept+0x104>
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
 80032f0:	2b21      	cmp	r3, #33	; 0x21
 80032f2:	d104      	bne.n	80032fe <processJoinAccept+0x10e>
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
 80032f4:	7d7b      	ldrb	r3, [r7, #21]
 80032f6:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	d00b      	beq.n	8003316 <processJoinAccept+0x126>
      badframe:
 80032fe:	bf00      	nop
 8003300:	e000      	b.n	8003304 <processJoinAccept+0x114>
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
 8003302:	bf00      	nop
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8003304:	4b55      	ldr	r3, [pc, #340]	; (800345c <processJoinAccept+0x26c>)
 8003306:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d08d      	beq.n	800322e <processJoinAccept+0x3e>
            return 0;
 8003312:	2300      	movs	r3, #0
 8003314:	e09e      	b.n	8003454 <processJoinAccept+0x264>
    aes_encrypt(LMIC.frame+1, dlen-1);
 8003316:	4a55      	ldr	r2, [pc, #340]	; (800346c <processJoinAccept+0x27c>)
 8003318:	7dfb      	ldrb	r3, [r7, #23]
 800331a:	3b01      	subs	r3, #1
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f7fe fb30 	bl	8001984 <aes_encrypt>
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	3b04      	subs	r3, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4851      	ldr	r0, [pc, #324]	; (8003470 <processJoinAccept+0x280>)
 800332c:	f7fe fb08 	bl	8001940 <aes_verifyMic0>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0e5      	beq.n	8003302 <processJoinAccept+0x112>
    }

    u4_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
 8003336:	4b4f      	ldr	r3, [pc, #316]	; (8003474 <processJoinAccept+0x284>)
 8003338:	4618      	mov	r0, r3
 800333a:	f7fe f981 	bl	8001640 <os_rlsbf4>
 800333e:	60f8      	str	r0, [r7, #12]
    LMIC.devaddr = addr;
 8003340:	4a46      	ldr	r2, [pc, #280]	; (800345c <processJoinAccept+0x26c>)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 8003348:	484b      	ldr	r0, [pc, #300]	; (8003478 <processJoinAccept+0x288>)
 800334a:	f7fe f979 	bl	8001640 <os_rlsbf4>
 800334e:	4603      	mov	r3, r0
 8003350:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003354:	4a41      	ldr	r2, [pc, #260]	; (800345c <processJoinAccept+0x26c>)
 8003356:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

#if defined(CFG_eu868)
    initDefaultChannels(0);
 800335a:	2000      	movs	r0, #0
 800335c:	f7fe fed6 	bl	800210c <initDefaultChannels>
#endif
    if( dlen > LEN_JA ) {
 8003360:	7dfb      	ldrb	r3, [r7, #23]
 8003362:	2b11      	cmp	r3, #17
 8003364:	d920      	bls.n	80033a8 <processJoinAccept+0x1b8>
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
 8003366:	230d      	movs	r3, #13
 8003368:	75fb      	strb	r3, [r7, #23]
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 800336a:	2303      	movs	r3, #3
 800336c:	75bb      	strb	r3, [r7, #22]
 800336e:	e018      	b.n	80033a2 <processJoinAccept+0x1b2>
            u4_t freq = convFreq(&LMIC.frame[dlen]);
 8003370:	7dfb      	ldrb	r3, [r7, #23]
 8003372:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003376:	4a39      	ldr	r2, [pc, #228]	; (800345c <processJoinAccept+0x26c>)
 8003378:	4413      	add	r3, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe ffc6 	bl	800230c <convFreq>
 8003380:	60b8      	str	r0, [r7, #8]
            if( freq )
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d006      	beq.n	8003396 <processJoinAccept+0x1a6>
                LMIC_setupChannel(chidx, freq, 0, -1);
 8003388:	7db8      	ldrb	r0, [r7, #22]
 800338a:	f04f 33ff 	mov.w	r3, #4294967295
 800338e:	2200      	movs	r2, #0
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	f7fe ff41 	bl	8002218 <LMIC_setupChannel>
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003396:	7dbb      	ldrb	r3, [r7, #22]
 8003398:	3301      	adds	r3, #1
 800339a:	75bb      	strb	r3, [r7, #22]
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	3303      	adds	r3, #3
 80033a0:	75fb      	strb	r3, [r7, #23]
 80033a2:	7dbb      	ldrb	r3, [r7, #22]
 80033a4:	2b07      	cmp	r3, #7
 80033a6:	d9e3      	bls.n	8003370 <processJoinAccept+0x180>
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
 80033a8:	4b2c      	ldr	r3, [pc, #176]	; (800345c <processJoinAccept+0x26c>)
 80033aa:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b298      	uxth	r0, r3
 80033b2:	4b32      	ldr	r3, [pc, #200]	; (800347c <processJoinAccept+0x28c>)
 80033b4:	4a32      	ldr	r2, [pc, #200]	; (8003480 <processJoinAccept+0x290>)
 80033b6:	492d      	ldr	r1, [pc, #180]	; (800346c <processJoinAccept+0x27c>)
 80033b8:	f7fe fb3e 	bl	8001a38 <aes_sessKeys>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
 80033bc:	4b27      	ldr	r3, [pc, #156]	; (800345c <processJoinAccept+0x26c>)
 80033be:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80033c2:	f003 0324 	and.w	r3, r3, #36	; 0x24
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <processJoinAccept+0x1de>
 80033ca:	f7fe f817 	bl	80013fc <hal_failed>
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 80033ce:	4b23      	ldr	r3, [pc, #140]	; (800345c <processJoinAccept+0x26c>)
 80033d0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00e      	beq.n	80033fa <processJoinAccept+0x20a>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 80033dc:	4b1f      	ldr	r3, [pc, #124]	; (800345c <processJoinAccept+0x26c>)
 80033de:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 80033e2:	4b1e      	ldr	r3, [pc, #120]	; (800345c <processJoinAccept+0x26c>)
 80033e4:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 80033e8:	4619      	mov	r1, r3
 80033ea:	4610      	mov	r0, r2
 80033ec:	f7fe f8fa 	bl	80015e4 <lowerDR>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	4b19      	ldr	r3, [pc, #100]	; (800345c <processJoinAccept+0x26c>)
 80033f6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
 80033fa:	4b18      	ldr	r3, [pc, #96]	; (800345c <processJoinAccept+0x26c>)
 80033fc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003400:	f423 7329 	bic.w	r3, r3, #676	; 0x2a4
 8003404:	f023 0302 	bic.w	r3, r3, #2
 8003408:	b29a      	uxth	r2, r3
 800340a:	4b14      	ldr	r3, [pc, #80]	; (800345c <processJoinAccept+0x26c>)
 800340c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    LMIC.txCnt = 0;
 8003410:	4b12      	ldr	r3, [pc, #72]	; (800345c <processJoinAccept+0x26c>)
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
    stateJustJoined();
 8003418:	f7ff f9b6 	bl	8002788 <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 800341c:	4b0f      	ldr	r3, [pc, #60]	; (800345c <processJoinAccept+0x26c>)
 800341e:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	b2da      	uxtb	r2, r3
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <processJoinAccept+0x26c>)
 800342a:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 800342e:	4b0b      	ldr	r3, [pc, #44]	; (800345c <processJoinAccept+0x26c>)
 8003430:	f893 2154 	ldrb.w	r2, [r3, #340]	; 0x154
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <processJoinAccept+0x26c>)
 8003436:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;   
 800343a:	4b08      	ldr	r3, [pc, #32]	; (800345c <processJoinAccept+0x26c>)
 800343c:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8003440:	2b00      	cmp	r3, #0
 8003442:	d103      	bne.n	800344c <processJoinAccept+0x25c>
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <processJoinAccept+0x26c>)
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
    reportEvent(EV_JOINED);
 800344c:	2006      	movs	r0, #6
 800344e:	f7ff f97d 	bl	800274c <reportEvent>
    return 1;
 8003452:	2301      	movs	r3, #1
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000304 	.word	0x20000304
 8003460:	080031d9 	.word	0x080031d9
 8003464:	08002739 	.word	0x08002739
 8003468:	20000318 	.word	0x20000318
 800346c:	2000044d 	.word	0x2000044d
 8003470:	2000044c 	.word	0x2000044c
 8003474:	20000453 	.word	0x20000453
 8003478:	20000450 	.word	0x20000450
 800347c:	20000408 	.word	0x20000408
 8003480:	200003f8 	.word	0x200003f8

08003484 <processRx2Jacc>:


static void processRx2Jacc (xref2osjob_t osjob) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 )
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <processRx2Jacc+0x28>)
 800348e:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <processRx2Jacc+0x1a>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8003496:	4b05      	ldr	r3, [pc, #20]	; (80034ac <processRx2Jacc+0x28>)
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    processJoinAccept();
 800349e:	f7ff fea7 	bl	80031f0 <processJoinAccept>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000304 	.word	0x20000304

080034b0 <setupRx2Jacc>:


static void setupRx2Jacc (xref2osjob_t osjob) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 80034b8:	4b04      	ldr	r3, [pc, #16]	; (80034cc <setupRx2Jacc+0x1c>)
 80034ba:	4a05      	ldr	r2, [pc, #20]	; (80034d0 <setupRx2Jacc+0x20>)
 80034bc:	61da      	str	r2, [r3, #28]
    setupRx2();
 80034be:	f7ff fdcf 	bl	8003060 <setupRx2>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000304 	.word	0x20000304
 80034d0:	08003485 	.word	0x08003485

080034d4 <processRx1Jacc>:


static void processRx1Jacc (xref2osjob_t osjob) {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processJoinAccept() )
 80034dc:	4b08      	ldr	r3, [pc, #32]	; (8003500 <processRx1Jacc+0x2c>)
 80034de:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d004      	beq.n	80034f0 <processRx1Jacc+0x1c>
 80034e6:	f7ff fe83 	bl	80031f0 <processJoinAccept>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d103      	bne.n	80034f8 <processRx1Jacc+0x24>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 80034f0:	4904      	ldr	r1, [pc, #16]	; (8003504 <processRx1Jacc+0x30>)
 80034f2:	4805      	ldr	r0, [pc, #20]	; (8003508 <processRx1Jacc+0x34>)
 80034f4:	f7ff fdd4 	bl	80030a0 <schedRx2>
}
 80034f8:	bf00      	nop
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20000304 	.word	0x20000304
 8003504:	080034b1 	.word	0x080034b1
 8003508:	0002ee00 	.word	0x0002ee00

0800350c <setupRx1Jacc>:


static void setupRx1Jacc (xref2osjob_t osjob) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1Jacc));
 8003514:	4803      	ldr	r0, [pc, #12]	; (8003524 <setupRx1Jacc+0x18>)
 8003516:	f7ff fdeb 	bl	80030f0 <setupRx1>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	080034d5 	.word	0x080034d5

08003528 <jreqDone>:


static void jreqDone (xref2osjob_t osjob) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 8003530:	4903      	ldr	r1, [pc, #12]	; (8003540 <jreqDone+0x18>)
 8003532:	4804      	ldr	r0, [pc, #16]	; (8003544 <jreqDone+0x1c>)
 8003534:	f7ff fdfe 	bl	8003134 <txDone>
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	0800350d 	.word	0x0800350d
 8003544:	00027100 	.word	0x00027100

08003548 <processRx2DnDataDelay>:
// ======================================== Data frames

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay (xref2osjob_t osjob) {
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
    processDnData();
 8003550:	f000 fbc6 	bl	8003ce0 <processDnData>
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <processRx2DnData>:

static void processRx2DnData (xref2osjob_t osjob) {
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 ) {
 8003564:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <processRx2DnData+0x48>)
 8003566:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 800356a:	2b00      	cmp	r3, #0
 800356c:	d115      	bne.n	800359a <processRx2DnData+0x3e>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 800356e:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <processRx2DnData+0x48>)
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 8003576:	f001 fbff 	bl	8004d78 <os_getTime>
 800357a:	4603      	mov	r3, r0
 800357c:	f503 34bb 	add.w	r4, r3, #95744	; 0x17600
 8003580:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8003584:	2002      	movs	r0, #2
 8003586:	f7fe fd13 	bl	8001fb0 <rndDelay>
 800358a:	4603      	mov	r3, r0
        os_setTimedCallback(&LMIC.osjob,
 800358c:	4423      	add	r3, r4
 800358e:	4a06      	ldr	r2, [pc, #24]	; (80035a8 <processRx2DnData+0x4c>)
 8003590:	4619      	mov	r1, r3
 8003592:	4806      	ldr	r0, [pc, #24]	; (80035ac <processRx2DnData+0x50>)
 8003594:	f001 fc5a 	bl	8004e4c <os_setTimedCallback>
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
 8003598:	e001      	b.n	800359e <processRx2DnData+0x42>
    }
    processDnData();
 800359a:	f000 fba1 	bl	8003ce0 <processDnData>
}
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd90      	pop	{r4, r7, pc}
 80035a4:	20000304 	.word	0x20000304
 80035a8:	08003549 	.word	0x08003549
 80035ac:	20000318 	.word	0x20000318

080035b0 <setupRx2DnData>:


static void setupRx2DnData (xref2osjob_t osjob) {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <setupRx2DnData+0x1c>)
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <setupRx2DnData+0x20>)
 80035bc:	61da      	str	r2, [r3, #28]
    setupRx2();
 80035be:	f7ff fd4f 	bl	8003060 <setupRx2>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000304 	.word	0x20000304
 80035d0:	0800355d 	.word	0x0800355d

080035d4 <processRx1DnData>:


static void processRx1DnData (xref2osjob_t osjob) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processDnData() )
 80035dc:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <processRx1DnData+0x40>)
 80035de:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d004      	beq.n	80035f0 <processRx1DnData+0x1c>
 80035e6:	f000 fb7b 	bl	8003ce0 <processDnData>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10c      	bne.n	800360a <processRx1DnData+0x36>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <processRx1DnData+0x40>)
 80035f2:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 80035f6:	3301      	adds	r3, #1
 80035f8:	461a      	mov	r2, r3
 80035fa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80035fe:	fb03 f302 	mul.w	r3, r3, r2
 8003602:	4905      	ldr	r1, [pc, #20]	; (8003618 <processRx1DnData+0x44>)
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fd4b 	bl	80030a0 <schedRx2>
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000304 	.word	0x20000304
 8003618:	080035b1 	.word	0x080035b1

0800361c <setupRx1DnData>:


static void setupRx1DnData (xref2osjob_t osjob) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1DnData));
 8003624:	4803      	ldr	r0, [pc, #12]	; (8003634 <setupRx1DnData+0x18>)
 8003626:	f7ff fd63 	bl	80030f0 <setupRx1>
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	080035d5 	.word	0x080035d5

08003638 <updataDone>:


static void updataDone (xref2osjob_t osjob) {
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 8003640:	4b07      	ldr	r3, [pc, #28]	; (8003660 <updataDone+0x28>)
 8003642:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8003646:	461a      	mov	r2, r3
 8003648:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800364c:	fb03 f302 	mul.w	r3, r3, r2
 8003650:	4904      	ldr	r1, [pc, #16]	; (8003664 <updataDone+0x2c>)
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fd6e 	bl	8003134 <txDone>
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000304 	.word	0x20000304
 8003664:	0800361d 	.word	0x0800361d

08003668 <buildDataFrame>:

// ======================================== 


static void buildDataFrame (void) {
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b087      	sub	sp, #28
 800366c:	af02      	add	r7, sp, #8
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
 800366e:	4ba3      	ldr	r3, [pc, #652]	; (80038fc <buildDataFrame+0x294>)
 8003670:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003674:	f003 0318 	and.w	r3, r3, #24
 8003678:	2b10      	cmp	r3, #16
 800367a:	bf14      	ite	ne
 800367c:	2301      	movne	r3, #1
 800367e:	2300      	moveq	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	73fb      	strb	r3, [r7, #15]
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <buildDataFrame+0x2a>
 800368a:	4b9c      	ldr	r3, [pc, #624]	; (80038fc <buildDataFrame+0x294>)
 800368c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003690:	e000      	b.n	8003694 <buildDataFrame+0x2c>
 8003692:	2300      	movs	r3, #0
 8003694:	71bb      	strb	r3, [r7, #6]

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
 8003696:	2308      	movs	r3, #8
 8003698:	60bb      	str	r3, [r7, #8]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
 800369a:	4b98      	ldr	r3, [pc, #608]	; (80038fc <buildDataFrame+0x294>)
 800369c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80036a0:	461a      	mov	r2, r3
 80036a2:	f240 4302 	movw	r3, #1026	; 0x402
 80036a6:	4013      	ands	r3, r2
 80036a8:	f240 4202 	movw	r2, #1026	; 0x402
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d11c      	bne.n	80036ea <buildDataFrame+0x82>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
 80036b0:	4a92      	ldr	r2, [pc, #584]	; (80038fc <buildDataFrame+0x294>)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80036ba:	2210      	movs	r2, #16
 80036bc:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
 80036be:	4b8f      	ldr	r3, [pc, #572]	; (80038fc <buildDataFrame+0x294>)
 80036c0:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80036c4:	b25a      	sxtb	r2, r3
 80036c6:	4b8d      	ldr	r3, [pc, #564]	; (80038fc <buildDataFrame+0x294>)
 80036c8:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	b25b      	sxtb	r3, r3
 80036d0:	4313      	orrs	r3, r2
 80036d2:	b25a      	sxtb	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	3301      	adds	r3, #1
 80036d8:	b2d1      	uxtb	r1, r2
 80036da:	4a88      	ldr	r2, [pc, #544]	; (80038fc <buildDataFrame+0x294>)
 80036dc:	4413      	add	r3, r2
 80036de:	460a      	mov	r2, r1
 80036e0:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	3302      	adds	r3, #2
 80036e8:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.dutyCapAns ) {
 80036ea:	4b84      	ldr	r3, [pc, #528]	; (80038fc <buildDataFrame+0x294>)
 80036ec:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00d      	beq.n	8003710 <buildDataFrame+0xa8>
        LMIC.frame[end] = MCMD_DCAP_ANS;
 80036f4:	4a81      	ldr	r2, [pc, #516]	; (80038fc <buildDataFrame+0x294>)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80036fe:	2204      	movs	r2, #4
 8003700:	701a      	strb	r2, [r3, #0]
        end += 1;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	3301      	adds	r3, #1
 8003706:	60bb      	str	r3, [r7, #8]
        LMIC.dutyCapAns = 0;
 8003708:	4b7c      	ldr	r3, [pc, #496]	; (80038fc <buildDataFrame+0x294>)
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
    }
    if( LMIC.dn2Ans ) {
 8003710:	4b7a      	ldr	r3, [pc, #488]	; (80038fc <buildDataFrame+0x294>)
 8003712:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003716:	2b00      	cmp	r3, #0
 8003718:	d01a      	beq.n	8003750 <buildDataFrame+0xe8>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
 800371a:	4a78      	ldr	r2, [pc, #480]	; (80038fc <buildDataFrame+0x294>)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4413      	add	r3, r2
 8003720:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003724:	2205      	movs	r2, #5
 8003726:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 8003728:	4b74      	ldr	r3, [pc, #464]	; (80038fc <buildDataFrame+0x294>)
 800372a:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	3301      	adds	r3, #1
 8003732:	f002 0203 	and.w	r2, r2, #3
 8003736:	b2d1      	uxtb	r1, r2
 8003738:	4a70      	ldr	r2, [pc, #448]	; (80038fc <buildDataFrame+0x294>)
 800373a:	4413      	add	r3, r2
 800373c:	460a      	mov	r2, r1
 800373e:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3302      	adds	r3, #2
 8003746:	60bb      	str	r3, [r7, #8]
        LMIC.dn2Ans = 0;
 8003748:	4b6c      	ldr	r3, [pc, #432]	; (80038fc <buildDataFrame+0x294>)
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }
    if( LMIC.devsAns ) {  // answer to device status
 8003750:	4b6a      	ldr	r3, [pc, #424]	; (80038fc <buildDataFrame+0x294>)
 8003752:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 8003756:	2b00      	cmp	r3, #0
 8003758:	d021      	beq.n	800379e <buildDataFrame+0x136>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
 800375a:	4a68      	ldr	r2, [pc, #416]	; (80038fc <buildDataFrame+0x294>)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4413      	add	r3, r2
 8003760:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003764:	2206      	movs	r2, #6
 8003766:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = os_getBattLevel();
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	1c5c      	adds	r4, r3, #1
 800376c:	f7fd fffb 	bl	8001766 <os_getBattLevel>
 8003770:	4603      	mov	r3, r0
 8003772:	461a      	mov	r2, r3
 8003774:	4b61      	ldr	r3, [pc, #388]	; (80038fc <buildDataFrame+0x294>)
 8003776:	4423      	add	r3, r4
 8003778:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        LMIC.frame[end+2] = LMIC.margin;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	3302      	adds	r3, #2
 8003780:	4a5e      	ldr	r2, [pc, #376]	; (80038fc <buildDataFrame+0x294>)
 8003782:	f892 1124 	ldrb.w	r1, [r2, #292]	; 0x124
 8003786:	4a5d      	ldr	r2, [pc, #372]	; (80038fc <buildDataFrame+0x294>)
 8003788:	4413      	add	r3, r2
 800378a:	460a      	mov	r2, r1
 800378c:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 3;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	3303      	adds	r3, #3
 8003794:	60bb      	str	r3, [r7, #8]
        LMIC.devsAns = 0;
 8003796:	4b59      	ldr	r3, [pc, #356]	; (80038fc <buildDataFrame+0x294>)
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
 800379e:	4b57      	ldr	r3, [pc, #348]	; (80038fc <buildDataFrame+0x294>)
 80037a0:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01a      	beq.n	80037de <buildDataFrame+0x176>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
 80037a8:	4a54      	ldr	r2, [pc, #336]	; (80038fc <buildDataFrame+0x294>)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80037b2:	2203      	movs	r2, #3
 80037b4:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 80037b6:	4b51      	ldr	r3, [pc, #324]	; (80038fc <buildDataFrame+0x294>)
 80037b8:	f893 2125 	ldrb.w	r2, [r3, #293]	; 0x125
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	3301      	adds	r3, #1
 80037c0:	f002 0207 	and.w	r2, r2, #7
 80037c4:	b2d1      	uxtb	r1, r2
 80037c6:	4a4d      	ldr	r2, [pc, #308]	; (80038fc <buildDataFrame+0x294>)
 80037c8:	4413      	add	r3, r2
 80037ca:	460a      	mov	r2, r1
 80037cc:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	3302      	adds	r3, #2
 80037d4:	60bb      	str	r3, [r7, #8]
        LMIC.ladrAns = 0;
 80037d6:	4b49      	ldr	r3, [pc, #292]	; (80038fc <buildDataFrame+0x294>)
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
    }
    if( LMIC.bcninfoTries > 0 ) {
 80037de:	4b47      	ldr	r3, [pc, #284]	; (80038fc <buildDataFrame+0x294>)
 80037e0:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d009      	beq.n	80037fc <buildDataFrame+0x194>
        LMIC.frame[end] = MCMD_BCNI_REQ;
 80037e8:	4a44      	ldr	r2, [pc, #272]	; (80038fc <buildDataFrame+0x294>)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80037f2:	2212      	movs	r2, #18
 80037f4:	701a      	strb	r2, [r3, #0]
        end += 1;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	3301      	adds	r3, #1
 80037fa:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.adrChanged ) {
 80037fc:	4b3f      	ldr	r3, [pc, #252]	; (80038fc <buildDataFrame+0x294>)
 80037fe:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00c      	beq.n	8003820 <buildDataFrame+0x1b8>
        if( LMIC.adrAckReq < 0 )
 8003806:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <buildDataFrame+0x294>)
 8003808:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 800380c:	2b00      	cmp	r3, #0
 800380e:	da03      	bge.n	8003818 <buildDataFrame+0x1b0>
            LMIC.adrAckReq = 0;
 8003810:	4b3a      	ldr	r3, [pc, #232]	; (80038fc <buildDataFrame+0x294>)
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        LMIC.adrChanged = 0;
 8003818:	4b38      	ldr	r3, [pc, #224]	; (80038fc <buildDataFrame+0x294>)
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
    }
    if( LMIC.pingSetAns != 0 ) {
 8003820:	4b36      	ldr	r3, [pc, #216]	; (80038fc <buildDataFrame+0x294>)
 8003822:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 8003826:	2b00      	cmp	r3, #0
 8003828:	d01a      	beq.n	8003860 <buildDataFrame+0x1f8>
        LMIC.frame[end+0] = MCMD_PING_ANS;
 800382a:	4a34      	ldr	r2, [pc, #208]	; (80038fc <buildDataFrame+0x294>)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4413      	add	r3, r2
 8003830:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003834:	2211      	movs	r2, #17
 8003836:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 8003838:	4b30      	ldr	r3, [pc, #192]	; (80038fc <buildDataFrame+0x294>)
 800383a:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	3301      	adds	r3, #1
 8003842:	f002 0201 	and.w	r2, r2, #1
 8003846:	b2d1      	uxtb	r1, r2
 8003848:	4a2c      	ldr	r2, [pc, #176]	; (80038fc <buildDataFrame+0x294>)
 800384a:	4413      	add	r3, r2
 800384c:	460a      	mov	r2, r1
 800384e:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	3302      	adds	r3, #2
 8003856:	60bb      	str	r3, [r7, #8]
        LMIC.pingSetAns = 0;
 8003858:	4b28      	ldr	r3, [pc, #160]	; (80038fc <buildDataFrame+0x294>)
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
    }
    if( LMIC.snchAns ) {
 8003860:	4b26      	ldr	r3, [pc, #152]	; (80038fc <buildDataFrame+0x294>)
 8003862:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01a      	beq.n	80038a0 <buildDataFrame+0x238>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
 800386a:	4a24      	ldr	r2, [pc, #144]	; (80038fc <buildDataFrame+0x294>)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4413      	add	r3, r2
 8003870:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003874:	2207      	movs	r2, #7
 8003876:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 8003878:	4b20      	ldr	r3, [pc, #128]	; (80038fc <buildDataFrame+0x294>)
 800387a:	f893 212a 	ldrb.w	r2, [r3, #298]	; 0x12a
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3301      	adds	r3, #1
 8003882:	f002 0203 	and.w	r2, r2, #3
 8003886:	b2d1      	uxtb	r1, r2
 8003888:	4a1c      	ldr	r2, [pc, #112]	; (80038fc <buildDataFrame+0x294>)
 800388a:	4413      	add	r3, r2
 800388c:	460a      	mov	r2, r1
 800388e:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	3302      	adds	r3, #2
 8003896:	60bb      	str	r3, [r7, #8]
        LMIC.snchAns = 0;
 8003898:	4b18      	ldr	r3, [pc, #96]	; (80038fc <buildDataFrame+0x294>)
 800389a:	2200      	movs	r2, #0
 800389c:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
    }
    ASSERT(end <= OFF_DAT_OPTS+16);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b18      	cmp	r3, #24
 80038a4:	dd01      	ble.n	80038aa <buildDataFrame+0x242>
 80038a6:	f7fd fda9 	bl	80013fc <hal_failed>

    u1_t flen = end + (txdata ? 5+dlen : 4);
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <buildDataFrame+0x250>
 80038b0:	79bb      	ldrb	r3, [r7, #6]
 80038b2:	3305      	adds	r3, #5
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	e000      	b.n	80038ba <buildDataFrame+0x252>
 80038b8:	2304      	movs	r3, #4
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	4413      	add	r3, r2
 80038c0:	71fb      	strb	r3, [r7, #7]
    if( flen > MAX_LEN_FRAME ) {
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d905      	bls.n	80038d4 <buildDataFrame+0x26c>
        // Options and payload too big - delay payload
        txdata = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	73fb      	strb	r3, [r7, #15]
        flen = end+4;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	3304      	adds	r3, #4
 80038d2:	71fb      	strb	r3, [r7, #7]
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 80038d4:	4b09      	ldr	r3, [pc, #36]	; (80038fc <buildDataFrame+0x294>)
 80038d6:	2240      	movs	r2, #64	; 0x40
 80038d8:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <buildDataFrame+0x294>)
 80038de:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <buildDataFrame+0x294>)
 80038e4:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	b25b      	sxtb	r3, r3
 80038ee:	4a03      	ldr	r2, [pc, #12]	; (80038fc <buildDataFrame+0x294>)
 80038f0:	f992 2121 	ldrsb.w	r2, [r2, #289]	; 0x121
 80038f4:	2a00      	cmp	r2, #0
 80038f6:	db03      	blt.n	8003900 <buildDataFrame+0x298>
 80038f8:	2240      	movs	r2, #64	; 0x40
 80038fa:	e002      	b.n	8003902 <buildDataFrame+0x29a>
 80038fc:	20000304 	.word	0x20000304
 8003900:	2200      	movs	r2, #0
 8003902:	4313      	orrs	r3, r2
 8003904:	b25a      	sxtb	r2, r3
                              | (end-OFF_DAT_OPTS));
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	3b08      	subs	r3, #8
 800390c:	b2db      	uxtb	r3, r3
 800390e:	b25b      	sxtb	r3, r3
 8003910:	4313      	orrs	r3, r2
 8003912:	b25b      	sxtb	r3, r3
 8003914:	b2da      	uxtb	r2, r3
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8003916:	4b40      	ldr	r3, [pc, #256]	; (8003a18 <buildDataFrame+0x3b0>)
 8003918:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
 800391c:	4a3f      	ldr	r2, [pc, #252]	; (8003a1c <buildDataFrame+0x3b4>)
 800391e:	4b3e      	ldr	r3, [pc, #248]	; (8003a18 <buildDataFrame+0x3b0>)
 8003920:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f7fd fedb 	bl	80016e2 <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
 800392c:	4b3a      	ldr	r3, [pc, #232]	; (8003a18 <buildDataFrame+0x3b0>)
 800392e:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <buildDataFrame+0x2dc>
        LMIC.seqnoUp += 1;
 8003936:	4b38      	ldr	r3, [pc, #224]	; (8003a18 <buildDataFrame+0x3b0>)
 8003938:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800393c:	3301      	adds	r3, #1
 800393e:	4a36      	ldr	r2, [pc, #216]	; (8003a18 <buildDataFrame+0x3b0>)
 8003940:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (DRADJUST[LMIC.txCnt+1] << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
 8003944:	4a36      	ldr	r2, [pc, #216]	; (8003a20 <buildDataFrame+0x3b8>)
 8003946:	4b34      	ldr	r3, [pc, #208]	; (8003a18 <buildDataFrame+0x3b0>)
 8003948:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29b      	uxth	r3, r3
 8003952:	4619      	mov	r1, r3
 8003954:	4610      	mov	r0, r2
 8003956:	f7fd fead 	bl	80016b4 <os_wlsbf2>

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
 800395a:	4b2f      	ldr	r3, [pc, #188]	; (8003a18 <buildDataFrame+0x3b0>)
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

    if( txdata ) {
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d03e      	beq.n	80039e6 <buildDataFrame+0x37e>
        if( LMIC.pendTxConf ) {
 8003968:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <buildDataFrame+0x3b0>)
 800396a:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00c      	beq.n	800398c <buildDataFrame+0x324>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 8003972:	4b29      	ldr	r3, [pc, #164]	; (8003a18 <buildDataFrame+0x3b0>)
 8003974:	2280      	movs	r2, #128	; 0x80
 8003976:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
 800397a:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <buildDataFrame+0x3b0>)
 800397c:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <buildDataFrame+0x324>
 8003984:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <buildDataFrame+0x3b0>)
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        }
        LMIC.frame[end] = LMIC.pendTxPort;
 800398c:	4b22      	ldr	r3, [pc, #136]	; (8003a18 <buildDataFrame+0x3b0>)
 800398e:	f893 10ba 	ldrb.w	r1, [r3, #186]	; 0xba
 8003992:	4a21      	ldr	r2, [pc, #132]	; (8003a18 <buildDataFrame+0x3b0>)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4413      	add	r3, r2
 8003998:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800399c:	460a      	mov	r2, r1
 800399e:	701a      	strb	r2, [r3, #0]
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	3301      	adds	r3, #1
 80039a4:	4a1f      	ldr	r2, [pc, #124]	; (8003a24 <buildDataFrame+0x3bc>)
 80039a6:	4413      	add	r3, r2
 80039a8:	79ba      	ldrb	r2, [r7, #6]
 80039aa:	491f      	ldr	r1, [pc, #124]	; (8003a28 <buildDataFrame+0x3c0>)
 80039ac:	4618      	mov	r0, r3
 80039ae:	f007 fe8f 	bl	800b6d0 <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 80039b2:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <buildDataFrame+0x3b0>)
 80039b4:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <buildDataFrame+0x358>
 80039bc:	481b      	ldr	r0, [pc, #108]	; (8003a2c <buildDataFrame+0x3c4>)
 80039be:	e000      	b.n	80039c2 <buildDataFrame+0x35a>
 80039c0:	481b      	ldr	r0, [pc, #108]	; (8003a30 <buildDataFrame+0x3c8>)
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <buildDataFrame+0x3b0>)
 80039c4:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                   LMIC.devaddr, LMIC.seqnoUp-1,
 80039c8:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <buildDataFrame+0x3b0>)
 80039ca:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 80039ce:	1e5c      	subs	r4, r3, #1
                   /*up*/0, LMIC.frame+end+1, dlen);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	3301      	adds	r3, #1
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 80039d4:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <buildDataFrame+0x3bc>)
 80039d6:	4413      	add	r3, r2
 80039d8:	79ba      	ldrb	r2, [r7, #6]
 80039da:	9201      	str	r2, [sp, #4]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	2300      	movs	r3, #0
 80039e0:	4622      	mov	r2, r4
 80039e2:	f7fd ffe5 	bl	80019b0 <aes_cipher>
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
 80039e6:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <buildDataFrame+0x3b0>)
 80039e8:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <buildDataFrame+0x3b0>)
 80039ee:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80039f2:	1e5a      	subs	r2, r3, #1
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	3b04      	subs	r3, #4
 80039f8:	9301      	str	r3, [sp, #4]
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <buildDataFrame+0x3bc>)
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	2300      	movs	r3, #0
 8003a00:	480a      	ldr	r0, [pc, #40]	; (8003a2c <buildDataFrame+0x3c4>)
 8003a02:	f7fd ff57 	bl	80018b4 <aes_appendMic>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
 8003a06:	4a04      	ldr	r2, [pc, #16]	; (8003a18 <buildDataFrame+0x3b0>)
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	f882 3147 	strb.w	r3, [r2, #327]	; 0x147
}
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd90      	pop	{r4, r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000304 	.word	0x20000304
 8003a1c:	2000044d 	.word	0x2000044d
 8003a20:	20000452 	.word	0x20000452
 8003a24:	2000044c 	.word	0x2000044c
 8003a28:	200003c1 	.word	0x200003c1
 8003a2c:	200003f8 	.word	0x200003f8
 8003a30:	20000408 	.word	0x20000408

08003a34 <onBcnRx>:


// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (xref2osjob_t job) {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	f001 ffbd 	bl	80059bc <os_radio>
    os_clearCallback(&LMIC.osjob);
 8003a42:	4823      	ldr	r0, [pc, #140]	; (8003ad0 <onBcnRx+0x9c>)
 8003a44:	f001 f9be 	bl	8004dc4 <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
 8003a48:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <onBcnRx+0xa0>)
 8003a4a:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10c      	bne.n	8003a6c <onBcnRx+0x38>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 8003a52:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <onBcnRx+0xa0>)
 8003a54:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003a58:	f023 0303 	bic.w	r3, r3, #3
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <onBcnRx+0xa0>)
 8003a60:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        reportEvent(EV_SCAN_TIMEOUT);
 8003a64:	2001      	movs	r0, #1
 8003a66:	f7fe fe71 	bl	800274c <reportEvent>
        return;
 8003a6a:	e02d      	b.n	8003ac8 <onBcnRx+0x94>
    }
    if( decodeBeacon() <= 0 ) {
 8003a6c:	f7fe fef2 	bl	8002854 <decodeBeacon>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	dc0f      	bgt.n	8003a96 <onBcnRx+0x62>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
 8003a76:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <onBcnRx+0xa0>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
        os_radio(RADIO_RXON);
 8003a7e:	2003      	movs	r0, #3
 8003a80:	f001 ff9c 	bl	80059bc <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
 8003a84:	4b13      	ldr	r3, [pc, #76]	; (8003ad4 <onBcnRx+0xa0>)
 8003a86:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003a8a:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <onBcnRx+0xa4>)
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4810      	ldr	r0, [pc, #64]	; (8003ad0 <onBcnRx+0x9c>)
 8003a90:	f001 f9dc 	bl	8004e4c <os_setTimedCallback>
        return;
 8003a94:	e018      	b.n	8003ac8 <onBcnRx+0x94>
    }
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
 8003a96:	2101      	movs	r1, #1
 8003a98:	200d      	movs	r0, #13
 8003a9a:	f7fe f915 	bl	8001cc8 <calcBcnRxWindowFromMillis>
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <onBcnRx+0xa0>)
 8003aa0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <onBcnRx+0xa0>)
 8003aac:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
 8003ab0:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <onBcnRx+0xa0>)
 8003ab2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003ab6:	f043 0302 	orr.w	r3, r3, #2
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <onBcnRx+0xa0>)
 8003abe:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 8003ac2:	2002      	movs	r0, #2
 8003ac4:	f7fe fe42 	bl	800274c <reportEvent>
}
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000318 	.word	0x20000318
 8003ad4:	20000304 	.word	0x20000304
 8003ad8:	08003a35 	.word	0x08003a35

08003adc <startScan>:
// Enable receiver to listen to incoming beacons
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
 8003ae0:	4b27      	ldr	r3, [pc, #156]	; (8003b80 <startScan+0xa4>)
 8003ae2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d006      	beq.n	8003af8 <startScan+0x1c>
 8003aea:	4b25      	ldr	r3, [pc, #148]	; (8003b80 <startScan+0xa4>)
 8003aec:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <startScan+0x20>
 8003af8:	f7fd fc80 	bl	80013fc <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
 8003afc:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <startScan+0xa4>)
 8003afe:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d137      	bne.n	8003b7a <startScan+0x9e>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 8003b0a:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <startScan+0xa4>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 8003b12:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <startScan+0xa4>)
 8003b14:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 8003b18:	4b19      	ldr	r3, [pc, #100]	; (8003b80 <startScan+0xa4>)
 8003b1a:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
 8003b1e:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <startScan+0xa4>)
 8003b20:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 8003b24:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <startScan+0xa4>)
 8003b26:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 8003b2a:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <startScan+0xa4>)
 8003b2c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <startScan+0xa4>)
 8003b3e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    setBcnRxParams();
 8003b42:	f7fe fd35 	bl	80025b0 <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
 8003b46:	f001 f917 	bl	8004d78 <os_getTime>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f503 137b 	add.w	r3, r3, #4112384	; 0x3ec000
 8003b50:	f503 5374 	add.w	r3, r3, #15616	; 0x3d00
 8003b54:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <startScan+0xa4>)
 8003b56:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <startScan+0xa4>)
 8003b5c:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003b60:	4a07      	ldr	r2, [pc, #28]	; (8003b80 <startScan+0xa4>)
 8003b62:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <startScan+0xa4>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4a06      	ldr	r2, [pc, #24]	; (8003b84 <startScan+0xa8>)
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4806      	ldr	r0, [pc, #24]	; (8003b88 <startScan+0xac>)
 8003b6e:	f001 f96d 	bl	8004e4c <os_setTimedCallback>
    os_radio(RADIO_RXON);
 8003b72:	2003      	movs	r0, #3
 8003b74:	f001 ff22 	bl	80059bc <os_radio>
 8003b78:	e000      	b.n	8003b7c <startScan+0xa0>
        return;
 8003b7a:	bf00      	nop
}
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000304 	.word	0x20000304
 8003b84:	08003a35 	.word	0x08003a35
 8003b88:	20000318 	.word	0x20000318

08003b8c <buildJoinRequest>:
//
// Join stuff
//
// ================================================================================

static void buildJoinRequest (u1_t ftype) {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	71fb      	strb	r3, [r7, #7]
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    xref2u1_t d = LMIC.frame;
 8003b96:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <buildJoinRequest+0x64>)
 8003b98:	60fb      	str	r3, [r7, #12]
    d[OFF_JR_HDR] = ftype;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	79fa      	ldrb	r2, [r7, #7]
 8003b9e:	701a      	strb	r2, [r3, #0]
    os_getArtEui(d + OFF_JR_ARTEUI);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fd33 	bl	8004610 <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3309      	adds	r3, #9
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fd42 	bl	8004638 <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f103 0211 	add.w	r2, r3, #17
 8003bba:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <buildJoinRequest+0x68>)
 8003bbc:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	f7fd fd76 	bl	80016b4 <os_wlsbf2>
    aes_appendMic0(d, OFF_JR_MIC);
 8003bc8:	2113      	movs	r1, #19
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f7fd fe9a 	bl	8001904 <aes_appendMic0>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
 8003bd0:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <buildJoinRequest+0x68>)
 8003bd2:	2217      	movs	r2, #23
 8003bd4:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    LMIC.devNonce++;
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <buildJoinRequest+0x68>)
 8003bda:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8003bde:	3301      	adds	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <buildJoinRequest+0x68>)
 8003be4:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
    DO_DEVDB(LMIC.devNonce,devNonce);
}
 8003be8:	bf00      	nop
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	2000044c 	.word	0x2000044c
 8003bf4:	20000304 	.word	0x20000304

08003bf8 <startJoining>:

static void startJoining (xref2osjob_t osjob) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
    reportEvent(EV_JOINING);
 8003c00:	2005      	movs	r0, #5
 8003c02:	f7fe fda3 	bl	800274c <reportEvent>
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining (void) {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
    if( LMIC.devaddr == 0 ) {
 8003c14:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <LMIC_startJoining+0x88>)
 8003c16:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d138      	bne.n	8003c90 <LMIC_startJoining+0x80>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <LMIC_startJoining+0x88>)
 8003c20:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003c24:	f003 0390 	and.w	r3, r3, #144	; 0x90
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <LMIC_startJoining+0x20>
 8003c2c:	f7fd fbe6 	bl	80013fc <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <LMIC_startJoining+0x88>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
 8003c38:	4b17      	ldr	r3, [pc, #92]	; (8003c98 <LMIC_startJoining+0x88>)
 8003c3a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003c3e:	f423 53c1 	bic.w	r3, r3, #6176	; 0x1820
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <LMIC_startJoining+0x88>)
 8003c4a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 8003c4e:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <LMIC_startJoining+0x88>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <LMIC_startJoining+0x88>)
 8003c58:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <LMIC_startJoining+0x88>)
 8003c5e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
 8003c62:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <LMIC_startJoining+0x88>)
 8003c64:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <LMIC_startJoining+0x88>)
 8003c6a:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
        initJoinLoop();
 8003c6e:	f7fe fcc5 	bl	80025fc <initJoinLoop>
        LMIC.opmode |= OP_JOINING;
 8003c72:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <LMIC_startJoining+0x88>)
 8003c74:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003c78:	f043 0304 	orr.w	r3, r3, #4
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <LMIC_startJoining+0x88>)
 8003c80:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 8003c84:	4905      	ldr	r1, [pc, #20]	; (8003c9c <LMIC_startJoining+0x8c>)
 8003c86:	4806      	ldr	r0, [pc, #24]	; (8003ca0 <LMIC_startJoining+0x90>)
 8003c88:	f001 f8ba 	bl	8004e00 <os_setCallback>
        return 1;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <LMIC_startJoining+0x82>
    }
    return 0; // already joined
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000304 	.word	0x20000304
 8003c9c:	08003bf9 	.word	0x08003bf9
 8003ca0:	20000318 	.word	0x20000318

08003ca4 <processPingRx>:
//
//
//
// ================================================================================

static void processPingRx (xref2osjob_t osjob) {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen != 0 ) {
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <processPingRx+0x38>)
 8003cae:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00c      	beq.n	8003cd0 <processPingRx+0x2c>
        LMIC.txrxFlags = TXRX_PING;
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <processPingRx+0x38>)
 8003cb8:	2204      	movs	r2, #4
 8003cba:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        if( decodeFrame() ) {
 8003cbe:	f7fe fe5d 	bl	800297c <decodeFrame>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <processPingRx+0x2c>
            reportEvent(EV_RXCOMPLETE);
 8003cc8:	200d      	movs	r0, #13
 8003cca:	f7fe fd3f 	bl	800274c <reportEvent>
            return;
 8003cce:	e001      	b.n	8003cd4 <processPingRx+0x30>
        }
    }
    // Pick next ping slot
    engineUpdate();
 8003cd0:	f000 fa2a 	bl	8004128 <engineUpdate>
}
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000304 	.word	0x20000304

08003ce0 <processDnData>:


static bit_t processDnData (void) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8003ce4:	4b76      	ldr	r3, [pc, #472]	; (8003ec0 <processDnData+0x1e0>)
 8003ce6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <processDnData+0x16>
 8003cf2:	f7fd fb83 	bl	80013fc <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8003cf6:	4b72      	ldr	r3, [pc, #456]	; (8003ec0 <processDnData+0x1e0>)
 8003cf8:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f040 80ce 	bne.w	8003e9e <processDnData+0x1be>
      norx:
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <processDnData+0x28>
        return 1;
    }
    if( !decodeFrame() ) {
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto norx;
 8003d06:	bf00      	nop
        if( LMIC.txCnt != 0 ) {
 8003d08:	4b6d      	ldr	r3, [pc, #436]	; (8003ec0 <processDnData+0x1e0>)
 8003d0a:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d038      	beq.n	8003d84 <processDnData+0xa4>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
 8003d12:	4b6b      	ldr	r3, [pc, #428]	; (8003ec0 <processDnData+0x1e0>)
 8003d14:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003d18:	2b07      	cmp	r3, #7
 8003d1a:	d82e      	bhi.n	8003d7a <processDnData+0x9a>
                LMIC.txCnt += 1;
 8003d1c:	4b68      	ldr	r3, [pc, #416]	; (8003ec0 <processDnData+0x1e0>)
 8003d1e:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003d22:	3301      	adds	r3, #1
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	4b66      	ldr	r3, [pc, #408]	; (8003ec0 <processDnData+0x1e0>)
 8003d28:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]), KEEP_TXPOW);
 8003d2c:	4b64      	ldr	r3, [pc, #400]	; (8003ec0 <processDnData+0x1e0>)
 8003d2e:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8003d32:	4b63      	ldr	r3, [pc, #396]	; (8003ec0 <processDnData+0x1e0>)
 8003d34:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4b62      	ldr	r3, [pc, #392]	; (8003ec4 <processDnData+0x1e4>)
 8003d3c:	5c5b      	ldrb	r3, [r3, r1]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4610      	mov	r0, r2
 8003d42:	f7fd fc4f 	bl	80015e4 <lowerDR>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	2002      	movs	r0, #2
 8003d50:	f7fe f9ae 	bl	80020b0 <setDrTxpow>
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 8003d54:	4b5a      	ldr	r3, [pc, #360]	; (8003ec0 <processDnData+0x1e0>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2103      	movs	r1, #3
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe f966 	bl	800202c <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
 8003d60:	4b57      	ldr	r3, [pc, #348]	; (8003ec0 <processDnData+0x1e0>)
 8003d62:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	4b54      	ldr	r3, [pc, #336]	; (8003ec0 <processDnData+0x1e0>)
 8003d6e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
                engineUpdate();
 8003d72:	f000 f9d9 	bl	8004128 <engineUpdate>
                return 1;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e09f      	b.n	8003eba <processDnData+0x1da>
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 8003d7a:	4b51      	ldr	r3, [pc, #324]	; (8003ec0 <processDnData+0x1e0>)
 8003d7c:	2260      	movs	r2, #96	; 0x60
 8003d7e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
 8003d82:	e003      	b.n	8003d8c <processDnData+0xac>
            LMIC.txrxFlags = TXRX_NOPORT;
 8003d84:	4b4e      	ldr	r3, [pc, #312]	; (8003ec0 <processDnData+0x1e0>)
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8003d8c:	4b4c      	ldr	r3, [pc, #304]	; (8003ec0 <processDnData+0x1e0>)
 8003d8e:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 8003d92:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8003d96:	d009      	beq.n	8003dac <processDnData+0xcc>
            LMIC.adrAckReq += 1;
 8003d98:	4b49      	ldr	r3, [pc, #292]	; (8003ec0 <processDnData+0x1e0>)
 8003d9a:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	3301      	adds	r3, #1
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	b25a      	sxtb	r2, r3
 8003da6:	4b46      	ldr	r3, [pc, #280]	; (8003ec0 <processDnData+0x1e0>)
 8003da8:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        LMIC.dataBeg = LMIC.dataLen = 0;
 8003dac:	4b44      	ldr	r3, [pc, #272]	; (8003ec0 <processDnData+0x1e0>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8003db4:	4b42      	ldr	r3, [pc, #264]	; (8003ec0 <processDnData+0x1e0>)
 8003db6:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
 8003dba:	4b41      	ldr	r3, [pc, #260]	; (8003ec0 <processDnData+0x1e0>)
 8003dbc:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 8003dc0:	e000      	b.n	8003dc4 <processDnData+0xe4>
    }
    goto txcomplete;
 8003dc2:	bf00      	nop
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
 8003dc4:	4b3e      	ldr	r3, [pc, #248]	; (8003ec0 <processDnData+0x1e0>)
 8003dc6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003dca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	4b3b      	ldr	r3, [pc, #236]	; (8003ec0 <processDnData+0x1e0>)
 8003dd2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
 8003dd6:	4b3a      	ldr	r3, [pc, #232]	; (8003ec0 <processDnData+0x1e0>)
 8003dd8:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d012      	beq.n	8003e0a <processDnData+0x12a>
 8003de4:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <processDnData+0x1e0>)
 8003de6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00b      	beq.n	8003e0a <processDnData+0x12a>
            LMIC.opmode &= ~OP_LINKDEAD;
 8003df2:	4b33      	ldr	r3, [pc, #204]	; (8003ec0 <processDnData+0x1e0>)
 8003df4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	4b30      	ldr	r3, [pc, #192]	; (8003ec0 <processDnData+0x1e0>)
 8003e00:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            reportEvent(EV_LINK_ALIVE);
 8003e04:	200f      	movs	r0, #15
 8003e06:	f7fe fca1 	bl	800274c <reportEvent>
        reportEvent(EV_TXCOMPLETE);
 8003e0a:	200a      	movs	r0, #10
 8003e0c:	f7fe fc9e 	bl	800274c <reportEvent>
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
 8003e10:	4b2b      	ldr	r3, [pc, #172]	; (8003ec0 <processDnData+0x1e0>)
 8003e12:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 8003e16:	2b18      	cmp	r3, #24
 8003e18:	dd1c      	ble.n	8003e54 <processDnData+0x174>
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
 8003e1a:	4b29      	ldr	r3, [pc, #164]	; (8003ec0 <processDnData+0x1e0>)
 8003e1c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fd fbb1 	bl	8001588 <decDR>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	2003      	movs	r0, #3
 8003e30:	f7fe f93e 	bl	80020b0 <setDrTxpow>
            LMIC.adrAckReq = LINK_CHECK_CONT;
 8003e34:	4b22      	ldr	r3, [pc, #136]	; (8003ec0 <processDnData+0x1e0>)
 8003e36:	220c      	movs	r2, #12
 8003e38:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
 8003e3c:	4b20      	ldr	r3, [pc, #128]	; (8003ec0 <processDnData+0x1e0>)
 8003e3e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003e42:	f443 5381 	orr.w	r3, r3, #4128	; 0x1020
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <processDnData+0x1e0>)
 8003e4a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            reportEvent(EV_LINK_DEAD);
 8003e4e:	200e      	movs	r0, #14
 8003e50:	f7fe fc7c 	bl	800274c <reportEvent>
        if( LMIC.bcninfoTries > 0 ) {
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <processDnData+0x1e0>)
 8003e56:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d01d      	beq.n	8003e9a <processDnData+0x1ba>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8003e5e:	4b18      	ldr	r3, [pc, #96]	; (8003ec0 <processDnData+0x1e0>)
 8003e60:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <processDnData+0x19c>
                reportEvent(EV_BEACON_FOUND);
 8003e6c:	2002      	movs	r0, #2
 8003e6e:	f7fe fc6d 	bl	800274c <reportEvent>
                LMIC.bcninfoTries = 0;
 8003e72:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <processDnData+0x1e0>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8003e7a:	e00e      	b.n	8003e9a <processDnData+0x1ba>
            else if( --LMIC.bcninfoTries == 0 ) {
 8003e7c:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <processDnData+0x1e0>)
 8003e7e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <processDnData+0x1e0>)
 8003e88:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <processDnData+0x1e0>)
 8003e8e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <processDnData+0x1ba>
                startScan();   // NWK did not answer - try scan
 8003e96:	f7ff fe21 	bl	8003adc <startScan>
        return 1;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e00d      	b.n	8003eba <processDnData+0x1da>
    if( !decodeFrame() ) {
 8003e9e:	f7fe fd6d 	bl	800297c <decodeFrame>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d18c      	bne.n	8003dc2 <processDnData+0xe2>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <processDnData+0x1e0>)
 8003eaa:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f43f af27 	beq.w	8003d06 <processDnData+0x26>
            return 0;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000304 	.word	0x20000304
 8003ec4:	0800cd04 	.word	0x0800cd04

08003ec8 <processBeacon>:


static void processBeacon (xref2osjob_t osjob) {
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
 8003ed0:	4b81      	ldr	r3, [pc, #516]	; (80040d8 <processBeacon+0x210>)
 8003ed2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003ed6:	60fb      	str	r3, [r7, #12]
    u1_t flags = LMIC.bcninfo.flags;
 8003ed8:	4b7f      	ldr	r3, [pc, #508]	; (80040d8 <processBeacon+0x210>)
 8003eda:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003ede:	72fb      	strb	r3, [r7, #11]
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8003ee0:	4b7d      	ldr	r3, [pc, #500]	; (80040d8 <processBeacon+0x210>)
 8003ee2:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 8087 	beq.w	8003ffa <processBeacon+0x132>
 8003eec:	f7fe fcb2 	bl	8002854 <decodeBeacon>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f340 8081 	ble.w	8003ffa <processBeacon+0x132>
        ev = EV_BEACON_TRACKED;
 8003ef8:	2304      	movs	r3, #4
 8003efa:	75fb      	strb	r3, [r7, #23]
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
 8003efc:	7afb      	ldrb	r3, [r7, #11]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d104      	bne.n	8003f10 <processBeacon+0x48>
            // We don't have a previous beacon to calc some drift - assume
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
 8003f06:	2100      	movs	r1, #0
 8003f08:	200d      	movs	r0, #13
 8003f0a:	f7fd fedd 	bl	8001cc8 <calcBcnRxWindowFromMillis>
            goto rev;
 8003f0e:	e0d2      	b.n	80040b6 <processBeacon+0x1ee>
        }
        // We have a previous BEACON to calculate some drift
        s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	4b70      	ldr	r3, [pc, #448]	; (80040d8 <processBeacon+0x210>)
 8003f16:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	82bb      	strh	r3, [r7, #20]
        if( LMIC.missedBcns > 0 ) {
 8003f28:	4b6b      	ldr	r3, [pc, #428]	; (80040d8 <processBeacon+0x210>)
 8003f2a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d013      	beq.n	8003f5a <processBeacon+0x92>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
 8003f32:	4b69      	ldr	r3, [pc, #420]	; (80040d8 <processBeacon+0x210>)
 8003f34:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003f3e:	4966      	ldr	r1, [pc, #408]	; (80040d8 <processBeacon+0x210>)
 8003f40:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	; 0xb4
 8003f44:	1a59      	subs	r1, r3, r1
 8003f46:	4b64      	ldr	r3, [pc, #400]	; (80040d8 <processBeacon+0x210>)
 8003f48:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	fb91 f3f3 	sdiv	r3, r1, r3
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	4413      	add	r3, r2
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	82bb      	strh	r3, [r7, #20]
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
 8003f5a:	4b5f      	ldr	r3, [pc, #380]	; (80040d8 <processBeacon+0x210>)
 8003f5c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d127      	bne.n	8003fb8 <processBeacon+0xf0>
            s2_t diff = LMIC.drift - drift;
 8003f68:	4b5b      	ldr	r3, [pc, #364]	; (80040d8 <processBeacon+0x210>)
 8003f6a:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	8abb      	ldrh	r3, [r7, #20]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	827b      	strh	r3, [r7, #18]
            if( diff < 0 ) diff = -diff;
 8003f78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	da03      	bge.n	8003f88 <processBeacon+0xc0>
 8003f80:	8a7b      	ldrh	r3, [r7, #18]
 8003f82:	425b      	negs	r3, r3
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	827b      	strh	r3, [r7, #18]
            LMIC.lastDriftDiff = diff;
 8003f88:	4a53      	ldr	r2, [pc, #332]	; (80040d8 <processBeacon+0x210>)
 8003f8a:	8a7b      	ldrh	r3, [r7, #18]
 8003f8c:	f8a2 30b6 	strh.w	r3, [r2, #182]	; 0xb6
            if( LMIC.maxDriftDiff < diff )
 8003f90:	4b51      	ldr	r3, [pc, #324]	; (80040d8 <processBeacon+0x210>)
 8003f92:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8003f96:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	dd03      	ble.n	8003fa6 <processBeacon+0xde>
                LMIC.maxDriftDiff = diff;
 8003f9e:	4a4e      	ldr	r2, [pc, #312]	; (80040d8 <processBeacon+0x210>)
 8003fa0:	8a7b      	ldrh	r3, [r7, #18]
 8003fa2:	f8a2 30b8 	strh.w	r3, [r2, #184]	; 0xb8
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 8003fa6:	4b4c      	ldr	r3, [pc, #304]	; (80040d8 <processBeacon+0x210>)
 8003fa8:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003fac:	f023 0308 	bic.w	r3, r3, #8
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	4b49      	ldr	r3, [pc, #292]	; (80040d8 <processBeacon+0x210>)
 8003fb4:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
        }
        LMIC.drift = drift;
 8003fb8:	4a47      	ldr	r2, [pc, #284]	; (80040d8 <processBeacon+0x210>)
 8003fba:	8abb      	ldrh	r3, [r7, #20]
 8003fbc:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
 8003fc0:	4b45      	ldr	r3, [pc, #276]	; (80040d8 <processBeacon+0x210>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8003fc8:	4b43      	ldr	r3, [pc, #268]	; (80040d8 <processBeacon+0x210>)
 8003fca:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
 8003fce:	4b42      	ldr	r3, [pc, #264]	; (80040d8 <processBeacon+0x210>)
 8003fd0:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 8003fd4:	4b40      	ldr	r3, [pc, #256]	; (80040d8 <processBeacon+0x210>)
 8003fd6:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003fda:	f023 0304 	bic.w	r3, r3, #4
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	4b3d      	ldr	r3, [pc, #244]	; (80040d8 <processBeacon+0x210>)
 8003fe2:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
 8003fe6:	4b3c      	ldr	r3, [pc, #240]	; (80040d8 <processBeacon+0x210>)
 8003fe8:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d14c      	bne.n	800408e <processBeacon+0x1c6>
 8003ff4:	f7fd fa02 	bl	80013fc <hal_failed>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8003ff8:	e049      	b.n	800408e <processBeacon+0x1c6>
    } else {
        ev = EV_BEACON_MISSED;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	75fb      	strb	r3, [r7, #23]
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 8003ffe:	4b36      	ldr	r3, [pc, #216]	; (80040d8 <processBeacon+0x210>)
 8004000:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8004004:	4b34      	ldr	r3, [pc, #208]	; (80040d8 <processBeacon+0x210>)
 8004006:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 800400a:	f5c3 137a 	rsb	r3, r3, #4096000	; 0x3e8000
 800400e:	4413      	add	r3, r2
 8004010:	4a31      	ldr	r2, [pc, #196]	; (80040d8 <processBeacon+0x210>)
 8004012:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
        LMIC.bcninfo.time   += BCN_INTV_sec;
 8004016:	4b30      	ldr	r3, [pc, #192]	; (80040d8 <processBeacon+0x210>)
 8004018:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800401c:	3380      	adds	r3, #128	; 0x80
 800401e:	4a2e      	ldr	r2, [pc, #184]	; (80040d8 <processBeacon+0x210>)
 8004020:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
        LMIC.missedBcns++;
 8004024:	4b2c      	ldr	r3, [pc, #176]	; (80040d8 <processBeacon+0x210>)
 8004026:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800402a:	3301      	adds	r3, #1
 800402c:	b2da      	uxtb	r2, r3
 800402e:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <processBeacon+0x210>)
 8004030:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 8004034:	4b28      	ldr	r3, [pc, #160]	; (80040d8 <processBeacon+0x210>)
 8004036:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800403a:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800403e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004042:	2104      	movs	r1, #4
 8004044:	4618      	mov	r0, r3
 8004046:	f7fd fff1 	bl	800202c <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
 800404a:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <processBeacon+0x210>)
 800404c:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8004050:	2b14      	cmp	r3, #20
 8004052:	d908      	bls.n	8004066 <processBeacon+0x19e>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 8004054:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <processBeacon+0x210>)
 8004056:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800405a:	f043 0320 	orr.w	r3, r3, #32
 800405e:	b29a      	uxth	r2, r3
 8004060:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <processBeacon+0x210>)
 8004062:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
 8004066:	4b1c      	ldr	r3, [pc, #112]	; (80040d8 <processBeacon+0x210>)
 8004068:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 800406c:	2b64      	cmp	r3, #100	; 0x64
 800406e:	d90f      	bls.n	8004090 <processBeacon+0x1c8>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
 8004070:	4b19      	ldr	r3, [pc, #100]	; (80040d8 <processBeacon+0x210>)
 8004072:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004076:	f423 63c4 	bic.w	r3, r3, #1568	; 0x620
 800407a:	f023 0302 	bic.w	r3, r3, #2
 800407e:	b29a      	uxth	r2, r3
 8004080:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <processBeacon+0x210>)
 8004082:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            reportEvent(EV_LOST_TSYNC);
 8004086:	200b      	movs	r0, #11
 8004088:	f7fe fb60 	bl	800274c <reportEvent>
            return;
 800408c:	e021      	b.n	80040d2 <processBeacon+0x20a>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 800408e:	bf00      	nop
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
 8004090:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <processBeacon+0x210>)
 8004092:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8004096:	f503 147a 	add.w	r4, r3, #4096000	; 0x3e8000
 800409a:	2103      	movs	r1, #3
 800409c:	2000      	movs	r0, #0
 800409e:	f7fd fdbf 	bl	8001c20 <calcRxWindow>
 80040a2:	4603      	mov	r3, r0
 80040a4:	1ae3      	subs	r3, r4, r3
 80040a6:	4a0c      	ldr	r2, [pc, #48]	; (80040d8 <processBeacon+0x210>)
 80040a8:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
    LMIC.bcnRxsyms = LMIC.rxsyms;    
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <processBeacon+0x210>)
 80040ae:	7c1a      	ldrb	r2, [r3, #16]
 80040b0:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <processBeacon+0x210>)
 80040b2:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
 80040b6:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <processBeacon+0x210>)
 80040b8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80040bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <processBeacon+0x202>
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 80040c4:	4805      	ldr	r0, [pc, #20]	; (80040dc <processBeacon+0x214>)
 80040c6:	f7fd fe7d 	bl	8001dc4 <rxschedInit>
    reportEvent(ev);
 80040ca:	7dfb      	ldrb	r3, [r7, #23]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe fb3d 	bl	800274c <reportEvent>
}
 80040d2:	371c      	adds	r7, #28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd90      	pop	{r4, r7, pc}
 80040d8:	20000304 	.word	0x20000304
 80040dc:	20000438 	.word	0x20000438

080040e0 <startRxBcn>:


static void startRxBcn (xref2osjob_t osjob) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processBeacon);
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <startRxBcn+0x1c>)
 80040ea:	4a05      	ldr	r2, [pc, #20]	; (8004100 <startRxBcn+0x20>)
 80040ec:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 80040ee:	2002      	movs	r0, #2
 80040f0:	f001 fc64 	bl	80059bc <os_radio>
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000304 	.word	0x20000304
 8004100:	08003ec9 	.word	0x08003ec9

08004104 <startRxPing>:


static void startRxPing (xref2osjob_t osjob) {
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
 800410c:	4b04      	ldr	r3, [pc, #16]	; (8004120 <startRxPing+0x1c>)
 800410e:	4a05      	ldr	r2, [pc, #20]	; (8004124 <startRxPing+0x20>)
 8004110:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 8004112:	2002      	movs	r0, #2
 8004114:	f001 fc52 	bl	80059bc <os_radio>
}
 8004118:	bf00      	nop
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20000304 	.word	0x20000304
 8004124:	08003ca5 	.word	0x08003ca5

08004128 <engineUpdate>:


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
 800412e:	4b90      	ldr	r3, [pc, #576]	; (8004370 <engineUpdate+0x248>)
 8004130:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004134:	f003 03c1 	and.w	r3, r3, #193	; 0xc1
 8004138:	2b00      	cmp	r3, #0
 800413a:	f040 81ab 	bne.w	8004494 <engineUpdate+0x36c>
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
 800413e:	4b8c      	ldr	r3, [pc, #560]	; (8004370 <engineUpdate+0x248>)
 8004140:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004144:	2b00      	cmp	r3, #0
 8004146:	d109      	bne.n	800415c <engineUpdate+0x34>
 8004148:	4b89      	ldr	r3, [pc, #548]	; (8004370 <engineUpdate+0x248>)
 800414a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d102      	bne.n	800415c <engineUpdate+0x34>
        LMIC_startJoining();
 8004156:	f7ff fd5b 	bl	8003c10 <LMIC_startJoining>
        return;
 800415a:	e19e      	b.n	800449a <engineUpdate+0x372>
    }

    ostime_t now    = os_getTime();
 800415c:	f000 fe0c 	bl	8004d78 <os_getTime>
 8004160:	60b8      	str	r0, [r7, #8]
    ostime_t rxtime = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
    ostime_t txbeg  = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	613b      	str	r3, [r7, #16]

    if( (LMIC.opmode & OP_TRACK) != 0 ) {
 800416a:	4b81      	ldr	r3, [pc, #516]	; (8004370 <engineUpdate+0x248>)
 800416c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00f      	beq.n	8004198 <engineUpdate+0x70>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800417e:	4b7c      	ldr	r3, [pc, #496]	; (8004370 <engineUpdate+0x248>)
 8004180:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	dd01      	ble.n	800418e <engineUpdate+0x66>
 800418a:	f7fd f937 	bl	80013fc <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 800418e:	4b78      	ldr	r3, [pc, #480]	; (8004370 <engineUpdate+0x248>)
 8004190:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8004194:	3b40      	subs	r3, #64	; 0x40
 8004196:	617b      	str	r3, [r7, #20]
    }

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
 8004198:	4b75      	ldr	r3, [pc, #468]	; (8004370 <engineUpdate+0x248>)
 800419a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800419e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 80f2 	beq.w	800438c <engineUpdate+0x264>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
 80041a8:	4b71      	ldr	r3, [pc, #452]	; (8004370 <engineUpdate+0x248>)
 80041aa:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80041ae:	f003 0324 	and.w	r3, r3, #36	; 0x24
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bf14      	ite	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	2300      	moveq	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	71fb      	strb	r3, [r7, #7]
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
 80041be:	4b6c      	ldr	r3, [pc, #432]	; (8004370 <engineUpdate+0x248>)
 80041c0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80041c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d012      	beq.n	80041f2 <engineUpdate+0xca>
            txbeg = LMIC.txend = nextTx(now);
 80041cc:	68b8      	ldr	r0, [r7, #8]
 80041ce:	f7fe f953 	bl	8002478 <nextTx>
 80041d2:	4602      	mov	r2, r0
 80041d4:	4b66      	ldr	r3, [pc, #408]	; (8004370 <engineUpdate+0x248>)
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	4b65      	ldr	r3, [pc, #404]	; (8004370 <engineUpdate+0x248>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	613b      	str	r3, [r7, #16]
            LMIC.opmode &= ~OP_NEXTCHNL;
 80041de:	4b64      	ldr	r3, [pc, #400]	; (8004370 <engineUpdate+0x248>)
 80041e0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80041e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	4b61      	ldr	r3, [pc, #388]	; (8004370 <engineUpdate+0x248>)
 80041ec:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80041f0:	e002      	b.n	80041f8 <engineUpdate+0xd0>
        } else {
            txbeg = LMIC.txend;
 80041f2:	4b5f      	ldr	r3, [pc, #380]	; (8004370 <engineUpdate+0x248>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	613b      	str	r3, [r7, #16]
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
 80041f8:	4b5d      	ldr	r3, [pc, #372]	; (8004370 <engineUpdate+0x248>)
 80041fa:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <engineUpdate+0xe8>
 8004202:	4b5b      	ldr	r3, [pc, #364]	; (8004370 <engineUpdate+0x248>)
 8004204:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <engineUpdate+0xfe>
 8004210:	4b57      	ldr	r3, [pc, #348]	; (8004370 <engineUpdate+0x248>)
 8004212:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	da03      	bge.n	8004226 <engineUpdate+0xfe>
            txbeg = LMIC.globalDutyAvail;
 800421e:	4b54      	ldr	r3, [pc, #336]	; (8004370 <engineUpdate+0x248>)
 8004220:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004224:	613b      	str	r3, [r7, #16]
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004226:	4b52      	ldr	r3, [pc, #328]	; (8004370 <engineUpdate+0x248>)
 8004228:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d017      	beq.n	8004264 <engineUpdate+0x13c>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <engineUpdate+0x116>
 800423a:	4a4e      	ldr	r2, [pc, #312]	; (8004374 <engineUpdate+0x24c>)
 800423c:	e000      	b.n	8004240 <engineUpdate+0x118>
 800423e:	4a4e      	ldr	r2, [pc, #312]	; (8004378 <engineUpdate+0x250>)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	441a      	add	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	1ad3      	subs	r3, r2, r3
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004248:	2b00      	cmp	r3, #0
 800424a:	dd0b      	ble.n	8004264 <engineUpdate+0x13c>
            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8004252:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004256:	2110      	movs	r1, #16
 8004258:	4618      	mov	r0, r3
 800425a:	f7fd fee7 	bl	800202c <txDelay>
            txbeg = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	613b      	str	r3, [r7, #16]
            goto checkrx;
 8004262:	e09b      	b.n	800439c <engineUpdate+0x274>
        }
        // Earliest possible time vs overhead to setup radio
        if( txbeg - (now + TX_RAMPUP) < 0 ) {
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	3340      	adds	r3, #64	; 0x40
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	da70      	bge.n	8004352 <engineUpdate+0x22a>
            // We could send right now!
        txbeg = now;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	613b      	str	r3, [r7, #16]
            dr_t txdr = (dr_t)LMIC.datarate;
 8004274:	4b3e      	ldr	r3, [pc, #248]	; (8004370 <engineUpdate+0x248>)
 8004276:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800427a:	73fb      	strb	r3, [r7, #15]
            if( jacc ) {
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d01d      	beq.n	80042be <engineUpdate+0x196>
                u1_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 8004282:	4b3b      	ldr	r3, [pc, #236]	; (8004370 <engineUpdate+0x248>)
 8004284:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00c      	beq.n	80042aa <engineUpdate+0x182>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
 8004290:	4b37      	ldr	r3, [pc, #220]	; (8004370 <engineUpdate+0x248>)
 8004292:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	4611      	mov	r1, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f7fd f9a2 	bl	80015e4 <lowerDR>
 80042a0:	4603      	mov	r3, r0
 80042a2:	73fb      	strb	r3, [r7, #15]
                    ftype = HDR_FTYPE_REJOIN;
 80042a4:	23c0      	movs	r3, #192	; 0xc0
 80042a6:	73bb      	strb	r3, [r7, #14]
 80042a8:	e001      	b.n	80042ae <engineUpdate+0x186>
                } else {
                    ftype = HDR_FTYPE_JREQ;
 80042aa:	2300      	movs	r3, #0
 80042ac:	73bb      	strb	r3, [r7, #14]
                }
                buildJoinRequest(ftype);
 80042ae:	7bbb      	ldrb	r3, [r7, #14]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fc6b 	bl	8003b8c <buildJoinRequest>
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
 80042b6:	4b2e      	ldr	r3, [pc, #184]	; (8004370 <engineUpdate+0x248>)
 80042b8:	4a30      	ldr	r2, [pc, #192]	; (800437c <engineUpdate+0x254>)
 80042ba:	61da      	str	r2, [r3, #28]
 80042bc:	e01d      	b.n	80042fa <engineUpdate+0x1d2>
            } else {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
 80042be:	4b2c      	ldr	r3, [pc, #176]	; (8004370 <engineUpdate+0x248>)
 80042c0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80042c4:	f113 0f81 	cmn.w	r3, #129	; 0x81
 80042c8:	d907      	bls.n	80042da <engineUpdate+0x1b2>
                                        e_.eui    = MAIN::CDEV->getEui(),
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
 80042ca:	bf00      	nop
 80042cc:	e000      	b.n	80042d0 <engineUpdate+0x1a8>
                    EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
                                       e_.eui    = MAIN::CDEV->getEui(),
                                       e_.info2  = LMIC.seqnoUp));
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
 80042ce:	bf00      	nop
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 80042d0:	492b      	ldr	r1, [pc, #172]	; (8004380 <engineUpdate+0x258>)
 80042d2:	482c      	ldr	r0, [pc, #176]	; (8004384 <engineUpdate+0x25c>)
 80042d4:	f000 fd94 	bl	8004e00 <os_setCallback>
                    return;
 80042d8:	e0df      	b.n	800449a <engineUpdate+0x372>
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
 80042da:	4b25      	ldr	r3, [pc, #148]	; (8004370 <engineUpdate+0x248>)
 80042dc:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d105      	bne.n	80042f0 <engineUpdate+0x1c8>
 80042e4:	4b22      	ldr	r3, [pc, #136]	; (8004370 <engineUpdate+0x248>)
 80042e6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80042ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ee:	d0ee      	beq.n	80042ce <engineUpdate+0x1a6>
                }
                buildDataFrame();
 80042f0:	f7ff f9ba 	bl	8003668 <buildDataFrame>
                LMIC.osjob.func = FUNC_ADDR(updataDone);
 80042f4:	4b1e      	ldr	r3, [pc, #120]	; (8004370 <engineUpdate+0x248>)
 80042f6:	4a24      	ldr	r2, [pc, #144]	; (8004388 <engineUpdate+0x260>)
 80042f8:	61da      	str	r2, [r3, #28]
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fd f91d 	bl	800153c <updr2rps>
 8004302:	4603      	mov	r3, r0
 8004304:	461a      	mov	r2, r3
 8004306:	4b1a      	ldr	r3, [pc, #104]	; (8004370 <engineUpdate+0x248>)
 8004308:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f7fd f8af 	bl	8001472 <setCr>
 8004314:	4603      	mov	r3, r0
 8004316:	461a      	mov	r2, r3
 8004318:	4b15      	ldr	r3, [pc, #84]	; (8004370 <engineUpdate+0x248>)
 800431a:	81da      	strh	r2, [r3, #14]
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 800431c:	4a14      	ldr	r2, [pc, #80]	; (8004370 <engineUpdate+0x248>)
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	7453      	strb	r3, [r2, #17]
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <engineUpdate+0x248>)
 8004324:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004328:	b21b      	sxth	r3, r3
 800432a:	f423 6319 	bic.w	r3, r3, #2448	; 0x990
 800432e:	b21b      	sxth	r3, r3
 8004330:	f443 6308 	orr.w	r3, r3, #2176	; 0x880
 8004334:	b21b      	sxth	r3, r3
 8004336:	b29a      	uxth	r2, r3
 8004338:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <engineUpdate+0x248>)
 800433a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            updateTx(txbeg);
 800433e:	6938      	ldr	r0, [r7, #16]
 8004340:	f7fe f850 	bl	80023e4 <updateTx>
            reportEvent(EV_TXSTART);
 8004344:	2011      	movs	r0, #17
 8004346:	f7fe fa01 	bl	800274c <reportEvent>
            os_radio(RADIO_TX);
 800434a:	2001      	movs	r0, #1
 800434c:	f001 fb36 	bl	80059bc <os_radio>
            return;
 8004350:	e0a3      	b.n	800449a <engineUpdate+0x372>
        }
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8004352:	4b07      	ldr	r3, [pc, #28]	; (8004370 <engineUpdate+0x248>)
 8004354:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 808c 	beq.w	800447a <engineUpdate+0x352>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d119      	bne.n	800439c <engineUpdate+0x274>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	3301      	adds	r3, #1
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	e015      	b.n	800439c <engineUpdate+0x274>
 8004370:	20000304 	.word	0x20000304
 8004374:	00046500 	.word	0x00046500
 8004378:	0002ee00 	.word	0x0002ee00
 800437c:	08003529 	.word	0x08003529
 8004380:	0800276b 	.word	0x0800276b
 8004384:	20000318 	.word	0x20000318
 8004388:	08003639 	.word	0x08003639
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 800438c:	4b44      	ldr	r3, [pc, #272]	; (80044a0 <engineUpdate+0x378>)
 800438e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d07e      	beq.n	8004498 <engineUpdate+0x370>
            return;
    }

    // Are we pingable?
  checkrx:
 800439a:	bf00      	nop
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
 800439c:	4b40      	ldr	r3, [pc, #256]	; (80044a0 <engineUpdate+0x378>)
 800439e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80043a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d041      	beq.n	800442e <engineUpdate+0x306>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	3340      	adds	r3, #64	; 0x40
 80043ae:	4619      	mov	r1, r3
 80043b0:	483c      	ldr	r0, [pc, #240]	; (80044a4 <engineUpdate+0x37c>)
 80043b2:	f7fd fdaf 	bl	8001f14 <rxschedNext>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d038      	beq.n	800442e <engineUpdate+0x306>
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d006      	beq.n	80043d0 <engineUpdate+0x2a8>
 80043c2:	4b37      	ldr	r3, [pc, #220]	; (80044a0 <engineUpdate+0x378>)
 80043c4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	db56      	blt.n	800447e <engineUpdate+0x356>
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
 80043d0:	4b33      	ldr	r3, [pc, #204]	; (80044a0 <engineUpdate+0x378>)
 80043d2:	f893 2137 	ldrb.w	r2, [r3, #311]	; 0x137
 80043d6:	4b32      	ldr	r3, [pc, #200]	; (80044a0 <engineUpdate+0x378>)
 80043d8:	741a      	strb	r2, [r3, #16]
            LMIC.rxtime  = LMIC.ping.rxtime;
 80043da:	4b31      	ldr	r3, [pc, #196]	; (80044a0 <engineUpdate+0x378>)
 80043dc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80043e0:	4a2f      	ldr	r2, [pc, #188]	; (80044a0 <engineUpdate+0x378>)
 80043e2:	6053      	str	r3, [r2, #4]
            LMIC.freq    = LMIC.ping.freq;
 80043e4:	4b2e      	ldr	r3, [pc, #184]	; (80044a0 <engineUpdate+0x378>)
 80043e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80043ea:	4a2d      	ldr	r2, [pc, #180]	; (80044a0 <engineUpdate+0x378>)
 80043ec:	6093      	str	r3, [r2, #8]
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
 80043ee:	4b2c      	ldr	r3, [pc, #176]	; (80044a0 <engineUpdate+0x378>)
 80043f0:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fd f8b3 	bl	8001560 <dndr2rps>
 80043fa:	4603      	mov	r3, r0
 80043fc:	461a      	mov	r2, r3
 80043fe:	4b28      	ldr	r3, [pc, #160]	; (80044a0 <engineUpdate+0x378>)
 8004400:	81da      	strh	r2, [r3, #14]
            LMIC.dataLen = 0;
 8004402:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <engineUpdate+0x378>)
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
 800440a:	4b25      	ldr	r3, [pc, #148]	; (80044a0 <engineUpdate+0x378>)
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	3340      	adds	r3, #64	; 0x40
 8004414:	2b00      	cmp	r3, #0
 8004416:	da01      	bge.n	800441c <engineUpdate+0x2f4>
 8004418:	f7fc fff0 	bl	80013fc <hal_failed>
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
 800441c:	4b20      	ldr	r3, [pc, #128]	; (80044a0 <engineUpdate+0x378>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	3b40      	subs	r3, #64	; 0x40
 8004422:	4a21      	ldr	r2, [pc, #132]	; (80044a8 <engineUpdate+0x380>)
 8004424:	4619      	mov	r1, r3
 8004426:	4821      	ldr	r0, [pc, #132]	; (80044ac <engineUpdate+0x384>)
 8004428:	f000 fd10 	bl	8004e4c <os_setTimedCallback>
            return;
 800442c:	e035      	b.n	800449a <engineUpdate+0x372>
        }
        // no - just wait for the beacon
    }

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d004      	beq.n	800443e <engineUpdate+0x316>
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	db21      	blt.n	8004482 <engineUpdate+0x35a>
        goto txdelay;

    setBcnRxParams();
 800443e:	f7fe f8b7 	bl	80025b0 <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
 8004442:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <engineUpdate+0x378>)
 8004444:	f893 2189 	ldrb.w	r2, [r3, #393]	; 0x189
 8004448:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <engineUpdate+0x378>)
 800444a:	741a      	strb	r2, [r3, #16]
    LMIC.rxtime = LMIC.bcnRxtime;
 800444c:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <engineUpdate+0x378>)
 800444e:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8004452:	4a13      	ldr	r2, [pc, #76]	; (80044a0 <engineUpdate+0x378>)
 8004454:	6053      	str	r3, [r2, #4]
    if( now - rxtime >= 0 ) {
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	db06      	blt.n	800446e <engineUpdate+0x346>
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8004460:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <engineUpdate+0x378>)
 8004462:	4a13      	ldr	r2, [pc, #76]	; (80044b0 <engineUpdate+0x388>)
 8004464:	61da      	str	r2, [r3, #28]
        os_radio(RADIO_RX);
 8004466:	2002      	movs	r0, #2
 8004468:	f001 faa8 	bl	80059bc <os_radio>
        return;
 800446c:	e015      	b.n	800449a <engineUpdate+0x372>
    }
    os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 800446e:	4a11      	ldr	r2, [pc, #68]	; (80044b4 <engineUpdate+0x38c>)
 8004470:	6979      	ldr	r1, [r7, #20]
 8004472:	480e      	ldr	r0, [pc, #56]	; (80044ac <engineUpdate+0x384>)
 8004474:	f000 fcea 	bl	8004e4c <os_setTimedCallback>
    return;
 8004478:	e00f      	b.n	800449a <engineUpdate+0x372>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
 800447a:	bf00      	nop
 800447c:	e002      	b.n	8004484 <engineUpdate+0x35c>
                goto txdelay;
 800447e:	bf00      	nop
 8004480:	e000      	b.n	8004484 <engineUpdate+0x35c>
        goto txdelay;
 8004482:	bf00      	nop
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	3b40      	subs	r3, #64	; 0x40
 8004488:	4a0b      	ldr	r2, [pc, #44]	; (80044b8 <engineUpdate+0x390>)
 800448a:	4619      	mov	r1, r3
 800448c:	4807      	ldr	r0, [pc, #28]	; (80044ac <engineUpdate+0x384>)
 800448e:	f000 fcdd 	bl	8004e4c <os_setTimedCallback>
 8004492:	e002      	b.n	800449a <engineUpdate+0x372>
        return;
 8004494:	bf00      	nop
 8004496:	e000      	b.n	800449a <engineUpdate+0x372>
            return;
 8004498:	bf00      	nop
}
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000304 	.word	0x20000304
 80044a4:	20000438 	.word	0x20000438
 80044a8:	08004105 	.word	0x08004105
 80044ac:	20000318 	.word	0x20000318
 80044b0:	08003ec9 	.word	0x08003ec9
 80044b4:	080040e1 	.word	0x080040e1
 80044b8:	08002739 	.word	0x08002739

080044bc <LMIC_reset>:
    os_radio(RADIO_RST);
    LMIC.opmode |= OP_SHUTDOWN;
}


void LMIC_reset (void) {
 80044bc:	b598      	push	{r3, r4, r7, lr}
 80044be:	af00      	add	r7, sp, #0
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
 80044c0:	2000      	movs	r0, #0
 80044c2:	f001 fa7b 	bl	80059bc <os_radio>
    os_clearCallback(&LMIC.osjob);
 80044c6:	4821      	ldr	r0, [pc, #132]	; (800454c <LMIC_reset+0x90>)
 80044c8:	f000 fc7c 	bl	8004dc4 <os_clearCallback>

    os_clearMem((xref2u1_t)&LMIC,SIZEOFEXPR(LMIC));
 80044cc:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80044d0:	2100      	movs	r1, #0
 80044d2:	481f      	ldr	r0, [pc, #124]	; (8004550 <LMIC_reset+0x94>)
 80044d4:	f007 f907 	bl	800b6e6 <memset>
    LMIC.devaddr      =  0;
 80044d8:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <LMIC_reset+0x94>)
 80044da:	2200      	movs	r2, #0
 80044dc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    LMIC.devNonce     =  os_getRndU2();
 80044e0:	f001 f970 	bl	80057c4 <radio_rand1>
 80044e4:	4603      	mov	r3, r0
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	b21c      	sxth	r4, r3
 80044ea:	f001 f96b 	bl	80057c4 <radio_rand1>
 80044ee:	4603      	mov	r3, r0
 80044f0:	b21b      	sxth	r3, r3
 80044f2:	4323      	orrs	r3, r4
 80044f4:	b21b      	sxth	r3, r3
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	4b15      	ldr	r3, [pc, #84]	; (8004550 <LMIC_reset+0x94>)
 80044fa:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
    LMIC.opmode       =  OP_NONE;
 80044fe:	4b14      	ldr	r3, [pc, #80]	; (8004550 <LMIC_reset+0x94>)
 8004500:	2200      	movs	r2, #0
 8004502:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    LMIC.errcr        =  CR_4_5;
 8004506:	4b12      	ldr	r3, [pc, #72]	; (8004550 <LMIC_reset+0x94>)
 8004508:	2200      	movs	r2, #0
 800450a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    LMIC.adrEnabled   =  FCT_ADREN;
 800450e:	4b10      	ldr	r3, [pc, #64]	; (8004550 <LMIC_reset+0x94>)
 8004510:	2280      	movs	r2, #128	; 0x80
 8004512:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
 8004516:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <LMIC_reset+0x94>)
 8004518:	2200      	movs	r2, #0
 800451a:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
 800451e:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <LMIC_reset+0x94>)
 8004520:	4a0c      	ldr	r2, [pc, #48]	; (8004554 <LMIC_reset+0x98>)
 8004522:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    LMIC.rxDelay      =  DELAY_DNW1;
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <LMIC_reset+0x94>)
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
 800452e:	4b08      	ldr	r3, [pc, #32]	; (8004550 <LMIC_reset+0x94>)
 8004530:	4a08      	ldr	r2, [pc, #32]	; (8004554 <LMIC_reset+0x98>)
 8004532:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    LMIC.ping.dr      =  DR_PING;   // ditto
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <LMIC_reset+0x94>)
 8004538:	2203      	movs	r2, #3
 800453a:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    LMIC.ping.intvExp =  0xFF;
 800453e:	4b04      	ldr	r3, [pc, #16]	; (8004550 <LMIC_reset+0x94>)
 8004540:	22ff      	movs	r2, #255	; 0xff
 8004542:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    DO_DEVDB(LMIC.dn2Dr,        dn2Dr);
    DO_DEVDB(LMIC.dn2Freq,      dn2Freq);
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 8004546:	bf00      	nop
 8004548:	bd98      	pop	{r3, r4, r7, pc}
 800454a:	bf00      	nop
 800454c:	20000318 	.word	0x20000318
 8004550:	20000304 	.word	0x20000304
 8004554:	33d3e608 	.word	0x33d3e608

08004558 <LMIC_init>:


void LMIC_init (void) {
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
    LMIC.opmode = OP_SHUTDOWN;
 800455c:	4b04      	ldr	r3, [pc, #16]	; (8004570 <LMIC_init+0x18>)
 800455e:	2240      	movs	r2, #64	; 0x40
 8004560:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
}
 8004564:	bf00      	nop
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20000304 	.word	0x20000304

08004574 <LMIC_setTxData>:
    os_radio(RADIO_RST);
    engineUpdate();
}


void LMIC_setTxData (void) {
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
    LMIC.opmode |= OP_TXDATA;
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <LMIC_setTxData+0x34>)
 800457a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800457e:	f043 0308 	orr.w	r3, r3, #8
 8004582:	b29a      	uxth	r2, r3
 8004584:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <LMIC_setTxData+0x34>)
 8004586:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    if( (LMIC.opmode & OP_JOINING) == 0 )
 800458a:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <LMIC_setTxData+0x34>)
 800458c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d103      	bne.n	80045a0 <LMIC_setTxData+0x2c>
        LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 8004598:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <LMIC_setTxData+0x34>)
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
    engineUpdate();
 80045a0:	f7ff fdc2 	bl	8004128 <engineUpdate>
}
 80045a4:	bf00      	nop
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20000304 	.word	0x20000304

080045ac <LMIC_setTxData2>:


//
int LMIC_setTxData2 (u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed) {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6039      	str	r1, [r7, #0]
 80045b4:	4611      	mov	r1, r2
 80045b6:	461a      	mov	r2, r3
 80045b8:	4603      	mov	r3, r0
 80045ba:	71fb      	strb	r3, [r7, #7]
 80045bc:	460b      	mov	r3, r1
 80045be:	71bb      	strb	r3, [r7, #6]
 80045c0:	4613      	mov	r3, r2
 80045c2:	717b      	strb	r3, [r7, #5]
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
 80045c4:	79bb      	ldrb	r3, [r7, #6]
 80045c6:	2b34      	cmp	r3, #52	; 0x34
 80045c8:	d902      	bls.n	80045d0 <LMIC_setTxData2+0x24>
        return -2;
 80045ca:	f06f 0301 	mvn.w	r3, #1
 80045ce:	e017      	b.n	8004600 <LMIC_setTxData2+0x54>
    if( data != (xref2u1_t)0 )
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <LMIC_setTxData2+0x36>
        os_copyMem(LMIC.pendTxData, data, dlen);
 80045d6:	79bb      	ldrb	r3, [r7, #6]
 80045d8:	461a      	mov	r2, r3
 80045da:	6839      	ldr	r1, [r7, #0]
 80045dc:	480a      	ldr	r0, [pc, #40]	; (8004608 <LMIC_setTxData2+0x5c>)
 80045de:	f007 f877 	bl	800b6d0 <memcpy>
    LMIC.pendTxConf = confirmed;
 80045e2:	4a0a      	ldr	r2, [pc, #40]	; (800460c <LMIC_setTxData2+0x60>)
 80045e4:	797b      	ldrb	r3, [r7, #5]
 80045e6:	f882 30bb 	strb.w	r3, [r2, #187]	; 0xbb
    LMIC.pendTxPort = port;
 80045ea:	4a08      	ldr	r2, [pc, #32]	; (800460c <LMIC_setTxData2+0x60>)
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	f882 30ba 	strb.w	r3, [r2, #186]	; 0xba
    LMIC.pendTxLen  = dlen;
 80045f2:	4a06      	ldr	r2, [pc, #24]	; (800460c <LMIC_setTxData2+0x60>)
 80045f4:	79bb      	ldrb	r3, [r7, #6]
 80045f6:	f882 30bc 	strb.w	r3, [r2, #188]	; 0xbc
    LMIC_setTxData();
 80045fa:	f7ff ffbb 	bl	8004574 <LMIC_setTxData>
    return 0;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	200003c1 	.word	0x200003c1
 800460c:	20000304 	.word	0x20000304

08004610 <os_getArtEui>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// provide application router ID (8 bytes, LSBF)
void os_getArtEui (u1_t* buf) {
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
    memcpy(buf, APPEUI, 8);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4906      	ldr	r1, [pc, #24]	; (8004634 <os_getArtEui+0x24>)
 800461c:	461a      	mov	r2, r3
 800461e:	460b      	mov	r3, r1
 8004620:	cb03      	ldmia	r3!, {r0, r1}
 8004622:	6010      	str	r0, [r2, #0]
 8004624:	6051      	str	r1, [r2, #4]
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	0800cd68 	.word	0x0800cd68

08004638 <os_getDevEui>:

// provide device ID (8 bytes, LSBF)
void os_getDevEui (u1_t* buf) {
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
    memcpy(buf, DEVEUI, 8);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4906      	ldr	r1, [pc, #24]	; (800465c <os_getDevEui+0x24>)
 8004644:	461a      	mov	r2, r3
 8004646:	460b      	mov	r3, r1
 8004648:	cb03      	ldmia	r3!, {r0, r1}
 800464a:	6010      	str	r0, [r2, #0]
 800464c:	6051      	str	r1, [r2, #4]
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	0800cd60 	.word	0x0800cd60

08004660 <os_getDevKey>:

// provide device key (16 bytes)
void os_getDevKey (u1_t* buf) {
 8004660:	b4b0      	push	{r4, r5, r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
    memcpy(buf, DEVKEY, 16);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a06      	ldr	r2, [pc, #24]	; (8004684 <os_getDevKey+0x24>)
 800466c:	461c      	mov	r4, r3
 800466e:	4615      	mov	r5, r2
 8004670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004672:	6020      	str	r0, [r4, #0]
 8004674:	6061      	str	r1, [r4, #4]
 8004676:	60a2      	str	r2, [r4, #8]
 8004678:	60e3      	str	r3, [r4, #12]
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	bcb0      	pop	{r4, r5, r7}
 8004682:	4770      	bx	lr
 8004684:	0800cd70 	.word	0x0800cd70

08004688 <initsensor>:

void initsensor(){
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
	 // Here you init your sensors
}
 800468c:	bf00      	nop
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <initfunc>:

void initfunc (osjob_t* j) {
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
    // intialize sensor hardware
    initsensor();
 800469e:	f7ff fff3 	bl	8004688 <initsensor>
    // reset MAC state
    LMIC_reset();
 80046a2:	f7ff ff0b 	bl	80044bc <LMIC_reset>
    // start joining
    LMIC_startJoining();
 80046a6:	f7ff fab3 	bl	8003c10 <LMIC_startJoining>
    // init done - onEvent() callback will be invoked...
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <reportfunc>:


static osjob_t reportjob;

// report sensor value every minute
static void reportfunc (osjob_t* j) {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
    // read sensor
	int pm25 = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]
	int pm10 = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60bb      	str	r3, [r7, #8]
	hpmStartParticleMeasurement();
 80046c4:	f001 fb32 	bl	8005d2c <hpmStartParticleMeasurement>
	HAL_Delay(5000);
 80046c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80046cc:	f001 fdb6 	bl	800623c <HAL_Delay>
	hpmReadResults(&pm25,&pm10);
 80046d0:	f107 0208 	add.w	r2, r7, #8
 80046d4:	f107 030c 	add.w	r3, r7, #12
 80046d8:	4611      	mov	r1, r2
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 fae4 	bl	8005ca8 <hpmReadResults>
	hpmStopParticleMeasurement();
 80046e0:	f001 fb45 	bl	8005d6e <hpmStopParticleMeasurement>
	//u2_t * frame;
    //frame = readsensor();
    //debug_val("val = ", val);
    // prepare and schedule data for transmission
    LMIC.frame[0] = pm25 >> 8;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	121b      	asrs	r3, r3, #8
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	4b14      	ldr	r3, [pc, #80]	; (800473c <reportfunc+0x88>)
 80046ec:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    LMIC.frame[1] = pm25;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	4b11      	ldr	r3, [pc, #68]	; (800473c <reportfunc+0x88>)
 80046f6:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    LMIC.frame[2] = pm10 >> 8;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	121b      	asrs	r3, r3, #8
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	4b0e      	ldr	r3, [pc, #56]	; (800473c <reportfunc+0x88>)
 8004702:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    LMIC.frame[3] = pm10;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	4b0c      	ldr	r3, [pc, #48]	; (800473c <reportfunc+0x88>)
 800470c:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    LMIC_setTxData2(1, LMIC.frame, 4, 0); // (port 1, 2 bytes, unconfirmed)
 8004710:	2300      	movs	r3, #0
 8004712:	2204      	movs	r2, #4
 8004714:	490a      	ldr	r1, [pc, #40]	; (8004740 <reportfunc+0x8c>)
 8004716:	2001      	movs	r0, #1
 8004718:	f7ff ff48 	bl	80045ac <LMIC_setTxData2>
    // reschedule job in 60 seconds
    os_setTimedCallback(j, os_getTime()+sec2osticks(30), reportfunc);
 800471c:	f000 fb2c 	bl	8004d78 <os_getTime>
 8004720:	4603      	mov	r3, r0
 8004722:	f503 236a 	add.w	r3, r3, #958464	; 0xea000
 8004726:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800472a:	4a06      	ldr	r2, [pc, #24]	; (8004744 <reportfunc+0x90>)
 800472c:	4619      	mov	r1, r3
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fb8c 	bl	8004e4c <os_setTimedCallback>
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20000304 	.word	0x20000304
 8004740:	2000044c 	.word	0x2000044c
 8004744:	080046b5 	.word	0x080046b5

08004748 <onEvent>:

//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////

void onEvent (ev_t ev) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	71fb      	strb	r3, [r7, #7]
    debug_event(ev);
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	4618      	mov	r0, r3
 8004756:	f7fc fc9d 	bl	8001094 <debug_event>

    switch(ev) {
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	3b01      	subs	r3, #1
 800475e:	2b0e      	cmp	r3, #14
 8004760:	d879      	bhi.n	8004856 <onEvent+0x10e>
 8004762:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <onEvent+0x20>)
 8004764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004768:	080047c3 	.word	0x080047c3
 800476c:	080047cb 	.word	0x080047cb
 8004770:	080047d3 	.word	0x080047d3
 8004774:	080047db 	.word	0x080047db
 8004778:	080047a5 	.word	0x080047a5
 800477c:	080047ad 	.word	0x080047ad
 8004780:	080047e3 	.word	0x080047e3
 8004784:	080047bb 	.word	0x080047bb
 8004788:	080047eb 	.word	0x080047eb
 800478c:	080047f3 	.word	0x080047f3
 8004790:	0800482f 	.word	0x0800482f
 8004794:	08004837 	.word	0x08004837
 8004798:	0800483f 	.word	0x0800483f
 800479c:	08004847 	.word	0x08004847
 80047a0:	0800484f 	.word	0x0800484f

      // network joined, session established
      case EV_JOINING:
       	  debug_str("try joining\r\n");
 80047a4:	4830      	ldr	r0, [pc, #192]	; (8004868 <onEvent+0x120>)
 80047a6:	f7fc fc61 	bl	800106c <debug_str>
       	  break;
 80047aa:	e059      	b.n	8004860 <onEvent+0x118>
      case EV_JOINED:
          //debug_led(1);
    	  debug_str("joined\r\n");
 80047ac:	482f      	ldr	r0, [pc, #188]	; (800486c <onEvent+0x124>)
 80047ae:	f7fc fc5d 	bl	800106c <debug_str>
          // kick-off periodic sensor job
          reportfunc(&reportjob);
 80047b2:	482f      	ldr	r0, [pc, #188]	; (8004870 <onEvent+0x128>)
 80047b4:	f7ff ff7e 	bl	80046b4 <reportfunc>
          break;
 80047b8:	e052      	b.n	8004860 <onEvent+0x118>
      case EV_JOIN_FAILED:
    	  debug_str("join failed\r\n");
 80047ba:	482e      	ldr	r0, [pc, #184]	; (8004874 <onEvent+0x12c>)
 80047bc:	f7fc fc56 	bl	800106c <debug_str>
    	  break;
 80047c0:	e04e      	b.n	8004860 <onEvent+0x118>
      case EV_SCAN_TIMEOUT:
    	  debug_str("EV_SCAN_TIMEOUT\r\n");
 80047c2:	482d      	ldr	r0, [pc, #180]	; (8004878 <onEvent+0x130>)
 80047c4:	f7fc fc52 	bl	800106c <debug_str>
		  break;
 80047c8:	e04a      	b.n	8004860 <onEvent+0x118>
	  case EV_BEACON_FOUND:
		  debug_str("EV_BEACON_FOUND\r\n");
 80047ca:	482c      	ldr	r0, [pc, #176]	; (800487c <onEvent+0x134>)
 80047cc:	f7fc fc4e 	bl	800106c <debug_str>
		  break;
 80047d0:	e046      	b.n	8004860 <onEvent+0x118>
	  case EV_BEACON_MISSED:
		  debug_str("EV_BEACON_MISSED\r\n");
 80047d2:	482b      	ldr	r0, [pc, #172]	; (8004880 <onEvent+0x138>)
 80047d4:	f7fc fc4a 	bl	800106c <debug_str>
		  break;
 80047d8:	e042      	b.n	8004860 <onEvent+0x118>
	  case EV_BEACON_TRACKED:
		  debug_str("EV_BEACON_TRACKED\r\n");
 80047da:	482a      	ldr	r0, [pc, #168]	; (8004884 <onEvent+0x13c>)
 80047dc:	f7fc fc46 	bl	800106c <debug_str>
		  break;
 80047e0:	e03e      	b.n	8004860 <onEvent+0x118>
	  case EV_RFU1:
		  debug_str("EV_RFU1\r\n");
 80047e2:	4829      	ldr	r0, [pc, #164]	; (8004888 <onEvent+0x140>)
 80047e4:	f7fc fc42 	bl	800106c <debug_str>
		  break;
 80047e8:	e03a      	b.n	8004860 <onEvent+0x118>
	  case EV_REJOIN_FAILED:
		  debug_str("EV_REJOIN_FAILED\r\n");
 80047ea:	4828      	ldr	r0, [pc, #160]	; (800488c <onEvent+0x144>)
 80047ec:	f7fc fc3e 	bl	800106c <debug_str>
		  break;
 80047f0:	e036      	b.n	8004860 <onEvent+0x118>
	  case EV_TXCOMPLETE:
		  debug_str("EV_TXCOMPLETE (includes waiting for RX windows)\r\n");
 80047f2:	4827      	ldr	r0, [pc, #156]	; (8004890 <onEvent+0x148>)
 80047f4:	f7fc fc3a 	bl	800106c <debug_str>
		  if (LMIC.txrxFlags & TXRX_ACK)
 80047f8:	4b26      	ldr	r3, [pc, #152]	; (8004894 <onEvent+0x14c>)
 80047fa:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 80047fe:	b25b      	sxtb	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	da02      	bge.n	800480a <onEvent+0xc2>
			  debug_str("Received ack\r\n");
 8004804:	4824      	ldr	r0, [pc, #144]	; (8004898 <onEvent+0x150>)
 8004806:	f7fc fc31 	bl	800106c <debug_str>
		  if (LMIC.dataLen) {
 800480a:	4b22      	ldr	r3, [pc, #136]	; (8004894 <onEvent+0x14c>)
 800480c:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8004810:	2b00      	cmp	r3, #0
 8004812:	d024      	beq.n	800485e <onEvent+0x116>
			  debug_str("Received ");
 8004814:	4821      	ldr	r0, [pc, #132]	; (800489c <onEvent+0x154>)
 8004816:	f7fc fc29 	bl	800106c <debug_str>
			  debug_str(LMIC.dataLen);
 800481a:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <onEvent+0x14c>)
 800481c:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8004820:	4618      	mov	r0, r3
 8004822:	f7fc fc23 	bl	800106c <debug_str>
			  debug_str(" bytes of payload\r\n");
 8004826:	481e      	ldr	r0, [pc, #120]	; (80048a0 <onEvent+0x158>)
 8004828:	f7fc fc20 	bl	800106c <debug_str>
		  }
		  break;
 800482c:	e017      	b.n	800485e <onEvent+0x116>
	  case EV_LOST_TSYNC:
		  debug_str("EV_LOST_TSYNC\r\n");
 800482e:	481d      	ldr	r0, [pc, #116]	; (80048a4 <onEvent+0x15c>)
 8004830:	f7fc fc1c 	bl	800106c <debug_str>
		  break;
 8004834:	e014      	b.n	8004860 <onEvent+0x118>
	  case EV_RESET:
		  debug_str("EV_RESET\r\n");
 8004836:	481c      	ldr	r0, [pc, #112]	; (80048a8 <onEvent+0x160>)
 8004838:	f7fc fc18 	bl	800106c <debug_str>
		  break;
 800483c:	e010      	b.n	8004860 <onEvent+0x118>
	  case EV_RXCOMPLETE:
		  // data received in ping slot
		  debug_str("EV_RXCOMPLETE\r\n");
 800483e:	481b      	ldr	r0, [pc, #108]	; (80048ac <onEvent+0x164>)
 8004840:	f7fc fc14 	bl	800106c <debug_str>
		  break;
 8004844:	e00c      	b.n	8004860 <onEvent+0x118>
	  case EV_LINK_DEAD:
		  debug_str("EV_LINK_DEAD\r\n");
 8004846:	481a      	ldr	r0, [pc, #104]	; (80048b0 <onEvent+0x168>)
 8004848:	f7fc fc10 	bl	800106c <debug_str>
		  break;
 800484c:	e008      	b.n	8004860 <onEvent+0x118>
	  case EV_LINK_ALIVE:
		  debug_str("EV_LINK_ALIVE\r\n");
 800484e:	4819      	ldr	r0, [pc, #100]	; (80048b4 <onEvent+0x16c>)
 8004850:	f7fc fc0c 	bl	800106c <debug_str>
		  break;
 8004854:	e004      	b.n	8004860 <onEvent+0x118>
	  default:
		   debug_str("\r\n");
 8004856:	4818      	ldr	r0, [pc, #96]	; (80048b8 <onEvent+0x170>)
 8004858:	f7fc fc08 	bl	800106c <debug_str>
		  break;
 800485c:	e000      	b.n	8004860 <onEvent+0x118>
		  break;
 800485e:	bf00      	nop
    }
}
 8004860:	bf00      	nop
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	0800b830 	.word	0x0800b830
 800486c:	0800b840 	.word	0x0800b840
 8004870:	20000078 	.word	0x20000078
 8004874:	0800b84c 	.word	0x0800b84c
 8004878:	0800b85c 	.word	0x0800b85c
 800487c:	0800b870 	.word	0x0800b870
 8004880:	0800b884 	.word	0x0800b884
 8004884:	0800b898 	.word	0x0800b898
 8004888:	0800b8ac 	.word	0x0800b8ac
 800488c:	0800b8b8 	.word	0x0800b8b8
 8004890:	0800b8cc 	.word	0x0800b8cc
 8004894:	20000304 	.word	0x20000304
 8004898:	0800b900 	.word	0x0800b900
 800489c:	0800b910 	.word	0x0800b910
 80048a0:	0800b91c 	.word	0x0800b91c
 80048a4:	0800b930 	.word	0x0800b930
 80048a8:	0800b940 	.word	0x0800b940
 80048ac:	0800b94c 	.word	0x0800b94c
 80048b0:	0800b95c 	.word	0x0800b95c
 80048b4:	0800b96c 	.word	0x0800b96c
 80048b8:	0800b97c 	.word	0x0800b97c

080048bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80048c2:	f001 fc43 	bl	800614c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048c6:	f000 f837 	bl	8004938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048ca:	f000 f9a3 	bl	8004c14 <MX_GPIO_Init>
  MX_SPI1_Init();
 80048ce:	f000 f8ab 	bl	8004a28 <MX_SPI1_Init>
  MX_TIM4_Init();
 80048d2:	f000 f8e7 	bl	8004aa4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80048d6:	f000 f96d 	bl	8004bb4 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80048da:	f000 f93b 	bl	8004b54 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);    // <-----------  change to your setup
 80048de:	4811      	ldr	r0, [pc, #68]	; (8004924 <main+0x68>)
 80048e0:	f004 fd94 	bl	800940c <HAL_TIM_Base_Start_IT>
  __HAL_SPI_ENABLE(&hspi1);         // <-----------  change to your setup
 80048e4:	4b10      	ldr	r3, [pc, #64]	; (8004928 <main+0x6c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4b0f      	ldr	r3, [pc, #60]	; (8004928 <main+0x6c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048f2:	601a      	str	r2, [r3, #0]

  osjob_t initjob;

  // initialize runtime env
  os_init();
 80048f4:	f000 fa2e 	bl	8004d54 <os_init>

  // initialize debug library
  debug_init();
 80048f8:	f7fc fb82 	bl	8001000 <debug_init>

  // Configure UART for Air-Sensor
  debug_str("Configuring Sensor\r\n");
 80048fc:	480b      	ldr	r0, [pc, #44]	; (800492c <main+0x70>)
 80048fe:	f7fc fbb5 	bl	800106c <debug_str>
  hpmSetUart(&huart4);
 8004902:	480b      	ldr	r0, [pc, #44]	; (8004930 <main+0x74>)
 8004904:	f001 f9c0 	bl	8005c88 <hpmSetUart>
  hpmStopAutoSend();
 8004908:	f001 fa52 	bl	8005db0 <hpmStopAutoSend>
  // setup initial job
   os_setCallback(&initjob, initfunc);
 800490c:	1d3b      	adds	r3, r7, #4
 800490e:	4909      	ldr	r1, [pc, #36]	; (8004934 <main+0x78>)
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fa75 	bl	8004e00 <os_setCallback>
  // execute scheduled jobs and events
  os_runloop();
 8004916:	f000 facf 	bl	8004eb8 <os_runloop>
  // (not reached)
  return 0;
 800491a:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	20000160 	.word	0x20000160
 8004928:	20000220 	.word	0x20000220
 800492c:	0800b980 	.word	0x0800b980
 8004930:	200001a0 	.word	0x200001a0
 8004934:	08004697 	.word	0x08004697

08004938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b0b8      	sub	sp, #224	; 0xe0
 800493c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800493e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004942:	2244      	movs	r2, #68	; 0x44
 8004944:	2100      	movs	r1, #0
 8004946:	4618      	mov	r0, r3
 8004948:	f006 fecd 	bl	800b6e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800494c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	605a      	str	r2, [r3, #4]
 8004956:	609a      	str	r2, [r3, #8]
 8004958:	60da      	str	r2, [r3, #12]
 800495a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800495c:	463b      	mov	r3, r7
 800495e:	2288      	movs	r2, #136	; 0x88
 8004960:	2100      	movs	r1, #0
 8004962:	4618      	mov	r0, r3
 8004964:	f006 febf 	bl	800b6e6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004968:	2302      	movs	r3, #2
 800496a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800496e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004972:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004976:	2310      	movs	r3, #16
 8004978:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800497c:	2302      	movs	r3, #2
 800497e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004982:	2302      	movs	r3, #2
 8004984:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004988:	2301      	movs	r3, #1
 800498a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 9;
 800498e:	2309      	movs	r3, #9
 8004990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004994:	2307      	movs	r3, #7
 8004996:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800499a:	2302      	movs	r3, #2
 800499c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80049a0:	2302      	movs	r3, #2
 80049a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80049aa:	4618      	mov	r0, r3
 80049ac:	f002 f8ee 	bl	8006b8c <HAL_RCC_OscConfig>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80049b6:	f000 f9bb 	bl	8004d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049ba:	230f      	movs	r3, #15
 80049bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049c0:	2303      	movs	r3, #3
 80049c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049d2:	2300      	movs	r3, #0
 80049d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80049d8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80049dc:	2104      	movs	r1, #4
 80049de:	4618      	mov	r0, r3
 80049e0:	f002 fdc2 	bl	8007568 <HAL_RCC_ClockConfig>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80049ea:	f000 f9a1 	bl	8004d30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4;
 80049ee:	230a      	movs	r3, #10
 80049f0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80049f2:	2300      	movs	r3, #0
 80049f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80049f6:	2300      	movs	r3, #0
 80049f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049fa:	463b      	mov	r3, r7
 80049fc:	4618      	mov	r0, r3
 80049fe:	f003 f857 	bl	8007ab0 <HAL_RCCEx_PeriphCLKConfig>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004a08:	f000 f992 	bl	8004d30 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004a0c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a10:	f002 f85a 	bl	8006ac8 <HAL_PWREx_ControlVoltageScaling>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8004a1a:	f000 f989 	bl	8004d30 <Error_Handler>
  }
}
 8004a1e:	bf00      	nop
 8004a20:	37e0      	adds	r7, #224	; 0xe0
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <MX_SPI1_Init+0x74>)
 8004a2e:	4a1c      	ldr	r2, [pc, #112]	; (8004aa0 <MX_SPI1_Init+0x78>)
 8004a30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004a32:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <MX_SPI1_Init+0x74>)
 8004a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004a3a:	4b18      	ldr	r3, [pc, #96]	; (8004a9c <MX_SPI1_Init+0x74>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a40:	4b16      	ldr	r3, [pc, #88]	; (8004a9c <MX_SPI1_Init+0x74>)
 8004a42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004a46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a48:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <MX_SPI1_Init+0x74>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a4e:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <MX_SPI1_Init+0x74>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004a54:	4b11      	ldr	r3, [pc, #68]	; (8004a9c <MX_SPI1_Init+0x74>)
 8004a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004a5c:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <MX_SPI1_Init+0x74>)
 8004a5e:	2230      	movs	r2, #48	; 0x30
 8004a60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a62:	4b0e      	ldr	r3, [pc, #56]	; (8004a9c <MX_SPI1_Init+0x74>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a68:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <MX_SPI1_Init+0x74>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <MX_SPI1_Init+0x74>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004a74:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <MX_SPI1_Init+0x74>)
 8004a76:	2207      	movs	r2, #7
 8004a78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004a7a:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <MX_SPI1_Init+0x74>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004a80:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <MX_SPI1_Init+0x74>)
 8004a82:	2208      	movs	r2, #8
 8004a84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004a86:	4805      	ldr	r0, [pc, #20]	; (8004a9c <MX_SPI1_Init+0x74>)
 8004a88:	f003 fffa 	bl	8008a80 <HAL_SPI_Init>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004a92:	f000 f94d 	bl	8004d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004a96:	bf00      	nop
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000220 	.word	0x20000220
 8004aa0:	40013000 	.word	0x40013000

08004aa4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08a      	sub	sp, #40	; 0x28
 8004aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004aaa:	f107 031c 	add.w	r3, r7, #28
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	605a      	str	r2, [r3, #4]
 8004ab4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ab6:	463b      	mov	r3, r7
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	605a      	str	r2, [r3, #4]
 8004abe:	609a      	str	r2, [r3, #8]
 8004ac0:	60da      	str	r2, [r3, #12]
 8004ac2:	611a      	str	r2, [r3, #16]
 8004ac4:	615a      	str	r2, [r3, #20]
 8004ac6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004ac8:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <MX_TIM4_Init+0xa8>)
 8004aca:	4a21      	ldr	r2, [pc, #132]	; (8004b50 <MX_TIM4_Init+0xac>)
 8004acc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2250-1;
 8004ace:	4b1f      	ldr	r3, [pc, #124]	; (8004b4c <MX_TIM4_Init+0xa8>)
 8004ad0:	f640 02c9 	movw	r2, #2249	; 0x8c9
 8004ad4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ad6:	4b1d      	ldr	r3, [pc, #116]	; (8004b4c <MX_TIM4_Init+0xa8>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 8004adc:	4b1b      	ldr	r3, [pc, #108]	; (8004b4c <MX_TIM4_Init+0xa8>)
 8004ade:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004ae2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ae4:	4b19      	ldr	r3, [pc, #100]	; (8004b4c <MX_TIM4_Init+0xa8>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004aea:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <MX_TIM4_Init+0xa8>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8004af0:	4816      	ldr	r0, [pc, #88]	; (8004b4c <MX_TIM4_Init+0xa8>)
 8004af2:	f004 fd05 	bl	8009500 <HAL_TIM_OC_Init>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8004afc:	f000 f918 	bl	8004d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b08:	f107 031c 	add.w	r3, r7, #28
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	480f      	ldr	r0, [pc, #60]	; (8004b4c <MX_TIM4_Init+0xa8>)
 8004b10:	f005 fc92 	bl	800a438 <HAL_TIMEx_MasterConfigSynchronization>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8004b1a:	f000 f909 	bl	8004d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b2e:	463b      	mov	r3, r7
 8004b30:	2200      	movs	r2, #0
 8004b32:	4619      	mov	r1, r3
 8004b34:	4805      	ldr	r0, [pc, #20]	; (8004b4c <MX_TIM4_Init+0xa8>)
 8004b36:	f004 feb9 	bl	80098ac <HAL_TIM_OC_ConfigChannel>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8004b40:	f000 f8f6 	bl	8004d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004b44:	bf00      	nop
 8004b46:	3728      	adds	r7, #40	; 0x28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20000160 	.word	0x20000160
 8004b50:	40000800 	.word	0x40000800

08004b54 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004b58:	4b14      	ldr	r3, [pc, #80]	; (8004bac <MX_UART4_Init+0x58>)
 8004b5a:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <MX_UART4_Init+0x5c>)
 8004b5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <MX_UART4_Init+0x58>)
 8004b60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004b64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004b66:	4b11      	ldr	r3, [pc, #68]	; (8004bac <MX_UART4_Init+0x58>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <MX_UART4_Init+0x58>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004b72:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <MX_UART4_Init+0x58>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <MX_UART4_Init+0x58>)
 8004b7a:	220c      	movs	r2, #12
 8004b7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <MX_UART4_Init+0x58>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b84:	4b09      	ldr	r3, [pc, #36]	; (8004bac <MX_UART4_Init+0x58>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <MX_UART4_Init+0x58>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <MX_UART4_Init+0x58>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004b96:	4805      	ldr	r0, [pc, #20]	; (8004bac <MX_UART4_Init+0x58>)
 8004b98:	f005 fd92 	bl	800a6c0 <HAL_UART_Init>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8004ba2:	f000 f8c5 	bl	8004d30 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	200001a0 	.word	0x200001a0
 8004bb0:	40004c00 	.word	0x40004c00

08004bb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004bb8:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <MX_USART2_UART_Init+0x58>)
 8004bba:	4a15      	ldr	r2, [pc, #84]	; (8004c10 <MX_USART2_UART_Init+0x5c>)
 8004bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004bbe:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <MX_USART2_UART_Init+0x58>)
 8004bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004bc6:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <MX_USART2_UART_Init+0x58>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004bcc:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <MX_USART2_UART_Init+0x58>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004bd2:	4b0e      	ldr	r3, [pc, #56]	; (8004c0c <MX_USART2_UART_Init+0x58>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <MX_USART2_UART_Init+0x58>)
 8004bda:	220c      	movs	r2, #12
 8004bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bde:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <MX_USART2_UART_Init+0x58>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004be4:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <MX_USART2_UART_Init+0x58>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bea:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <MX_USART2_UART_Init+0x58>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bf0:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <MX_USART2_UART_Init+0x58>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004bf6:	4805      	ldr	r0, [pc, #20]	; (8004c0c <MX_USART2_UART_Init+0x58>)
 8004bf8:	f005 fd62 	bl	800a6c0 <HAL_UART_Init>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004c02:	f000 f895 	bl	8004d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c06:	bf00      	nop
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000284 	.word	0x20000284
 8004c10:	40004400 	.word	0x40004400

08004c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08a      	sub	sp, #40	; 0x28
 8004c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c1a:	f107 0314 	add.w	r3, r7, #20
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	605a      	str	r2, [r3, #4]
 8004c24:	609a      	str	r2, [r3, #8]
 8004c26:	60da      	str	r2, [r3, #12]
 8004c28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c2a:	4b3d      	ldr	r3, [pc, #244]	; (8004d20 <MX_GPIO_Init+0x10c>)
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2e:	4a3c      	ldr	r2, [pc, #240]	; (8004d20 <MX_GPIO_Init+0x10c>)
 8004c30:	f043 0304 	orr.w	r3, r3, #4
 8004c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c36:	4b3a      	ldr	r3, [pc, #232]	; (8004d20 <MX_GPIO_Init+0x10c>)
 8004c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c42:	4b37      	ldr	r3, [pc, #220]	; (8004d20 <MX_GPIO_Init+0x10c>)
 8004c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c46:	4a36      	ldr	r2, [pc, #216]	; (8004d20 <MX_GPIO_Init+0x10c>)
 8004c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c4e:	4b34      	ldr	r3, [pc, #208]	; (8004d20 <MX_GPIO_Init+0x10c>)
 8004c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c5a:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <MX_GPIO_Init+0x10c>)
 8004c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5e:	4a30      	ldr	r2, [pc, #192]	; (8004d20 <MX_GPIO_Init+0x10c>)
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c66:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <MX_GPIO_Init+0x10c>)
 8004c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c72:	4b2b      	ldr	r3, [pc, #172]	; (8004d20 <MX_GPIO_Init+0x10c>)
 8004c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c76:	4a2a      	ldr	r2, [pc, #168]	; (8004d20 <MX_GPIO_Init+0x10c>)
 8004c78:	f043 0302 	orr.w	r3, r3, #2
 8004c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c7e:	4b28      	ldr	r3, [pc, #160]	; (8004d20 <MX_GPIO_Init+0x10c>)
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	607b      	str	r3, [r7, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RST_Pin|LED_Pin, GPIO_PIN_RESET);
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004c90:	4824      	ldr	r0, [pc, #144]	; (8004d24 <MX_GPIO_Init+0x110>)
 8004c92:	f001 fec3 	bl	8006a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8004c96:	2200      	movs	r2, #0
 8004c98:	2140      	movs	r1, #64	; 0x40
 8004c9a:	4823      	ldr	r0, [pc, #140]	; (8004d28 <MX_GPIO_Init+0x114>)
 8004c9c:	f001 febe 	bl	8006a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin LED_Pin */
  GPIO_InitStruct.Pin = RST_Pin|LED_Pin;
 8004ca0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8004ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cb2:	f107 0314 	add.w	r3, r7, #20
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	481a      	ldr	r0, [pc, #104]	; (8004d24 <MX_GPIO_Init+0x110>)
 8004cba:	f001 fc21 	bl	8006500 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO2_Pin DIO1_Pin DIO0_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|DIO1_Pin|DIO0_Pin;
 8004cbe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004cc4:	4b19      	ldr	r3, [pc, #100]	; (8004d2c <MX_GPIO_Init+0x118>)
 8004cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ccc:	f107 0314 	add.w	r3, r7, #20
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cd6:	f001 fc13 	bl	8006500 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8004cda:	2340      	movs	r3, #64	; 0x40
 8004cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8004cea:	f107 0314 	add.w	r3, r7, #20
 8004cee:	4619      	mov	r1, r3
 8004cf0:	480d      	ldr	r0, [pc, #52]	; (8004d28 <MX_GPIO_Init+0x114>)
 8004cf2:	f001 fc05 	bl	8006500 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	2017      	movs	r0, #23
 8004cfc:	f001 fbb0 	bl	8006460 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d00:	2017      	movs	r0, #23
 8004d02:	f001 fbd9 	bl	80064b8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004d06:	2200      	movs	r2, #0
 8004d08:	2100      	movs	r1, #0
 8004d0a:	2028      	movs	r0, #40	; 0x28
 8004d0c:	f001 fba8 	bl	8006460 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d10:	2028      	movs	r0, #40	; 0x28
 8004d12:	f001 fbd1 	bl	80064b8 <HAL_NVIC_EnableIRQ>

}
 8004d16:	bf00      	nop
 8004d18:	3728      	adds	r7, #40	; 0x28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40021000 	.word	0x40021000
 8004d24:	48000800 	.word	0x48000800
 8004d28:	48000400 	.word	0x48000400
 8004d2c:	10110000 	.word	0x10110000

08004d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(char *file, uint32_t line)
{ 
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <os_init>:
static struct {
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
    memset(&OS, 0x00, sizeof(OS));
 8004d58:	2208      	movs	r2, #8
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4805      	ldr	r0, [pc, #20]	; (8004d74 <os_init+0x20>)
 8004d5e:	f006 fcc2 	bl	800b6e6 <memset>
    hal_init();
 8004d62:	f7fc fb35 	bl	80013d0 <hal_init>
    radio_init();
 8004d66:	f000 fcb9 	bl	80056dc <radio_init>
    LMIC_init();
 8004d6a:	f7ff fbf5 	bl	8004558 <LMIC_init>
}
 8004d6e:	bf00      	nop
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20000084 	.word	0x20000084

08004d78 <os_getTime>:

ostime_t os_getTime () {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
    return hal_ticks();
 8004d7c:	f7fc fa48 	bl	8001210 <hal_ticks>
 8004d80:	4603      	mov	r3, r0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8004d90:	e00d      	b.n	8004dae <unlinkjob+0x28>
        if(*pnext == job) { // unlink
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d105      	bne.n	8004da8 <unlinkjob+0x22>
            *pnext = job->next;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	601a      	str	r2, [r3, #0]
            return 1;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e007      	b.n	8004db8 <unlinkjob+0x32>
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	607b      	str	r3, [r7, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1ed      	bne.n	8004d92 <unlinkjob+0xc>
        }
    }
    return 0;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <os_clearCallback>:

// clear scheduled job
void os_clearCallback (osjob_t* job) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
    hal_disableIRQs();
 8004dcc:	f7fc fad4 	bl	8001378 <hal_disableIRQs>
    unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4809      	ldr	r0, [pc, #36]	; (8004df8 <os_clearCallback+0x34>)
 8004dd4:	f7ff ffd7 	bl	8004d86 <unlinkjob>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d105      	bne.n	8004dea <os_clearCallback+0x26>
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	4806      	ldr	r0, [pc, #24]	; (8004dfc <os_clearCallback+0x38>)
 8004de2:	f7ff ffd0 	bl	8004d86 <unlinkjob>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
    hal_enableIRQs();
 8004dea:	f7fc fad5 	bl	8001398 <hal_enableIRQs>
}
 8004dee:	bf00      	nop
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000084 	.word	0x20000084
 8004dfc:	20000088 	.word	0x20000088

08004e00 <os_setCallback>:

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
    osjob_t** pnext;
    hal_disableIRQs();
 8004e0a:	f7fc fab5 	bl	8001378 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	480d      	ldr	r0, [pc, #52]	; (8004e48 <os_setCallback+0x48>)
 8004e12:	f7ff ffb8 	bl	8004d86 <unlinkjob>
    // fill-in job
    job->func = cb;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
 8004e22:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <os_setCallback+0x48>)
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e002      	b.n	8004e2e <os_setCallback+0x2e>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f8      	bne.n	8004e28 <os_setCallback+0x28>
    *pnext = job;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8004e3c:	f7fc faac 	bl	8001398 <hal_enableIRQs>
}
 8004e40:	bf00      	nop
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000088 	.word	0x20000088

08004e4c <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
    osjob_t** pnext;
    hal_disableIRQs();
 8004e58:	f7fc fa8e 	bl	8001378 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	4815      	ldr	r0, [pc, #84]	; (8004eb4 <os_setTimedCallback+0x68>)
 8004e60:	f7ff ff91 	bl	8004d86 <unlinkjob>
    // fill-in job
    job->deadline = time;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	605a      	str	r2, [r3, #4]
    job->func = cb;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8004e76:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <os_setTimedCallback+0x68>)
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	e00e      	b.n	8004e9a <os_setTimedCallback+0x4e>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	dd04      	ble.n	8004e94 <os_setTimedCallback+0x48>
            // enqueue before next element and stop
            job->next = *pnext;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	601a      	str	r2, [r3, #0]
            break;
 8004e92:	e006      	b.n	8004ea2 <os_setTimedCallback+0x56>
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1ec      	bne.n	8004e7c <os_setTimedCallback+0x30>
        }
    }
    *pnext = job;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8004ea8:	f7fc fa76 	bl	8001398 <hal_enableIRQs>
}
 8004eac:	bf00      	nop
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20000084 	.word	0x20000084

08004eb8 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
    while(1) {
        osjob_t* j = NULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	607b      	str	r3, [r7, #4]
        hal_disableIRQs();
 8004ec2:	f7fc fa59 	bl	8001378 <hal_disableIRQs>
        // check for runnable jobs
        if(OS.runnablejobs) {
 8004ec6:	4b16      	ldr	r3, [pc, #88]	; (8004f20 <os_runloop+0x68>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d007      	beq.n	8004ede <os_runloop+0x26>
            j = OS.runnablejobs;
 8004ece:	4b14      	ldr	r3, [pc, #80]	; (8004f20 <os_runloop+0x68>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	607b      	str	r3, [r7, #4]
            OS.runnablejobs = j->next;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a11      	ldr	r2, [pc, #68]	; (8004f20 <os_runloop+0x68>)
 8004eda:	6053      	str	r3, [r2, #4]
 8004edc:	e016      	b.n	8004f0c <os_runloop+0x54>
        } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 8004ede:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <os_runloop+0x68>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d010      	beq.n	8004f08 <os_runloop+0x50>
 8004ee6:	4b0e      	ldr	r3, [pc, #56]	; (8004f20 <os_runloop+0x68>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fc f9eb 	bl	80012c8 <hal_checkTimer>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <os_runloop+0x50>
            j = OS.scheduledjobs;
 8004ef8:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <os_runloop+0x68>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	607b      	str	r3, [r7, #4]
            OS.scheduledjobs = j->next;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a07      	ldr	r2, [pc, #28]	; (8004f20 <os_runloop+0x68>)
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	e001      	b.n	8004f0c <os_runloop+0x54>
        } else { // nothing pending
            hal_sleep(); // wake by irq (timer already restarted)
 8004f08:	f7fc fa5a 	bl	80013c0 <hal_sleep>
        }
        hal_enableIRQs();
 8004f0c:	f7fc fa44 	bl	8001398 <hal_enableIRQs>
        if(j) { // run job callback
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0d3      	beq.n	8004ebe <os_runloop+0x6>
            j->func(j);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	4798      	blx	r3
    while(1) {
 8004f1e:	e7ce      	b.n	8004ebe <os_runloop+0x6>
 8004f20:	20000084 	.word	0x20000084

08004f24 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif


static void writeReg (u1_t addr, u1_t data ) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	460a      	mov	r2, r1
 8004f2e:	71fb      	strb	r3, [r7, #7]
 8004f30:	4613      	mov	r3, r2
 8004f32:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8004f34:	2000      	movs	r0, #0
 8004f36:	f7fc f8dd 	bl	80010f4 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fc f93e 	bl	80011c4 <hal_spi>
    hal_spi(data);
 8004f48:	79bb      	ldrb	r3, [r7, #6]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fc f93a 	bl	80011c4 <hal_spi>
    hal_pin_nss(1);
 8004f50:	2001      	movs	r0, #1
 8004f52:	f7fc f8cf 	bl	80010f4 <hal_pin_nss>
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <readReg>:

static u1_t readReg (u1_t addr) {
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	4603      	mov	r3, r0
 8004f66:	71fb      	strb	r3, [r7, #7]
    hal_pin_nss(0);
 8004f68:	2000      	movs	r0, #0
 8004f6a:	f7fc f8c3 	bl	80010f4 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fc f924 	bl	80011c4 <hal_spi>
    u1_t val = hal_spi(0x00);
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	f7fc f921 	bl	80011c4 <hal_spi>
 8004f82:	4603      	mov	r3, r0
 8004f84:	73fb      	strb	r3, [r7, #15]
    hal_pin_nss(1);
 8004f86:	2001      	movs	r0, #1
 8004f88:	f7fc f8b4 	bl	80010f4 <hal_pin_nss>
    return val;
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <writeBuf>:

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	6039      	str	r1, [r7, #0]
 8004fa0:	71fb      	strb	r3, [r7, #7]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	f7fc f8a4 	bl	80010f4 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8004fac:	79fb      	ldrb	r3, [r7, #7]
 8004fae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fc f905 	bl	80011c4 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
 8004fbe:	e009      	b.n	8004fd4 <writeBuf+0x3e>
        hal_spi(buf[i]);
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fc f8fb 	bl	80011c4 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	73fb      	strb	r3, [r7, #15]
 8004fd4:	7bfa      	ldrb	r2, [r7, #15]
 8004fd6:	79bb      	ldrb	r3, [r7, #6]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d3f1      	bcc.n	8004fc0 <writeBuf+0x2a>
    }
    hal_pin_nss(1);
 8004fdc:	2001      	movs	r0, #1
 8004fde:	f7fc f889 	bl	80010f4 <hal_pin_nss>
}
 8004fe2:	bf00      	nop
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <readBuf>:

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8004fea:	b590      	push	{r4, r7, lr}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	6039      	str	r1, [r7, #0]
 8004ff4:	71fb      	strb	r3, [r7, #7]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	f7fc f87a 	bl	80010f4 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 8005000:	79fb      	ldrb	r3, [r7, #7]
 8005002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005006:	b2db      	uxtb	r3, r3
 8005008:	4618      	mov	r0, r3
 800500a:	f7fc f8db 	bl	80011c4 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 800500e:	2300      	movs	r3, #0
 8005010:	73fb      	strb	r3, [r7, #15]
 8005012:	e00a      	b.n	800502a <readBuf+0x40>
        buf[i] = hal_spi(0x00);
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	18d4      	adds	r4, r2, r3
 800501a:	2000      	movs	r0, #0
 800501c:	f7fc f8d2 	bl	80011c4 <hal_spi>
 8005020:	4603      	mov	r3, r0
 8005022:	7023      	strb	r3, [r4, #0]
    for (u1_t i=0; i<len; i++) {
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	3301      	adds	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]
 800502a:	7bfa      	ldrb	r2, [r7, #15]
 800502c:	79bb      	ldrb	r3, [r7, #6]
 800502e:	429a      	cmp	r2, r3
 8005030:	d3f0      	bcc.n	8005014 <readBuf+0x2a>
    }
    hal_pin_nss(1);
 8005032:	2001      	movs	r0, #1
 8005034:	f7fc f85e 	bl	80010f4 <hal_pin_nss>
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	bd90      	pop	{r4, r7, pc}

08005040 <opmode>:

static void opmode (u1_t mode) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	71fb      	strb	r3, [r7, #7]
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 800504a:	2001      	movs	r0, #1
 800504c:	f7ff ff87 	bl	8004f5e <readReg>
 8005050:	4603      	mov	r3, r0
 8005052:	b25b      	sxtb	r3, r3
 8005054:	f023 0307 	bic.w	r3, r3, #7
 8005058:	b25a      	sxtb	r2, r3
 800505a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505e:	4313      	orrs	r3, r2
 8005060:	b25b      	sxtb	r3, r3
 8005062:	b2db      	uxtb	r3, r3
 8005064:	4619      	mov	r1, r3
 8005066:	2001      	movs	r0, #1
 8005068:	f7ff ff5c 	bl	8004f24 <writeReg>
}
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <opmodeLora>:

static void opmodeLora() {
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
    u1_t u = OPMODE_LORA;
 800507a:	2380      	movs	r3, #128	; 0x80
 800507c:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	f043 0308 	orr.w	r3, r3, #8
 8005084:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	4619      	mov	r1, r3
 800508a:	2001      	movs	r0, #1
 800508c:	f7ff ff4a 	bl	8004f24 <writeReg>
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <opmodeFSK>:

static void opmodeFSK() {
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
    u1_t u = 0;
 800509e:	2300      	movs	r3, #0
 80050a0:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	f043 0308 	orr.w	r3, r3, #8
 80050a8:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	4619      	mov	r1, r3
 80050ae:	2001      	movs	r0, #1
 80050b0:	f7ff ff38 	bl	8004f24 <writeReg>
}
 80050b4:	bf00      	nop
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
    sf_t sf = getSf(LMIC.rps);
 80050c2:	4b52      	ldr	r3, [pc, #328]	; (800520c <configLoraModem+0x150>)
 80050c4:	89db      	ldrh	r3, [r3, #14]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fc f99f 	bl	800140a <getSf>
 80050cc:	4603      	mov	r3, r0
 80050ce:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	71fb      	strb	r3, [r7, #7]
 80050d4:	2300      	movs	r3, #0
 80050d6:	71bb      	strb	r3, [r7, #6]
 80050d8:	2300      	movs	r3, #0
 80050da:	717b      	strb	r3, [r7, #5]

        switch (getBw(LMIC.rps)) {
 80050dc:	4b4b      	ldr	r3, [pc, #300]	; (800520c <configLoraModem+0x150>)
 80050de:	89db      	ldrh	r3, [r3, #14]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fc f9a2 	bl	800142a <getBw>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d008      	beq.n	80050fe <configLoraModem+0x42>
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d00b      	beq.n	8005108 <configLoraModem+0x4c>
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10e      	bne.n	8005112 <configLoraModem+0x56>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80050fa:	71fb      	strb	r3, [r7, #7]
 80050fc:	e00b      	b.n	8005116 <configLoraModem+0x5a>
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005104:	71fb      	strb	r3, [r7, #7]
 8005106:	e006      	b.n	8005116 <configLoraModem+0x5a>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800510e:	71fb      	strb	r3, [r7, #7]
 8005110:	e001      	b.n	8005116 <configLoraModem+0x5a>
        default:
            ASSERT(0);
 8005112:	f7fc f973 	bl	80013fc <hal_failed>
        }
        switch( getCr(LMIC.rps) ) {
 8005116:	4b3d      	ldr	r3, [pc, #244]	; (800520c <configLoraModem+0x150>)
 8005118:	89db      	ldrh	r3, [r3, #14]
 800511a:	4618      	mov	r0, r3
 800511c:	f7fc f997 	bl	800144e <getCr>
 8005120:	4603      	mov	r3, r0
 8005122:	2b03      	cmp	r3, #3
 8005124:	d81e      	bhi.n	8005164 <configLoraModem+0xa8>
 8005126:	a201      	add	r2, pc, #4	; (adr r2, 800512c <configLoraModem+0x70>)
 8005128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512c:	0800513d 	.word	0x0800513d
 8005130:	08005147 	.word	0x08005147
 8005134:	08005151 	.word	0x08005151
 8005138:	0800515b 	.word	0x0800515b
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	f043 0302 	orr.w	r3, r3, #2
 8005142:	71fb      	strb	r3, [r7, #7]
 8005144:	e010      	b.n	8005168 <configLoraModem+0xac>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	f043 0304 	orr.w	r3, r3, #4
 800514c:	71fb      	strb	r3, [r7, #7]
 800514e:	e00b      	b.n	8005168 <configLoraModem+0xac>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	f043 0306 	orr.w	r3, r3, #6
 8005156:	71fb      	strb	r3, [r7, #7]
 8005158:	e006      	b.n	8005168 <configLoraModem+0xac>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	f043 0308 	orr.w	r3, r3, #8
 8005160:	71fb      	strb	r3, [r7, #7]
 8005162:	e001      	b.n	8005168 <configLoraModem+0xac>
        default:
            ASSERT(0);
 8005164:	f7fc f94a 	bl	80013fc <hal_failed>
        }

        if (getIh(LMIC.rps)) {
 8005168:	4b28      	ldr	r3, [pc, #160]	; (800520c <configLoraModem+0x150>)
 800516a:	89db      	ldrh	r3, [r3, #14]
 800516c:	4618      	mov	r0, r3
 800516e:	f7fc f9c0 	bl	80014f2 <getIh>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00e      	beq.n	8005196 <configLoraModem+0xda>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 8005178:	79fb      	ldrb	r3, [r7, #7]
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	71fb      	strb	r3, [r7, #7]
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 8005180:	4b22      	ldr	r3, [pc, #136]	; (800520c <configLoraModem+0x150>)
 8005182:	89db      	ldrh	r3, [r3, #14]
 8005184:	4618      	mov	r0, r3
 8005186:	f7fc f9b4 	bl	80014f2 <getIh>
 800518a:	4603      	mov	r3, r0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	4619      	mov	r1, r3
 8005190:	2022      	movs	r0, #34	; 0x22
 8005192:	f7ff fec7 	bl	8004f24 <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	4619      	mov	r1, r3
 800519a:	201d      	movs	r0, #29
 800519c:	f7ff fec2 	bl	8004f24 <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
 80051a0:	793b      	ldrb	r3, [r7, #4]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	3370      	adds	r3, #112	; 0x70
 80051ac:	71bb      	strb	r3, [r7, #6]
        if (getNocrc(LMIC.rps) == 0) {
 80051ae:	4b17      	ldr	r3, [pc, #92]	; (800520c <configLoraModem+0x150>)
 80051b0:	89db      	ldrh	r3, [r3, #14]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fc f976 	bl	80014a4 <getNocrc>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d103      	bne.n	80051c6 <configLoraModem+0x10a>
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 80051be:	79bb      	ldrb	r3, [r7, #6]
 80051c0:	f043 0304 	orr.w	r3, r3, #4
 80051c4:	71bb      	strb	r3, [r7, #6]
        }
        writeReg(LORARegModemConfig2, mc2);
 80051c6:	79bb      	ldrb	r3, [r7, #6]
 80051c8:	4619      	mov	r1, r3
 80051ca:	201e      	movs	r0, #30
 80051cc:	f7ff feaa 	bl	8004f24 <writeReg>
        
        mc3 = SX1276_MC3_AGCAUTO;
 80051d0:	2304      	movs	r3, #4
 80051d2:	717b      	strb	r3, [r7, #5]
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 80051d4:	793b      	ldrb	r3, [r7, #4]
 80051d6:	2b05      	cmp	r3, #5
 80051d8:	d002      	beq.n	80051e0 <configLoraModem+0x124>
 80051da:	793b      	ldrb	r3, [r7, #4]
 80051dc:	2b06      	cmp	r3, #6
 80051de:	d10b      	bne.n	80051f8 <configLoraModem+0x13c>
 80051e0:	4b0a      	ldr	r3, [pc, #40]	; (800520c <configLoraModem+0x150>)
 80051e2:	89db      	ldrh	r3, [r3, #14]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fc f920 	bl	800142a <getBw>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d103      	bne.n	80051f8 <configLoraModem+0x13c>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 80051f0:	797b      	ldrb	r3, [r7, #5]
 80051f2:	f043 0308 	orr.w	r3, r3, #8
 80051f6:	717b      	strb	r3, [r7, #5]
        }
        writeReg(LORARegModemConfig3, mc3);
 80051f8:	797b      	ldrb	r3, [r7, #5]
 80051fa:	4619      	mov	r1, r3
 80051fc:	2026      	movs	r0, #38	; 0x26
 80051fe:	f7ff fe91 	bl	8004f24 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8005202:	bf00      	nop
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20000304 	.word	0x20000304

08005210 <configChannel>:

static void configChannel () {
 8005210:	b590      	push	{r4, r7, lr}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    u8_t frf = ((u8_t)LMIC.freq << 19) / 32000000;
 8005216:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <configChannel+0x74>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f04f 0400 	mov.w	r4, #0
 800521e:	0b59      	lsrs	r1, r3, #13
 8005220:	04d8      	lsls	r0, r3, #19
 8005222:	4a19      	ldr	r2, [pc, #100]	; (8005288 <configChannel+0x78>)
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	f7fb f81e 	bl	8000268 <__aeabi_uldivmod>
 800522c:	4603      	mov	r3, r0
 800522e:	460c      	mov	r4, r1
 8005230:	e9c7 3400 	strd	r3, r4, [r7]
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
 8005234:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	f04f 0400 	mov.w	r4, #0
 8005240:	0c0b      	lsrs	r3, r1, #16
 8005242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005246:	0c14      	lsrs	r4, r2, #16
 8005248:	b2db      	uxtb	r3, r3
 800524a:	4619      	mov	r1, r3
 800524c:	2006      	movs	r0, #6
 800524e:	f7ff fe69 	bl	8004f24 <writeReg>
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
 8005252:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	f04f 0400 	mov.w	r4, #0
 800525e:	0a0b      	lsrs	r3, r1, #8
 8005260:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005264:	0a14      	lsrs	r4, r2, #8
 8005266:	b2db      	uxtb	r3, r3
 8005268:	4619      	mov	r1, r3
 800526a:	2007      	movs	r0, #7
 800526c:	f7ff fe5a 	bl	8004f24 <writeReg>
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
 8005270:	783b      	ldrb	r3, [r7, #0]
 8005272:	4619      	mov	r1, r3
 8005274:	2008      	movs	r0, #8
 8005276:	f7ff fe55 	bl	8004f24 <writeReg>
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	bd90      	pop	{r4, r7, pc}
 8005282:	bf00      	nop
 8005284:	20000304 	.word	0x20000304
 8005288:	01e84800 	.word	0x01e84800

0800528c <configPower>:



static void configPower () {
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
 8005292:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <configPower+0x5c>)
 8005294:	7c9b      	ldrb	r3, [r3, #18]
 8005296:	71fb      	strb	r3, [r7, #7]
    if(pw >= 17) {
 8005298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529c:	2b10      	cmp	r3, #16
 800529e:	dd02      	ble.n	80052a6 <configPower+0x1a>
        pw = 15;
 80052a0:	230f      	movs	r3, #15
 80052a2:	71fb      	strb	r3, [r7, #7]
 80052a4:	e005      	b.n	80052b2 <configPower+0x26>
    } else if(pw < 2) {
 80052a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	dc01      	bgt.n	80052b2 <configPower+0x26>
        pw = 2;
 80052ae:	2302      	movs	r3, #2
 80052b0:	71fb      	strb	r3, [r7, #7]
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (u1_t)(0x80|(pw&0xf)));
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	f003 030f 	and.w	r3, r3, #15
 80052b8:	b25b      	sxtb	r3, r3
 80052ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052be:	b25b      	sxtb	r3, r3
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	4619      	mov	r1, r3
 80052c4:	2009      	movs	r0, #9
 80052c6:	f7ff fe2d 	bl	8004f24 <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
 80052ca:	205a      	movs	r0, #90	; 0x5a
 80052cc:	f7ff fe47 	bl	8004f5e <readReg>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f043 0304 	orr.w	r3, r3, #4
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	4619      	mov	r1, r3
 80052da:	205a      	movs	r0, #90	; 0x5a
 80052dc:	f7ff fe22 	bl	8004f24 <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000304 	.word	0x20000304

080052ec <txfsk>:

static void txfsk () {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 80052f0:	2110      	movs	r1, #16
 80052f2:	2001      	movs	r0, #1
 80052f4:	f7ff fe16 	bl	8004f24 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
 80052f8:	2001      	movs	r0, #1
 80052fa:	f7ff fe30 	bl	8004f5e <readReg>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b10      	cmp	r3, #16
 8005302:	d001      	beq.n	8005308 <txfsk+0x1c>
 8005304:	f7fc f87a 	bl	80013fc <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 8005308:	2001      	movs	r0, #1
 800530a:	f7ff fe99 	bl	8005040 <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 800530e:	2102      	movs	r1, #2
 8005310:	2002      	movs	r0, #2
 8005312:	f7ff fe07 	bl	8004f24 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 8005316:	2180      	movs	r1, #128	; 0x80
 8005318:	2003      	movs	r0, #3
 800531a:	f7ff fe03 	bl	8004f24 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 800531e:	2101      	movs	r1, #1
 8005320:	2004      	movs	r0, #4
 8005322:	f7ff fdff 	bl	8004f24 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8005326:	2199      	movs	r1, #153	; 0x99
 8005328:	2005      	movs	r0, #5
 800532a:	f7ff fdfb 	bl	8004f24 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
 800532e:	2100      	movs	r1, #0
 8005330:	2025      	movs	r0, #37	; 0x25
 8005332:	f7ff fdf7 	bl	8004f24 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
 8005336:	2105      	movs	r1, #5
 8005338:	2026      	movs	r0, #38	; 0x26
 800533a:	f7ff fdf3 	bl	8004f24 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
 800533e:	2112      	movs	r1, #18
 8005340:	2027      	movs	r0, #39	; 0x27
 8005342:	f7ff fdef 	bl	8004f24 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
 8005346:	21d0      	movs	r1, #208	; 0xd0
 8005348:	2030      	movs	r0, #48	; 0x30
 800534a:	f7ff fdeb 	bl	8004f24 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
 800534e:	2140      	movs	r1, #64	; 0x40
 8005350:	2031      	movs	r0, #49	; 0x31
 8005352:	f7ff fde7 	bl	8004f24 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
 8005356:	21c1      	movs	r1, #193	; 0xc1
 8005358:	2028      	movs	r0, #40	; 0x28
 800535a:	f7ff fde3 	bl	8004f24 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 800535e:	2194      	movs	r1, #148	; 0x94
 8005360:	2029      	movs	r0, #41	; 0x29
 8005362:	f7ff fddf 	bl	8004f24 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005366:	21c1      	movs	r1, #193	; 0xc1
 8005368:	202a      	movs	r0, #42	; 0x2a
 800536a:	f7ff fddb 	bl	8004f24 <writeReg>
    // configure frequency
    configChannel();
 800536e:	f7ff ff4f 	bl	8005210 <configChannel>
    // configure output power
    configPower();
 8005372:	f7ff ff8b 	bl	800528c <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
 8005376:	2134      	movs	r1, #52	; 0x34
 8005378:	2040      	movs	r0, #64	; 0x40
 800537a:	f7ff fdd3 	bl	8004f24 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
 800537e:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <txfsk+0xd4>)
 8005380:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005384:	3301      	adds	r3, #1
 8005386:	b2db      	uxtb	r3, r3
 8005388:	4619      	mov	r1, r3
 800538a:	2032      	movs	r0, #50	; 0x32
 800538c:	f7ff fdca 	bl	8004f24 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
 8005390:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <txfsk+0xd4>)
 8005392:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005396:	4619      	mov	r1, r3
 8005398:	2000      	movs	r0, #0
 800539a:	f7ff fdc3 	bl	8004f24 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 800539e:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <txfsk+0xd4>)
 80053a0:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80053a4:	461a      	mov	r2, r3
 80053a6:	4907      	ldr	r1, [pc, #28]	; (80053c4 <txfsk+0xd8>)
 80053a8:	2000      	movs	r0, #0
 80053aa:	f7ff fdf4 	bl	8004f96 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 80053ae:	2001      	movs	r0, #1
 80053b0:	f7fb fe95 	bl	80010de <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 80053b4:	2003      	movs	r0, #3
 80053b6:	f7ff fe43 	bl	8005040 <opmode>
}
 80053ba:	bf00      	nop
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20000304 	.word	0x20000304
 80053c4:	2000044c 	.word	0x2000044c

080053c8 <txlora>:

static void txlora () {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
 80053cc:	f7ff fe52 	bl	8005074 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 80053d0:	2001      	movs	r0, #1
 80053d2:	f7ff fdc4 	bl	8004f5e <readReg>
 80053d6:	4603      	mov	r3, r0
 80053d8:	b25b      	sxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	db01      	blt.n	80053e2 <txlora+0x1a>
 80053de:	f7fc f80d 	bl	80013fc <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 80053e2:	2001      	movs	r0, #1
 80053e4:	f7ff fe2c 	bl	8005040 <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
 80053e8:	f7ff fe68 	bl	80050bc <configLoraModem>
    // configure frequency
    configChannel();
 80053ec:	f7ff ff10 	bl	8005210 <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 80053f0:	200a      	movs	r0, #10
 80053f2:	f7ff fdb4 	bl	8004f5e <readReg>
 80053f6:	4603      	mov	r3, r0
 80053f8:	b25b      	sxtb	r3, r3
 80053fa:	f023 030f 	bic.w	r3, r3, #15
 80053fe:	b25b      	sxtb	r3, r3
 8005400:	f043 0308 	orr.w	r3, r3, #8
 8005404:	b25b      	sxtb	r3, r3
 8005406:	b2db      	uxtb	r3, r3
 8005408:	4619      	mov	r1, r3
 800540a:	200a      	movs	r0, #10
 800540c:	f7ff fd8a 	bl	8004f24 <writeReg>
    configPower();
 8005410:	f7ff ff3c 	bl	800528c <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005414:	2134      	movs	r1, #52	; 0x34
 8005416:	2039      	movs	r0, #57	; 0x39
 8005418:	f7ff fd84 	bl	8004f24 <writeReg>
    
    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 800541c:	21f0      	movs	r1, #240	; 0xf0
 800541e:	2040      	movs	r0, #64	; 0x40
 8005420:	f7ff fd80 	bl	8004f24 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005424:	21ff      	movs	r1, #255	; 0xff
 8005426:	2012      	movs	r0, #18
 8005428:	f7ff fd7c 	bl	8004f24 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 800542c:	21f7      	movs	r1, #247	; 0xf7
 800542e:	2011      	movs	r0, #17
 8005430:	f7ff fd78 	bl	8004f24 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(LORARegFifoTxBaseAddr, 0x00);
 8005434:	2100      	movs	r1, #0
 8005436:	200e      	movs	r0, #14
 8005438:	f7ff fd74 	bl	8004f24 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
 800543c:	2100      	movs	r1, #0
 800543e:	200d      	movs	r0, #13
 8005440:	f7ff fd70 	bl	8004f24 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
 8005444:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <txlora+0xac>)
 8005446:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 800544a:	4619      	mov	r1, r3
 800544c:	2022      	movs	r0, #34	; 0x22
 800544e:	f7ff fd69 	bl	8004f24 <writeReg>
       
    // download buffer to the radio FIFO
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005452:	4b08      	ldr	r3, [pc, #32]	; (8005474 <txlora+0xac>)
 8005454:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005458:	461a      	mov	r2, r3
 800545a:	4907      	ldr	r1, [pc, #28]	; (8005478 <txlora+0xb0>)
 800545c:	2000      	movs	r0, #0
 800545e:	f7ff fd9a 	bl	8004f96 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8005462:	2001      	movs	r0, #1
 8005464:	f7fb fe3b 	bl	80010de <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8005468:	2003      	movs	r0, #3
 800546a:	f7ff fde9 	bl	8005040 <opmode>
}
 800546e:	bf00      	nop
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000304 	.word	0x20000304
 8005478:	2000044c 	.word	0x2000044c

0800547c <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8005480:	2001      	movs	r0, #1
 8005482:	f7ff fd6c 	bl	8004f5e <readReg>
 8005486:	4603      	mov	r3, r0
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <starttx+0x18>
 8005490:	f7fb ffb4 	bl	80013fc <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8005494:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <starttx+0x38>)
 8005496:	89db      	ldrh	r3, [r3, #14]
 8005498:	4618      	mov	r0, r3
 800549a:	f7fb ffb6 	bl	800140a <getSf>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d102      	bne.n	80054aa <starttx+0x2e>
        txfsk();
 80054a4:	f7ff ff22 	bl	80052ec <txfsk>
    } else { // LoRa modem
        txlora();
    }
    // the radio will go back to STANDBY mode as soon as the TX is finished
    // the corresponding IRQ will inform us about completion.
}
 80054a8:	e001      	b.n	80054ae <starttx+0x32>
        txlora();
 80054aa:	f7ff ff8d 	bl	80053c8 <txlora>
}
 80054ae:	bf00      	nop
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000304 	.word	0x20000304

080054b8 <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	71fb      	strb	r3, [r7, #7]
    // select LoRa modem (from sleep mode)
    opmodeLora();
 80054c2:	f7ff fdd7 	bl	8005074 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 80054c6:	2001      	movs	r0, #1
 80054c8:	f7ff fd49 	bl	8004f5e <readReg>
 80054cc:	4603      	mov	r3, r0
 80054ce:	b25b      	sxtb	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	db01      	blt.n	80054d8 <rxlora+0x20>
 80054d4:	f7fb ff92 	bl	80013fc <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 80054d8:	2001      	movs	r0, #1
 80054da:	f7ff fdb1 	bl	8005040 <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d108      	bne.n	80054f6 <rxlora+0x3e>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 80054e4:	210a      	movs	r1, #10
 80054e6:	201d      	movs	r0, #29
 80054e8:	f7ff fd1c 	bl	8004f24 <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 80054ec:	2170      	movs	r1, #112	; 0x70
 80054ee:	201e      	movs	r0, #30
 80054f0:	f7ff fd18 	bl	8004f24 <writeReg>
 80054f4:	e003      	b.n	80054fe <rxlora+0x46>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
 80054f6:	f7ff fde1 	bl	80050bc <configLoraModem>
        // configure frequency
        configChannel();
 80054fa:	f7ff fe89 	bl	8005210 <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN); 
 80054fe:	2121      	movs	r1, #33	; 0x21
 8005500:	200c      	movs	r0, #12
 8005502:	f7ff fd0f 	bl	8004f24 <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
 8005506:	2140      	movs	r1, #64	; 0x40
 8005508:	2023      	movs	r0, #35	; 0x23
 800550a:	f7ff fd0b 	bl	8004f24 <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
 800550e:	4b26      	ldr	r3, [pc, #152]	; (80055a8 <rxlora+0xf0>)
 8005510:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00b      	beq.n	8005530 <rxlora+0x78>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
 8005518:	2033      	movs	r0, #51	; 0x33
 800551a:	f7ff fd20 	bl	8004f5e <readReg>
 800551e:	4603      	mov	r3, r0
 8005520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005524:	b2db      	uxtb	r3, r3
 8005526:	4619      	mov	r1, r3
 8005528:	2033      	movs	r0, #51	; 0x33
 800552a:	f7ff fcfb 	bl	8004f24 <writeReg>
 800552e:	e00a      	b.n	8005546 <rxlora+0x8e>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
 8005530:	2033      	movs	r0, #51	; 0x33
 8005532:	f7ff fd14 	bl	8004f5e <readReg>
 8005536:	4603      	mov	r3, r0
 8005538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800553c:	b2db      	uxtb	r3, r3
 800553e:	4619      	mov	r1, r3
 8005540:	2033      	movs	r0, #51	; 0x33
 8005542:	f7ff fcef 	bl	8004f24 <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 8005546:	4b18      	ldr	r3, [pc, #96]	; (80055a8 <rxlora+0xf0>)
 8005548:	7c1b      	ldrb	r3, [r3, #16]
 800554a:	4619      	mov	r1, r3
 800554c:	201f      	movs	r0, #31
 800554e:	f7ff fce9 	bl	8004f24 <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005552:	2134      	movs	r1, #52	; 0x34
 8005554:	2039      	movs	r0, #57	; 0x39
 8005556:	f7ff fce5 	bl	8004f24 <writeReg>
    
    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
 800555a:	21c0      	movs	r1, #192	; 0xc0
 800555c:	2040      	movs	r0, #64	; 0x40
 800555e:	f7ff fce1 	bl	8004f24 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005562:	21ff      	movs	r1, #255	; 0xff
 8005564:	2012      	movs	r0, #18
 8005566:	f7ff fcdd 	bl	8004f24 <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	4a0f      	ldr	r2, [pc, #60]	; (80055ac <rxlora+0xf4>)
 800556e:	5cd3      	ldrb	r3, [r2, r3]
 8005570:	43db      	mvns	r3, r3
 8005572:	b2db      	uxtb	r3, r3
 8005574:	4619      	mov	r1, r3
 8005576:	2011      	movs	r0, #17
 8005578:	f7ff fcd4 	bl	8004f24 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 800557c:	2000      	movs	r0, #0
 800557e:	f7fb fdae 	bl	80010de <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d108      	bne.n	800559a <rxlora+0xe2>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8005588:	4b07      	ldr	r3, [pc, #28]	; (80055a8 <rxlora+0xf0>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	4618      	mov	r0, r3
 800558e:	f7fb fe8c 	bl	80012aa <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
 8005592:	2006      	movs	r0, #6
 8005594:	f7ff fd54 	bl	8005040 <opmode>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    }
}
 8005598:	e002      	b.n	80055a0 <rxlora+0xe8>
        opmode(OPMODE_RX); 
 800559a:	2005      	movs	r0, #5
 800559c:	f7ff fd50 	bl	8005040 <opmode>
}
 80055a0:	bf00      	nop
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20000304 	.word	0x20000304
 80055ac:	0800cd80 	.word	0x0800cd80

080055b0 <rxfsk>:

static void rxfsk (u1_t rxmode) {
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	4603      	mov	r3, r0
 80055b8:	71fb      	strb	r3, [r7, #7]
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <rxfsk+0x14>
 80055c0:	f7fb ff1c 	bl	80013fc <hal_failed>
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
 80055c4:	f7ff fd68 	bl	8005098 <opmodeFSK>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 80055c8:	2001      	movs	r0, #1
 80055ca:	f7ff fcc8 	bl	8004f5e <readReg>
 80055ce:	4603      	mov	r3, r0
 80055d0:	b25b      	sxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	da01      	bge.n	80055da <rxfsk+0x2a>
 80055d6:	f7fb ff11 	bl	80013fc <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 80055da:	2001      	movs	r0, #1
 80055dc:	f7ff fd30 	bl	8005040 <opmode>
    // configure frequency
    configChannel();
 80055e0:	f7ff fe16 	bl	8005210 <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
 80055e4:	2121      	movs	r1, #33	; 0x21
 80055e6:	200c      	movs	r0, #12
 80055e8:	f7ff fc9c 	bl	8004f24 <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 80055ec:	211e      	movs	r1, #30
 80055ee:	200d      	movs	r0, #13
 80055f0:	f7ff fc98 	bl	8004f24 <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 80055f4:	210b      	movs	r1, #11
 80055f6:	2012      	movs	r0, #18
 80055f8:	f7ff fc94 	bl	8004f24 <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 80055fc:	2112      	movs	r1, #18
 80055fe:	2013      	movs	r0, #19
 8005600:	f7ff fc90 	bl	8004f24 <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 8005604:	21aa      	movs	r1, #170	; 0xaa
 8005606:	201f      	movs	r0, #31
 8005608:	f7ff fc8c 	bl	8004f24 <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 800560c:	2112      	movs	r1, #18
 800560e:	2027      	movs	r0, #39	; 0x27
 8005610:	f7ff fc88 	bl	8004f24 <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 8005614:	21d8      	movs	r1, #216	; 0xd8
 8005616:	2030      	movs	r0, #48	; 0x30
 8005618:	f7ff fc84 	bl	8004f24 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 800561c:	2140      	movs	r1, #64	; 0x40
 800561e:	2031      	movs	r0, #49	; 0x31
 8005620:	f7ff fc80 	bl	8004f24 <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
 8005624:	21c1      	movs	r1, #193	; 0xc1
 8005626:	2028      	movs	r0, #40	; 0x28
 8005628:	f7ff fc7c 	bl	8004f24 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 800562c:	2194      	movs	r1, #148	; 0x94
 800562e:	2029      	movs	r0, #41	; 0x29
 8005630:	f7ff fc78 	bl	8004f24 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005634:	21c1      	movs	r1, #193	; 0xc1
 8005636:	202a      	movs	r0, #42	; 0x2a
 8005638:	f7ff fc74 	bl	8004f24 <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
 800563c:	21ff      	movs	r1, #255	; 0xff
 800563e:	2021      	movs	r0, #33	; 0x21
 8005640:	f7ff fc70 	bl	8004f24 <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8005644:	2102      	movs	r1, #2
 8005646:	2002      	movs	r0, #2
 8005648:	f7ff fc6c 	bl	8004f24 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 800564c:	2180      	movs	r1, #128	; 0x80
 800564e:	2003      	movs	r0, #3
 8005650:	f7ff fc68 	bl	8004f24 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8005654:	2101      	movs	r1, #1
 8005656:	2004      	movs	r0, #4
 8005658:	f7ff fc64 	bl	8004f24 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 800565c:	2199      	movs	r1, #153	; 0x99
 800565e:	2005      	movs	r0, #5
 8005660:	f7ff fc60 	bl	8004f24 <writeReg>
    
    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
 8005664:	2138      	movs	r1, #56	; 0x38
 8005666:	2040      	movs	r0, #64	; 0x40
 8005668:	f7ff fc5c 	bl	8004f24 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 800566c:	2000      	movs	r0, #0
 800566e:	f7fb fd36 	bl	80010de <hal_pin_rxtx>
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8005672:	4b06      	ldr	r3, [pc, #24]	; (800568c <rxfsk+0xdc>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	4618      	mov	r0, r3
 8005678:	f7fb fe17 	bl	80012aa <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
 800567c:	2005      	movs	r0, #5
 800567e:	f7ff fcdf 	bl	8005040 <opmode>
}
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000304 	.word	0x20000304

08005690 <startrx>:

static void startrx (u1_t rxmode) {
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	71fb      	strb	r3, [r7, #7]
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 800569a:	2001      	movs	r0, #1
 800569c:	f7ff fc5f 	bl	8004f5e <readReg>
 80056a0:	4603      	mov	r3, r0
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <startrx+0x1e>
 80056aa:	f7fb fea7 	bl	80013fc <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 80056ae:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <startrx+0x48>)
 80056b0:	89db      	ldrh	r3, [r3, #14]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fb fea9 	bl	800140a <getSf>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d104      	bne.n	80056c8 <startrx+0x38>
        rxfsk(rxmode);
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff ff75 	bl	80055b0 <rxfsk>
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
 80056c6:	e003      	b.n	80056d0 <startrx+0x40>
        rxlora(rxmode);
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff fef4 	bl	80054b8 <rxlora>
}
 80056d0:	bf00      	nop
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	20000304 	.word	0x20000304

080056dc <radio_init>:

// get random seed from wideband noise rssi
void radio_init () {
 80056dc:	b590      	push	{r4, r7, lr}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 80056e2:	f7fb fe49 	bl	8001378 <hal_disableIRQs>

    // manually reset radio
#ifdef CFG_sx1276_radio
    hal_pin_rst(0); // drive RST pin low
 80056e6:	2000      	movs	r0, #0
 80056e8:	f7fb fd16 	bl	8001118 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
 80056ec:	f7ff fb44 	bl	8004d78 <os_getTime>
 80056f0:	4603      	mov	r3, r0
 80056f2:	3320      	adds	r3, #32
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fb fdd8 	bl	80012aa <hal_waitUntil>
    hal_pin_rst(2); // configure RST pin floating!
 80056fa:	2002      	movs	r0, #2
 80056fc:	f7fb fd0c 	bl	8001118 <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
 8005700:	f7ff fb3a 	bl	8004d78 <os_getTime>
 8005704:	4603      	mov	r3, r0
 8005706:	33a0      	adds	r3, #160	; 0xa0
 8005708:	4618      	mov	r0, r3
 800570a:	f7fb fdce 	bl	80012aa <hal_waitUntil>

    opmode(OPMODE_SLEEP);
 800570e:	2000      	movs	r0, #0
 8005710:	f7ff fc96 	bl	8005040 <opmode>

    // some sanity checks, e.g., read version number
    u1_t v = readReg(RegVersion);
 8005714:	2042      	movs	r0, #66	; 0x42
 8005716:	f7ff fc22 	bl	8004f5e <readReg>
 800571a:	4603      	mov	r3, r0
 800571c:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    ASSERT(v == 0x12 ); 
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	2b12      	cmp	r3, #18
 8005722:	d001      	beq.n	8005728 <radio_init+0x4c>
 8005724:	f7fb fe6a 	bl	80013fc <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
 8005728:	2002      	movs	r0, #2
 800572a:	f7ff fec5 	bl	80054b8 <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
 800572e:	bf00      	nop
 8005730:	2001      	movs	r0, #1
 8005732:	f7ff fc14 	bl	8004f5e <readReg>
 8005736:	4603      	mov	r3, r0
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	2b05      	cmp	r3, #5
 800573e:	d1f7      	bne.n	8005730 <radio_init+0x54>
    for(int i=1; i<16; i++) {
 8005740:	2301      	movs	r3, #1
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	e02c      	b.n	80057a0 <radio_init+0xc4>
        for(int j=0; j<8; j++) {
 8005746:	2300      	movs	r3, #0
 8005748:	60bb      	str	r3, [r7, #8]
 800574a:	e023      	b.n	8005794 <radio_init+0xb8>
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
 800574c:	bf00      	nop
 800574e:	202c      	movs	r0, #44	; 0x2c
 8005750:	f7ff fc05 	bl	8004f5e <readReg>
 8005754:	4603      	mov	r3, r0
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	71bb      	strb	r3, [r7, #6]
 800575c:	79bc      	ldrb	r4, [r7, #6]
 800575e:	202c      	movs	r0, #44	; 0x2c
 8005760:	f7ff fbfd 	bl	8004f5e <readReg>
 8005764:	4603      	mov	r3, r0
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	429c      	cmp	r4, r3
 800576c:	d0ef      	beq.n	800574e <radio_init+0x72>
            randbuf[i] = (randbuf[i] << 1) | b;
 800576e:	4a14      	ldr	r2, [pc, #80]	; (80057c0 <radio_init+0xe4>)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	b25a      	sxtb	r2, r3
 800577a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800577e:	4313      	orrs	r3, r2
 8005780:	b25b      	sxtb	r3, r3
 8005782:	b2d9      	uxtb	r1, r3
 8005784:	4a0e      	ldr	r2, [pc, #56]	; (80057c0 <radio_init+0xe4>)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4413      	add	r3, r2
 800578a:	460a      	mov	r2, r1
 800578c:	701a      	strb	r2, [r3, #0]
        for(int j=0; j<8; j++) {
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	3301      	adds	r3, #1
 8005792:	60bb      	str	r3, [r7, #8]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b07      	cmp	r3, #7
 8005798:	ddd8      	ble.n	800574c <radio_init+0x70>
    for(int i=1; i<16; i++) {
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3301      	adds	r3, #1
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b0f      	cmp	r3, #15
 80057a4:	ddcf      	ble.n	8005746 <radio_init+0x6a>
        }
    }
    randbuf[0] = 16; // set initial index
 80057a6:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <radio_init+0xe4>)
 80057a8:	2210      	movs	r2, #16
 80057aa:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
 80057ac:	2000      	movs	r0, #0
 80057ae:	f7ff fc47 	bl	8005040 <opmode>

    hal_enableIRQs();
 80057b2:	f7fb fdf1 	bl	8001398 <hal_enableIRQs>
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd90      	pop	{r4, r7, pc}
 80057be:	bf00      	nop
 80057c0:	2000008c 	.word	0x2000008c

080057c4 <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1 () {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
    u1_t i = randbuf[0];
 80057ca:	4b10      	ldr	r3, [pc, #64]	; (800580c <radio_rand1+0x48>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	71fb      	strb	r3, [r7, #7]
    ASSERT( i != 0 );
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <radio_rand1+0x16>
 80057d6:	f7fb fe11 	bl	80013fc <hal_failed>
    if( i==16 ) {
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	2b10      	cmp	r3, #16
 80057de:	d106      	bne.n	80057ee <radio_rand1+0x2a>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 80057e0:	2210      	movs	r2, #16
 80057e2:	490a      	ldr	r1, [pc, #40]	; (800580c <radio_rand1+0x48>)
 80057e4:	2000      	movs	r0, #0
 80057e6:	f7fa ff3b 	bl	8000660 <os_aes>
        i = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	71fb      	strb	r3, [r7, #7]
    }
    u1_t v = randbuf[i++];
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	71fa      	strb	r2, [r7, #7]
 80057f4:	461a      	mov	r2, r3
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <radio_rand1+0x48>)
 80057f8:	5c9b      	ldrb	r3, [r3, r2]
 80057fa:	71bb      	strb	r3, [r7, #6]
    randbuf[0] = i;
 80057fc:	4a03      	ldr	r2, [pc, #12]	; (800580c <radio_rand1+0x48>)
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	7013      	strb	r3, [r2, #0]
    return v;
 8005802:	79bb      	ldrb	r3, [r7, #6]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	2000008c 	.word	0x2000008c

08005810 <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	4603      	mov	r3, r0
 8005818:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
    ostime_t now = os_getTime();
 800581a:	f7ff faad 	bl	8004d78 <os_getTime>
 800581e:	60f8      	str	r0, [r7, #12]
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 8005820:	2001      	movs	r0, #1
 8005822:	f7ff fb9c 	bl	8004f5e <readReg>
 8005826:	4603      	mov	r3, r0
 8005828:	b25b      	sxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	da74      	bge.n	8005918 <radio_irq_handler+0x108>
        u1_t flags = readReg(LORARegIrqFlags);
 800582e:	2012      	movs	r0, #18
 8005830:	f7ff fb95 	bl	8004f5e <readReg>
 8005834:	4603      	mov	r3, r0
 8005836:	727b      	strb	r3, [r7, #9]
        if( flags & IRQ_LORA_TXDONE_MASK ) {
 8005838:	7a7b      	ldrb	r3, [r7, #9]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d004      	beq.n	800584c <radio_irq_handler+0x3c>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	3b01      	subs	r3, #1
 8005846:	4a59      	ldr	r2, [pc, #356]	; (80059ac <radio_irq_handler+0x19c>)
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	e05c      	b.n	8005906 <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
 800584c:	7a7b      	ldrb	r3, [r7, #9]
 800584e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d04f      	beq.n	80058f6 <radio_irq_handler+0xe6>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
 8005856:	4b55      	ldr	r3, [pc, #340]	; (80059ac <radio_irq_handler+0x19c>)
 8005858:	89db      	ldrh	r3, [r3, #14]
 800585a:	4618      	mov	r0, r3
 800585c:	f7fb fde5 	bl	800142a <getBw>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10d      	bne.n	8005882 <radio_irq_handler+0x72>
                now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 8005866:	4b51      	ldr	r3, [pc, #324]	; (80059ac <radio_irq_handler+0x19c>)
 8005868:	89db      	ldrh	r3, [r3, #14]
 800586a:	4618      	mov	r0, r3
 800586c:	f7fb fdcd 	bl	800140a <getSf>
 8005870:	4603      	mov	r3, r0
 8005872:	461a      	mov	r2, r3
 8005874:	4b4e      	ldr	r3, [pc, #312]	; (80059b0 <radio_irq_handler+0x1a0>)
 8005876:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800587a:	461a      	mov	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	1a9b      	subs	r3, r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
            }
            LMIC.rxtime = now;
 8005882:	4a4a      	ldr	r2, [pc, #296]	; (80059ac <radio_irq_handler+0x19c>)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8005888:	201d      	movs	r0, #29
 800588a:	f7ff fb68 	bl	8004f5e <readReg>
 800588e:	4603      	mov	r3, r0
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <radio_irq_handler+0x94>
 8005898:	2022      	movs	r0, #34	; 0x22
 800589a:	f7ff fb60 	bl	8004f5e <readReg>
 800589e:	4603      	mov	r3, r0
 80058a0:	461a      	mov	r2, r3
 80058a2:	e004      	b.n	80058ae <radio_irq_handler+0x9e>
 80058a4:	2013      	movs	r0, #19
 80058a6:	f7ff fb5a 	bl	8004f5e <readReg>
 80058aa:	4603      	mov	r3, r0
 80058ac:	461a      	mov	r2, r3
 80058ae:	4b3f      	ldr	r3, [pc, #252]	; (80059ac <radio_irq_handler+0x19c>)
 80058b0:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr)); 
 80058b4:	2010      	movs	r0, #16
 80058b6:	f7ff fb52 	bl	8004f5e <readReg>
 80058ba:	4603      	mov	r3, r0
 80058bc:	4619      	mov	r1, r3
 80058be:	200d      	movs	r0, #13
 80058c0:	f7ff fb30 	bl	8004f24 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80058c4:	4b39      	ldr	r3, [pc, #228]	; (80059ac <radio_irq_handler+0x19c>)
 80058c6:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80058ca:	461a      	mov	r2, r3
 80058cc:	4939      	ldr	r1, [pc, #228]	; (80059b4 <radio_irq_handler+0x1a4>)
 80058ce:	2000      	movs	r0, #0
 80058d0:	f7ff fb8b 	bl	8004fea <readBuf>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 80058d4:	2019      	movs	r0, #25
 80058d6:	f7ff fb42 	bl	8004f5e <readReg>
 80058da:	4603      	mov	r3, r0
 80058dc:	b25a      	sxtb	r2, r3
 80058de:	4b33      	ldr	r3, [pc, #204]	; (80059ac <radio_irq_handler+0x19c>)
 80058e0:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 80058e2:	201a      	movs	r0, #26
 80058e4:	f7ff fb3b 	bl	8004f5e <readReg>
 80058e8:	4603      	mov	r3, r0
 80058ea:	3b3d      	subs	r3, #61	; 0x3d
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	b25a      	sxtb	r2, r3
 80058f0:	4b2e      	ldr	r3, [pc, #184]	; (80059ac <radio_irq_handler+0x19c>)
 80058f2:	731a      	strb	r2, [r3, #12]
 80058f4:	e007      	b.n	8005906 <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
 80058f6:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	da03      	bge.n	8005906 <radio_irq_handler+0xf6>
            // indicate timeout
            LMIC.dataLen = 0;
 80058fe:	4b2b      	ldr	r3, [pc, #172]	; (80059ac <radio_irq_handler+0x19c>)
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
 8005906:	21ff      	movs	r1, #255	; 0xff
 8005908:	2011      	movs	r0, #17
 800590a:	f7ff fb0b 	bl	8004f24 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
 800590e:	21ff      	movs	r1, #255	; 0xff
 8005910:	2012      	movs	r0, #18
 8005912:	f7ff fb07 	bl	8004f24 <writeReg>
 8005916:	e03c      	b.n	8005992 <radio_irq_handler+0x182>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
 8005918:	203e      	movs	r0, #62	; 0x3e
 800591a:	f7ff fb20 	bl	8004f5e <readReg>
 800591e:	4603      	mov	r3, r0
 8005920:	72fb      	strb	r3, [r7, #11]
        u1_t flags2 = readReg(FSKRegIrqFlags2);
 8005922:	203f      	movs	r0, #63	; 0x3f
 8005924:	f7ff fb1b 	bl	8004f5e <readReg>
 8005928:	4603      	mov	r3, r0
 800592a:	72bb      	strb	r3, [r7, #10]
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
 800592c:	7abb      	ldrb	r3, [r7, #10]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <radio_irq_handler+0x12e>
            // save exact tx time
            LMIC.txend = now;
 8005936:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <radio_irq_handler+0x19c>)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	e029      	b.n	8005992 <radio_irq_handler+0x182>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
 800593e:	7abb      	ldrb	r3, [r7, #10]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d019      	beq.n	800597c <radio_irq_handler+0x16c>
            // save exact rx time
            LMIC.rxtime = now;
 8005948:	4a18      	ldr	r2, [pc, #96]	; (80059ac <radio_irq_handler+0x19c>)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
 800594e:	2032      	movs	r0, #50	; 0x32
 8005950:	f7ff fb05 	bl	8004f5e <readReg>
 8005954:	4603      	mov	r3, r0
 8005956:	461a      	mov	r2, r3
 8005958:	4b14      	ldr	r3, [pc, #80]	; (80059ac <radio_irq_handler+0x19c>)
 800595a:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 800595e:	4b13      	ldr	r3, [pc, #76]	; (80059ac <radio_irq_handler+0x19c>)
 8005960:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005964:	461a      	mov	r2, r3
 8005966:	4913      	ldr	r1, [pc, #76]	; (80059b4 <radio_irq_handler+0x1a4>)
 8005968:	2000      	movs	r0, #0
 800596a:	f7ff fb3e 	bl	8004fea <readBuf>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
 800596e:	4b0f      	ldr	r3, [pc, #60]	; (80059ac <radio_irq_handler+0x19c>)
 8005970:	2200      	movs	r2, #0
 8005972:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = 0; // determine rssi
 8005974:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <radio_irq_handler+0x19c>)
 8005976:	2200      	movs	r2, #0
 8005978:	731a      	strb	r2, [r3, #12]
 800597a:	e00a      	b.n	8005992 <radio_irq_handler+0x182>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
 800597c:	7afb      	ldrb	r3, [r7, #11]
 800597e:	f003 0304 	and.w	r3, r3, #4
 8005982:	2b00      	cmp	r3, #0
 8005984:	d004      	beq.n	8005990 <radio_irq_handler+0x180>
            // indicate timeout
            LMIC.dataLen = 0;
 8005986:	4b09      	ldr	r3, [pc, #36]	; (80059ac <radio_irq_handler+0x19c>)
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 800598e:	e000      	b.n	8005992 <radio_irq_handler+0x182>
        } else {
            while(1);
 8005990:	e7fe      	b.n	8005990 <radio_irq_handler+0x180>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
 8005992:	2000      	movs	r0, #0
 8005994:	f7ff fb54 	bl	8005040 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 8005998:	4b04      	ldr	r3, [pc, #16]	; (80059ac <radio_irq_handler+0x19c>)
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	4619      	mov	r1, r3
 800599e:	4806      	ldr	r0, [pc, #24]	; (80059b8 <radio_irq_handler+0x1a8>)
 80059a0:	f7ff fa2e 	bl	8004e00 <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 80059a4:	bf00      	nop
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	20000304 	.word	0x20000304
 80059b0:	0800cd84 	.word	0x0800cd84
 80059b4:	2000044c 	.word	0x2000044c
 80059b8:	20000318 	.word	0x20000318

080059bc <os_radio>:

void os_radio (u1_t mode) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	71fb      	strb	r3, [r7, #7]
    hal_disableIRQs();
 80059c6:	f7fb fcd7 	bl	8001378 <hal_disableIRQs>
    switch (mode) {
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d81a      	bhi.n	8005a06 <os_radio+0x4a>
 80059d0:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <os_radio+0x1c>)
 80059d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d6:	bf00      	nop
 80059d8:	080059e9 	.word	0x080059e9
 80059dc:	080059f1 	.word	0x080059f1
 80059e0:	080059f7 	.word	0x080059f7
 80059e4:	080059ff 	.word	0x080059ff
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
 80059e8:	2000      	movs	r0, #0
 80059ea:	f7ff fb29 	bl	8005040 <opmode>
        break;
 80059ee:	e00a      	b.n	8005a06 <os_radio+0x4a>

      case RADIO_TX:
        // transmit frame now
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 80059f0:	f7ff fd44 	bl	800547c <starttx>
        break;
 80059f4:	e007      	b.n	8005a06 <os_radio+0x4a>
      
      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 80059f6:	2000      	movs	r0, #0
 80059f8:	f7ff fe4a 	bl	8005690 <startrx>
        break;
 80059fc:	e003      	b.n	8005a06 <os_radio+0x4a>

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
 80059fe:	2001      	movs	r0, #1
 8005a00:	f7ff fe46 	bl	8005690 <startrx>
        break;
 8005a04:	bf00      	nop
    }
    hal_enableIRQs();
 8005a06:	f7fb fcc7 	bl	8001398 <hal_enableIRQs>
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop

08005a14 <hpmCalculateChecksum>:

static UART_HandleTypeDef *hpmHuart = 0;


static uint8_t hpmCalculateChecksum(uint8_t *buffer, int length)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint16_t sum = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	81fb      	strh	r3, [r7, #14]
  int i;

  for (i = 0; i < length; i++)
 8005a22:	2300      	movs	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]
 8005a26:	e00a      	b.n	8005a3e <hpmCalculateChecksum+0x2a>
    sum += buffer[i];
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	89fb      	ldrh	r3, [r7, #14]
 8005a34:	4413      	add	r3, r2
 8005a36:	81fb      	strh	r3, [r7, #14]
  for (i = 0; i < length; i++)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	60bb      	str	r3, [r7, #8]
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	dbf0      	blt.n	8005a28 <hpmCalculateChecksum+0x14>

  return (65536U - sum) % 256;
 8005a46:	89fb      	ldrh	r3, [r7, #14]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	425b      	negs	r3, r3
 8005a4c:	b2db      	uxtb	r3, r3
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
	...

08005a5c <hpmUartTx>:


static unsigned int hpmUartTx(uint8_t *buffer, int length)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(hpmHuart, buffer, length, DEFAULT_TX_TIMEOUT_MS);
 8005a66:	4b07      	ldr	r3, [pc, #28]	; (8005a84 <hpmUartTx+0x28>)
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	f004 fecc 	bl	800a810 <HAL_UART_Transmit>

  return length;
 8005a78:	683b      	ldr	r3, [r7, #0]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	2000009c 	.word	0x2000009c

08005a88 <hpmUartRx>:


static unsigned int hpmUartRx(uint8_t *buffer, int length)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  int errCode;

  errCode = HAL_UART_Receive(hpmHuart, buffer, length, DEFAULT_RX_TIMEOUT_MS);
 8005a92:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <hpmUartRx+0x34>)
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	f004 ff49 	bl	800a936 <HAL_UART_Receive>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	60fb      	str	r3, [r7, #12]

  return errCode == HAL_OK ? length : 0;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <hpmUartRx+0x2a>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	e000      	b.n	8005ab4 <hpmUartRx+0x2c>
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	2000009c 	.word	0x2000009c

08005ac0 <hpmSendCommand>:


static int hpmSendCommand(uint8_t cmd, uint8_t *data, uint8_t dataLength)
{
 8005ac0:	b590      	push	{r4, r7, lr}
 8005ac2:	b0c5      	sub	sp, #276	; 0x114
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	6019      	str	r1, [r3, #0]
 8005aca:	4611      	mov	r1, r2
 8005acc:	1dfb      	adds	r3, r7, #7
 8005ace:	4602      	mov	r2, r0
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	1dbb      	adds	r3, r7, #6
 8005ad4:	460a      	mov	r2, r1
 8005ad6:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[1+1+1+256+1];

  /* Check the data parameters */
  if (!data && dataLength > 0)
 8005ad8:	463b      	mov	r3, r7
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <hpmSendCommand+0x2e>
 8005ae0:	1dbb      	adds	r3, r7, #6
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <hpmSendCommand+0x2e>
    return HPM_ERR_BAD_ARG;
 8005ae8:	f06f 0301 	mvn.w	r3, #1
 8005aec:	e038      	b.n	8005b60 <hpmSendCommand+0xa0>

  /* Header */
  buffer[0] = HPM_CMD_HEADER;
 8005aee:	f107 030c 	add.w	r3, r7, #12
 8005af2:	2268      	movs	r2, #104	; 0x68
 8005af4:	701a      	strb	r2, [r3, #0]

  /* Length */
  buffer[1] = 1 + dataLength;
 8005af6:	1dbb      	adds	r3, r7, #6
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	3301      	adds	r3, #1
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	f107 030c 	add.w	r3, r7, #12
 8005b02:	705a      	strb	r2, [r3, #1]

  /* Command */
  buffer[2] = cmd;
 8005b04:	f107 030c 	add.w	r3, r7, #12
 8005b08:	1dfa      	adds	r2, r7, #7
 8005b0a:	7812      	ldrb	r2, [r2, #0]
 8005b0c:	709a      	strb	r2, [r3, #2]

  /* Data */
  if (dataLength > 0)
 8005b0e:	1dbb      	adds	r3, r7, #6
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d009      	beq.n	8005b2a <hpmSendCommand+0x6a>
    memcpy(&buffer[3], data, dataLength);
 8005b16:	1dbb      	adds	r3, r7, #6
 8005b18:	7819      	ldrb	r1, [r3, #0]
 8005b1a:	463b      	mov	r3, r7
 8005b1c:	f107 020c 	add.w	r2, r7, #12
 8005b20:	1cd0      	adds	r0, r2, #3
 8005b22:	460a      	mov	r2, r1
 8005b24:	6819      	ldr	r1, [r3, #0]
 8005b26:	f005 fdd3 	bl	800b6d0 <memcpy>

  /* Checksum */
  buffer[3 + dataLength] = hpmCalculateChecksum(buffer, 3 + dataLength);
 8005b2a:	1dbb      	adds	r3, r7, #6
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	1cda      	adds	r2, r3, #3
 8005b30:	1dbb      	adds	r3, r7, #6
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	1cdc      	adds	r4, r3, #3
 8005b36:	f107 030c 	add.w	r3, r7, #12
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff ff69 	bl	8005a14 <hpmCalculateChecksum>
 8005b42:	4603      	mov	r3, r0
 8005b44:	461a      	mov	r2, r3
 8005b46:	f107 030c 	add.w	r3, r7, #12
 8005b4a:	551a      	strb	r2, [r3, r4]

  /* Return the length of data transmitted */
  return hpmUartTx(buffer, 3 + dataLength + 1);
 8005b4c:	1dbb      	adds	r3, r7, #6
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	1d1a      	adds	r2, r3, #4
 8005b52:	f107 030c 	add.w	r3, r7, #12
 8005b56:	4611      	mov	r1, r2
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff ff7f 	bl	8005a5c <hpmUartTx>
 8005b5e:	4603      	mov	r3, r0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd90      	pop	{r4, r7, pc}

08005b6a <hpmGetSimpleAckResponse>:


static AckResponse hpmGetSimpleAckResponse()
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
  uint8_t ack[2];

  if (hpmUartRx(ack, 2) != 2)
 8005b70:	1d3b      	adds	r3, r7, #4
 8005b72:	2102      	movs	r1, #2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff ff87 	bl	8005a88 <hpmUartRx>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d001      	beq.n	8005b84 <hpmGetSimpleAckResponse+0x1a>
    return ACK_ERR;
 8005b80:	2302      	movs	r3, #2
 8005b82:	e010      	b.n	8005ba6 <hpmGetSimpleAckResponse+0x3c>

  if (ack[0] == 0xa5 && ack[1] == 0xa5)
 8005b84:	793b      	ldrb	r3, [r7, #4]
 8005b86:	2ba5      	cmp	r3, #165	; 0xa5
 8005b88:	d104      	bne.n	8005b94 <hpmGetSimpleAckResponse+0x2a>
 8005b8a:	797b      	ldrb	r3, [r7, #5]
 8005b8c:	2ba5      	cmp	r3, #165	; 0xa5
 8005b8e:	d101      	bne.n	8005b94 <hpmGetSimpleAckResponse+0x2a>
    return ACK_POS;
 8005b90:	2300      	movs	r3, #0
 8005b92:	e008      	b.n	8005ba6 <hpmGetSimpleAckResponse+0x3c>

  if (ack[0] == 0x96 && ack[1] == 0x96)
 8005b94:	793b      	ldrb	r3, [r7, #4]
 8005b96:	2b96      	cmp	r3, #150	; 0x96
 8005b98:	d104      	bne.n	8005ba4 <hpmGetSimpleAckResponse+0x3a>
 8005b9a:	797b      	ldrb	r3, [r7, #5]
 8005b9c:	2b96      	cmp	r3, #150	; 0x96
 8005b9e:	d101      	bne.n	8005ba4 <hpmGetSimpleAckResponse+0x3a>
    return ACK_NEG;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <hpmGetSimpleAckResponse+0x3c>

  return ACK_ERR;
 8005ba4:	2302      	movs	r3, #2
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <hpmGetComplexAckResponse>:


static AckResponse hpmGetComplexAckResponse(
    uint8_t *payloadBuffer, int maxPayloadLength,
    uint8_t *cmd, int *actualPayloadLength)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b090      	sub	sp, #64	; 0x40
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
 8005bba:	603b      	str	r3, [r7, #0]
  uint8_t response[32];
  unsigned int respLength;
  int receivedChecksum, expectedChecksum;

  /* There should be at least 2 bytes in the response */
  if (hpmUartRx(response, 2) != 2)
 8005bbc:	f107 0314 	add.w	r3, r7, #20
 8005bc0:	2102      	movs	r1, #2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff ff60 	bl	8005a88 <hpmUartRx>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d001      	beq.n	8005bd2 <hpmGetComplexAckResponse+0x24>
    return ACK_ERR;
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e055      	b.n	8005c7e <hpmGetComplexAckResponse+0xd0>

  /* Handle negative acknowledgement 0x9696 */
  if (response[0] == 0x96 && response[1] == 0x96)
 8005bd2:	7d3b      	ldrb	r3, [r7, #20]
 8005bd4:	2b96      	cmp	r3, #150	; 0x96
 8005bd6:	d104      	bne.n	8005be2 <hpmGetComplexAckResponse+0x34>
 8005bd8:	7d7b      	ldrb	r3, [r7, #21]
 8005bda:	2b96      	cmp	r3, #150	; 0x96
 8005bdc:	d101      	bne.n	8005be2 <hpmGetComplexAckResponse+0x34>
    return ACK_NEG;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e04d      	b.n	8005c7e <hpmGetComplexAckResponse+0xd0>

  /* Handle positive acknowledgement 0x40... */
  if (response[0] == 0x40)
 8005be2:	7d3b      	ldrb	r3, [r7, #20]
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	d149      	bne.n	8005c7c <hpmGetComplexAckResponse+0xce>
  {
    /* The response length has already been read */
    respLength = response[1];
 8005be8:	7d7b      	ldrb	r3, [r7, #21]
 8005bea:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* The payload length is 1 less */
    *actualPayloadLength = respLength - 1;
 8005bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	601a      	str	r2, [r3, #0]

    /* Bail out if the amount of data to read is anormal or too
     * much for the payload buffer*/
    if (respLength >= sizeof(response) - 2 ||
 8005bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf8:	2b1d      	cmp	r3, #29
 8005bfa:	d804      	bhi.n	8005c06 <hpmGetComplexAckResponse+0x58>
        *actualPayloadLength > maxPayloadLength)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
    if (respLength >= sizeof(response) - 2 ||
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	da01      	bge.n	8005c0a <hpmGetComplexAckResponse+0x5c>
      return ACK_ERR;
 8005c06:	2302      	movs	r3, #2
 8005c08:	e039      	b.n	8005c7e <hpmGetComplexAckResponse+0xd0>

    /* Read the rest of the message, respLength + 1 bytes */
    if (hpmUartRx(&response[2], respLength + 1) != respLength + 1)
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f107 0314 	add.w	r3, r7, #20
 8005c14:	3302      	adds	r3, #2
 8005c16:	4611      	mov	r1, r2
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7ff ff35 	bl	8005a88 <hpmUartRx>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c22:	3301      	adds	r3, #1
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d001      	beq.n	8005c2c <hpmGetComplexAckResponse+0x7e>
      return ACK_ERR;
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e028      	b.n	8005c7e <hpmGetComplexAckResponse+0xd0>

    /* The command code */
    *cmd = response[2];
 8005c2c:	7dba      	ldrb	r2, [r7, #22]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	701a      	strb	r2, [r3, #0]

    /* The data payload */
    memcpy(payloadBuffer, &response[3], *actualPayloadLength);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	f107 0314 	add.w	r3, r7, #20
 8005c3c:	3303      	adds	r3, #3
 8005c3e:	4619      	mov	r1, r3
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f005 fd45 	bl	800b6d0 <memcpy>

    /* Verify the checksum */
    receivedChecksum = response[2 + respLength];
 8005c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c48:	3302      	adds	r3, #2
 8005c4a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005c4e:	4413      	add	r3, r2
 8005c50:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8005c54:	63bb      	str	r3, [r7, #56]	; 0x38
    expectedChecksum = hpmCalculateChecksum(response, 2 + respLength);
 8005c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c58:	3302      	adds	r3, #2
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f107 0314 	add.w	r3, r7, #20
 8005c60:	4611      	mov	r1, r2
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff fed6 	bl	8005a14 <hpmCalculateChecksum>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	637b      	str	r3, [r7, #52]	; 0x34
    if (receivedChecksum != expectedChecksum)
 8005c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d001      	beq.n	8005c78 <hpmGetComplexAckResponse+0xca>
      return ACK_BAD_CHECKSUM;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e002      	b.n	8005c7e <hpmGetComplexAckResponse+0xd0>

    return ACK_POS;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	e000      	b.n	8005c7e <hpmGetComplexAckResponse+0xd0>
  }
  else
  {
    return ACK_ERR;
 8005c7c:	2302      	movs	r3, #2
  }
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3740      	adds	r7, #64	; 0x40
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <hpmSetUart>:


int hpmSetUart(UART_HandleTypeDef *huart)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  hpmHuart = huart;
 8005c90:	4a04      	ldr	r2, [pc, #16]	; (8005ca4 <hpmSetUart+0x1c>)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6013      	str	r3, [r2, #0]

  return HPM_ERR_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	2000009c 	.word	0x2000009c

08005ca8 <hpmReadResults>:


int hpmReadResults(int *pm25concentration, int *pm10concentration)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  int errCode;
  uint8_t data[4];
  uint8_t cmdInAck;
  int dataLength;

  if ((errCode = hpmSendCommand(HPM_READ_RESULTS_CMD, NULL, 0)) < 0)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	2004      	movs	r0, #4
 8005cb8:	f7ff ff02 	bl	8005ac0 <hpmSendCommand>
 8005cbc:	6178      	str	r0, [r7, #20]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	da01      	bge.n	8005cc8 <hpmReadResults+0x20>
    return errCode;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	e02d      	b.n	8005d24 <hpmReadResults+0x7c>

  switch(hpmGetComplexAckResponse(data, sizeof(data), &cmdInAck, &dataLength))
 8005cc8:	f107 0308 	add.w	r3, r7, #8
 8005ccc:	f107 020f 	add.w	r2, r7, #15
 8005cd0:	f107 0010 	add.w	r0, r7, #16
 8005cd4:	2104      	movs	r1, #4
 8005cd6:	f7ff ff6a 	bl	8005bae <hpmGetComplexAckResponse>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d019      	beq.n	8005d14 <hpmReadResults+0x6c>
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d01a      	beq.n	8005d1a <hpmReadResults+0x72>
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d11b      	bne.n	8005d20 <hpmReadResults+0x78>
  {
    case ACK_POS:
      /* Verify the command and data length are correct in the response */
      if (cmdInAck != HPM_READ_RESULTS_CMD || dataLength != 4)
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d102      	bne.n	8005cf4 <hpmReadResults+0x4c>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d001      	beq.n	8005cf8 <hpmReadResults+0x50>
        return ACK_ERR;
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e015      	b.n	8005d24 <hpmReadResults+0x7c>

      *pm25concentration = (int) data[0] * 256 + data[1];
 8005cf8:	7c3b      	ldrb	r3, [r7, #16]
 8005cfa:	021b      	lsls	r3, r3, #8
 8005cfc:	7c7a      	ldrb	r2, [r7, #17]
 8005cfe:	441a      	add	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	601a      	str	r2, [r3, #0]
      *pm10concentration = (int) data[2] * 256 + data[3];
 8005d04:	7cbb      	ldrb	r3, [r7, #18]
 8005d06:	021b      	lsls	r3, r3, #8
 8005d08:	7cfa      	ldrb	r2, [r7, #19]
 8005d0a:	441a      	add	r2, r3
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	601a      	str	r2, [r3, #0]
      return HPM_ERR_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	e007      	b.n	8005d24 <hpmReadResults+0x7c>
      break;
    case ACK_NEG:
      return HPM_ERR_NEG_ACK;
 8005d14:	f06f 0302 	mvn.w	r3, #2
 8005d18:	e004      	b.n	8005d24 <hpmReadResults+0x7c>
      break;
    case ACK_BAD_CHECKSUM:
      return HPM_ERR_BAD_CHECKSUM;
 8005d1a:	f06f 0305 	mvn.w	r3, #5
 8005d1e:	e001      	b.n	8005d24 <hpmReadResults+0x7c>
      break;
    case ACK_ERR:
    default:
      return HPM_ERR_BAD_RESPONSE;
 8005d20:	f06f 0304 	mvn.w	r3, #4
  }
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <hpmStartParticleMeasurement>:


int hpmStartParticleMeasurement()
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
  int errCode;

  if ((errCode = hpmSendCommand(HPM_START_MEASURE_CMD, NULL, 0)) < 0)
 8005d32:	2200      	movs	r2, #0
 8005d34:	2100      	movs	r1, #0
 8005d36:	2001      	movs	r0, #1
 8005d38:	f7ff fec2 	bl	8005ac0 <hpmSendCommand>
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	da01      	bge.n	8005d48 <hpmStartParticleMeasurement+0x1c>
    return errCode;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	e00e      	b.n	8005d66 <hpmStartParticleMeasurement+0x3a>

  switch(hpmGetSimpleAckResponse())
 8005d48:	f7ff ff0f 	bl	8005b6a <hpmGetSimpleAckResponse>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <hpmStartParticleMeasurement+0x2c>
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d002      	beq.n	8005d5c <hpmStartParticleMeasurement+0x30>
 8005d56:	e004      	b.n	8005d62 <hpmStartParticleMeasurement+0x36>
  {
  case ACK_POS: return HPM_ERR_OK; break;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e004      	b.n	8005d66 <hpmStartParticleMeasurement+0x3a>
  case ACK_NEG: return HPM_ERR_NEG_ACK; break;
 8005d5c:	f06f 0302 	mvn.w	r3, #2
 8005d60:	e001      	b.n	8005d66 <hpmStartParticleMeasurement+0x3a>
  case ACK_ERR:
  default:
    return HPM_ERR_BAD_RESPONSE;
 8005d62:	f06f 0304 	mvn.w	r3, #4
  }
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <hpmStopParticleMeasurement>:


int hpmStopParticleMeasurement()
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
  int errCode;

  if ((errCode = hpmSendCommand(HPM_STOP_MEASURE_CMD, NULL, 0)) < 0)
 8005d74:	2200      	movs	r2, #0
 8005d76:	2100      	movs	r1, #0
 8005d78:	2002      	movs	r0, #2
 8005d7a:	f7ff fea1 	bl	8005ac0 <hpmSendCommand>
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	da01      	bge.n	8005d8a <hpmStopParticleMeasurement+0x1c>
    return errCode;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	e00e      	b.n	8005da8 <hpmStopParticleMeasurement+0x3a>

  switch(hpmGetSimpleAckResponse())
 8005d8a:	f7ff feee 	bl	8005b6a <hpmGetSimpleAckResponse>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <hpmStopParticleMeasurement+0x2c>
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d002      	beq.n	8005d9e <hpmStopParticleMeasurement+0x30>
 8005d98:	e004      	b.n	8005da4 <hpmStopParticleMeasurement+0x36>
  {
    case ACK_POS: return HPM_ERR_OK; break;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e004      	b.n	8005da8 <hpmStopParticleMeasurement+0x3a>
    case ACK_NEG: return HPM_ERR_NEG_ACK; break;
 8005d9e:	f06f 0302 	mvn.w	r3, #2
 8005da2:	e001      	b.n	8005da8 <hpmStopParticleMeasurement+0x3a>
    case ACK_ERR:
    default:
      return HPM_ERR_BAD_RESPONSE;
 8005da4:	f06f 0304 	mvn.w	r3, #4
  }
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <hpmStopAutoSend>:
  }
}


int hpmStopAutoSend()
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
  int errCode;

  if ((errCode = hpmSendCommand(HPM_STOP_AUTO_SEND_CMD, NULL, 0)) < 0)
 8005db6:	2200      	movs	r2, #0
 8005db8:	2100      	movs	r1, #0
 8005dba:	2020      	movs	r0, #32
 8005dbc:	f7ff fe80 	bl	8005ac0 <hpmSendCommand>
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	da01      	bge.n	8005dcc <hpmStopAutoSend+0x1c>
    return errCode;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	e00e      	b.n	8005dea <hpmStopAutoSend+0x3a>

  switch(hpmGetSimpleAckResponse())
 8005dcc:	f7ff fecd 	bl	8005b6a <hpmGetSimpleAckResponse>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <hpmStopAutoSend+0x2c>
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d002      	beq.n	8005de0 <hpmStopAutoSend+0x30>
 8005dda:	e004      	b.n	8005de6 <hpmStopAutoSend+0x36>
  {
    case ACK_POS: return HPM_ERR_OK; break;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	e004      	b.n	8005dea <hpmStopAutoSend+0x3a>
    case ACK_NEG: return HPM_ERR_NEG_ACK; break;
 8005de0:	f06f 0302 	mvn.w	r3, #2
 8005de4:	e001      	b.n	8005dea <hpmStopAutoSend+0x3a>
    case ACK_ERR:
    default:
      return HPM_ERR_BAD_RESPONSE;
 8005de6:	f06f 0304 	mvn.w	r3, #4
  }
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dfa:	4b0f      	ldr	r3, [pc, #60]	; (8005e38 <HAL_MspInit+0x44>)
 8005dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dfe:	4a0e      	ldr	r2, [pc, #56]	; (8005e38 <HAL_MspInit+0x44>)
 8005e00:	f043 0301 	orr.w	r3, r3, #1
 8005e04:	6613      	str	r3, [r2, #96]	; 0x60
 8005e06:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <HAL_MspInit+0x44>)
 8005e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	607b      	str	r3, [r7, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e12:	4b09      	ldr	r3, [pc, #36]	; (8005e38 <HAL_MspInit+0x44>)
 8005e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e16:	4a08      	ldr	r2, [pc, #32]	; (8005e38 <HAL_MspInit+0x44>)
 8005e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8005e1e:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <HAL_MspInit+0x44>)
 8005e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	40021000 	.word	0x40021000

08005e3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08a      	sub	sp, #40	; 0x28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e44:	f107 0314 	add.w	r3, r7, #20
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	605a      	str	r2, [r3, #4]
 8005e4e:	609a      	str	r2, [r3, #8]
 8005e50:	60da      	str	r2, [r3, #12]
 8005e52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a17      	ldr	r2, [pc, #92]	; (8005eb8 <HAL_SPI_MspInit+0x7c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d128      	bne.n	8005eb0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005e5e:	4b17      	ldr	r3, [pc, #92]	; (8005ebc <HAL_SPI_MspInit+0x80>)
 8005e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e62:	4a16      	ldr	r2, [pc, #88]	; (8005ebc <HAL_SPI_MspInit+0x80>)
 8005e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e68:	6613      	str	r3, [r2, #96]	; 0x60
 8005e6a:	4b14      	ldr	r3, [pc, #80]	; (8005ebc <HAL_SPI_MspInit+0x80>)
 8005e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e72:	613b      	str	r3, [r7, #16]
 8005e74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e76:	4b11      	ldr	r3, [pc, #68]	; (8005ebc <HAL_SPI_MspInit+0x80>)
 8005e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e7a:	4a10      	ldr	r2, [pc, #64]	; (8005ebc <HAL_SPI_MspInit+0x80>)
 8005e7c:	f043 0301 	orr.w	r3, r3, #1
 8005e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e82:	4b0e      	ldr	r3, [pc, #56]	; (8005ebc <HAL_SPI_MspInit+0x80>)
 8005e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005e8e:	23e0      	movs	r3, #224	; 0xe0
 8005e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e92:	2302      	movs	r3, #2
 8005e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e96:	2300      	movs	r3, #0
 8005e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005e9e:	2305      	movs	r3, #5
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ea2:	f107 0314 	add.w	r3, r7, #20
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005eac:	f000 fb28 	bl	8006500 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005eb0:	bf00      	nop
 8005eb2:	3728      	adds	r7, #40	; 0x28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40013000 	.word	0x40013000
 8005ebc:	40021000 	.word	0x40021000

08005ec0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a0d      	ldr	r2, [pc, #52]	; (8005f04 <HAL_TIM_OC_MspInit+0x44>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d113      	bne.n	8005efa <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005ed2:	4b0d      	ldr	r3, [pc, #52]	; (8005f08 <HAL_TIM_OC_MspInit+0x48>)
 8005ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed6:	4a0c      	ldr	r2, [pc, #48]	; (8005f08 <HAL_TIM_OC_MspInit+0x48>)
 8005ed8:	f043 0304 	orr.w	r3, r3, #4
 8005edc:	6593      	str	r3, [r2, #88]	; 0x58
 8005ede:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <HAL_TIM_OC_MspInit+0x48>)
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee2:	f003 0304 	and.w	r3, r3, #4
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005eea:	2200      	movs	r2, #0
 8005eec:	2100      	movs	r1, #0
 8005eee:	201e      	movs	r0, #30
 8005ef0:	f000 fab6 	bl	8006460 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005ef4:	201e      	movs	r0, #30
 8005ef6:	f000 fadf 	bl	80064b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	40000800 	.word	0x40000800
 8005f08:	40021000 	.word	0x40021000

08005f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08c      	sub	sp, #48	; 0x30
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f14:	f107 031c 	add.w	r3, r7, #28
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	609a      	str	r2, [r3, #8]
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a2f      	ldr	r2, [pc, #188]	; (8005fe8 <HAL_UART_MspInit+0xdc>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d129      	bne.n	8005f82 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005f2e:	4b2f      	ldr	r3, [pc, #188]	; (8005fec <HAL_UART_MspInit+0xe0>)
 8005f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f32:	4a2e      	ldr	r2, [pc, #184]	; (8005fec <HAL_UART_MspInit+0xe0>)
 8005f34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f38:	6593      	str	r3, [r2, #88]	; 0x58
 8005f3a:	4b2c      	ldr	r3, [pc, #176]	; (8005fec <HAL_UART_MspInit+0xe0>)
 8005f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f42:	61bb      	str	r3, [r7, #24]
 8005f44:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f46:	4b29      	ldr	r3, [pc, #164]	; (8005fec <HAL_UART_MspInit+0xe0>)
 8005f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4a:	4a28      	ldr	r2, [pc, #160]	; (8005fec <HAL_UART_MspInit+0xe0>)
 8005f4c:	f043 0301 	orr.w	r3, r3, #1
 8005f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f52:	4b26      	ldr	r3, [pc, #152]	; (8005fec <HAL_UART_MspInit+0xe0>)
 8005f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f62:	2302      	movs	r3, #2
 8005f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005f6e:	2308      	movs	r3, #8
 8005f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f72:	f107 031c 	add.w	r3, r7, #28
 8005f76:	4619      	mov	r1, r3
 8005f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f7c:	f000 fac0 	bl	8006500 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005f80:	e02d      	b.n	8005fde <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART2)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1a      	ldr	r2, [pc, #104]	; (8005ff0 <HAL_UART_MspInit+0xe4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d128      	bne.n	8005fde <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f8c:	4b17      	ldr	r3, [pc, #92]	; (8005fec <HAL_UART_MspInit+0xe0>)
 8005f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f90:	4a16      	ldr	r2, [pc, #88]	; (8005fec <HAL_UART_MspInit+0xe0>)
 8005f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f96:	6593      	str	r3, [r2, #88]	; 0x58
 8005f98:	4b14      	ldr	r3, [pc, #80]	; (8005fec <HAL_UART_MspInit+0xe0>)
 8005f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa0:	613b      	str	r3, [r7, #16]
 8005fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fa4:	4b11      	ldr	r3, [pc, #68]	; (8005fec <HAL_UART_MspInit+0xe0>)
 8005fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa8:	4a10      	ldr	r2, [pc, #64]	; (8005fec <HAL_UART_MspInit+0xe0>)
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fb0:	4b0e      	ldr	r3, [pc, #56]	; (8005fec <HAL_UART_MspInit+0xe0>)
 8005fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005fbc:	230c      	movs	r3, #12
 8005fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005fcc:	2307      	movs	r3, #7
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fd0:	f107 031c 	add.w	r3, r7, #28
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fda:	f000 fa91 	bl	8006500 <HAL_GPIO_Init>
}
 8005fde:	bf00      	nop
 8005fe0:	3730      	adds	r7, #48	; 0x30
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	40004c00 	.word	0x40004c00
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	40004400 	.word	0x40004400

08005ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005ff8:	bf00      	nop
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006002:	b480      	push	{r7}
 8006004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006006:	e7fe      	b.n	8006006 <HardFault_Handler+0x4>

08006008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800600c:	e7fe      	b.n	800600c <MemManage_Handler+0x4>

0800600e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800600e:	b480      	push	{r7}
 8006010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006012:	e7fe      	b.n	8006012 <BusFault_Handler+0x4>

08006014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006018:	e7fe      	b.n	8006018 <UsageFault_Handler+0x4>

0800601a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800601a:	b480      	push	{r7}
 800601c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800601e:	bf00      	nop
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800602c:	bf00      	nop
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006036:	b480      	push	{r7}
 8006038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800603a:	bf00      	nop
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006048:	f000 f8da 	bl	8006200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800604c:	bf00      	nop
 800604e:	bd80      	pop	{r7, pc}

08006050 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006054:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006058:	f000 fd10 	bl	8006a7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800605c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006060:	f000 fd0c 	bl	8006a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006064:	bf00      	nop
 8006066:	bd80      	pop	{r7, pc}

08006068 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800606c:	4802      	ldr	r0, [pc, #8]	; (8006078 <TIM4_IRQHandler+0x10>)
 800606e:	f003 fafd 	bl	800966c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006072:	bf00      	nop
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000160 	.word	0x20000160

0800607c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8006080:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006084:	f000 fcfa 	bl	8006a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006088:	bf00      	nop
 800608a:	bd80      	pop	{r7, pc}

0800608c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006090:	4b17      	ldr	r3, [pc, #92]	; (80060f0 <SystemInit+0x64>)
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006096:	4a16      	ldr	r2, [pc, #88]	; (80060f0 <SystemInit+0x64>)
 8006098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800609c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80060a0:	4b14      	ldr	r3, [pc, #80]	; (80060f4 <SystemInit+0x68>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a13      	ldr	r2, [pc, #76]	; (80060f4 <SystemInit+0x68>)
 80060a6:	f043 0301 	orr.w	r3, r3, #1
 80060aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80060ac:	4b11      	ldr	r3, [pc, #68]	; (80060f4 <SystemInit+0x68>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80060b2:	4b10      	ldr	r3, [pc, #64]	; (80060f4 <SystemInit+0x68>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a0f      	ldr	r2, [pc, #60]	; (80060f4 <SystemInit+0x68>)
 80060b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80060bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80060c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80060c2:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <SystemInit+0x68>)
 80060c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80060ca:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <SystemInit+0x68>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a09      	ldr	r2, [pc, #36]	; (80060f4 <SystemInit+0x68>)
 80060d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80060d6:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <SystemInit+0x68>)
 80060d8:	2200      	movs	r2, #0
 80060da:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80060dc:	4b04      	ldr	r3, [pc, #16]	; (80060f0 <SystemInit+0x64>)
 80060de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060e2:	609a      	str	r2, [r3, #8]
#endif
}
 80060e4:	bf00      	nop
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	e000ed00 	.word	0xe000ed00
 80060f4:	40021000 	.word	0x40021000

080060f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80060f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006130 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80060fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80060fe:	e003      	b.n	8006108 <LoopCopyDataInit>

08006100 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006100:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006102:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006104:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006106:	3104      	adds	r1, #4

08006108 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006108:	480b      	ldr	r0, [pc, #44]	; (8006138 <LoopForever+0xa>)
	ldr	r3, =_edata
 800610a:	4b0c      	ldr	r3, [pc, #48]	; (800613c <LoopForever+0xe>)
	adds	r2, r0, r1
 800610c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800610e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006110:	d3f6      	bcc.n	8006100 <CopyDataInit>
	ldr	r2, =_sbss
 8006112:	4a0b      	ldr	r2, [pc, #44]	; (8006140 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006114:	e002      	b.n	800611c <LoopFillZerobss>

08006116 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006116:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006118:	f842 3b04 	str.w	r3, [r2], #4

0800611c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800611c:	4b09      	ldr	r3, [pc, #36]	; (8006144 <LoopForever+0x16>)
	cmp	r2, r3
 800611e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006120:	d3f9      	bcc.n	8006116 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006122:	f7ff ffb3 	bl	800608c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006126:	f005 faaf 	bl	800b688 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800612a:	f7fe fbc7 	bl	80048bc <main>

0800612e <LoopForever>:

LoopForever:
    b LoopForever
 800612e:	e7fe      	b.n	800612e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006130:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006134:	0800cdec 	.word	0x0800cdec
	ldr	r0, =_sdata
 8006138:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800613c:	20000054 	.word	0x20000054
	ldr	r2, =_sbss
 8006140:	20000054 	.word	0x20000054
	ldr	r3, = _ebss
 8006144:	200004b4 	.word	0x200004b4

08006148 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006148:	e7fe      	b.n	8006148 <ADC1_2_IRQHandler>
	...

0800614c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006156:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <HAL_Init+0x3c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a0b      	ldr	r2, [pc, #44]	; (8006188 <HAL_Init+0x3c>)
 800615c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006160:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006162:	2003      	movs	r0, #3
 8006164:	f000 f95c 	bl	8006420 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006168:	2000      	movs	r0, #0
 800616a:	f000 f80f 	bl	800618c <HAL_InitTick>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	71fb      	strb	r3, [r7, #7]
 8006178:	e001      	b.n	800617e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800617a:	f7ff fe3b 	bl	8005df4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800617e:	79fb      	ldrb	r3, [r7, #7]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	40022000 	.word	0x40022000

0800618c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006198:	4b16      	ldr	r3, [pc, #88]	; (80061f4 <HAL_InitTick+0x68>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d022      	beq.n	80061e6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80061a0:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <HAL_InitTick+0x6c>)
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b13      	ldr	r3, [pc, #76]	; (80061f4 <HAL_InitTick+0x68>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80061ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80061b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 f997 	bl	80064e8 <HAL_SYSTICK_Config>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10f      	bne.n	80061e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b0f      	cmp	r3, #15
 80061c4:	d809      	bhi.n	80061da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061c6:	2200      	movs	r2, #0
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	f04f 30ff 	mov.w	r0, #4294967295
 80061ce:	f000 f947 	bl	8006460 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80061d2:	4a0a      	ldr	r2, [pc, #40]	; (80061fc <HAL_InitTick+0x70>)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	e007      	b.n	80061ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	73fb      	strb	r3, [r7, #15]
 80061de:	e004      	b.n	80061ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	73fb      	strb	r3, [r7, #15]
 80061e4:	e001      	b.n	80061ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000050 	.word	0x20000050
 80061f8:	20000048 	.word	0x20000048
 80061fc:	2000004c 	.word	0x2000004c

08006200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <HAL_IncTick+0x1c>)
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <HAL_IncTick+0x20>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4413      	add	r3, r2
 800620e:	4a03      	ldr	r2, [pc, #12]	; (800621c <HAL_IncTick+0x1c>)
 8006210:	6013      	str	r3, [r2, #0]
}
 8006212:	bf00      	nop
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	200004b0 	.word	0x200004b0
 8006220:	20000050 	.word	0x20000050

08006224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  return uwTick;
 8006228:	4b03      	ldr	r3, [pc, #12]	; (8006238 <HAL_GetTick+0x14>)
 800622a:	681b      	ldr	r3, [r3, #0]
}
 800622c:	4618      	mov	r0, r3
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	200004b0 	.word	0x200004b0

0800623c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006244:	f7ff ffee 	bl	8006224 <HAL_GetTick>
 8006248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006254:	d004      	beq.n	8006260 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006256:	4b09      	ldr	r3, [pc, #36]	; (800627c <HAL_Delay+0x40>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006260:	bf00      	nop
 8006262:	f7ff ffdf 	bl	8006224 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	429a      	cmp	r2, r3
 8006270:	d8f7      	bhi.n	8006262 <HAL_Delay+0x26>
  {
  }
}
 8006272:	bf00      	nop
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20000050 	.word	0x20000050

08006280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006290:	4b0c      	ldr	r3, [pc, #48]	; (80062c4 <__NVIC_SetPriorityGrouping+0x44>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800629c:	4013      	ands	r3, r2
 800629e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062b2:	4a04      	ldr	r2, [pc, #16]	; (80062c4 <__NVIC_SetPriorityGrouping+0x44>)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	60d3      	str	r3, [r2, #12]
}
 80062b8:	bf00      	nop
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	e000ed00 	.word	0xe000ed00

080062c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062c8:	b480      	push	{r7}
 80062ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062cc:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <__NVIC_GetPriorityGrouping+0x18>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	0a1b      	lsrs	r3, r3, #8
 80062d2:	f003 0307 	and.w	r3, r3, #7
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	e000ed00 	.word	0xe000ed00

080062e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	4603      	mov	r3, r0
 80062ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	db0b      	blt.n	800630e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062f6:	79fb      	ldrb	r3, [r7, #7]
 80062f8:	f003 021f 	and.w	r2, r3, #31
 80062fc:	4907      	ldr	r1, [pc, #28]	; (800631c <__NVIC_EnableIRQ+0x38>)
 80062fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	2001      	movs	r0, #1
 8006306:	fa00 f202 	lsl.w	r2, r0, r2
 800630a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	e000e100 	.word	0xe000e100

08006320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	4603      	mov	r3, r0
 8006328:	6039      	str	r1, [r7, #0]
 800632a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800632c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006330:	2b00      	cmp	r3, #0
 8006332:	db0a      	blt.n	800634a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	b2da      	uxtb	r2, r3
 8006338:	490c      	ldr	r1, [pc, #48]	; (800636c <__NVIC_SetPriority+0x4c>)
 800633a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800633e:	0112      	lsls	r2, r2, #4
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	440b      	add	r3, r1
 8006344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006348:	e00a      	b.n	8006360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	b2da      	uxtb	r2, r3
 800634e:	4908      	ldr	r1, [pc, #32]	; (8006370 <__NVIC_SetPriority+0x50>)
 8006350:	79fb      	ldrb	r3, [r7, #7]
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	3b04      	subs	r3, #4
 8006358:	0112      	lsls	r2, r2, #4
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	440b      	add	r3, r1
 800635e:	761a      	strb	r2, [r3, #24]
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	e000e100 	.word	0xe000e100
 8006370:	e000ed00 	.word	0xe000ed00

08006374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006374:	b480      	push	{r7}
 8006376:	b089      	sub	sp, #36	; 0x24
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	f1c3 0307 	rsb	r3, r3, #7
 800638e:	2b04      	cmp	r3, #4
 8006390:	bf28      	it	cs
 8006392:	2304      	movcs	r3, #4
 8006394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	3304      	adds	r3, #4
 800639a:	2b06      	cmp	r3, #6
 800639c:	d902      	bls.n	80063a4 <NVIC_EncodePriority+0x30>
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	3b03      	subs	r3, #3
 80063a2:	e000      	b.n	80063a6 <NVIC_EncodePriority+0x32>
 80063a4:	2300      	movs	r3, #0
 80063a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063a8:	f04f 32ff 	mov.w	r2, #4294967295
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	fa02 f303 	lsl.w	r3, r2, r3
 80063b2:	43da      	mvns	r2, r3
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	401a      	ands	r2, r3
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063bc:	f04f 31ff 	mov.w	r1, #4294967295
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	fa01 f303 	lsl.w	r3, r1, r3
 80063c6:	43d9      	mvns	r1, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063cc:	4313      	orrs	r3, r2
         );
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3724      	adds	r7, #36	; 0x24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
	...

080063dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063ec:	d301      	bcc.n	80063f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063ee:	2301      	movs	r3, #1
 80063f0:	e00f      	b.n	8006412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063f2:	4a0a      	ldr	r2, [pc, #40]	; (800641c <SysTick_Config+0x40>)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063fa:	210f      	movs	r1, #15
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006400:	f7ff ff8e 	bl	8006320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006404:	4b05      	ldr	r3, [pc, #20]	; (800641c <SysTick_Config+0x40>)
 8006406:	2200      	movs	r2, #0
 8006408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800640a:	4b04      	ldr	r3, [pc, #16]	; (800641c <SysTick_Config+0x40>)
 800640c:	2207      	movs	r2, #7
 800640e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	e000e010 	.word	0xe000e010

08006420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b07      	cmp	r3, #7
 800642c:	d00f      	beq.n	800644e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b06      	cmp	r3, #6
 8006432:	d00c      	beq.n	800644e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b05      	cmp	r3, #5
 8006438:	d009      	beq.n	800644e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b04      	cmp	r3, #4
 800643e:	d006      	beq.n	800644e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b03      	cmp	r3, #3
 8006444:	d003      	beq.n	800644e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006446:	21a7      	movs	r1, #167	; 0xa7
 8006448:	4804      	ldr	r0, [pc, #16]	; (800645c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800644a:	f7fe fc78 	bl	8004d3e <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff ff16 	bl	8006280 <__NVIC_SetPriorityGrouping>
}
 8006454:	bf00      	nop
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	0800b998 	.word	0x0800b998

08006460 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	4603      	mov	r3, r0
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b0f      	cmp	r3, #15
 8006476:	d903      	bls.n	8006480 <HAL_NVIC_SetPriority+0x20>
 8006478:	21bf      	movs	r1, #191	; 0xbf
 800647a:	480e      	ldr	r0, [pc, #56]	; (80064b4 <HAL_NVIC_SetPriority+0x54>)
 800647c:	f7fe fc5f 	bl	8004d3e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b0f      	cmp	r3, #15
 8006484:	d903      	bls.n	800648e <HAL_NVIC_SetPriority+0x2e>
 8006486:	21c0      	movs	r1, #192	; 0xc0
 8006488:	480a      	ldr	r0, [pc, #40]	; (80064b4 <HAL_NVIC_SetPriority+0x54>)
 800648a:	f7fe fc58 	bl	8004d3e <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800648e:	f7ff ff1b 	bl	80062c8 <__NVIC_GetPriorityGrouping>
 8006492:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	68b9      	ldr	r1, [r7, #8]
 8006498:	6978      	ldr	r0, [r7, #20]
 800649a:	f7ff ff6b 	bl	8006374 <NVIC_EncodePriority>
 800649e:	4602      	mov	r2, r0
 80064a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064a4:	4611      	mov	r1, r2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff ff3a 	bl	8006320 <__NVIC_SetPriority>
}
 80064ac:	bf00      	nop
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	0800b998 	.word	0x0800b998

080064b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80064c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	da03      	bge.n	80064d2 <HAL_NVIC_EnableIRQ+0x1a>
 80064ca:	21d3      	movs	r1, #211	; 0xd3
 80064cc:	4805      	ldr	r0, [pc, #20]	; (80064e4 <HAL_NVIC_EnableIRQ+0x2c>)
 80064ce:	f7fe fc36 	bl	8004d3e <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff ff04 	bl	80062e4 <__NVIC_EnableIRQ>
}
 80064dc:	bf00      	nop
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	0800b998 	.word	0x0800b998

080064e8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ff73 	bl	80063dc <SysTick_Config>
 80064f6:	4603      	mov	r3, r0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800650a:	2300      	movs	r3, #0
 800650c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006514:	d01f      	beq.n	8006556 <HAL_GPIO_Init+0x56>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a3f      	ldr	r2, [pc, #252]	; (8006618 <HAL_GPIO_Init+0x118>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01b      	beq.n	8006556 <HAL_GPIO_Init+0x56>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a3e      	ldr	r2, [pc, #248]	; (800661c <HAL_GPIO_Init+0x11c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d017      	beq.n	8006556 <HAL_GPIO_Init+0x56>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a3d      	ldr	r2, [pc, #244]	; (8006620 <HAL_GPIO_Init+0x120>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d013      	beq.n	8006556 <HAL_GPIO_Init+0x56>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a3c      	ldr	r2, [pc, #240]	; (8006624 <HAL_GPIO_Init+0x124>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00f      	beq.n	8006556 <HAL_GPIO_Init+0x56>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a3b      	ldr	r2, [pc, #236]	; (8006628 <HAL_GPIO_Init+0x128>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00b      	beq.n	8006556 <HAL_GPIO_Init+0x56>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a3a      	ldr	r2, [pc, #232]	; (800662c <HAL_GPIO_Init+0x12c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d007      	beq.n	8006556 <HAL_GPIO_Init+0x56>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a39      	ldr	r2, [pc, #228]	; (8006630 <HAL_GPIO_Init+0x130>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d003      	beq.n	8006556 <HAL_GPIO_Init+0x56>
 800654e:	21b3      	movs	r1, #179	; 0xb3
 8006550:	4838      	ldr	r0, [pc, #224]	; (8006634 <HAL_GPIO_Init+0x134>)
 8006552:	f7fe fbf4 	bl	8004d3e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <HAL_GPIO_Init+0x6c>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	0c1b      	lsrs	r3, r3, #16
 8006566:	041b      	lsls	r3, r3, #16
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <HAL_GPIO_Init+0x74>
 800656c:	21b4      	movs	r1, #180	; 0xb4
 800656e:	4831      	ldr	r0, [pc, #196]	; (8006634 <HAL_GPIO_Init+0x134>)
 8006570:	f7fe fbe5 	bl	8004d3e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d039      	beq.n	80065f0 <HAL_GPIO_Init+0xf0>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d035      	beq.n	80065f0 <HAL_GPIO_Init+0xf0>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	2b11      	cmp	r3, #17
 800658a:	d031      	beq.n	80065f0 <HAL_GPIO_Init+0xf0>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2b02      	cmp	r3, #2
 8006592:	d02d      	beq.n	80065f0 <HAL_GPIO_Init+0xf0>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2b12      	cmp	r3, #18
 800659a:	d029      	beq.n	80065f0 <HAL_GPIO_Init+0xf0>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	4a25      	ldr	r2, [pc, #148]	; (8006638 <HAL_GPIO_Init+0x138>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d024      	beq.n	80065f0 <HAL_GPIO_Init+0xf0>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	4a24      	ldr	r2, [pc, #144]	; (800663c <HAL_GPIO_Init+0x13c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d01f      	beq.n	80065f0 <HAL_GPIO_Init+0xf0>
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	4a22      	ldr	r2, [pc, #136]	; (8006640 <HAL_GPIO_Init+0x140>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d01a      	beq.n	80065f0 <HAL_GPIO_Init+0xf0>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	4a21      	ldr	r2, [pc, #132]	; (8006644 <HAL_GPIO_Init+0x144>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d015      	beq.n	80065f0 <HAL_GPIO_Init+0xf0>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	4a1f      	ldr	r2, [pc, #124]	; (8006648 <HAL_GPIO_Init+0x148>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d010      	beq.n	80065f0 <HAL_GPIO_Init+0xf0>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	4a1e      	ldr	r2, [pc, #120]	; (800664c <HAL_GPIO_Init+0x14c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00b      	beq.n	80065f0 <HAL_GPIO_Init+0xf0>
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d007      	beq.n	80065f0 <HAL_GPIO_Init+0xf0>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	2b0b      	cmp	r3, #11
 80065e6:	d003      	beq.n	80065f0 <HAL_GPIO_Init+0xf0>
 80065e8:	21b5      	movs	r1, #181	; 0xb5
 80065ea:	4812      	ldr	r0, [pc, #72]	; (8006634 <HAL_GPIO_Init+0x134>)
 80065ec:	f7fe fba7 	bl	8004d3e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 8200 	beq.w	80069fa <HAL_GPIO_Init+0x4fa>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	f000 81fb 	beq.w	80069fa <HAL_GPIO_Init+0x4fa>
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	2b02      	cmp	r3, #2
 800660a:	f000 81f6 	beq.w	80069fa <HAL_GPIO_Init+0x4fa>
 800660e:	21b6      	movs	r1, #182	; 0xb6
 8006610:	4808      	ldr	r0, [pc, #32]	; (8006634 <HAL_GPIO_Init+0x134>)
 8006612:	f7fe fb94 	bl	8004d3e <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006616:	e1f0      	b.n	80069fa <HAL_GPIO_Init+0x4fa>
 8006618:	48000400 	.word	0x48000400
 800661c:	48000800 	.word	0x48000800
 8006620:	48000c00 	.word	0x48000c00
 8006624:	48001000 	.word	0x48001000
 8006628:	48001400 	.word	0x48001400
 800662c:	48001800 	.word	0x48001800
 8006630:	48001c00 	.word	0x48001c00
 8006634:	0800b9d4 	.word	0x0800b9d4
 8006638:	10110000 	.word	0x10110000
 800663c:	10210000 	.word	0x10210000
 8006640:	10310000 	.word	0x10310000
 8006644:	10120000 	.word	0x10120000
 8006648:	10220000 	.word	0x10220000
 800664c:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	2101      	movs	r1, #1
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	fa01 f303 	lsl.w	r3, r1, r3
 800665c:	4013      	ands	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 81c6 	beq.w	80069f4 <HAL_GPIO_Init+0x4f4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d003      	beq.n	8006678 <HAL_GPIO_Init+0x178>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2b12      	cmp	r3, #18
 8006676:	d14f      	bne.n	8006718 <HAL_GPIO_Init+0x218>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800667e:	d01f      	beq.n	80066c0 <HAL_GPIO_Init+0x1c0>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4aa0      	ldr	r2, [pc, #640]	; (8006904 <HAL_GPIO_Init+0x404>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d01b      	beq.n	80066c0 <HAL_GPIO_Init+0x1c0>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a9f      	ldr	r2, [pc, #636]	; (8006908 <HAL_GPIO_Init+0x408>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d017      	beq.n	80066c0 <HAL_GPIO_Init+0x1c0>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a9e      	ldr	r2, [pc, #632]	; (800690c <HAL_GPIO_Init+0x40c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d013      	beq.n	80066c0 <HAL_GPIO_Init+0x1c0>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a9d      	ldr	r2, [pc, #628]	; (8006910 <HAL_GPIO_Init+0x410>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00f      	beq.n	80066c0 <HAL_GPIO_Init+0x1c0>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a9c      	ldr	r2, [pc, #624]	; (8006914 <HAL_GPIO_Init+0x414>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d00b      	beq.n	80066c0 <HAL_GPIO_Init+0x1c0>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a9b      	ldr	r2, [pc, #620]	; (8006918 <HAL_GPIO_Init+0x418>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d007      	beq.n	80066c0 <HAL_GPIO_Init+0x1c0>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a9a      	ldr	r2, [pc, #616]	; (800691c <HAL_GPIO_Init+0x41c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <HAL_GPIO_Init+0x1c0>
 80066b8:	21c5      	movs	r1, #197	; 0xc5
 80066ba:	4899      	ldr	r0, [pc, #612]	; (8006920 <HAL_GPIO_Init+0x420>)
 80066bc:	f7fe fb3f 	bl	8004d3e <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b0f      	cmp	r3, #15
 80066c6:	d903      	bls.n	80066d0 <HAL_GPIO_Init+0x1d0>
 80066c8:	21c6      	movs	r1, #198	; 0xc6
 80066ca:	4895      	ldr	r0, [pc, #596]	; (8006920 <HAL_GPIO_Init+0x420>)
 80066cc:	f7fe fb37 	bl	8004d3e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	08da      	lsrs	r2, r3, #3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3208      	adds	r2, #8
 80066d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	220f      	movs	r2, #15
 80066e8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ec:	43db      	mvns	r3, r3
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4013      	ands	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	691a      	ldr	r2, [r3, #16]
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	08da      	lsrs	r2, r3, #3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3208      	adds	r2, #8
 8006712:	6939      	ldr	r1, [r7, #16]
 8006714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	2203      	movs	r2, #3
 8006724:	fa02 f303 	lsl.w	r3, r2, r3
 8006728:	43db      	mvns	r3, r3
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4013      	ands	r3, r2
 800672e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f003 0203 	and.w	r2, r3, #3
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	fa02 f303 	lsl.w	r3, r2, r3
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d00b      	beq.n	800676c <HAL_GPIO_Init+0x26c>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d007      	beq.n	800676c <HAL_GPIO_Init+0x26c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006760:	2b11      	cmp	r3, #17
 8006762:	d003      	beq.n	800676c <HAL_GPIO_Init+0x26c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2b12      	cmp	r3, #18
 800676a:	d144      	bne.n	80067f6 <HAL_GPIO_Init+0x2f6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00f      	beq.n	8006794 <HAL_GPIO_Init+0x294>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d00b      	beq.n	8006794 <HAL_GPIO_Init+0x294>
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	2b02      	cmp	r3, #2
 8006782:	d007      	beq.n	8006794 <HAL_GPIO_Init+0x294>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	2b03      	cmp	r3, #3
 800678a:	d003      	beq.n	8006794 <HAL_GPIO_Init+0x294>
 800678c:	21da      	movs	r1, #218	; 0xda
 800678e:	4864      	ldr	r0, [pc, #400]	; (8006920 <HAL_GPIO_Init+0x420>)
 8006790:	f7fe fad5 	bl	8004d3e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	2203      	movs	r2, #3
 80067a0:	fa02 f303 	lsl.w	r3, r2, r3
 80067a4:	43db      	mvns	r3, r3
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4013      	ands	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067ca:	2201      	movs	r2, #1
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	fa02 f303 	lsl.w	r3, r2, r3
 80067d2:	43db      	mvns	r3, r3
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4013      	ands	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	091b      	lsrs	r3, r3, #4
 80067e0:	f003 0201 	and.w	r2, r3, #1
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d118      	bne.n	8006834 <HAL_GPIO_Init+0x334>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006806:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006808:	2201      	movs	r2, #1
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	fa02 f303 	lsl.w	r3, r2, r3
 8006810:	43db      	mvns	r3, r3
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4013      	ands	r3, r2
 8006816:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	08db      	lsrs	r3, r3, #3
 800681e:	f003 0201 	and.w	r2, r3, #1
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	fa02 f303 	lsl.w	r3, r2, r3
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	2203      	movs	r2, #3
 8006840:	fa02 f303 	lsl.w	r3, r2, r3
 8006844:	43db      	mvns	r3, r3
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4013      	ands	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	fa02 f303 	lsl.w	r3, r2, r3
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 80c1 	beq.w	80069f4 <HAL_GPIO_Init+0x4f4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006872:	4b2c      	ldr	r3, [pc, #176]	; (8006924 <HAL_GPIO_Init+0x424>)
 8006874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006876:	4a2b      	ldr	r2, [pc, #172]	; (8006924 <HAL_GPIO_Init+0x424>)
 8006878:	f043 0301 	orr.w	r3, r3, #1
 800687c:	6613      	str	r3, [r2, #96]	; 0x60
 800687e:	4b29      	ldr	r3, [pc, #164]	; (8006924 <HAL_GPIO_Init+0x424>)
 8006880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	60bb      	str	r3, [r7, #8]
 8006888:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800688a:	4a27      	ldr	r2, [pc, #156]	; (8006928 <HAL_GPIO_Init+0x428>)
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	089b      	lsrs	r3, r3, #2
 8006890:	3302      	adds	r3, #2
 8006892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006896:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	220f      	movs	r2, #15
 80068a2:	fa02 f303 	lsl.w	r3, r2, r3
 80068a6:	43db      	mvns	r3, r3
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4013      	ands	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80068b4:	d03a      	beq.n	800692c <HAL_GPIO_Init+0x42c>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a12      	ldr	r2, [pc, #72]	; (8006904 <HAL_GPIO_Init+0x404>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d01f      	beq.n	80068fe <HAL_GPIO_Init+0x3fe>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a11      	ldr	r2, [pc, #68]	; (8006908 <HAL_GPIO_Init+0x408>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d019      	beq.n	80068fa <HAL_GPIO_Init+0x3fa>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a10      	ldr	r2, [pc, #64]	; (800690c <HAL_GPIO_Init+0x40c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d013      	beq.n	80068f6 <HAL_GPIO_Init+0x3f6>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a0f      	ldr	r2, [pc, #60]	; (8006910 <HAL_GPIO_Init+0x410>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00d      	beq.n	80068f2 <HAL_GPIO_Init+0x3f2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a0e      	ldr	r2, [pc, #56]	; (8006914 <HAL_GPIO_Init+0x414>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d007      	beq.n	80068ee <HAL_GPIO_Init+0x3ee>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a0d      	ldr	r2, [pc, #52]	; (8006918 <HAL_GPIO_Init+0x418>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d101      	bne.n	80068ea <HAL_GPIO_Init+0x3ea>
 80068e6:	2306      	movs	r3, #6
 80068e8:	e021      	b.n	800692e <HAL_GPIO_Init+0x42e>
 80068ea:	2307      	movs	r3, #7
 80068ec:	e01f      	b.n	800692e <HAL_GPIO_Init+0x42e>
 80068ee:	2305      	movs	r3, #5
 80068f0:	e01d      	b.n	800692e <HAL_GPIO_Init+0x42e>
 80068f2:	2304      	movs	r3, #4
 80068f4:	e01b      	b.n	800692e <HAL_GPIO_Init+0x42e>
 80068f6:	2303      	movs	r3, #3
 80068f8:	e019      	b.n	800692e <HAL_GPIO_Init+0x42e>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e017      	b.n	800692e <HAL_GPIO_Init+0x42e>
 80068fe:	2301      	movs	r3, #1
 8006900:	e015      	b.n	800692e <HAL_GPIO_Init+0x42e>
 8006902:	bf00      	nop
 8006904:	48000400 	.word	0x48000400
 8006908:	48000800 	.word	0x48000800
 800690c:	48000c00 	.word	0x48000c00
 8006910:	48001000 	.word	0x48001000
 8006914:	48001400 	.word	0x48001400
 8006918:	48001800 	.word	0x48001800
 800691c:	48001c00 	.word	0x48001c00
 8006920:	0800b9d4 	.word	0x0800b9d4
 8006924:	40021000 	.word	0x40021000
 8006928:	40010000 	.word	0x40010000
 800692c:	2300      	movs	r3, #0
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	f002 0203 	and.w	r2, r2, #3
 8006934:	0092      	lsls	r2, r2, #2
 8006936:	4093      	lsls	r3, r2
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800693e:	4935      	ldr	r1, [pc, #212]	; (8006a14 <HAL_GPIO_Init+0x514>)
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	089b      	lsrs	r3, r3, #2
 8006944:	3302      	adds	r3, #2
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800694c:	4b32      	ldr	r3, [pc, #200]	; (8006a18 <HAL_GPIO_Init+0x518>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	43db      	mvns	r3, r3
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	4013      	ands	r3, r2
 800695a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <HAL_GPIO_Init+0x470>
        {
          temp |= iocurrent;
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006970:	4a29      	ldr	r2, [pc, #164]	; (8006a18 <HAL_GPIO_Init+0x518>)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006976:	4b28      	ldr	r3, [pc, #160]	; (8006a18 <HAL_GPIO_Init+0x518>)
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	43db      	mvns	r3, r3
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	4013      	ands	r3, r2
 8006984:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_GPIO_Init+0x49a>
        {
          temp |= iocurrent;
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800699a:	4a1f      	ldr	r2, [pc, #124]	; (8006a18 <HAL_GPIO_Init+0x518>)
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069a0:	4b1d      	ldr	r3, [pc, #116]	; (8006a18 <HAL_GPIO_Init+0x518>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	43db      	mvns	r3, r3
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	4013      	ands	r3, r2
 80069ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <HAL_GPIO_Init+0x4c4>
        {
          temp |= iocurrent;
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80069c4:	4a14      	ldr	r2, [pc, #80]	; (8006a18 <HAL_GPIO_Init+0x518>)
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80069ca:	4b13      	ldr	r3, [pc, #76]	; (8006a18 <HAL_GPIO_Init+0x518>)
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	43db      	mvns	r3, r3
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4013      	ands	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <HAL_GPIO_Init+0x4ee>
        {
          temp |= iocurrent;
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80069ee:	4a0a      	ldr	r2, [pc, #40]	; (8006a18 <HAL_GPIO_Init+0x518>)
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	3301      	adds	r3, #1
 80069f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	fa22 f303 	lsr.w	r3, r2, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f47f ae23 	bne.w	8006650 <HAL_GPIO_Init+0x150>
  }
}
 8006a0a:	bf00      	nop
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40010000 	.word	0x40010000
 8006a18:	40010400 	.word	0x40010400

08006a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	807b      	strh	r3, [r7, #2]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006a2c:	887b      	ldrh	r3, [r7, #2]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d004      	beq.n	8006a3c <HAL_GPIO_WritePin+0x20>
 8006a32:	887b      	ldrh	r3, [r7, #2]
 8006a34:	0c1b      	lsrs	r3, r3, #16
 8006a36:	041b      	lsls	r3, r3, #16
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d004      	beq.n	8006a46 <HAL_GPIO_WritePin+0x2a>
 8006a3c:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8006a40:	480d      	ldr	r0, [pc, #52]	; (8006a78 <HAL_GPIO_WritePin+0x5c>)
 8006a42:	f7fe f97c 	bl	8004d3e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006a46:	787b      	ldrb	r3, [r7, #1]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <HAL_GPIO_WritePin+0x40>
 8006a4c:	787b      	ldrb	r3, [r7, #1]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d004      	beq.n	8006a5c <HAL_GPIO_WritePin+0x40>
 8006a52:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006a56:	4808      	ldr	r0, [pc, #32]	; (8006a78 <HAL_GPIO_WritePin+0x5c>)
 8006a58:	f7fe f971 	bl	8004d3e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8006a5c:	787b      	ldrb	r3, [r7, #1]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a62:	887a      	ldrh	r2, [r7, #2]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006a68:	e002      	b.n	8006a70 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006a6a:	887a      	ldrh	r2, [r7, #2]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006a70:	bf00      	nop
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	0800b9d4 	.word	0x0800b9d4

08006a7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006a86:	4b08      	ldr	r3, [pc, #32]	; (8006aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a88:	695a      	ldr	r2, [r3, #20]
 8006a8a:	88fb      	ldrh	r3, [r7, #6]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d006      	beq.n	8006aa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a92:	4a05      	ldr	r2, [pc, #20]	; (8006aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a94:	88fb      	ldrh	r3, [r7, #6]
 8006a96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a98:	88fb      	ldrh	r3, [r7, #6]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fa fb6c 	bl	8001178 <HAL_GPIO_EXTI_Callback>
  }
}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40010400 	.word	0x40010400

08006aac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006ab0:	4b04      	ldr	r3, [pc, #16]	; (8006ac4 <HAL_PWREx_GetVoltageRange+0x18>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	40007000 	.word	0x40007000

08006ac8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad6:	d007      	beq.n	8006ae8 <HAL_PWREx_ControlVoltageScaling+0x20>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ade:	d003      	beq.n	8006ae8 <HAL_PWREx_ControlVoltageScaling+0x20>
 8006ae0:	21a8      	movs	r1, #168	; 0xa8
 8006ae2:	4826      	ldr	r0, [pc, #152]	; (8006b7c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006ae4:	f7fe f92b 	bl	8004d3e <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aee:	d130      	bne.n	8006b52 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006af0:	4b23      	ldr	r3, [pc, #140]	; (8006b80 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006afc:	d038      	beq.n	8006b70 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006afe:	4b20      	ldr	r3, [pc, #128]	; (8006b80 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006b06:	4a1e      	ldr	r2, [pc, #120]	; (8006b80 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006b08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006b0e:	4b1d      	ldr	r3, [pc, #116]	; (8006b84 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2232      	movs	r2, #50	; 0x32
 8006b14:	fb02 f303 	mul.w	r3, r2, r3
 8006b18:	4a1b      	ldr	r2, [pc, #108]	; (8006b88 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8006b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1e:	0c9b      	lsrs	r3, r3, #18
 8006b20:	3301      	adds	r3, #1
 8006b22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b24:	e002      	b.n	8006b2c <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b2c:	4b14      	ldr	r3, [pc, #80]	; (8006b80 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b38:	d102      	bne.n	8006b40 <HAL_PWREx_ControlVoltageScaling+0x78>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1f2      	bne.n	8006b26 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b40:	4b0f      	ldr	r3, [pc, #60]	; (8006b80 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b4c:	d110      	bne.n	8006b70 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e00f      	b.n	8006b72 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b52:	4b0b      	ldr	r3, [pc, #44]	; (8006b80 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b5e:	d007      	beq.n	8006b70 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006b60:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006b68:	4a05      	ldr	r2, [pc, #20]	; (8006b80 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	0800ba10 	.word	0x0800ba10
 8006b80:	40007000 	.word	0x40007000
 8006b84:	20000048 	.word	0x20000048
 8006b88:	431bde83 	.word	0x431bde83

08006b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b088      	sub	sp, #32
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d102      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f000 bcdc 	b.w	8007558 <HAL_RCC_OscConfig+0x9cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d022      	beq.n	8006bee <HAL_RCC_OscConfig+0x62>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d11c      	bne.n	8006bee <HAL_RCC_OscConfig+0x62>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d116      	bne.n	8006bee <HAL_RCC_OscConfig+0x62>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0310 	and.w	r3, r3, #16
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d110      	bne.n	8006bee <HAL_RCC_OscConfig+0x62>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10a      	bne.n	8006bee <HAL_RCC_OscConfig+0x62>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d104      	bne.n	8006bee <HAL_RCC_OscConfig+0x62>
 8006be4:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8006be8:	48a0      	ldr	r0, [pc, #640]	; (8006e6c <HAL_RCC_OscConfig+0x2e0>)
 8006bea:	f7fe f8a8 	bl	8004d3e <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bee:	4ba0      	ldr	r3, [pc, #640]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 030c 	and.w	r3, r3, #12
 8006bf6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bf8:	4b9d      	ldr	r3, [pc, #628]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f003 0303 	and.w	r3, r3, #3
 8006c00:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0310 	and.w	r3, r3, #16
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 8139 	beq.w	8006e82 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d008      	beq.n	8006c2a <HAL_RCC_OscConfig+0x9e>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d004      	beq.n	8006c2a <HAL_RCC_OscConfig+0x9e>
 8006c20:	f240 11a7 	movw	r1, #423	; 0x1a7
 8006c24:	4891      	ldr	r0, [pc, #580]	; (8006e6c <HAL_RCC_OscConfig+0x2e0>)
 8006c26:	f7fe f88a 	bl	8004d3e <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	2bff      	cmp	r3, #255	; 0xff
 8006c30:	d904      	bls.n	8006c3c <HAL_RCC_OscConfig+0xb0>
 8006c32:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8006c36:	488d      	ldr	r0, [pc, #564]	; (8006e6c <HAL_RCC_OscConfig+0x2e0>)
 8006c38:	f7fe f881 	bl	8004d3e <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d030      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x11a>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	2b10      	cmp	r3, #16
 8006c4a:	d02c      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x11a>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	2b20      	cmp	r3, #32
 8006c52:	d028      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x11a>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	2b30      	cmp	r3, #48	; 0x30
 8006c5a:	d024      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x11a>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	2b40      	cmp	r3, #64	; 0x40
 8006c62:	d020      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x11a>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	2b50      	cmp	r3, #80	; 0x50
 8006c6a:	d01c      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x11a>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	2b60      	cmp	r3, #96	; 0x60
 8006c72:	d018      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x11a>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	2b70      	cmp	r3, #112	; 0x70
 8006c7a:	d014      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x11a>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	2b80      	cmp	r3, #128	; 0x80
 8006c82:	d010      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x11a>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	2b90      	cmp	r3, #144	; 0x90
 8006c8a:	d00c      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x11a>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	2ba0      	cmp	r3, #160	; 0xa0
 8006c92:	d008      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x11a>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	2bb0      	cmp	r3, #176	; 0xb0
 8006c9a:	d004      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x11a>
 8006c9c:	f240 11a9 	movw	r1, #425	; 0x1a9
 8006ca0:	4872      	ldr	r0, [pc, #456]	; (8006e6c <HAL_RCC_OscConfig+0x2e0>)
 8006ca2:	f7fe f84c 	bl	8004d3e <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d007      	beq.n	8006cbc <HAL_RCC_OscConfig+0x130>
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	2b0c      	cmp	r3, #12
 8006cb0:	f040 808a 	bne.w	8006dc8 <HAL_RCC_OscConfig+0x23c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	f040 8086 	bne.w	8006dc8 <HAL_RCC_OscConfig+0x23c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006cbc:	4b6c      	ldr	r3, [pc, #432]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d006      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x14a>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d102      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x14a>
      {
        return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f000 bc41 	b.w	8007558 <HAL_RCC_OscConfig+0x9cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1a      	ldr	r2, [r3, #32]
 8006cda:	4b65      	ldr	r3, [pc, #404]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d004      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x164>
 8006ce6:	4b62      	ldr	r3, [pc, #392]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cee:	e005      	b.n	8006cfc <HAL_RCC_OscConfig+0x170>
 8006cf0:	4b5f      	ldr	r3, [pc, #380]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cf6:	091b      	lsrs	r3, r3, #4
 8006cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d224      	bcs.n	8006d4a <HAL_RCC_OscConfig+0x1be>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 fe73 	bl	80079f0 <RCC_SetFlashLatencyFromMSIRange>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f000 bc21 	b.w	8007558 <HAL_RCC_OscConfig+0x9cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d16:	4b56      	ldr	r3, [pc, #344]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a55      	ldr	r2, [pc, #340]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006d1c:	f043 0308 	orr.w	r3, r3, #8
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	4b53      	ldr	r3, [pc, #332]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	4950      	ldr	r1, [pc, #320]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d34:	4b4e      	ldr	r3, [pc, #312]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	021b      	lsls	r3, r3, #8
 8006d42:	494b      	ldr	r1, [pc, #300]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	604b      	str	r3, [r1, #4]
 8006d48:	e022      	b.n	8006d90 <HAL_RCC_OscConfig+0x204>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d4a:	4b49      	ldr	r3, [pc, #292]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a48      	ldr	r2, [pc, #288]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006d50:	f043 0308 	orr.w	r3, r3, #8
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	4b46      	ldr	r3, [pc, #280]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	4943      	ldr	r1, [pc, #268]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d68:	4b41      	ldr	r3, [pc, #260]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	69db      	ldr	r3, [r3, #28]
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	493e      	ldr	r1, [pc, #248]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 fe35 	bl	80079f0 <RCC_SetFlashLatencyFromMSIRange>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e3e3      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d90:	f000 fd6c 	bl	800786c <HAL_RCC_GetSysClockFreq>
 8006d94:	4601      	mov	r1, r0
 8006d96:	4b36      	ldr	r3, [pc, #216]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	091b      	lsrs	r3, r3, #4
 8006d9c:	f003 030f 	and.w	r3, r3, #15
 8006da0:	4a34      	ldr	r2, [pc, #208]	; (8006e74 <HAL_RCC_OscConfig+0x2e8>)
 8006da2:	5cd3      	ldrb	r3, [r2, r3]
 8006da4:	f003 031f 	and.w	r3, r3, #31
 8006da8:	fa21 f303 	lsr.w	r3, r1, r3
 8006dac:	4a32      	ldr	r2, [pc, #200]	; (8006e78 <HAL_RCC_OscConfig+0x2ec>)
 8006dae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006db0:	4b32      	ldr	r3, [pc, #200]	; (8006e7c <HAL_RCC_OscConfig+0x2f0>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7ff f9e9 	bl	800618c <HAL_InitTick>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d05d      	beq.n	8006e80 <HAL_RCC_OscConfig+0x2f4>
        {
          return status;
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	e3c7      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d032      	beq.n	8006e36 <HAL_RCC_OscConfig+0x2aa>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006dd0:	4b27      	ldr	r3, [pc, #156]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a26      	ldr	r2, [pc, #152]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006dd6:	f043 0301 	orr.w	r3, r3, #1
 8006dda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ddc:	f7ff fa22 	bl	8006224 <HAL_GetTick>
 8006de0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006de2:	e008      	b.n	8006df6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006de4:	f7ff fa1e 	bl	8006224 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d901      	bls.n	8006df6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e3b0      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006df6:	4b1e      	ldr	r3, [pc, #120]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0f0      	beq.n	8006de4 <HAL_RCC_OscConfig+0x258>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e02:	4b1b      	ldr	r3, [pc, #108]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1a      	ldr	r2, [pc, #104]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006e08:	f043 0308 	orr.w	r3, r3, #8
 8006e0c:	6013      	str	r3, [r2, #0]
 8006e0e:	4b18      	ldr	r3, [pc, #96]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	4915      	ldr	r1, [pc, #84]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e20:	4b13      	ldr	r3, [pc, #76]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	4910      	ldr	r1, [pc, #64]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	604b      	str	r3, [r1, #4]
 8006e34:	e025      	b.n	8006e82 <HAL_RCC_OscConfig+0x2f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006e36:	4b0e      	ldr	r3, [pc, #56]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a0d      	ldr	r2, [pc, #52]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006e3c:	f023 0301 	bic.w	r3, r3, #1
 8006e40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006e42:	f7ff f9ef 	bl	8006224 <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x2d0>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e4a:	f7ff f9eb 	bl	8006224 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e37d      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e5c:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <HAL_RCC_OscConfig+0x2e4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1f0      	bne.n	8006e4a <HAL_RCC_OscConfig+0x2be>
 8006e68:	e00b      	b.n	8006e82 <HAL_RCC_OscConfig+0x2f6>
 8006e6a:	bf00      	nop
 8006e6c:	0800ba4c 	.word	0x0800ba4c
 8006e70:	40021000 	.word	0x40021000
 8006e74:	0800cd94 	.word	0x0800cd94
 8006e78:	20000048 	.word	0x20000048
 8006e7c:	2000004c 	.word	0x2000004c
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d07e      	beq.n	8006f8c <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00e      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x328>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e9e:	d009      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x328>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ea8:	d004      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x328>
 8006eaa:	f240 2111 	movw	r1, #529	; 0x211
 8006eae:	489b      	ldr	r0, [pc, #620]	; (800711c <HAL_RCC_OscConfig+0x590>)
 8006eb0:	f7fd ff45 	bl	8004d3e <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	2b08      	cmp	r3, #8
 8006eb8:	d005      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x33a>
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	2b0c      	cmp	r3, #12
 8006ebe:	d10e      	bne.n	8006ede <HAL_RCC_OscConfig+0x352>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d10b      	bne.n	8006ede <HAL_RCC_OscConfig+0x352>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ec6:	4b96      	ldr	r3, [pc, #600]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d05b      	beq.n	8006f8a <HAL_RCC_OscConfig+0x3fe>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d157      	bne.n	8006f8a <HAL_RCC_OscConfig+0x3fe>
      {
        return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e33c      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee6:	d106      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x36a>
 8006ee8:	4b8d      	ldr	r3, [pc, #564]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a8c      	ldr	r2, [pc, #560]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8006eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef2:	6013      	str	r3, [r2, #0]
 8006ef4:	e01d      	b.n	8006f32 <HAL_RCC_OscConfig+0x3a6>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006efe:	d10c      	bne.n	8006f1a <HAL_RCC_OscConfig+0x38e>
 8006f00:	4b87      	ldr	r3, [pc, #540]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a86      	ldr	r2, [pc, #536]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8006f06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	4b84      	ldr	r3, [pc, #528]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a83      	ldr	r2, [pc, #524]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8006f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	e00b      	b.n	8006f32 <HAL_RCC_OscConfig+0x3a6>
 8006f1a:	4b81      	ldr	r3, [pc, #516]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a80      	ldr	r2, [pc, #512]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8006f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	4b7e      	ldr	r3, [pc, #504]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a7d      	ldr	r2, [pc, #500]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8006f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d013      	beq.n	8006f62 <HAL_RCC_OscConfig+0x3d6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f3a:	f7ff f973 	bl	8006224 <HAL_GetTick>
 8006f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f40:	e008      	b.n	8006f54 <HAL_RCC_OscConfig+0x3c8>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f42:	f7ff f96f 	bl	8006224 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	2b64      	cmp	r3, #100	; 0x64
 8006f4e:	d901      	bls.n	8006f54 <HAL_RCC_OscConfig+0x3c8>
          {
            return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e301      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f54:	4b72      	ldr	r3, [pc, #456]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d0f0      	beq.n	8006f42 <HAL_RCC_OscConfig+0x3b6>
 8006f60:	e014      	b.n	8006f8c <HAL_RCC_OscConfig+0x400>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f62:	f7ff f95f 	bl	8006224 <HAL_GetTick>
 8006f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f68:	e008      	b.n	8006f7c <HAL_RCC_OscConfig+0x3f0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f6a:	f7ff f95b 	bl	8006224 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b64      	cmp	r3, #100	; 0x64
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_OscConfig+0x3f0>
          {
            return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e2ed      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f7c:	4b68      	ldr	r3, [pc, #416]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1f0      	bne.n	8006f6a <HAL_RCC_OscConfig+0x3de>
 8006f88:	e000      	b.n	8006f8c <HAL_RCC_OscConfig+0x400>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d077      	beq.n	8007088 <HAL_RCC_OscConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d009      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x428>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa8:	d004      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x428>
 8006faa:	f44f 7111 	mov.w	r1, #580	; 0x244
 8006fae:	485b      	ldr	r0, [pc, #364]	; (800711c <HAL_RCC_OscConfig+0x590>)
 8006fb0:	f7fd fec5 	bl	8004d3e <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	2b1f      	cmp	r3, #31
 8006fba:	d904      	bls.n	8006fc6 <HAL_RCC_OscConfig+0x43a>
 8006fbc:	f240 2145 	movw	r1, #581	; 0x245
 8006fc0:	4856      	ldr	r0, [pc, #344]	; (800711c <HAL_RCC_OscConfig+0x590>)
 8006fc2:	f7fd febc 	bl	8004d3e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d005      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x44c>
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	2b0c      	cmp	r3, #12
 8006fd0:	d119      	bne.n	8007006 <HAL_RCC_OscConfig+0x47a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d116      	bne.n	8007006 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fd8:	4b51      	ldr	r3, [pc, #324]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x464>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e2b3      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ff0:	4b4b      	ldr	r3, [pc, #300]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	061b      	lsls	r3, r3, #24
 8006ffe:	4948      	ldr	r1, [pc, #288]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8007000:	4313      	orrs	r3, r2
 8007002:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007004:	e040      	b.n	8007088 <HAL_RCC_OscConfig+0x4fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d023      	beq.n	8007056 <HAL_RCC_OscConfig+0x4ca>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800700e:	4b44      	ldr	r3, [pc, #272]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a43      	ldr	r2, [pc, #268]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8007014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701a:	f7ff f903 	bl	8006224 <HAL_GetTick>
 800701e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007020:	e008      	b.n	8007034 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007022:	f7ff f8ff 	bl	8006224 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	2b02      	cmp	r3, #2
 800702e:	d901      	bls.n	8007034 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e291      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007034:	4b3a      	ldr	r3, [pc, #232]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0f0      	beq.n	8007022 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007040:	4b37      	ldr	r3, [pc, #220]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	061b      	lsls	r3, r3, #24
 800704e:	4934      	ldr	r1, [pc, #208]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8007050:	4313      	orrs	r3, r2
 8007052:	604b      	str	r3, [r1, #4]
 8007054:	e018      	b.n	8007088 <HAL_RCC_OscConfig+0x4fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007056:	4b32      	ldr	r3, [pc, #200]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a31      	ldr	r2, [pc, #196]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 800705c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007062:	f7ff f8df 	bl	8006224 <HAL_GetTick>
 8007066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007068:	e008      	b.n	800707c <HAL_RCC_OscConfig+0x4f0>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800706a:	f7ff f8db 	bl	8006224 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d901      	bls.n	800707c <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e26d      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800707c:	4b28      	ldr	r3, [pc, #160]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1f0      	bne.n	800706a <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0308 	and.w	r3, r3, #8
 8007090:	2b00      	cmp	r3, #0
 8007092:	d04e      	beq.n	8007132 <HAL_RCC_OscConfig+0x5a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d008      	beq.n	80070ae <HAL_RCC_OscConfig+0x522>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d004      	beq.n	80070ae <HAL_RCC_OscConfig+0x522>
 80070a4:	f240 2185 	movw	r1, #645	; 0x285
 80070a8:	481c      	ldr	r0, [pc, #112]	; (800711c <HAL_RCC_OscConfig+0x590>)
 80070aa:	f7fd fe48 	bl	8004d3e <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d01c      	beq.n	80070f0 <HAL_RCC_OscConfig+0x564>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070b6:	4b1a      	ldr	r3, [pc, #104]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 80070b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070bc:	4a18      	ldr	r2, [pc, #96]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 80070be:	f043 0301 	orr.w	r3, r3, #1
 80070c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c6:	f7ff f8ad 	bl	8006224 <HAL_GetTick>
 80070ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070cc:	e008      	b.n	80070e0 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070ce:	f7ff f8a9 	bl	8006224 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e23b      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070e0:	4b0f      	ldr	r3, [pc, #60]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 80070e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0ef      	beq.n	80070ce <HAL_RCC_OscConfig+0x542>
 80070ee:	e020      	b.n	8007132 <HAL_RCC_OscConfig+0x5a6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070f0:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 80070f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070f6:	4a0a      	ldr	r2, [pc, #40]	; (8007120 <HAL_RCC_OscConfig+0x594>)
 80070f8:	f023 0301 	bic.w	r3, r3, #1
 80070fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007100:	f7ff f890 	bl	8006224 <HAL_GetTick>
 8007104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007106:	e00d      	b.n	8007124 <HAL_RCC_OscConfig+0x598>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007108:	f7ff f88c 	bl	8006224 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d906      	bls.n	8007124 <HAL_RCC_OscConfig+0x598>
        {
          return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e21e      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
 800711a:	bf00      	nop
 800711c:	0800ba4c 	.word	0x0800ba4c
 8007120:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007124:	4ba7      	ldr	r3, [pc, #668]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 8007126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1ea      	bne.n	8007108 <HAL_RCC_OscConfig+0x57c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0304 	and.w	r3, r3, #4
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 80b2 	beq.w	80072a4 <HAL_RCC_OscConfig+0x718>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007140:	2300      	movs	r3, #0
 8007142:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00c      	beq.n	8007166 <HAL_RCC_OscConfig+0x5da>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d008      	beq.n	8007166 <HAL_RCC_OscConfig+0x5da>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	2b05      	cmp	r3, #5
 800715a:	d004      	beq.n	8007166 <HAL_RCC_OscConfig+0x5da>
 800715c:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 8007160:	4899      	ldr	r0, [pc, #612]	; (80073c8 <HAL_RCC_OscConfig+0x83c>)
 8007162:	f7fd fdec 	bl	8004d3e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007166:	4b97      	ldr	r3, [pc, #604]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 8007168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800716a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10d      	bne.n	800718e <HAL_RCC_OscConfig+0x602>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007172:	4b94      	ldr	r3, [pc, #592]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 8007174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007176:	4a93      	ldr	r2, [pc, #588]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 8007178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800717c:	6593      	str	r3, [r2, #88]	; 0x58
 800717e:	4b91      	ldr	r3, [pc, #580]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 8007180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007186:	60bb      	str	r3, [r7, #8]
 8007188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800718a:	2301      	movs	r3, #1
 800718c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800718e:	4b8f      	ldr	r3, [pc, #572]	; (80073cc <HAL_RCC_OscConfig+0x840>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007196:	2b00      	cmp	r3, #0
 8007198:	d118      	bne.n	80071cc <HAL_RCC_OscConfig+0x640>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800719a:	4b8c      	ldr	r3, [pc, #560]	; (80073cc <HAL_RCC_OscConfig+0x840>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a8b      	ldr	r2, [pc, #556]	; (80073cc <HAL_RCC_OscConfig+0x840>)
 80071a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071a6:	f7ff f83d 	bl	8006224 <HAL_GetTick>
 80071aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071ac:	e008      	b.n	80071c0 <HAL_RCC_OscConfig+0x634>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071ae:	f7ff f839 	bl	8006224 <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d901      	bls.n	80071c0 <HAL_RCC_OscConfig+0x634>
        {
          return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e1cb      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071c0:	4b82      	ldr	r3, [pc, #520]	; (80073cc <HAL_RCC_OscConfig+0x840>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0f0      	beq.n	80071ae <HAL_RCC_OscConfig+0x622>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d108      	bne.n	80071e6 <HAL_RCC_OscConfig+0x65a>
 80071d4:	4b7b      	ldr	r3, [pc, #492]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 80071d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071da:	4a7a      	ldr	r2, [pc, #488]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 80071dc:	f043 0301 	orr.w	r3, r3, #1
 80071e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071e4:	e024      	b.n	8007230 <HAL_RCC_OscConfig+0x6a4>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	2b05      	cmp	r3, #5
 80071ec:	d110      	bne.n	8007210 <HAL_RCC_OscConfig+0x684>
 80071ee:	4b75      	ldr	r3, [pc, #468]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 80071f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f4:	4a73      	ldr	r2, [pc, #460]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 80071f6:	f043 0304 	orr.w	r3, r3, #4
 80071fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071fe:	4b71      	ldr	r3, [pc, #452]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 8007200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007204:	4a6f      	ldr	r2, [pc, #444]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 8007206:	f043 0301 	orr.w	r3, r3, #1
 800720a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800720e:	e00f      	b.n	8007230 <HAL_RCC_OscConfig+0x6a4>
 8007210:	4b6c      	ldr	r3, [pc, #432]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 8007212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007216:	4a6b      	ldr	r2, [pc, #428]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 8007218:	f023 0301 	bic.w	r3, r3, #1
 800721c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007220:	4b68      	ldr	r3, [pc, #416]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007226:	4a67      	ldr	r2, [pc, #412]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 8007228:	f023 0304 	bic.w	r3, r3, #4
 800722c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d016      	beq.n	8007266 <HAL_RCC_OscConfig+0x6da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007238:	f7fe fff4 	bl	8006224 <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800723e:	e00a      	b.n	8007256 <HAL_RCC_OscConfig+0x6ca>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007240:	f7fe fff0 	bl	8006224 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	f241 3288 	movw	r2, #5000	; 0x1388
 800724e:	4293      	cmp	r3, r2
 8007250:	d901      	bls.n	8007256 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e180      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007256:	4b5b      	ldr	r3, [pc, #364]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 8007258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0ed      	beq.n	8007240 <HAL_RCC_OscConfig+0x6b4>
 8007264:	e015      	b.n	8007292 <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007266:	f7fe ffdd 	bl	8006224 <HAL_GetTick>
 800726a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800726c:	e00a      	b.n	8007284 <HAL_RCC_OscConfig+0x6f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800726e:	f7fe ffd9 	bl	8006224 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	f241 3288 	movw	r2, #5000	; 0x1388
 800727c:	4293      	cmp	r3, r2
 800727e:	d901      	bls.n	8007284 <HAL_RCC_OscConfig+0x6f8>
        {
          return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e169      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007284:	4b4f      	ldr	r3, [pc, #316]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 8007286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800728a:	f003 0302 	and.w	r3, r3, #2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1ed      	bne.n	800726e <HAL_RCC_OscConfig+0x6e2>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007292:	7ffb      	ldrb	r3, [r7, #31]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d105      	bne.n	80072a4 <HAL_RCC_OscConfig+0x718>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007298:	4b4a      	ldr	r3, [pc, #296]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 800729a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729c:	4a49      	ldr	r2, [pc, #292]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 800729e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00c      	beq.n	80072c6 <HAL_RCC_OscConfig+0x73a>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d008      	beq.n	80072c6 <HAL_RCC_OscConfig+0x73a>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d004      	beq.n	80072c6 <HAL_RCC_OscConfig+0x73a>
 80072bc:	f240 3166 	movw	r1, #870	; 0x366
 80072c0:	4841      	ldr	r0, [pc, #260]	; (80073c8 <HAL_RCC_OscConfig+0x83c>)
 80072c2:	f7fd fd3c 	bl	8004d3e <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 8143 	beq.w	8007556 <HAL_RCC_OscConfig+0x9ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	2b0c      	cmp	r3, #12
 80072d4:	f000 80fc 	beq.w	80074d0 <HAL_RCC_OscConfig+0x944>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072dc:	2b02      	cmp	r3, #2
 80072de:	f040 80c9 	bne.w	8007474 <HAL_RCC_OscConfig+0x8e8>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d010      	beq.n	800730c <HAL_RCC_OscConfig+0x780>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d00c      	beq.n	800730c <HAL_RCC_OscConfig+0x780>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d008      	beq.n	800730c <HAL_RCC_OscConfig+0x780>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d004      	beq.n	800730c <HAL_RCC_OscConfig+0x780>
 8007302:	f44f 715c 	mov.w	r1, #880	; 0x370
 8007306:	4830      	ldr	r0, [pc, #192]	; (80073c8 <HAL_RCC_OscConfig+0x83c>)
 8007308:	f7fd fd19 	bl	8004d3e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <HAL_RCC_OscConfig+0x790>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007318:	2b08      	cmp	r3, #8
 800731a:	d904      	bls.n	8007326 <HAL_RCC_OscConfig+0x79a>
 800731c:	f240 3171 	movw	r1, #881	; 0x371
 8007320:	4829      	ldr	r0, [pc, #164]	; (80073c8 <HAL_RCC_OscConfig+0x83c>)
 8007322:	f7fd fd0c 	bl	8004d3e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732a:	2b07      	cmp	r3, #7
 800732c:	d903      	bls.n	8007336 <HAL_RCC_OscConfig+0x7aa>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007332:	2b56      	cmp	r3, #86	; 0x56
 8007334:	d904      	bls.n	8007340 <HAL_RCC_OscConfig+0x7b4>
 8007336:	f240 3172 	movw	r1, #882	; 0x372
 800733a:	4823      	ldr	r0, [pc, #140]	; (80073c8 <HAL_RCC_OscConfig+0x83c>)
 800733c:	f7fd fcff 	bl	8004d3e <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007344:	2b07      	cmp	r3, #7
 8007346:	d008      	beq.n	800735a <HAL_RCC_OscConfig+0x7ce>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734c:	2b11      	cmp	r3, #17
 800734e:	d004      	beq.n	800735a <HAL_RCC_OscConfig+0x7ce>
 8007350:	f44f 715d 	mov.w	r1, #884	; 0x374
 8007354:	481c      	ldr	r0, [pc, #112]	; (80073c8 <HAL_RCC_OscConfig+0x83c>)
 8007356:	f7fd fcf2 	bl	8004d3e <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800735e:	2b02      	cmp	r3, #2
 8007360:	d010      	beq.n	8007384 <HAL_RCC_OscConfig+0x7f8>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007366:	2b04      	cmp	r3, #4
 8007368:	d00c      	beq.n	8007384 <HAL_RCC_OscConfig+0x7f8>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736e:	2b06      	cmp	r3, #6
 8007370:	d008      	beq.n	8007384 <HAL_RCC_OscConfig+0x7f8>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007376:	2b08      	cmp	r3, #8
 8007378:	d004      	beq.n	8007384 <HAL_RCC_OscConfig+0x7f8>
 800737a:	f240 3176 	movw	r1, #886	; 0x376
 800737e:	4812      	ldr	r0, [pc, #72]	; (80073c8 <HAL_RCC_OscConfig+0x83c>)
 8007380:	f7fd fcdd 	bl	8004d3e <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	2b02      	cmp	r3, #2
 800738a:	d010      	beq.n	80073ae <HAL_RCC_OscConfig+0x822>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	2b04      	cmp	r3, #4
 8007392:	d00c      	beq.n	80073ae <HAL_RCC_OscConfig+0x822>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	2b06      	cmp	r3, #6
 800739a:	d008      	beq.n	80073ae <HAL_RCC_OscConfig+0x822>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d004      	beq.n	80073ae <HAL_RCC_OscConfig+0x822>
 80073a4:	f240 3177 	movw	r1, #887	; 0x377
 80073a8:	4807      	ldr	r0, [pc, #28]	; (80073c8 <HAL_RCC_OscConfig+0x83c>)
 80073aa:	f7fd fcc8 	bl	8004d3e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073ae:	4b05      	ldr	r3, [pc, #20]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a04      	ldr	r2, [pc, #16]	; (80073c4 <HAL_RCC_OscConfig+0x838>)
 80073b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ba:	f7fe ff33 	bl	8006224 <HAL_GetTick>
 80073be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073c0:	e00f      	b.n	80073e2 <HAL_RCC_OscConfig+0x856>
 80073c2:	bf00      	nop
 80073c4:	40021000 	.word	0x40021000
 80073c8:	0800ba4c 	.word	0x0800ba4c
 80073cc:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073d0:	f7fe ff28 	bl	8006224 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x856>
          {
            return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e0ba      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073e2:	4b5f      	ldr	r3, [pc, #380]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1f0      	bne.n	80073d0 <HAL_RCC_OscConfig+0x844>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073ee:	4b5c      	ldr	r3, [pc, #368]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	4b5c      	ldr	r3, [pc, #368]	; (8007564 <HAL_RCC_OscConfig+0x9d8>)
 80073f4:	4013      	ands	r3, r2
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80073fe:	3a01      	subs	r2, #1
 8007400:	0112      	lsls	r2, r2, #4
 8007402:	4311      	orrs	r1, r2
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007408:	0212      	lsls	r2, r2, #8
 800740a:	4311      	orrs	r1, r2
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007410:	0852      	lsrs	r2, r2, #1
 8007412:	3a01      	subs	r2, #1
 8007414:	0552      	lsls	r2, r2, #21
 8007416:	4311      	orrs	r1, r2
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800741c:	0852      	lsrs	r2, r2, #1
 800741e:	3a01      	subs	r2, #1
 8007420:	0652      	lsls	r2, r2, #25
 8007422:	4311      	orrs	r1, r2
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007428:	0912      	lsrs	r2, r2, #4
 800742a:	0452      	lsls	r2, r2, #17
 800742c:	430a      	orrs	r2, r1
 800742e:	494c      	ldr	r1, [pc, #304]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 8007430:	4313      	orrs	r3, r2
 8007432:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007434:	4b4a      	ldr	r3, [pc, #296]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a49      	ldr	r2, [pc, #292]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 800743a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800743e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007440:	4b47      	ldr	r3, [pc, #284]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	4a46      	ldr	r2, [pc, #280]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 8007446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800744a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744c:	f7fe feea 	bl	8006224 <HAL_GetTick>
 8007450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007452:	e008      	b.n	8007466 <HAL_RCC_OscConfig+0x8da>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007454:	f7fe fee6 	bl	8006224 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b02      	cmp	r3, #2
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0x8da>
          {
            return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e078      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007466:	4b3e      	ldr	r3, [pc, #248]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0f0      	beq.n	8007454 <HAL_RCC_OscConfig+0x8c8>
 8007472:	e070      	b.n	8007556 <HAL_RCC_OscConfig+0x9ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007474:	4b3a      	ldr	r3, [pc, #232]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a39      	ldr	r2, [pc, #228]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 800747a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800747e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007480:	4b37      	ldr	r3, [pc, #220]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d105      	bne.n	8007498 <HAL_RCC_OscConfig+0x90c>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800748c:	4b34      	ldr	r3, [pc, #208]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	4a33      	ldr	r2, [pc, #204]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 8007492:	f023 0303 	bic.w	r3, r3, #3
 8007496:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007498:	4b31      	ldr	r3, [pc, #196]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	4a30      	ldr	r2, [pc, #192]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 800749e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80074a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074a6:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a8:	f7fe febc 	bl	8006224 <HAL_GetTick>
 80074ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074ae:	e008      	b.n	80074c2 <HAL_RCC_OscConfig+0x936>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074b0:	f7fe feb8 	bl	8006224 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0x936>
          {
            return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e04a      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074c2:	4b27      	ldr	r3, [pc, #156]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1f0      	bne.n	80074b0 <HAL_RCC_OscConfig+0x924>
 80074ce:	e042      	b.n	8007556 <HAL_RCC_OscConfig+0x9ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d101      	bne.n	80074dc <HAL_RCC_OscConfig+0x950>
      {
        return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e03d      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80074dc:	4b20      	ldr	r3, [pc, #128]	; (8007560 <HAL_RCC_OscConfig+0x9d4>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f003 0203 	and.w	r2, r3, #3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d130      	bne.n	8007552 <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fa:	3b01      	subs	r3, #1
 80074fc:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074fe:	429a      	cmp	r2, r3
 8007500:	d127      	bne.n	8007552 <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800750c:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800750e:	429a      	cmp	r2, r3
 8007510:	d11f      	bne.n	8007552 <HAL_RCC_OscConfig+0x9c6>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800751c:	2a07      	cmp	r2, #7
 800751e:	bf14      	ite	ne
 8007520:	2201      	movne	r2, #1
 8007522:	2200      	moveq	r2, #0
 8007524:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007526:	4293      	cmp	r3, r2
 8007528:	d113      	bne.n	8007552 <HAL_RCC_OscConfig+0x9c6>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007534:	085b      	lsrs	r3, r3, #1
 8007536:	3b01      	subs	r3, #1
 8007538:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800753a:	429a      	cmp	r2, r3
 800753c:	d109      	bne.n	8007552 <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	085b      	lsrs	r3, r3, #1
 800754a:	3b01      	subs	r3, #1
 800754c:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800754e:	429a      	cmp	r2, r3
 8007550:	d001      	beq.n	8007556 <HAL_RCC_OscConfig+0x9ca>
        {
          return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e000      	b.n	8007558 <HAL_RCC_OscConfig+0x9cc>
        }
      }
    }
  }
  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3720      	adds	r7, #32
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	40021000 	.word	0x40021000
 8007564:	f99d808c 	.word	0xf99d808c

08007568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e168      	b.n	800784e <HAL_RCC_ClockConfig+0x2e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d003      	beq.n	800758c <HAL_RCC_ClockConfig+0x24>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b0f      	cmp	r3, #15
 800758a:	d904      	bls.n	8007596 <HAL_RCC_ClockConfig+0x2e>
 800758c:	f240 412e 	movw	r1, #1070	; 0x42e
 8007590:	4873      	ldr	r0, [pc, #460]	; (8007760 <HAL_RCC_ClockConfig+0x1f8>)
 8007592:	f7fd fbd4 	bl	8004d3e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d010      	beq.n	80075be <HAL_RCC_ClockConfig+0x56>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d00d      	beq.n	80075be <HAL_RCC_ClockConfig+0x56>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d00a      	beq.n	80075be <HAL_RCC_ClockConfig+0x56>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d007      	beq.n	80075be <HAL_RCC_ClockConfig+0x56>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d004      	beq.n	80075be <HAL_RCC_ClockConfig+0x56>
 80075b4:	f240 412f 	movw	r1, #1071	; 0x42f
 80075b8:	4869      	ldr	r0, [pc, #420]	; (8007760 <HAL_RCC_ClockConfig+0x1f8>)
 80075ba:	f7fd fbc0 	bl	8004d3e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075be:	4b69      	ldr	r3, [pc, #420]	; (8007764 <HAL_RCC_ClockConfig+0x1fc>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0307 	and.w	r3, r3, #7
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d910      	bls.n	80075ee <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075cc:	4b65      	ldr	r3, [pc, #404]	; (8007764 <HAL_RCC_ClockConfig+0x1fc>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f023 0207 	bic.w	r2, r3, #7
 80075d4:	4963      	ldr	r1, [pc, #396]	; (8007764 <HAL_RCC_ClockConfig+0x1fc>)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	4313      	orrs	r3, r2
 80075da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075dc:	4b61      	ldr	r3, [pc, #388]	; (8007764 <HAL_RCC_ClockConfig+0x1fc>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0307 	and.w	r3, r3, #7
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d001      	beq.n	80075ee <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e12f      	b.n	800784e <HAL_RCC_ClockConfig+0x2e6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d061      	beq.n	80076be <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d010      	beq.n	8007624 <HAL_RCC_ClockConfig+0xbc>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d00c      	beq.n	8007624 <HAL_RCC_ClockConfig+0xbc>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	2b02      	cmp	r3, #2
 8007610:	d008      	beq.n	8007624 <HAL_RCC_ClockConfig+0xbc>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	2b03      	cmp	r3, #3
 8007618:	d004      	beq.n	8007624 <HAL_RCC_ClockConfig+0xbc>
 800761a:	f240 4146 	movw	r1, #1094	; 0x446
 800761e:	4850      	ldr	r0, [pc, #320]	; (8007760 <HAL_RCC_ClockConfig+0x1f8>)
 8007620:	f7fd fb8d 	bl	8004d3e <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	2b03      	cmp	r3, #3
 800762a:	d107      	bne.n	800763c <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800762c:	4b4e      	ldr	r3, [pc, #312]	; (8007768 <HAL_RCC_ClockConfig+0x200>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d121      	bne.n	800767c <HAL_RCC_ClockConfig+0x114>
      {
        return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e108      	b.n	800784e <HAL_RCC_ClockConfig+0x2e6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2b02      	cmp	r3, #2
 8007642:	d107      	bne.n	8007654 <HAL_RCC_ClockConfig+0xec>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007644:	4b48      	ldr	r3, [pc, #288]	; (8007768 <HAL_RCC_ClockConfig+0x200>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d115      	bne.n	800767c <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e0fc      	b.n	800784e <HAL_RCC_ClockConfig+0x2e6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d107      	bne.n	800766c <HAL_RCC_ClockConfig+0x104>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800765c:	4b42      	ldr	r3, [pc, #264]	; (8007768 <HAL_RCC_ClockConfig+0x200>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d109      	bne.n	800767c <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e0f0      	b.n	800784e <HAL_RCC_ClockConfig+0x2e6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800766c:	4b3e      	ldr	r3, [pc, #248]	; (8007768 <HAL_RCC_ClockConfig+0x200>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e0e8      	b.n	800784e <HAL_RCC_ClockConfig+0x2e6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800767c:	4b3a      	ldr	r3, [pc, #232]	; (8007768 <HAL_RCC_ClockConfig+0x200>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f023 0203 	bic.w	r2, r3, #3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	4937      	ldr	r1, [pc, #220]	; (8007768 <HAL_RCC_ClockConfig+0x200>)
 800768a:	4313      	orrs	r3, r2
 800768c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800768e:	f7fe fdc9 	bl	8006224 <HAL_GetTick>
 8007692:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007694:	e00a      	b.n	80076ac <HAL_RCC_ClockConfig+0x144>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007696:	f7fe fdc5 	bl	8006224 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e0d0      	b.n	800784e <HAL_RCC_ClockConfig+0x2e6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ac:	4b2e      	ldr	r3, [pc, #184]	; (8007768 <HAL_RCC_ClockConfig+0x200>)
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f003 020c 	and.w	r2, r3, #12
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d1eb      	bne.n	8007696 <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d031      	beq.n	800772e <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d024      	beq.n	800771c <HAL_RCC_ClockConfig+0x1b4>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b80      	cmp	r3, #128	; 0x80
 80076d8:	d020      	beq.n	800771c <HAL_RCC_ClockConfig+0x1b4>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	2b90      	cmp	r3, #144	; 0x90
 80076e0:	d01c      	beq.n	800771c <HAL_RCC_ClockConfig+0x1b4>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	2ba0      	cmp	r3, #160	; 0xa0
 80076e8:	d018      	beq.n	800771c <HAL_RCC_ClockConfig+0x1b4>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	2bb0      	cmp	r3, #176	; 0xb0
 80076f0:	d014      	beq.n	800771c <HAL_RCC_ClockConfig+0x1b4>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	2bc0      	cmp	r3, #192	; 0xc0
 80076f8:	d010      	beq.n	800771c <HAL_RCC_ClockConfig+0x1b4>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	2bd0      	cmp	r3, #208	; 0xd0
 8007700:	d00c      	beq.n	800771c <HAL_RCC_ClockConfig+0x1b4>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	2be0      	cmp	r3, #224	; 0xe0
 8007708:	d008      	beq.n	800771c <HAL_RCC_ClockConfig+0x1b4>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	2bf0      	cmp	r3, #240	; 0xf0
 8007710:	d004      	beq.n	800771c <HAL_RCC_ClockConfig+0x1b4>
 8007712:	f240 41a2 	movw	r1, #1186	; 0x4a2
 8007716:	4812      	ldr	r0, [pc, #72]	; (8007760 <HAL_RCC_ClockConfig+0x1f8>)
 8007718:	f7fd fb11 	bl	8004d3e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800771c:	4b12      	ldr	r3, [pc, #72]	; (8007768 <HAL_RCC_ClockConfig+0x200>)
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	490f      	ldr	r1, [pc, #60]	; (8007768 <HAL_RCC_ClockConfig+0x200>)
 800772a:	4313      	orrs	r3, r2
 800772c:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800772e:	4b0d      	ldr	r3, [pc, #52]	; (8007764 <HAL_RCC_ClockConfig+0x1fc>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d217      	bcs.n	800776c <HAL_RCC_ClockConfig+0x204>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800773c:	4b09      	ldr	r3, [pc, #36]	; (8007764 <HAL_RCC_ClockConfig+0x1fc>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f023 0207 	bic.w	r2, r3, #7
 8007744:	4907      	ldr	r1, [pc, #28]	; (8007764 <HAL_RCC_ClockConfig+0x1fc>)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	4313      	orrs	r3, r2
 800774a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800774c:	4b05      	ldr	r3, [pc, #20]	; (8007764 <HAL_RCC_ClockConfig+0x1fc>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d008      	beq.n	800776c <HAL_RCC_ClockConfig+0x204>
    {
      return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e077      	b.n	800784e <HAL_RCC_ClockConfig+0x2e6>
 800775e:	bf00      	nop
 8007760:	0800ba4c 	.word	0x0800ba4c
 8007764:	40022000 	.word	0x40022000
 8007768:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0304 	and.w	r3, r3, #4
 8007774:	2b00      	cmp	r3, #0
 8007776:	d025      	beq.n	80077c4 <HAL_RCC_ClockConfig+0x25c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d018      	beq.n	80077b2 <HAL_RCC_ClockConfig+0x24a>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007788:	d013      	beq.n	80077b2 <HAL_RCC_ClockConfig+0x24a>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007792:	d00e      	beq.n	80077b2 <HAL_RCC_ClockConfig+0x24a>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800779c:	d009      	beq.n	80077b2 <HAL_RCC_ClockConfig+0x24a>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077a6:	d004      	beq.n	80077b2 <HAL_RCC_ClockConfig+0x24a>
 80077a8:	f240 41c1 	movw	r1, #1217	; 0x4c1
 80077ac:	482a      	ldr	r0, [pc, #168]	; (8007858 <HAL_RCC_ClockConfig+0x2f0>)
 80077ae:	f7fd fac6 	bl	8004d3e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077b2:	4b2a      	ldr	r3, [pc, #168]	; (800785c <HAL_RCC_ClockConfig+0x2f4>)
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	4927      	ldr	r1, [pc, #156]	; (800785c <HAL_RCC_ClockConfig+0x2f4>)
 80077c0:	4313      	orrs	r3, r2
 80077c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0308 	and.w	r3, r3, #8
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d026      	beq.n	800781e <HAL_RCC_ClockConfig+0x2b6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d018      	beq.n	800780a <HAL_RCC_ClockConfig+0x2a2>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e0:	d013      	beq.n	800780a <HAL_RCC_ClockConfig+0x2a2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80077ea:	d00e      	beq.n	800780a <HAL_RCC_ClockConfig+0x2a2>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80077f4:	d009      	beq.n	800780a <HAL_RCC_ClockConfig+0x2a2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077fe:	d004      	beq.n	800780a <HAL_RCC_ClockConfig+0x2a2>
 8007800:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 8007804:	4814      	ldr	r0, [pc, #80]	; (8007858 <HAL_RCC_ClockConfig+0x2f0>)
 8007806:	f7fd fa9a 	bl	8004d3e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800780a:	4b14      	ldr	r3, [pc, #80]	; (800785c <HAL_RCC_ClockConfig+0x2f4>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	00db      	lsls	r3, r3, #3
 8007818:	4910      	ldr	r1, [pc, #64]	; (800785c <HAL_RCC_ClockConfig+0x2f4>)
 800781a:	4313      	orrs	r3, r2
 800781c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800781e:	f000 f825 	bl	800786c <HAL_RCC_GetSysClockFreq>
 8007822:	4601      	mov	r1, r0
 8007824:	4b0d      	ldr	r3, [pc, #52]	; (800785c <HAL_RCC_ClockConfig+0x2f4>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	091b      	lsrs	r3, r3, #4
 800782a:	f003 030f 	and.w	r3, r3, #15
 800782e:	4a0c      	ldr	r2, [pc, #48]	; (8007860 <HAL_RCC_ClockConfig+0x2f8>)
 8007830:	5cd3      	ldrb	r3, [r2, r3]
 8007832:	f003 031f 	and.w	r3, r3, #31
 8007836:	fa21 f303 	lsr.w	r3, r1, r3
 800783a:	4a0a      	ldr	r2, [pc, #40]	; (8007864 <HAL_RCC_ClockConfig+0x2fc>)
 800783c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800783e:	4b0a      	ldr	r3, [pc, #40]	; (8007868 <HAL_RCC_ClockConfig+0x300>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4618      	mov	r0, r3
 8007844:	f7fe fca2 	bl	800618c <HAL_InitTick>
 8007848:	4603      	mov	r3, r0
 800784a:	72fb      	strb	r3, [r7, #11]

  return status;
 800784c:	7afb      	ldrb	r3, [r7, #11]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	0800ba4c 	.word	0x0800ba4c
 800785c:	40021000 	.word	0x40021000
 8007860:	0800cd94 	.word	0x0800cd94
 8007864:	20000048 	.word	0x20000048
 8007868:	2000004c 	.word	0x2000004c

0800786c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800786c:	b480      	push	{r7}
 800786e:	b089      	sub	sp, #36	; 0x24
 8007870:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007872:	2300      	movs	r3, #0
 8007874:	61fb      	str	r3, [r7, #28]
 8007876:	2300      	movs	r3, #0
 8007878:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800787a:	4b3d      	ldr	r3, [pc, #244]	; (8007970 <HAL_RCC_GetSysClockFreq+0x104>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 030c 	and.w	r3, r3, #12
 8007882:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007884:	4b3a      	ldr	r3, [pc, #232]	; (8007970 <HAL_RCC_GetSysClockFreq+0x104>)
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <HAL_RCC_GetSysClockFreq+0x34>
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	2b0c      	cmp	r3, #12
 8007898:	d121      	bne.n	80078de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d11e      	bne.n	80078de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80078a0:	4b33      	ldr	r3, [pc, #204]	; (8007970 <HAL_RCC_GetSysClockFreq+0x104>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0308 	and.w	r3, r3, #8
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d107      	bne.n	80078bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80078ac:	4b30      	ldr	r3, [pc, #192]	; (8007970 <HAL_RCC_GetSysClockFreq+0x104>)
 80078ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078b2:	0a1b      	lsrs	r3, r3, #8
 80078b4:	f003 030f 	and.w	r3, r3, #15
 80078b8:	61fb      	str	r3, [r7, #28]
 80078ba:	e005      	b.n	80078c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80078bc:	4b2c      	ldr	r3, [pc, #176]	; (8007970 <HAL_RCC_GetSysClockFreq+0x104>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	091b      	lsrs	r3, r3, #4
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80078c8:	4a2a      	ldr	r2, [pc, #168]	; (8007974 <HAL_RCC_GetSysClockFreq+0x108>)
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10d      	bne.n	80078f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078dc:	e00a      	b.n	80078f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	d102      	bne.n	80078ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80078e4:	4b24      	ldr	r3, [pc, #144]	; (8007978 <HAL_RCC_GetSysClockFreq+0x10c>)
 80078e6:	61bb      	str	r3, [r7, #24]
 80078e8:	e004      	b.n	80078f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d101      	bne.n	80078f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80078f0:	4b22      	ldr	r3, [pc, #136]	; (800797c <HAL_RCC_GetSysClockFreq+0x110>)
 80078f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	2b0c      	cmp	r3, #12
 80078f8:	d133      	bne.n	8007962 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078fa:	4b1d      	ldr	r3, [pc, #116]	; (8007970 <HAL_RCC_GetSysClockFreq+0x104>)
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b02      	cmp	r3, #2
 8007908:	d002      	beq.n	8007910 <HAL_RCC_GetSysClockFreq+0xa4>
 800790a:	2b03      	cmp	r3, #3
 800790c:	d003      	beq.n	8007916 <HAL_RCC_GetSysClockFreq+0xaa>
 800790e:	e005      	b.n	800791c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007910:	4b19      	ldr	r3, [pc, #100]	; (8007978 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007912:	617b      	str	r3, [r7, #20]
      break;
 8007914:	e005      	b.n	8007922 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007916:	4b19      	ldr	r3, [pc, #100]	; (800797c <HAL_RCC_GetSysClockFreq+0x110>)
 8007918:	617b      	str	r3, [r7, #20]
      break;
 800791a:	e002      	b.n	8007922 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	617b      	str	r3, [r7, #20]
      break;
 8007920:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007922:	4b13      	ldr	r3, [pc, #76]	; (8007970 <HAL_RCC_GetSysClockFreq+0x104>)
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	091b      	lsrs	r3, r3, #4
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	3301      	adds	r3, #1
 800792e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007930:	4b0f      	ldr	r3, [pc, #60]	; (8007970 <HAL_RCC_GetSysClockFreq+0x104>)
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	0a1b      	lsrs	r3, r3, #8
 8007936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	fb02 f203 	mul.w	r2, r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	fbb2 f3f3 	udiv	r3, r2, r3
 8007946:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007948:	4b09      	ldr	r3, [pc, #36]	; (8007970 <HAL_RCC_GetSysClockFreq+0x104>)
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	0e5b      	lsrs	r3, r3, #25
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	3301      	adds	r3, #1
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007960:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007962:	69bb      	ldr	r3, [r7, #24]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3724      	adds	r7, #36	; 0x24
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	40021000 	.word	0x40021000
 8007974:	0800cdac 	.word	0x0800cdac
 8007978:	00f42400 	.word	0x00f42400
 800797c:	007a1200 	.word	0x007a1200

08007980 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007984:	4b03      	ldr	r3, [pc, #12]	; (8007994 <HAL_RCC_GetHCLKFreq+0x14>)
 8007986:	681b      	ldr	r3, [r3, #0]
}
 8007988:	4618      	mov	r0, r3
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	20000048 	.word	0x20000048

08007998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800799c:	f7ff fff0 	bl	8007980 <HAL_RCC_GetHCLKFreq>
 80079a0:	4601      	mov	r1, r0
 80079a2:	4b06      	ldr	r3, [pc, #24]	; (80079bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	0a1b      	lsrs	r3, r3, #8
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	4a04      	ldr	r2, [pc, #16]	; (80079c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079ae:	5cd3      	ldrb	r3, [r2, r3]
 80079b0:	f003 031f 	and.w	r3, r3, #31
 80079b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	40021000 	.word	0x40021000
 80079c0:	0800cda4 	.word	0x0800cda4

080079c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80079c8:	f7ff ffda 	bl	8007980 <HAL_RCC_GetHCLKFreq>
 80079cc:	4601      	mov	r1, r0
 80079ce:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	0adb      	lsrs	r3, r3, #11
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	4a04      	ldr	r2, [pc, #16]	; (80079ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80079da:	5cd3      	ldrb	r3, [r2, r3]
 80079dc:	f003 031f 	and.w	r3, r3, #31
 80079e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	40021000 	.word	0x40021000
 80079ec:	0800cda4 	.word	0x0800cda4

080079f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80079f8:	2300      	movs	r3, #0
 80079fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80079fc:	4b2a      	ldr	r3, [pc, #168]	; (8007aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d003      	beq.n	8007a10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a08:	f7ff f850 	bl	8006aac <HAL_PWREx_GetVoltageRange>
 8007a0c:	6178      	str	r0, [r7, #20]
 8007a0e:	e014      	b.n	8007a3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a10:	4b25      	ldr	r3, [pc, #148]	; (8007aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a14:	4a24      	ldr	r2, [pc, #144]	; (8007aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8007a1c:	4b22      	ldr	r3, [pc, #136]	; (8007aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a28:	f7ff f840 	bl	8006aac <HAL_PWREx_GetVoltageRange>
 8007a2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a2e:	4b1e      	ldr	r3, [pc, #120]	; (8007aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a32:	4a1d      	ldr	r2, [pc, #116]	; (8007aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a40:	d10b      	bne.n	8007a5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b80      	cmp	r3, #128	; 0x80
 8007a46:	d919      	bls.n	8007a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2ba0      	cmp	r3, #160	; 0xa0
 8007a4c:	d902      	bls.n	8007a54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a4e:	2302      	movs	r3, #2
 8007a50:	613b      	str	r3, [r7, #16]
 8007a52:	e013      	b.n	8007a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a54:	2301      	movs	r3, #1
 8007a56:	613b      	str	r3, [r7, #16]
 8007a58:	e010      	b.n	8007a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b80      	cmp	r3, #128	; 0x80
 8007a5e:	d902      	bls.n	8007a66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007a60:	2303      	movs	r3, #3
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	e00a      	b.n	8007a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b80      	cmp	r3, #128	; 0x80
 8007a6a:	d102      	bne.n	8007a72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	613b      	str	r3, [r7, #16]
 8007a70:	e004      	b.n	8007a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b70      	cmp	r3, #112	; 0x70
 8007a76:	d101      	bne.n	8007a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a78:	2301      	movs	r3, #1
 8007a7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a7c:	4b0b      	ldr	r3, [pc, #44]	; (8007aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f023 0207 	bic.w	r2, r3, #7
 8007a84:	4909      	ldr	r1, [pc, #36]	; (8007aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007a8c:	4b07      	ldr	r3, [pc, #28]	; (8007aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0307 	and.w	r3, r3, #7
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d001      	beq.n	8007a9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e000      	b.n	8007aa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	40021000 	.word	0x40021000
 8007aac:	40022000 	.word	0x40022000

08007ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ab8:	2300      	movs	r3, #0
 8007aba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007abc:	2300      	movs	r3, #0
 8007abe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d175      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d16f      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0304 	and.w	r3, r3, #4
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d169      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0308 	and.w	r3, r3, #8
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d163      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0310 	and.w	r3, r3, #16
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d15d      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0320 	and.w	r3, r3, #32
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d157      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d151      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d14b      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d145      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d13f      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d139      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d133      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d12d      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d127      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d121      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d11b      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d115      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10f      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d109      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d103      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007bb0:	21cb      	movs	r1, #203	; 0xcb
 8007bb2:	48ab      	ldr	r0, [pc, #684]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8007bb4:	f7fd f8c3 	bl	8004d3e <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d056      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d012      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bd4:	d00d      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bde:	d008      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007be4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007be8:	d003      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007bea:	21d3      	movs	r1, #211	; 0xd3
 8007bec:	489c      	ldr	r0, [pc, #624]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8007bee:	f7fd f8a6 	bl	8004d3e <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bfa:	d01c      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c00:	d802      	bhi.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00e      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8007c06:	e01f      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007c08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c0c:	d003      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007c0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007c12:	d01c      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8007c14:	e018      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007c16:	4b93      	ldr	r3, [pc, #588]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	4a92      	ldr	r2, [pc, #584]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c20:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c22:	e015      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x1a0>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3304      	adds	r3, #4
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 fc64 	bl	80084f8 <RCCEx_PLLSAI1_Config>
 8007c30:	4603      	mov	r3, r0
 8007c32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c34:	e00c      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x1a0>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	3320      	adds	r3, #32
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fdd7 	bl	80087f0 <RCCEx_PLLSAI2_Config>
 8007c42:	4603      	mov	r3, r0
 8007c44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c46:	e003      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	74fb      	strb	r3, [r7, #19]
      break;
 8007c4c:	e000      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      break;
 8007c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c50:	7cfb      	ldrb	r3, [r7, #19]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10b      	bne.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c56:	4b83      	ldr	r3, [pc, #524]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c64:	497f      	ldr	r1, [pc, #508]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007c6c:	e001      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6e:	7cfb      	ldrb	r3, [r7, #19]
 8007c70:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d057      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d013      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c8e:	d00e      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c98:	d009      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ca2:	d004      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007ca4:	f240 1111 	movw	r1, #273	; 0x111
 8007ca8:	486d      	ldr	r0, [pc, #436]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8007caa:	f7fd f848 	bl	8004d3e <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cb6:	d01c      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cbc:	d802      	bhi.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00e      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007cc2:	e01f      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007cc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cc8:	d003      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8007cca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007cce:	d01c      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007cd0:	e018      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007cd2:	4b64      	ldr	r3, [pc, #400]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	4a63      	ldr	r2, [pc, #396]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cdc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007cde:	e015      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x25c>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 fc06 	bl	80084f8 <RCCEx_PLLSAI1_Config>
 8007cec:	4603      	mov	r3, r0
 8007cee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007cf0:	e00c      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x25c>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	3320      	adds	r3, #32
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 fd79 	bl	80087f0 <RCCEx_PLLSAI2_Config>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007d02:	e003      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x25c>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	74fb      	strb	r3, [r7, #19]
      break;
 8007d08:	e000      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x25c>
      break;
 8007d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d0c:	7cfb      	ldrb	r3, [r7, #19]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10b      	bne.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007d12:	4b54      	ldr	r3, [pc, #336]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d18:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d20:	4950      	ldr	r1, [pc, #320]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007d28:	e001      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2a:	7cfb      	ldrb	r3, [r7, #19]
 8007d2c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 80bf 	beq.w	8007eba <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d016      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d54:	d010      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d60:	d00a      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d6c:	d004      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8007d6e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007d72:	483b      	ldr	r0, [pc, #236]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8007d74:	f7fc ffe3 	bl	8004d3e <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007d78:	4b3a      	ldr	r3, [pc, #232]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007d84:	2301      	movs	r3, #1
 8007d86:	e000      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00d      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d8e:	4b35      	ldr	r3, [pc, #212]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d92:	4a34      	ldr	r2, [pc, #208]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d98:	6593      	str	r3, [r2, #88]	; 0x58
 8007d9a:	4b32      	ldr	r3, [pc, #200]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007da2:	60bb      	str	r3, [r7, #8]
 8007da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007da6:	2301      	movs	r3, #1
 8007da8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007daa:	4b2f      	ldr	r3, [pc, #188]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a2e      	ldr	r2, [pc, #184]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8007db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007db4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007db6:	f7fe fa35 	bl	8006224 <HAL_GetTick>
 8007dba:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007dbc:	e009      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x322>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dbe:	f7fe fa31 	bl	8006224 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d902      	bls.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x322>
      {
        ret = HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	74fb      	strb	r3, [r7, #19]
        break;
 8007dd0:	e005      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x32e>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007dd2:	4b25      	ldr	r3, [pc, #148]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0ef      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x30e>
      }
    }

    if(ret == HAL_OK)
 8007dde:	7cfb      	ldrb	r3, [r7, #19]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d15f      	bne.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007de4:	4b1f      	ldr	r3, [pc, #124]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dee:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d01f      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d019      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x386>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e02:	4b18      	ldr	r3, [pc, #96]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e0c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e0e:	4b15      	ldr	r3, [pc, #84]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e14:	4a13      	ldr	r2, [pc, #76]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e1e:	4b11      	ldr	r3, [pc, #68]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e24:	4a0f      	ldr	r2, [pc, #60]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007e2e:	4a0d      	ldr	r2, [pc, #52]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01c      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e40:	f7fe f9f0 	bl	8006224 <HAL_GetTick>
 8007e44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e46:	e011      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e48:	f7fe f9ec 	bl	8006224 <HAL_GetTick>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d908      	bls.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
          {
            ret = HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	74fb      	strb	r3, [r7, #19]
            break;
 8007e5e:	e00c      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8007e60:	0800ba84 	.word	0x0800ba84
 8007e64:	40021000 	.word	0x40021000
 8007e68:	40007000 	.word	0x40007000
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8007e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0e6      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x398>
          }
        }
      }

      if(ret == HAL_OK)
 8007e7a:	7cfb      	ldrb	r3, [r7, #19]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10c      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e80:	4b07      	ldr	r3, [pc, #28]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8007e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e90:	4903      	ldr	r1, [pc, #12]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007e98:	e006      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e9a:	7cfb      	ldrb	r3, [r7, #19]
 8007e9c:	74bb      	strb	r3, [r7, #18]
 8007e9e:	e003      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007ea0:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea4:	7cfb      	ldrb	r3, [r7, #19]
 8007ea6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ea8:	7c7b      	ldrb	r3, [r7, #17]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d105      	bne.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x40a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007eae:	4ba1      	ldr	r3, [pc, #644]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb2:	4aa0      	ldr	r2, [pc, #640]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007eb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d01f      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d010      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d00c      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	d008      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d004      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007ee6:	f240 119b 	movw	r1, #411	; 0x19b
 8007eea:	4893      	ldr	r0, [pc, #588]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8007eec:	f7fc ff27 	bl	8004d3e <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ef0:	4b90      	ldr	r3, [pc, #576]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef6:	f023 0203 	bic.w	r2, r3, #3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efe:	498d      	ldr	r1, [pc, #564]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d01f      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d010      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	d00c      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f26:	2b0c      	cmp	r3, #12
 8007f28:	d008      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2e:	2b08      	cmp	r3, #8
 8007f30:	d004      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007f32:	f240 11a5 	movw	r1, #421	; 0x1a5
 8007f36:	4880      	ldr	r0, [pc, #512]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8007f38:	f7fc ff01 	bl	8004d3e <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f3c:	4b7d      	ldr	r3, [pc, #500]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f42:	f023 020c 	bic.w	r2, r3, #12
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4a:	497a      	ldr	r1, [pc, #488]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0304 	and.w	r3, r3, #4
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d01f      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d010      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6a:	2b10      	cmp	r3, #16
 8007f6c:	d00c      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	2b30      	cmp	r3, #48	; 0x30
 8007f74:	d008      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7a:	2b20      	cmp	r3, #32
 8007f7c:	d004      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007f7e:	f240 11b1 	movw	r1, #433	; 0x1b1
 8007f82:	486d      	ldr	r0, [pc, #436]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8007f84:	f7fc fedb 	bl	8004d3e <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f88:	4b6a      	ldr	r3, [pc, #424]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f96:	4967      	ldr	r1, [pc, #412]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0308 	and.w	r3, r3, #8
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d01f      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x53a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d010      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb6:	2b40      	cmp	r3, #64	; 0x40
 8007fb8:	d00c      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fbe:	2bc0      	cmp	r3, #192	; 0xc0
 8007fc0:	d008      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc6:	2b80      	cmp	r3, #128	; 0x80
 8007fc8:	d004      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007fca:	f240 11bf 	movw	r1, #447	; 0x1bf
 8007fce:	485a      	ldr	r0, [pc, #360]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8007fd0:	f7fc feb5 	bl	8004d3e <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007fd4:	4b57      	ldr	r3, [pc, #348]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe2:	4954      	ldr	r1, [pc, #336]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0310 	and.w	r3, r3, #16
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d022      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x58c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d013      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008006:	d00e      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800800c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008010:	d009      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800801a:	d004      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x576>
 800801c:	f240 11cd 	movw	r1, #461	; 0x1cd
 8008020:	4845      	ldr	r0, [pc, #276]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8008022:	f7fc fe8c 	bl	8004d3e <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008026:	4b43      	ldr	r3, [pc, #268]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8008028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800802c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008034:	493f      	ldr	r1, [pc, #252]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8008036:	4313      	orrs	r3, r2
 8008038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0320 	and.w	r3, r3, #32
 8008044:	2b00      	cmp	r3, #0
 8008046:	d022      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x5de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800804c:	2b00      	cmp	r3, #0
 800804e:	d013      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008058:	d00e      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800805e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008062:	d009      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800806c:	d004      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800806e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008072:	4831      	ldr	r0, [pc, #196]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8008074:	f7fc fe63 	bl	8004d3e <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008078:	4b2e      	ldr	r3, [pc, #184]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 800807a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008086:	492b      	ldr	r1, [pc, #172]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8008088:	4313      	orrs	r3, r2
 800808a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008096:	2b00      	cmp	r3, #0
 8008098:	d022      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x630>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d013      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080aa:	d00e      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080b4:	d009      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80080be:	d004      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
 80080c0:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80080c4:	481c      	ldr	r0, [pc, #112]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 80080c6:	f7fc fe3a 	bl	8004d3e <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080ca:	4b1a      	ldr	r3, [pc, #104]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 80080cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d8:	4916      	ldr	r1, [pc, #88]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d027      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d013      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080fc:	d00e      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008102:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008106:	d009      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800810c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008110:	d004      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008112:	f240 11e9 	movw	r1, #489	; 0x1e9
 8008116:	4808      	ldr	r0, [pc, #32]	; (8008138 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8008118:	f7fc fe11 	bl	8004d3e <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800811c:	4b05      	ldr	r3, [pc, #20]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 800811e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008122:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800812a:	4902      	ldr	r1, [pc, #8]	; (8008134 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 800812c:	4313      	orrs	r3, r2
 800812e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008132:	e003      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8008134:	40021000 	.word	0x40021000
 8008138:	0800ba84 	.word	0x0800ba84
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008144:	2b00      	cmp	r3, #0
 8008146:	d01d      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00e      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008158:	d009      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x6be>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800815e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008162:	d004      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8008164:	f240 11f1 	movw	r1, #497	; 0x1f1
 8008168:	488c      	ldr	r0, [pc, #560]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800816a:	f7fc fde8 	bl	8004d3e <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800816e:	4b8c      	ldr	r3, [pc, #560]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008174:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800817c:	4988      	ldr	r1, [pc, #544]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800817e:	4313      	orrs	r3, r2
 8008180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818c:	2b00      	cmp	r3, #0
 800818e:	d01d      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x71c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00e      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x706>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800819c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081a0:	d009      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x706>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081aa:	d004      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x706>
 80081ac:	f240 11fd 	movw	r1, #509	; 0x1fd
 80081b0:	487a      	ldr	r0, [pc, #488]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80081b2:	f7fc fdc4 	bl	8004d3e <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80081b6:	4b7a      	ldr	r3, [pc, #488]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80081b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c4:	4976      	ldr	r1, [pc, #472]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01d      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x764>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00e      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081e8:	d009      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081f2:	d004      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80081f4:	f240 2109 	movw	r1, #521	; 0x209
 80081f8:	4868      	ldr	r0, [pc, #416]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80081fa:	f7fc fda0 	bl	8004d3e <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081fe:	4b68      	ldr	r3, [pc, #416]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800820c:	4964      	ldr	r1, [pc, #400]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800820e:	4313      	orrs	r3, r2
 8008210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d040      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d013      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800822c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008230:	d00e      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800823a:	d009      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008240:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008244:	d004      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 8008246:	f240 2122 	movw	r1, #546	; 0x222
 800824a:	4854      	ldr	r0, [pc, #336]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800824c:	f7fc fd77 	bl	8004d3e <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008250:	4b53      	ldr	r3, [pc, #332]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008256:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800825e:	4950      	ldr	r1, [pc, #320]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008260:	4313      	orrs	r3, r2
 8008262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800826a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800826e:	d106      	bne.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008270:	4b4b      	ldr	r3, [pc, #300]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	4a4a      	ldr	r2, [pc, #296]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800827a:	60d3      	str	r3, [r2, #12]
 800827c:	e011      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008282:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008286:	d10c      	bne.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3304      	adds	r3, #4
 800828c:	2101      	movs	r1, #1
 800828e:	4618      	mov	r0, r3
 8008290:	f000 f932 	bl	80084f8 <RCCEx_PLLSAI1_Config>
 8008294:	4603      	mov	r3, r0
 8008296:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008298:	7cfb      	ldrb	r3, [r7, #19]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
        {
          /* set overall return value */
          status = ret;
 800829e:	7cfb      	ldrb	r3, [r7, #19]
 80082a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d040      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x880>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d013      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082be:	d00e      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082c8:	d009      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80082d2:	d004      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80082d4:	f240 2143 	movw	r1, #579	; 0x243
 80082d8:	4830      	ldr	r0, [pc, #192]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80082da:	f7fc fd30 	bl	8004d3e <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80082de:	4b30      	ldr	r3, [pc, #192]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80082e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ec:	492c      	ldr	r1, [pc, #176]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082fc:	d106      	bne.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082fe:	4b28      	ldr	r3, [pc, #160]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	4a27      	ldr	r2, [pc, #156]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008308:	60d3      	str	r3, [r2, #12]
 800830a:	e011      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x880>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008314:	d10c      	bne.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x880>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	3304      	adds	r3, #4
 800831a:	2101      	movs	r1, #1
 800831c:	4618      	mov	r0, r3
 800831e:	f000 f8eb 	bl	80084f8 <RCCEx_PLLSAI1_Config>
 8008322:	4603      	mov	r3, r0
 8008324:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008326:	7cfb      	ldrb	r3, [r7, #19]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x880>
      {
        /* set overall return value */
        status = ret;
 800832c:	7cfb      	ldrb	r3, [r7, #19]
 800832e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d045      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x918>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008340:	2b00      	cmp	r3, #0
 8008342:	d013      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800834c:	d00e      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008356:	d009      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800835c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008360:	d004      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008362:	f44f 711a 	mov.w	r1, #616	; 0x268
 8008366:	480d      	ldr	r0, [pc, #52]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008368:	f7fc fce9 	bl	8004d3e <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800836c:	4b0c      	ldr	r3, [pc, #48]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800836e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008372:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800837a:	4909      	ldr	r1, [pc, #36]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800837c:	4313      	orrs	r3, r2
 800837e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800838a:	d10b      	bne.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800838c:	4b04      	ldr	r3, [pc, #16]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	4a03      	ldr	r2, [pc, #12]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008396:	60d3      	str	r3, [r2, #12]
 8008398:	e016      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x918>
 800839a:	bf00      	nop
 800839c:	0800ba84 	.word	0x0800ba84
 80083a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083ac:	d10c      	bne.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x918>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	3304      	adds	r3, #4
 80083b2:	2101      	movs	r1, #1
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 f89f 	bl	80084f8 <RCCEx_PLLSAI1_Config>
 80083ba:	4603      	mov	r3, r0
 80083bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80083be:	7cfb      	ldrb	r3, [r7, #19]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x918>
      {
        /* set overall return value */
        status = ret;
 80083c4:	7cfb      	ldrb	r3, [r7, #19]
 80083c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d047      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d013      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x954>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083e4:	d00e      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x954>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ee:	d009      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x954>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083f8:	d004      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x954>
 80083fa:	f44f 7122 	mov.w	r1, #648	; 0x288
 80083fe:	483c      	ldr	r0, [pc, #240]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8008400:	f7fc fc9d 	bl	8004d3e <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008404:	4b3b      	ldr	r3, [pc, #236]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8008406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800840a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008412:	4938      	ldr	r1, [pc, #224]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8008414:	4313      	orrs	r3, r2
 8008416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800841e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008422:	d10d      	bne.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3304      	adds	r3, #4
 8008428:	2102      	movs	r1, #2
 800842a:	4618      	mov	r0, r3
 800842c:	f000 f864 	bl	80084f8 <RCCEx_PLLSAI1_Config>
 8008430:	4603      	mov	r3, r0
 8008432:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008434:	7cfb      	ldrb	r3, [r7, #19]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d014      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
      {
        /* set overall return value */
        status = ret;
 800843a:	7cfb      	ldrb	r3, [r7, #19]
 800843c:	74bb      	strb	r3, [r7, #18]
 800843e:	e011      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008448:	d10c      	bne.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3320      	adds	r3, #32
 800844e:	2102      	movs	r1, #2
 8008450:	4618      	mov	r0, r3
 8008452:	f000 f9cd 	bl	80087f0 <RCCEx_PLLSAI2_Config>
 8008456:	4603      	mov	r3, r0
 8008458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800845a:	7cfb      	ldrb	r3, [r7, #19]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
      {
        /* set overall return value */
        status = ret;
 8008460:	7cfb      	ldrb	r3, [r7, #19]
 8008462:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d018      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008474:	2b00      	cmp	r3, #0
 8008476:	d009      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800847c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008480:	d004      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8008482:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8008486:	481a      	ldr	r0, [pc, #104]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8008488:	f7fc fc59 	bl	8004d3e <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800848c:	4b19      	ldr	r3, [pc, #100]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 800848e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008492:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800849a:	4916      	ldr	r1, [pc, #88]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 800849c:	4313      	orrs	r3, r2
 800849e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d01b      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00a      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084c2:	d004      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80084c4:	f240 21c2 	movw	r1, #706	; 0x2c2
 80084c8:	4809      	ldr	r0, [pc, #36]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 80084ca:	f7fc fc38 	bl	8004d3e <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084ce:	4b09      	ldr	r3, [pc, #36]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 80084d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084de:	4905      	ldr	r1, [pc, #20]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 80084e0:	4313      	orrs	r3, r2
 80084e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80084e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3718      	adds	r7, #24
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	0800ba84 	.word	0x0800ba84
 80084f4:	40021000 	.word	0x40021000

080084f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d010      	beq.n	8008530 <RCCEx_PLLSAI1_Config+0x38>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d00c      	beq.n	8008530 <RCCEx_PLLSAI1_Config+0x38>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b02      	cmp	r3, #2
 800851c:	d008      	beq.n	8008530 <RCCEx_PLLSAI1_Config+0x38>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b03      	cmp	r3, #3
 8008524:	d004      	beq.n	8008530 <RCCEx_PLLSAI1_Config+0x38>
 8008526:	f640 314f 	movw	r1, #2895	; 0xb4f
 800852a:	48a3      	ldr	r0, [pc, #652]	; (80087b8 <RCCEx_PLLSAI1_Config+0x2c0>)
 800852c:	f7fc fc07 	bl	8004d3e <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <RCCEx_PLLSAI1_Config+0x48>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	2b08      	cmp	r3, #8
 800853e:	d904      	bls.n	800854a <RCCEx_PLLSAI1_Config+0x52>
 8008540:	f44f 6135 	mov.w	r1, #2896	; 0xb50
 8008544:	489c      	ldr	r0, [pc, #624]	; (80087b8 <RCCEx_PLLSAI1_Config+0x2c0>)
 8008546:	f7fc fbfa 	bl	8004d3e <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	2b07      	cmp	r3, #7
 8008550:	d903      	bls.n	800855a <RCCEx_PLLSAI1_Config+0x62>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	2b56      	cmp	r3, #86	; 0x56
 8008558:	d904      	bls.n	8008564 <RCCEx_PLLSAI1_Config+0x6c>
 800855a:	f640 3151 	movw	r1, #2897	; 0xb51
 800855e:	4896      	ldr	r0, [pc, #600]	; (80087b8 <RCCEx_PLLSAI1_Config+0x2c0>)
 8008560:	f7fc fbed 	bl	8004d3e <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10b      	bne.n	8008588 <RCCEx_PLLSAI1_Config+0x90>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008578:	2b00      	cmp	r3, #0
 800857a:	d105      	bne.n	8008588 <RCCEx_PLLSAI1_Config+0x90>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008584:	2b00      	cmp	r3, #0
 8008586:	d007      	beq.n	8008598 <RCCEx_PLLSAI1_Config+0xa0>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d004      	beq.n	80085a2 <RCCEx_PLLSAI1_Config+0xaa>
 8008598:	f640 3152 	movw	r1, #2898	; 0xb52
 800859c:	4886      	ldr	r0, [pc, #536]	; (80087b8 <RCCEx_PLLSAI1_Config+0x2c0>)
 800859e:	f7fc fbce 	bl	8004d3e <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80085a2:	4b86      	ldr	r3, [pc, #536]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	f003 0303 	and.w	r3, r3, #3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d018      	beq.n	80085e0 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80085ae:	4b83      	ldr	r3, [pc, #524]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	f003 0203 	and.w	r2, r3, #3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d10d      	bne.n	80085da <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
       ||
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d009      	beq.n	80085da <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80085c6:	4b7d      	ldr	r3, [pc, #500]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	091b      	lsrs	r3, r3, #4
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	1c5a      	adds	r2, r3, #1
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
       ||
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d044      	beq.n	8008664 <RCCEx_PLLSAI1_Config+0x16c>
#endif
      )
    {
      status = HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	73fb      	strb	r3, [r7, #15]
 80085de:	e041      	b.n	8008664 <RCCEx_PLLSAI1_Config+0x16c>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d00c      	beq.n	8008602 <RCCEx_PLLSAI1_Config+0x10a>
 80085e8:	2b03      	cmp	r3, #3
 80085ea:	d013      	beq.n	8008614 <RCCEx_PLLSAI1_Config+0x11c>
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d120      	bne.n	8008632 <RCCEx_PLLSAI1_Config+0x13a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80085f0:	4b72      	ldr	r3, [pc, #456]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0302 	and.w	r3, r3, #2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d11d      	bne.n	8008638 <RCCEx_PLLSAI1_Config+0x140>
      {
        status = HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008600:	e01a      	b.n	8008638 <RCCEx_PLLSAI1_Config+0x140>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008602:	4b6e      	ldr	r3, [pc, #440]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800860a:	2b00      	cmp	r3, #0
 800860c:	d116      	bne.n	800863c <RCCEx_PLLSAI1_Config+0x144>
      {
        status = HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008612:	e013      	b.n	800863c <RCCEx_PLLSAI1_Config+0x144>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008614:	4b69      	ldr	r3, [pc, #420]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10f      	bne.n	8008640 <RCCEx_PLLSAI1_Config+0x148>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008620:	4b66      	ldr	r3, [pc, #408]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d109      	bne.n	8008640 <RCCEx_PLLSAI1_Config+0x148>
        {
          status = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008630:	e006      	b.n	8008640 <RCCEx_PLLSAI1_Config+0x148>
    default:
      status = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	73fb      	strb	r3, [r7, #15]
      break;
 8008636:	e004      	b.n	8008642 <RCCEx_PLLSAI1_Config+0x14a>
      break;
 8008638:	bf00      	nop
 800863a:	e002      	b.n	8008642 <RCCEx_PLLSAI1_Config+0x14a>
      break;
 800863c:	bf00      	nop
 800863e:	e000      	b.n	8008642 <RCCEx_PLLSAI1_Config+0x14a>
      break;
 8008640:	bf00      	nop
    }

    if(status == HAL_OK)
 8008642:	7bfb      	ldrb	r3, [r7, #15]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10d      	bne.n	8008664 <RCCEx_PLLSAI1_Config+0x16c>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008648:	4b5c      	ldr	r3, [pc, #368]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6819      	ldr	r1, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	3b01      	subs	r3, #1
 800865a:	011b      	lsls	r3, r3, #4
 800865c:	430b      	orrs	r3, r1
 800865e:	4957      	ldr	r1, [pc, #348]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 8008660:	4313      	orrs	r3, r2
 8008662:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	2b00      	cmp	r3, #0
 8008668:	f040 80ba 	bne.w	80087e0 <RCCEx_PLLSAI1_Config+0x2e8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800866c:	4b53      	ldr	r3, [pc, #332]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a52      	ldr	r2, [pc, #328]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 8008672:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008678:	f7fd fdd4 	bl	8006224 <HAL_GetTick>
 800867c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800867e:	e009      	b.n	8008694 <RCCEx_PLLSAI1_Config+0x19c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008680:	f7fd fdd0 	bl	8006224 <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	2b02      	cmp	r3, #2
 800868c:	d902      	bls.n	8008694 <RCCEx_PLLSAI1_Config+0x19c>
      {
        status = HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	73fb      	strb	r3, [r7, #15]
        break;
 8008692:	e005      	b.n	80086a0 <RCCEx_PLLSAI1_Config+0x1a8>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008694:	4b49      	ldr	r3, [pc, #292]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1ef      	bne.n	8008680 <RCCEx_PLLSAI1_Config+0x188>
      }
    }

    if(status == HAL_OK)
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f040 809c 	bne.w	80087e0 <RCCEx_PLLSAI1_Config+0x2e8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d11e      	bne.n	80086ec <RCCEx_PLLSAI1_Config+0x1f4>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	2b07      	cmp	r3, #7
 80086b4:	d008      	beq.n	80086c8 <RCCEx_PLLSAI1_Config+0x1d0>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	2b11      	cmp	r3, #17
 80086bc:	d004      	beq.n	80086c8 <RCCEx_PLLSAI1_Config+0x1d0>
 80086be:	f640 31a5 	movw	r1, #2981	; 0xba5
 80086c2:	483d      	ldr	r0, [pc, #244]	; (80087b8 <RCCEx_PLLSAI1_Config+0x2c0>)
 80086c4:	f7fc fb3b 	bl	8004d3e <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086c8:	4b3c      	ldr	r3, [pc, #240]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80086d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	6892      	ldr	r2, [r2, #8]
 80086d8:	0211      	lsls	r1, r2, #8
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	68d2      	ldr	r2, [r2, #12]
 80086de:	0912      	lsrs	r2, r2, #4
 80086e0:	0452      	lsls	r2, r2, #17
 80086e2:	430a      	orrs	r2, r1
 80086e4:	4935      	ldr	r1, [pc, #212]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	610b      	str	r3, [r1, #16]
 80086ea:	e051      	b.n	8008790 <RCCEx_PLLSAI1_Config+0x298>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d127      	bne.n	8008742 <RCCEx_PLLSAI1_Config+0x24a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d010      	beq.n	800871c <RCCEx_PLLSAI1_Config+0x224>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	2b04      	cmp	r3, #4
 8008700:	d00c      	beq.n	800871c <RCCEx_PLLSAI1_Config+0x224>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	2b06      	cmp	r3, #6
 8008708:	d008      	beq.n	800871c <RCCEx_PLLSAI1_Config+0x224>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	2b08      	cmp	r3, #8
 8008710:	d004      	beq.n	800871c <RCCEx_PLLSAI1_Config+0x224>
 8008712:	f640 31c9 	movw	r1, #3017	; 0xbc9
 8008716:	4828      	ldr	r0, [pc, #160]	; (80087b8 <RCCEx_PLLSAI1_Config+0x2c0>)
 8008718:	f7fc fb11 	bl	8004d3e <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800871c:	4b27      	ldr	r3, [pc, #156]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008724:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	6892      	ldr	r2, [r2, #8]
 800872c:	0211      	lsls	r1, r2, #8
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	6912      	ldr	r2, [r2, #16]
 8008732:	0852      	lsrs	r2, r2, #1
 8008734:	3a01      	subs	r2, #1
 8008736:	0552      	lsls	r2, r2, #21
 8008738:	430a      	orrs	r2, r1
 800873a:	4920      	ldr	r1, [pc, #128]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 800873c:	4313      	orrs	r3, r2
 800873e:	610b      	str	r3, [r1, #16]
 8008740:	e026      	b.n	8008790 <RCCEx_PLLSAI1_Config+0x298>
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	2b02      	cmp	r3, #2
 8008748:	d010      	beq.n	800876c <RCCEx_PLLSAI1_Config+0x274>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	2b04      	cmp	r3, #4
 8008750:	d00c      	beq.n	800876c <RCCEx_PLLSAI1_Config+0x274>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	2b06      	cmp	r3, #6
 8008758:	d008      	beq.n	800876c <RCCEx_PLLSAI1_Config+0x274>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	2b08      	cmp	r3, #8
 8008760:	d004      	beq.n	800876c <RCCEx_PLLSAI1_Config+0x274>
 8008762:	f640 31db 	movw	r1, #3035	; 0xbdb
 8008766:	4814      	ldr	r0, [pc, #80]	; (80087b8 <RCCEx_PLLSAI1_Config+0x2c0>)
 8008768:	f7fc fae9 	bl	8004d3e <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800876c:	4b13      	ldr	r3, [pc, #76]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008774:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6892      	ldr	r2, [r2, #8]
 800877c:	0211      	lsls	r1, r2, #8
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	6952      	ldr	r2, [r2, #20]
 8008782:	0852      	lsrs	r2, r2, #1
 8008784:	3a01      	subs	r2, #1
 8008786:	0652      	lsls	r2, r2, #25
 8008788:	430a      	orrs	r2, r1
 800878a:	490c      	ldr	r1, [pc, #48]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 800878c:	4313      	orrs	r3, r2
 800878e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008790:	4b0a      	ldr	r3, [pc, #40]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a09      	ldr	r2, [pc, #36]	; (80087bc <RCCEx_PLLSAI1_Config+0x2c4>)
 8008796:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800879a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800879c:	f7fd fd42 	bl	8006224 <HAL_GetTick>
 80087a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80087a2:	e00d      	b.n	80087c0 <RCCEx_PLLSAI1_Config+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80087a4:	f7fd fd3e 	bl	8006224 <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d906      	bls.n	80087c0 <RCCEx_PLLSAI1_Config+0x2c8>
        {
          status = HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	73fb      	strb	r3, [r7, #15]
          break;
 80087b6:	e009      	b.n	80087cc <RCCEx_PLLSAI1_Config+0x2d4>
 80087b8:	0800ba84 	.word	0x0800ba84
 80087bc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80087c0:	4b0a      	ldr	r3, [pc, #40]	; (80087ec <RCCEx_PLLSAI1_Config+0x2f4>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d0eb      	beq.n	80087a4 <RCCEx_PLLSAI1_Config+0x2ac>
        }
      }

      if(status == HAL_OK)
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d106      	bne.n	80087e0 <RCCEx_PLLSAI1_Config+0x2e8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80087d2:	4b06      	ldr	r3, [pc, #24]	; (80087ec <RCCEx_PLLSAI1_Config+0x2f4>)
 80087d4:	691a      	ldr	r2, [r3, #16]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	4904      	ldr	r1, [pc, #16]	; (80087ec <RCCEx_PLLSAI1_Config+0x2f4>)
 80087dc:	4313      	orrs	r3, r2
 80087de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	40021000 	.word	0x40021000

080087f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d010      	beq.n	8008828 <RCCEx_PLLSAI2_Config+0x38>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d00c      	beq.n	8008828 <RCCEx_PLLSAI2_Config+0x38>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b02      	cmp	r3, #2
 8008814:	d008      	beq.n	8008828 <RCCEx_PLLSAI2_Config+0x38>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b03      	cmp	r3, #3
 800881c:	d004      	beq.n	8008828 <RCCEx_PLLSAI2_Config+0x38>
 800881e:	f640 411c 	movw	r1, #3100	; 0xc1c
 8008822:	4895      	ldr	r0, [pc, #596]	; (8008a78 <RCCEx_PLLSAI2_Config+0x288>)
 8008824:	f7fc fa8b 	bl	8004d3e <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <RCCEx_PLLSAI2_Config+0x48>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	2b08      	cmp	r3, #8
 8008836:	d904      	bls.n	8008842 <RCCEx_PLLSAI2_Config+0x52>
 8008838:	f640 411d 	movw	r1, #3101	; 0xc1d
 800883c:	488e      	ldr	r0, [pc, #568]	; (8008a78 <RCCEx_PLLSAI2_Config+0x288>)
 800883e:	f7fc fa7e 	bl	8004d3e <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	2b07      	cmp	r3, #7
 8008848:	d903      	bls.n	8008852 <RCCEx_PLLSAI2_Config+0x62>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	2b56      	cmp	r3, #86	; 0x56
 8008850:	d904      	bls.n	800885c <RCCEx_PLLSAI2_Config+0x6c>
 8008852:	f640 411e 	movw	r1, #3102	; 0xc1e
 8008856:	4888      	ldr	r0, [pc, #544]	; (8008a78 <RCCEx_PLLSAI2_Config+0x288>)
 8008858:	f7fc fa71 	bl	8004d3e <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d105      	bne.n	8008874 <RCCEx_PLLSAI2_Config+0x84>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d007      	beq.n	8008884 <RCCEx_PLLSAI2_Config+0x94>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800887c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d004      	beq.n	800888e <RCCEx_PLLSAI2_Config+0x9e>
 8008884:	f640 411f 	movw	r1, #3103	; 0xc1f
 8008888:	487b      	ldr	r0, [pc, #492]	; (8008a78 <RCCEx_PLLSAI2_Config+0x288>)
 800888a:	f7fc fa58 	bl	8004d3e <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800888e:	4b7b      	ldr	r3, [pc, #492]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d018      	beq.n	80088cc <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800889a:	4b78      	ldr	r3, [pc, #480]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f003 0203 	and.w	r2, r3, #3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d10d      	bne.n	80088c6 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
       ||
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d009      	beq.n	80088c6 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80088b2:	4b72      	ldr	r3, [pc, #456]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	091b      	lsrs	r3, r3, #4
 80088b8:	f003 0307 	and.w	r3, r3, #7
 80088bc:	1c5a      	adds	r2, r3, #1
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
       ||
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d044      	beq.n	8008950 <RCCEx_PLLSAI2_Config+0x160>
#endif
      )
    {
      status = HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	73fb      	strb	r3, [r7, #15]
 80088ca:	e041      	b.n	8008950 <RCCEx_PLLSAI2_Config+0x160>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d00c      	beq.n	80088ee <RCCEx_PLLSAI2_Config+0xfe>
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d013      	beq.n	8008900 <RCCEx_PLLSAI2_Config+0x110>
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d120      	bne.n	800891e <RCCEx_PLLSAI2_Config+0x12e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80088dc:	4b67      	ldr	r3, [pc, #412]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d11d      	bne.n	8008924 <RCCEx_PLLSAI2_Config+0x134>
      {
        status = HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088ec:	e01a      	b.n	8008924 <RCCEx_PLLSAI2_Config+0x134>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80088ee:	4b63      	ldr	r3, [pc, #396]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d116      	bne.n	8008928 <RCCEx_PLLSAI2_Config+0x138>
      {
        status = HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088fe:	e013      	b.n	8008928 <RCCEx_PLLSAI2_Config+0x138>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008900:	4b5e      	ldr	r3, [pc, #376]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10f      	bne.n	800892c <RCCEx_PLLSAI2_Config+0x13c>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800890c:	4b5b      	ldr	r3, [pc, #364]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d109      	bne.n	800892c <RCCEx_PLLSAI2_Config+0x13c>
        {
          status = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800891c:	e006      	b.n	800892c <RCCEx_PLLSAI2_Config+0x13c>
    default:
      status = HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	73fb      	strb	r3, [r7, #15]
      break;
 8008922:	e004      	b.n	800892e <RCCEx_PLLSAI2_Config+0x13e>
      break;
 8008924:	bf00      	nop
 8008926:	e002      	b.n	800892e <RCCEx_PLLSAI2_Config+0x13e>
      break;
 8008928:	bf00      	nop
 800892a:	e000      	b.n	800892e <RCCEx_PLLSAI2_Config+0x13e>
      break;
 800892c:	bf00      	nop
    }

    if(status == HAL_OK)
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10d      	bne.n	8008950 <RCCEx_PLLSAI2_Config+0x160>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008934:	4b51      	ldr	r3, [pc, #324]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6819      	ldr	r1, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	3b01      	subs	r3, #1
 8008946:	011b      	lsls	r3, r3, #4
 8008948:	430b      	orrs	r3, r1
 800894a:	494c      	ldr	r1, [pc, #304]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 800894c:	4313      	orrs	r3, r2
 800894e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	2b00      	cmp	r3, #0
 8008954:	f040 808a 	bne.w	8008a6c <RCCEx_PLLSAI2_Config+0x27c>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008958:	4b48      	ldr	r3, [pc, #288]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a47      	ldr	r2, [pc, #284]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 800895e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008964:	f7fd fc5e 	bl	8006224 <HAL_GetTick>
 8008968:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800896a:	e009      	b.n	8008980 <RCCEx_PLLSAI2_Config+0x190>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800896c:	f7fd fc5a 	bl	8006224 <HAL_GetTick>
 8008970:	4602      	mov	r2, r0
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	2b02      	cmp	r3, #2
 8008978:	d902      	bls.n	8008980 <RCCEx_PLLSAI2_Config+0x190>
      {
        status = HAL_TIMEOUT;
 800897a:	2303      	movs	r3, #3
 800897c:	73fb      	strb	r3, [r7, #15]
        break;
 800897e:	e005      	b.n	800898c <RCCEx_PLLSAI2_Config+0x19c>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008980:	4b3e      	ldr	r3, [pc, #248]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1ef      	bne.n	800896c <RCCEx_PLLSAI2_Config+0x17c>
      }
    }

    if(status == HAL_OK)
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d16c      	bne.n	8008a6c <RCCEx_PLLSAI2_Config+0x27c>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d11e      	bne.n	80089d6 <RCCEx_PLLSAI2_Config+0x1e6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	2b07      	cmp	r3, #7
 800899e:	d008      	beq.n	80089b2 <RCCEx_PLLSAI2_Config+0x1c2>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	2b11      	cmp	r3, #17
 80089a6:	d004      	beq.n	80089b2 <RCCEx_PLLSAI2_Config+0x1c2>
 80089a8:	f640 4172 	movw	r1, #3186	; 0xc72
 80089ac:	4832      	ldr	r0, [pc, #200]	; (8008a78 <RCCEx_PLLSAI2_Config+0x288>)
 80089ae:	f7fc f9c6 	bl	8004d3e <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80089b2:	4b32      	ldr	r3, [pc, #200]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80089ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	6892      	ldr	r2, [r2, #8]
 80089c2:	0211      	lsls	r1, r2, #8
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	68d2      	ldr	r2, [r2, #12]
 80089c8:	0912      	lsrs	r2, r2, #4
 80089ca:	0452      	lsls	r2, r2, #17
 80089cc:	430a      	orrs	r2, r1
 80089ce:	492b      	ldr	r1, [pc, #172]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	614b      	str	r3, [r1, #20]
 80089d4:	e026      	b.n	8008a24 <RCCEx_PLLSAI2_Config+0x234>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d010      	beq.n	8008a00 <RCCEx_PLLSAI2_Config+0x210>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	d00c      	beq.n	8008a00 <RCCEx_PLLSAI2_Config+0x210>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	2b06      	cmp	r3, #6
 80089ec:	d008      	beq.n	8008a00 <RCCEx_PLLSAI2_Config+0x210>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	2b08      	cmp	r3, #8
 80089f4:	d004      	beq.n	8008a00 <RCCEx_PLLSAI2_Config+0x210>
 80089f6:	f640 41aa 	movw	r1, #3242	; 0xcaa
 80089fa:	481f      	ldr	r0, [pc, #124]	; (8008a78 <RCCEx_PLLSAI2_Config+0x288>)
 80089fc:	f7fc f99f 	bl	8004d3e <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a00:	4b1e      	ldr	r3, [pc, #120]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 8008a02:	695b      	ldr	r3, [r3, #20]
 8008a04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008a08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	6892      	ldr	r2, [r2, #8]
 8008a10:	0211      	lsls	r1, r2, #8
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	6912      	ldr	r2, [r2, #16]
 8008a16:	0852      	lsrs	r2, r2, #1
 8008a18:	3a01      	subs	r2, #1
 8008a1a:	0652      	lsls	r2, r2, #25
 8008a1c:	430a      	orrs	r2, r1
 8008a1e:	4917      	ldr	r1, [pc, #92]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008a24:	4b15      	ldr	r3, [pc, #84]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a14      	ldr	r2, [pc, #80]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 8008a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a30:	f7fd fbf8 	bl	8006224 <HAL_GetTick>
 8008a34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a36:	e009      	b.n	8008a4c <RCCEx_PLLSAI2_Config+0x25c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008a38:	f7fd fbf4 	bl	8006224 <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d902      	bls.n	8008a4c <RCCEx_PLLSAI2_Config+0x25c>
        {
          status = HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	73fb      	strb	r3, [r7, #15]
          break;
 8008a4a:	e005      	b.n	8008a58 <RCCEx_PLLSAI2_Config+0x268>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a4c:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d0ef      	beq.n	8008a38 <RCCEx_PLLSAI2_Config+0x248>
        }
      }

      if(status == HAL_OK)
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d106      	bne.n	8008a6c <RCCEx_PLLSAI2_Config+0x27c>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008a5e:	4b07      	ldr	r3, [pc, #28]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 8008a60:	695a      	ldr	r2, [r3, #20]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	4905      	ldr	r1, [pc, #20]	; (8008a7c <RCCEx_PLLSAI2_Config+0x28c>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	0800ba84 	.word	0x0800ba84
 8008a7c:	40021000 	.word	0x40021000

08008a80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e17c      	b.n	8008d8c <HAL_SPI_Init+0x30c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a9b      	ldr	r2, [pc, #620]	; (8008d04 <HAL_SPI_Init+0x284>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d00e      	beq.n	8008aba <HAL_SPI_Init+0x3a>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a99      	ldr	r2, [pc, #612]	; (8008d08 <HAL_SPI_Init+0x288>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d009      	beq.n	8008aba <HAL_SPI_Init+0x3a>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a98      	ldr	r2, [pc, #608]	; (8008d0c <HAL_SPI_Init+0x28c>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d004      	beq.n	8008aba <HAL_SPI_Init+0x3a>
 8008ab0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8008ab4:	4896      	ldr	r0, [pc, #600]	; (8008d10 <HAL_SPI_Init+0x290>)
 8008ab6:	f7fc f942 	bl	8004d3e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d009      	beq.n	8008ad6 <HAL_SPI_Init+0x56>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aca:	d004      	beq.n	8008ad6 <HAL_SPI_Init+0x56>
 8008acc:	f240 1145 	movw	r1, #325	; 0x145
 8008ad0:	488f      	ldr	r0, [pc, #572]	; (8008d10 <HAL_SPI_Init+0x290>)
 8008ad2:	f7fc f934 	bl	8004d3e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00e      	beq.n	8008afc <HAL_SPI_Init+0x7c>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ae6:	d009      	beq.n	8008afc <HAL_SPI_Init+0x7c>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008af0:	d004      	beq.n	8008afc <HAL_SPI_Init+0x7c>
 8008af2:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8008af6:	4886      	ldr	r0, [pc, #536]	; (8008d10 <HAL_SPI_Init+0x290>)
 8008af8:	f7fc f921 	bl	8004d3e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008b04:	d040      	beq.n	8008b88 <HAL_SPI_Init+0x108>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008b0e:	d03b      	beq.n	8008b88 <HAL_SPI_Init+0x108>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8008b18:	d036      	beq.n	8008b88 <HAL_SPI_Init+0x108>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b22:	d031      	beq.n	8008b88 <HAL_SPI_Init+0x108>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8008b2c:	d02c      	beq.n	8008b88 <HAL_SPI_Init+0x108>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008b36:	d027      	beq.n	8008b88 <HAL_SPI_Init+0x108>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8008b40:	d022      	beq.n	8008b88 <HAL_SPI_Init+0x108>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b4a:	d01d      	beq.n	8008b88 <HAL_SPI_Init+0x108>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b54:	d018      	beq.n	8008b88 <HAL_SPI_Init+0x108>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008b5e:	d013      	beq.n	8008b88 <HAL_SPI_Init+0x108>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008b68:	d00e      	beq.n	8008b88 <HAL_SPI_Init+0x108>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b72:	d009      	beq.n	8008b88 <HAL_SPI_Init+0x108>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b7c:	d004      	beq.n	8008b88 <HAL_SPI_Init+0x108>
 8008b7e:	f240 1147 	movw	r1, #327	; 0x147
 8008b82:	4863      	ldr	r0, [pc, #396]	; (8008d10 <HAL_SPI_Init+0x290>)
 8008b84:	f7fc f8db 	bl	8004d3e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b90:	d00d      	beq.n	8008bae <HAL_SPI_Init+0x12e>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d009      	beq.n	8008bae <HAL_SPI_Init+0x12e>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ba2:	d004      	beq.n	8008bae <HAL_SPI_Init+0x12e>
 8008ba4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008ba8:	4859      	ldr	r0, [pc, #356]	; (8008d10 <HAL_SPI_Init+0x290>)
 8008baa:	f7fc f8c8 	bl	8004d3e <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb2:	2b08      	cmp	r3, #8
 8008bb4:	d008      	beq.n	8008bc8 <HAL_SPI_Init+0x148>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d004      	beq.n	8008bc8 <HAL_SPI_Init+0x148>
 8008bbe:	f240 1149 	movw	r1, #329	; 0x149
 8008bc2:	4853      	ldr	r0, [pc, #332]	; (8008d10 <HAL_SPI_Init+0x290>)
 8008bc4:	f7fc f8bb 	bl	8004d3e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d020      	beq.n	8008c12 <HAL_SPI_Init+0x192>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	69db      	ldr	r3, [r3, #28]
 8008bd4:	2b08      	cmp	r3, #8
 8008bd6:	d01c      	beq.n	8008c12 <HAL_SPI_Init+0x192>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	69db      	ldr	r3, [r3, #28]
 8008bdc:	2b10      	cmp	r3, #16
 8008bde:	d018      	beq.n	8008c12 <HAL_SPI_Init+0x192>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	69db      	ldr	r3, [r3, #28]
 8008be4:	2b18      	cmp	r3, #24
 8008be6:	d014      	beq.n	8008c12 <HAL_SPI_Init+0x192>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	69db      	ldr	r3, [r3, #28]
 8008bec:	2b20      	cmp	r3, #32
 8008bee:	d010      	beq.n	8008c12 <HAL_SPI_Init+0x192>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	69db      	ldr	r3, [r3, #28]
 8008bf4:	2b28      	cmp	r3, #40	; 0x28
 8008bf6:	d00c      	beq.n	8008c12 <HAL_SPI_Init+0x192>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	2b30      	cmp	r3, #48	; 0x30
 8008bfe:	d008      	beq.n	8008c12 <HAL_SPI_Init+0x192>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	69db      	ldr	r3, [r3, #28]
 8008c04:	2b38      	cmp	r3, #56	; 0x38
 8008c06:	d004      	beq.n	8008c12 <HAL_SPI_Init+0x192>
 8008c08:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008c0c:	4840      	ldr	r0, [pc, #256]	; (8008d10 <HAL_SPI_Init+0x290>)
 8008c0e:	f7fc f896 	bl	8004d3e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d008      	beq.n	8008c2c <HAL_SPI_Init+0x1ac>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	2b80      	cmp	r3, #128	; 0x80
 8008c20:	d004      	beq.n	8008c2c <HAL_SPI_Init+0x1ac>
 8008c22:	f240 114b 	movw	r1, #331	; 0x14b
 8008c26:	483a      	ldr	r0, [pc, #232]	; (8008d10 <HAL_SPI_Init+0x290>)
 8008c28:	f7fc f889 	bl	8004d3e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d008      	beq.n	8008c46 <HAL_SPI_Init+0x1c6>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	2b10      	cmp	r3, #16
 8008c3a:	d004      	beq.n	8008c46 <HAL_SPI_Init+0x1c6>
 8008c3c:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8008c40:	4833      	ldr	r0, [pc, #204]	; (8008d10 <HAL_SPI_Init+0x290>)
 8008c42:	f7fc f87c 	bl	8004d3e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d119      	bne.n	8008c82 <HAL_SPI_Init+0x202>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d008      	beq.n	8008c68 <HAL_SPI_Init+0x1e8>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d004      	beq.n	8008c68 <HAL_SPI_Init+0x1e8>
 8008c5e:	f240 114f 	movw	r1, #335	; 0x14f
 8008c62:	482b      	ldr	r0, [pc, #172]	; (8008d10 <HAL_SPI_Init+0x290>)
 8008c64:	f7fc f86b 	bl	8004d3e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d008      	beq.n	8008c82 <HAL_SPI_Init+0x202>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	695b      	ldr	r3, [r3, #20]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d004      	beq.n	8008c82 <HAL_SPI_Init+0x202>
 8008c78:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8008c7c:	4824      	ldr	r0, [pc, #144]	; (8008d10 <HAL_SPI_Init+0x290>)
 8008c7e:	f7fc f85e 	bl	8004d3e <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d106      	bne.n	8008ca2 <HAL_SPI_Init+0x222>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7fd f8cd 	bl	8005e3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cb8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cc2:	d902      	bls.n	8008cca <HAL_SPI_Init+0x24a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	e002      	b.n	8008cd0 <HAL_SPI_Init+0x250>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008cd8:	d007      	beq.n	8008cea <HAL_SPI_Init+0x26a>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ce2:	d002      	beq.n	8008cea <HAL_SPI_Init+0x26a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d113      	bne.n	8008d1a <HAL_SPI_Init+0x29a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cfa:	d90b      	bls.n	8008d14 <HAL_SPI_Init+0x294>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	631a      	str	r2, [r3, #48]	; 0x30
 8008d02:	e00a      	b.n	8008d1a <HAL_SPI_Init+0x29a>
 8008d04:	40013000 	.word	0x40013000
 8008d08:	40003800 	.word	0x40003800
 8008d0c:	40003c00 	.word	0x40003c00
 8008d10:	0800bac0 	.word	0x0800bac0
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	431a      	orrs	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	431a      	orrs	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	431a      	orrs	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d38:	431a      	orrs	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	ea42 0103 	orr.w	r1, r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	430a      	orrs	r2, r1
 8008d52:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	0c1b      	lsrs	r3, r3, #16
 8008d5a:	f003 0204 	and.w	r2, r3, #4
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d62:	431a      	orrs	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	ea42 0103 	orr.w	r1, r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	430a      	orrs	r2, r1
 8008d7a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b08a      	sub	sp, #40	; 0x28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
 8008da0:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008da2:	2301      	movs	r3, #1
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d004      	beq.n	8008dbe <HAL_SPI_TransmitReceive+0x2a>
 8008db4:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8008db8:	4895      	ldr	r0, [pc, #596]	; (8009010 <HAL_SPI_TransmitReceive+0x27c>)
 8008dba:	f7fb ffc0 	bl	8004d3e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d101      	bne.n	8008dcc <HAL_SPI_TransmitReceive+0x38>
 8008dc8:	2302      	movs	r3, #2
 8008dca:	e1fd      	b.n	80091c8 <HAL_SPI_TransmitReceive+0x434>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008dd4:	f7fd fa26 	bl	8006224 <HAL_GetTick>
 8008dd8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008de0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008de8:	887b      	ldrh	r3, [r7, #2]
 8008dea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008dec:	887b      	ldrh	r3, [r7, #2]
 8008dee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008df0:	7efb      	ldrb	r3, [r7, #27]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d00e      	beq.n	8008e14 <HAL_SPI_TransmitReceive+0x80>
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dfc:	d106      	bne.n	8008e0c <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d102      	bne.n	8008e0c <HAL_SPI_TransmitReceive+0x78>
 8008e06:	7efb      	ldrb	r3, [r7, #27]
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	d003      	beq.n	8008e14 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008e12:	e1cf      	b.n	80091b4 <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d005      	beq.n	8008e26 <HAL_SPI_TransmitReceive+0x92>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <HAL_SPI_TransmitReceive+0x92>
 8008e20:	887b      	ldrh	r3, [r7, #2]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d103      	bne.n	8008e2e <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008e2c:	e1c2      	b.n	80091b4 <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	d003      	beq.n	8008e42 <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2205      	movs	r2, #5
 8008e3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	887a      	ldrh	r2, [r7, #2]
 8008e52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	887a      	ldrh	r2, [r7, #2]
 8008e5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	887a      	ldrh	r2, [r7, #2]
 8008e68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	887a      	ldrh	r2, [r7, #2]
 8008e6e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e84:	d802      	bhi.n	8008e8c <HAL_SPI_TransmitReceive+0xf8>
 8008e86:	8a3b      	ldrh	r3, [r7, #16]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d908      	bls.n	8008e9e <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e9a:	605a      	str	r2, [r3, #4]
 8008e9c:	e007      	b.n	8008eae <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008eac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb8:	2b40      	cmp	r3, #64	; 0x40
 8008eba:	d007      	beq.n	8008ecc <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ed4:	d97c      	bls.n	8008fd0 <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <HAL_SPI_TransmitReceive+0x150>
 8008ede:	8a7b      	ldrh	r3, [r7, #18]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d169      	bne.n	8008fb8 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee8:	881a      	ldrh	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef4:	1c9a      	adds	r2, r3, #2
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	3b01      	subs	r3, #1
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f08:	e056      	b.n	8008fb8 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f003 0302 	and.w	r3, r3, #2
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d11b      	bne.n	8008f50 <HAL_SPI_TransmitReceive+0x1bc>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d016      	beq.n	8008f50 <HAL_SPI_TransmitReceive+0x1bc>
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d113      	bne.n	8008f50 <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	881a      	ldrh	r2, [r3, #0]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	1c9a      	adds	r2, r3, #2
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	3b01      	subs	r3, #1
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d11c      	bne.n	8008f98 <HAL_SPI_TransmitReceive+0x204>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d016      	beq.n	8008f98 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68da      	ldr	r2, [r3, #12]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f74:	b292      	uxth	r2, r2
 8008f76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7c:	1c9a      	adds	r2, r3, #2
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f94:	2301      	movs	r3, #1
 8008f96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f98:	f7fd f944 	bl	8006224 <HAL_GetTick>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d807      	bhi.n	8008fb8 <HAL_SPI_TransmitReceive+0x224>
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fae:	d003      	beq.n	8008fb8 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008fb6:	e0fd      	b.n	80091b4 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1a3      	bne.n	8008f0a <HAL_SPI_TransmitReceive+0x176>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d19d      	bne.n	8008f0a <HAL_SPI_TransmitReceive+0x176>
 8008fce:	e0e1      	b.n	8009194 <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <HAL_SPI_TransmitReceive+0x24c>
 8008fd8:	8a7b      	ldrh	r3, [r7, #18]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	f040 80cd 	bne.w	800917a <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d914      	bls.n	8009014 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fee:	881a      	ldrh	r2, [r3, #0]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffa:	1c9a      	adds	r2, r3, #2
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009004:	b29b      	uxth	r3, r3
 8009006:	3b02      	subs	r3, #2
 8009008:	b29a      	uxth	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800900e:	e0b4      	b.n	800917a <HAL_SPI_TransmitReceive+0x3e6>
 8009010:	0800bac0 	.word	0x0800bac0
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	330c      	adds	r3, #12
 800901e:	7812      	ldrb	r2, [r2, #0]
 8009020:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009030:	b29b      	uxth	r3, r3
 8009032:	3b01      	subs	r3, #1
 8009034:	b29a      	uxth	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800903a:	e09e      	b.n	800917a <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	f003 0302 	and.w	r3, r3, #2
 8009046:	2b02      	cmp	r3, #2
 8009048:	d134      	bne.n	80090b4 <HAL_SPI_TransmitReceive+0x320>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800904e:	b29b      	uxth	r3, r3
 8009050:	2b00      	cmp	r3, #0
 8009052:	d02f      	beq.n	80090b4 <HAL_SPI_TransmitReceive+0x320>
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	2b01      	cmp	r3, #1
 8009058:	d12c      	bne.n	80090b4 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800905e:	b29b      	uxth	r3, r3
 8009060:	2b01      	cmp	r3, #1
 8009062:	d912      	bls.n	800908a <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009068:	881a      	ldrh	r2, [r3, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009074:	1c9a      	adds	r2, r3, #2
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800907e:	b29b      	uxth	r3, r3
 8009080:	3b02      	subs	r3, #2
 8009082:	b29a      	uxth	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009088:	e012      	b.n	80090b0 <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	330c      	adds	r3, #12
 8009094:	7812      	ldrb	r2, [r2, #0]
 8009096:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	3b01      	subs	r3, #1
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090b0:	2300      	movs	r3, #0
 80090b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d148      	bne.n	8009154 <HAL_SPI_TransmitReceive+0x3c0>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d042      	beq.n	8009154 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d923      	bls.n	8009122 <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68da      	ldr	r2, [r3, #12]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e4:	b292      	uxth	r2, r2
 80090e6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ec:	1c9a      	adds	r2, r3, #2
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	3b02      	subs	r3, #2
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800910a:	b29b      	uxth	r3, r3
 800910c:	2b01      	cmp	r3, #1
 800910e:	d81f      	bhi.n	8009150 <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800911e:	605a      	str	r2, [r3, #4]
 8009120:	e016      	b.n	8009150 <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f103 020c 	add.w	r2, r3, #12
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	7812      	ldrb	r2, [r2, #0]
 8009130:	b2d2      	uxtb	r2, r2
 8009132:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009138:	1c5a      	adds	r2, r3, #1
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009144:	b29b      	uxth	r3, r3
 8009146:	3b01      	subs	r3, #1
 8009148:	b29a      	uxth	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009150:	2301      	movs	r3, #1
 8009152:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009154:	f7fd f866 	bl	8006224 <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009160:	429a      	cmp	r2, r3
 8009162:	d803      	bhi.n	800916c <HAL_SPI_TransmitReceive+0x3d8>
 8009164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800916a:	d102      	bne.n	8009172 <HAL_SPI_TransmitReceive+0x3de>
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	2b00      	cmp	r3, #0
 8009170:	d103      	bne.n	800917a <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009178:	e01c      	b.n	80091b4 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800917e:	b29b      	uxth	r3, r3
 8009180:	2b00      	cmp	r3, #0
 8009182:	f47f af5b 	bne.w	800903c <HAL_SPI_TransmitReceive+0x2a8>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800918c:	b29b      	uxth	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	f47f af54 	bne.w	800903c <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009194:	69fa      	ldr	r2, [r7, #28]
 8009196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 f8f0 	bl	800937e <SPI_EndRxTxTransaction>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d006      	beq.n	80091b2 <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2220      	movs	r2, #32
 80091ae:	661a      	str	r2, [r3, #96]	; 0x60
 80091b0:	e000      	b.n	80091b4 <HAL_SPI_TransmitReceive+0x420>
  }

error :
 80091b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80091c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3728      	adds	r7, #40	; 0x28
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	603b      	str	r3, [r7, #0]
 80091dc:	4613      	mov	r3, r2
 80091de:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091e0:	e04c      	b.n	800927c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e8:	d048      	beq.n	800927c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80091ea:	f7fd f81b 	bl	8006224 <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	683a      	ldr	r2, [r7, #0]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d902      	bls.n	8009200 <SPI_WaitFlagStateUntilTimeout+0x30>
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d13d      	bne.n	800927c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800920e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009218:	d111      	bne.n	800923e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009222:	d004      	beq.n	800922e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800922c:	d107      	bne.n	800923e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800923c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009246:	d10f      	bne.n	8009268 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009266:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009278:	2303      	movs	r3, #3
 800927a:	e00f      	b.n	800929c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689a      	ldr	r2, [r3, #8]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	4013      	ands	r3, r2
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	429a      	cmp	r2, r3
 800928a:	bf0c      	ite	eq
 800928c:	2301      	moveq	r3, #1
 800928e:	2300      	movne	r3, #0
 8009290:	b2db      	uxtb	r3, r3
 8009292:	461a      	mov	r2, r3
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	429a      	cmp	r2, r3
 8009298:	d1a3      	bne.n	80091e2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
 80092b0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80092b2:	e057      	b.n	8009364 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80092ba:	d106      	bne.n	80092ca <SPI_WaitFifoStateUntilTimeout+0x26>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d103      	bne.n	80092ca <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	330c      	adds	r3, #12
 80092c8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d0:	d048      	beq.n	8009364 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80092d2:	f7fc ffa7 	bl	8006224 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d902      	bls.n	80092e8 <SPI_WaitFifoStateUntilTimeout+0x44>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d13d      	bne.n	8009364 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009300:	d111      	bne.n	8009326 <SPI_WaitFifoStateUntilTimeout+0x82>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800930a:	d004      	beq.n	8009316 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009314:	d107      	bne.n	8009326 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009324:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800932e:	d10f      	bne.n	8009350 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800933e:	601a      	str	r2, [r3, #0]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800934e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009360:	2303      	movs	r3, #3
 8009362:	e008      	b.n	8009376 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689a      	ldr	r2, [r3, #8]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	4013      	ands	r3, r2
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	429a      	cmp	r2, r3
 8009372:	d19f      	bne.n	80092b4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b086      	sub	sp, #24
 8009382:	af02      	add	r7, sp, #8
 8009384:	60f8      	str	r0, [r7, #12]
 8009386:	60b9      	str	r1, [r7, #8]
 8009388:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	2200      	movs	r2, #0
 8009392:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f7ff ff84 	bl	80092a4 <SPI_WaitFifoStateUntilTimeout>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d007      	beq.n	80093b2 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093a6:	f043 0220 	orr.w	r2, r3, #32
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e027      	b.n	8009402 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2200      	movs	r2, #0
 80093ba:	2180      	movs	r1, #128	; 0x80
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f7ff ff07 	bl	80091d0 <SPI_WaitFlagStateUntilTimeout>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d007      	beq.n	80093d8 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093cc:	f043 0220 	orr.w	r2, r3, #32
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e014      	b.n	8009402 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	2200      	movs	r2, #0
 80093e0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f7ff ff5d 	bl	80092a4 <SPI_WaitFifoStateUntilTimeout>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d007      	beq.n	8009400 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093f4:	f043 0220 	orr.w	r2, r3, #32
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e000      	b.n	8009402 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
	...

0800940c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a2d      	ldr	r2, [pc, #180]	; (80094d0 <HAL_TIM_Base_Start_IT+0xc4>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d036      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x80>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009426:	d031      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x80>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a29      	ldr	r2, [pc, #164]	; (80094d4 <HAL_TIM_Base_Start_IT+0xc8>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d02c      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x80>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a28      	ldr	r2, [pc, #160]	; (80094d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d027      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x80>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a26      	ldr	r2, [pc, #152]	; (80094dc <HAL_TIM_Base_Start_IT+0xd0>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d022      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x80>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a25      	ldr	r2, [pc, #148]	; (80094e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d01d      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x80>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a23      	ldr	r2, [pc, #140]	; (80094e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d018      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x80>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a22      	ldr	r2, [pc, #136]	; (80094e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d013      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x80>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a20      	ldr	r2, [pc, #128]	; (80094ec <HAL_TIM_Base_Start_IT+0xe0>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d00e      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x80>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a1f      	ldr	r2, [pc, #124]	; (80094f0 <HAL_TIM_Base_Start_IT+0xe4>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d009      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x80>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a1d      	ldr	r2, [pc, #116]	; (80094f4 <HAL_TIM_Base_Start_IT+0xe8>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d004      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x80>
 8009482:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8009486:	481c      	ldr	r0, [pc, #112]	; (80094f8 <HAL_TIM_Base_Start_IT+0xec>)
 8009488:	f7fb fc59 	bl	8004d3e <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68da      	ldr	r2, [r3, #12]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f042 0201 	orr.w	r2, r2, #1
 800949a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689a      	ldr	r2, [r3, #8]
 80094a2:	4b16      	ldr	r3, [pc, #88]	; (80094fc <HAL_TIM_Base_Start_IT+0xf0>)
 80094a4:	4013      	ands	r3, r2
 80094a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b06      	cmp	r3, #6
 80094ac:	d00b      	beq.n	80094c6 <HAL_TIM_Base_Start_IT+0xba>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094b4:	d007      	beq.n	80094c6 <HAL_TIM_Base_Start_IT+0xba>
  {
    __HAL_TIM_ENABLE(htim);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f042 0201 	orr.w	r2, r2, #1
 80094c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	40012c00 	.word	0x40012c00
 80094d4:	40000400 	.word	0x40000400
 80094d8:	40000800 	.word	0x40000800
 80094dc:	40000c00 	.word	0x40000c00
 80094e0:	40001000 	.word	0x40001000
 80094e4:	40001400 	.word	0x40001400
 80094e8:	40013400 	.word	0x40013400
 80094ec:	40014000 	.word	0x40014000
 80094f0:	40014400 	.word	0x40014400
 80094f4:	40014800 	.word	0x40014800
 80094f8:	0800baf8 	.word	0x0800baf8
 80094fc:	00010007 	.word	0x00010007

08009500 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	e092      	b.n	8009638 <HAL_TIM_OC_Init+0x138>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a4a      	ldr	r2, [pc, #296]	; (8009640 <HAL_TIM_OC_Init+0x140>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d036      	beq.n	800958a <HAL_TIM_OC_Init+0x8a>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009524:	d031      	beq.n	800958a <HAL_TIM_OC_Init+0x8a>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a46      	ldr	r2, [pc, #280]	; (8009644 <HAL_TIM_OC_Init+0x144>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d02c      	beq.n	800958a <HAL_TIM_OC_Init+0x8a>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a44      	ldr	r2, [pc, #272]	; (8009648 <HAL_TIM_OC_Init+0x148>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d027      	beq.n	800958a <HAL_TIM_OC_Init+0x8a>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a43      	ldr	r2, [pc, #268]	; (800964c <HAL_TIM_OC_Init+0x14c>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d022      	beq.n	800958a <HAL_TIM_OC_Init+0x8a>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a41      	ldr	r2, [pc, #260]	; (8009650 <HAL_TIM_OC_Init+0x150>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d01d      	beq.n	800958a <HAL_TIM_OC_Init+0x8a>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a40      	ldr	r2, [pc, #256]	; (8009654 <HAL_TIM_OC_Init+0x154>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d018      	beq.n	800958a <HAL_TIM_OC_Init+0x8a>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a3e      	ldr	r2, [pc, #248]	; (8009658 <HAL_TIM_OC_Init+0x158>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d013      	beq.n	800958a <HAL_TIM_OC_Init+0x8a>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a3d      	ldr	r2, [pc, #244]	; (800965c <HAL_TIM_OC_Init+0x15c>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d00e      	beq.n	800958a <HAL_TIM_OC_Init+0x8a>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a3b      	ldr	r2, [pc, #236]	; (8009660 <HAL_TIM_OC_Init+0x160>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d009      	beq.n	800958a <HAL_TIM_OC_Init+0x8a>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a3a      	ldr	r2, [pc, #232]	; (8009664 <HAL_TIM_OC_Init+0x164>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d004      	beq.n	800958a <HAL_TIM_OC_Init+0x8a>
 8009580:	f240 2161 	movw	r1, #609	; 0x261
 8009584:	4838      	ldr	r0, [pc, #224]	; (8009668 <HAL_TIM_OC_Init+0x168>)
 8009586:	f7fb fbda 	bl	8004d3e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d014      	beq.n	80095bc <HAL_TIM_OC_Init+0xbc>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	2b10      	cmp	r3, #16
 8009598:	d010      	beq.n	80095bc <HAL_TIM_OC_Init+0xbc>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	2b20      	cmp	r3, #32
 80095a0:	d00c      	beq.n	80095bc <HAL_TIM_OC_Init+0xbc>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	2b40      	cmp	r3, #64	; 0x40
 80095a8:	d008      	beq.n	80095bc <HAL_TIM_OC_Init+0xbc>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	2b60      	cmp	r3, #96	; 0x60
 80095b0:	d004      	beq.n	80095bc <HAL_TIM_OC_Init+0xbc>
 80095b2:	f240 2162 	movw	r1, #610	; 0x262
 80095b6:	482c      	ldr	r0, [pc, #176]	; (8009668 <HAL_TIM_OC_Init+0x168>)
 80095b8:	f7fb fbc1 	bl	8004d3e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00e      	beq.n	80095e2 <HAL_TIM_OC_Init+0xe2>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095cc:	d009      	beq.n	80095e2 <HAL_TIM_OC_Init+0xe2>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095d6:	d004      	beq.n	80095e2 <HAL_TIM_OC_Init+0xe2>
 80095d8:	f240 2163 	movw	r1, #611	; 0x263
 80095dc:	4822      	ldr	r0, [pc, #136]	; (8009668 <HAL_TIM_OC_Init+0x168>)
 80095de:	f7fb fbae 	bl	8004d3e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d008      	beq.n	80095fc <HAL_TIM_OC_Init+0xfc>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	2b80      	cmp	r3, #128	; 0x80
 80095f0:	d004      	beq.n	80095fc <HAL_TIM_OC_Init+0xfc>
 80095f2:	f44f 7119 	mov.w	r1, #612	; 0x264
 80095f6:	481c      	ldr	r0, [pc, #112]	; (8009668 <HAL_TIM_OC_Init+0x168>)
 80095f8:	f7fb fba1 	bl	8004d3e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b00      	cmp	r3, #0
 8009606:	d106      	bne.n	8009616 <HAL_TIM_OC_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7fc fc55 	bl	8005ec0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2202      	movs	r2, #2
 800961a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	3304      	adds	r3, #4
 8009626:	4619      	mov	r1, r3
 8009628:	4610      	mov	r0, r2
 800962a:	f000 fb0b 	bl	8009c44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	40012c00 	.word	0x40012c00
 8009644:	40000400 	.word	0x40000400
 8009648:	40000800 	.word	0x40000800
 800964c:	40000c00 	.word	0x40000c00
 8009650:	40001000 	.word	0x40001000
 8009654:	40001400 	.word	0x40001400
 8009658:	40013400 	.word	0x40013400
 800965c:	40014000 	.word	0x40014000
 8009660:	40014400 	.word	0x40014400
 8009664:	40014800 	.word	0x40014800
 8009668:	0800baf8 	.word	0x0800baf8

0800966c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	f003 0302 	and.w	r3, r3, #2
 800967e:	2b02      	cmp	r3, #2
 8009680:	d122      	bne.n	80096c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	f003 0302 	and.w	r3, r3, #2
 800968c:	2b02      	cmp	r3, #2
 800968e:	d11b      	bne.n	80096c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f06f 0202 	mvn.w	r2, #2
 8009698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	f003 0303 	and.w	r3, r3, #3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 faaa 	bl	8009c08 <HAL_TIM_IC_CaptureCallback>
 80096b4:	e005      	b.n	80096c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fa9c 	bl	8009bf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 faad 	bl	8009c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	f003 0304 	and.w	r3, r3, #4
 80096d2:	2b04      	cmp	r3, #4
 80096d4:	d122      	bne.n	800971c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	f003 0304 	and.w	r3, r3, #4
 80096e0:	2b04      	cmp	r3, #4
 80096e2:	d11b      	bne.n	800971c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f06f 0204 	mvn.w	r2, #4
 80096ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2202      	movs	r2, #2
 80096f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fa80 	bl	8009c08 <HAL_TIM_IC_CaptureCallback>
 8009708:	e005      	b.n	8009716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fa72 	bl	8009bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fa83 	bl	8009c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	f003 0308 	and.w	r3, r3, #8
 8009726:	2b08      	cmp	r3, #8
 8009728:	d122      	bne.n	8009770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	f003 0308 	and.w	r3, r3, #8
 8009734:	2b08      	cmp	r3, #8
 8009736:	d11b      	bne.n	8009770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f06f 0208 	mvn.w	r2, #8
 8009740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2204      	movs	r2, #4
 8009746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	f003 0303 	and.w	r3, r3, #3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 fa56 	bl	8009c08 <HAL_TIM_IC_CaptureCallback>
 800975c:	e005      	b.n	800976a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fa48 	bl	8009bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fa59 	bl	8009c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	f003 0310 	and.w	r3, r3, #16
 800977a:	2b10      	cmp	r3, #16
 800977c:	d122      	bne.n	80097c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	f003 0310 	and.w	r3, r3, #16
 8009788:	2b10      	cmp	r3, #16
 800978a:	d11b      	bne.n	80097c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f06f 0210 	mvn.w	r2, #16
 8009794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2208      	movs	r2, #8
 800979a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	69db      	ldr	r3, [r3, #28]
 80097a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fa2c 	bl	8009c08 <HAL_TIM_IC_CaptureCallback>
 80097b0:	e005      	b.n	80097be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fa1e 	bl	8009bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fa2f 	bl	8009c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d10e      	bne.n	80097f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	f003 0301 	and.w	r3, r3, #1
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d107      	bne.n	80097f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f06f 0201 	mvn.w	r2, #1
 80097e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7f7 fdaa 	bl	8001344 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097fa:	2b80      	cmp	r3, #128	; 0x80
 80097fc:	d10e      	bne.n	800981c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009808:	2b80      	cmp	r3, #128	; 0x80
 800980a:	d107      	bne.n	800981c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 ff3e 	bl	800a698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800982a:	d10e      	bne.n	800984a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009836:	2b80      	cmp	r3, #128	; 0x80
 8009838:	d107      	bne.n	800984a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 ff31 	bl	800a6ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009854:	2b40      	cmp	r3, #64	; 0x40
 8009856:	d10e      	bne.n	8009876 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009862:	2b40      	cmp	r3, #64	; 0x40
 8009864:	d107      	bne.n	8009876 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800986e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f9dd 	bl	8009c30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	f003 0320 	and.w	r3, r3, #32
 8009880:	2b20      	cmp	r3, #32
 8009882:	d10e      	bne.n	80098a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	f003 0320 	and.w	r3, r3, #32
 800988e:	2b20      	cmp	r3, #32
 8009890:	d107      	bne.n	80098a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f06f 0220 	mvn.w	r2, #32
 800989a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fef1 	bl	800a684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098a2:	bf00      	nop
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
	...

080098ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d016      	beq.n	80098ec <HAL_TIM_OC_ConfigChannel+0x40>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2b04      	cmp	r3, #4
 80098c2:	d013      	beq.n	80098ec <HAL_TIM_OC_ConfigChannel+0x40>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b08      	cmp	r3, #8
 80098c8:	d010      	beq.n	80098ec <HAL_TIM_OC_ConfigChannel+0x40>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b0c      	cmp	r3, #12
 80098ce:	d00d      	beq.n	80098ec <HAL_TIM_OC_ConfigChannel+0x40>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b10      	cmp	r3, #16
 80098d4:	d00a      	beq.n	80098ec <HAL_TIM_OC_ConfigChannel+0x40>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2b14      	cmp	r3, #20
 80098da:	d007      	beq.n	80098ec <HAL_TIM_OC_ConfigChannel+0x40>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b3c      	cmp	r3, #60	; 0x3c
 80098e0:	d004      	beq.n	80098ec <HAL_TIM_OC_ConfigChannel+0x40>
 80098e2:	f640 5155 	movw	r1, #3413	; 0xd55
 80098e6:	4899      	ldr	r0, [pc, #612]	; (8009b4c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 80098e8:	f7fb fa29 	bl	8004d3e <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d022      	beq.n	800993a <HAL_TIM_OC_ConfigChannel+0x8e>
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b10      	cmp	r3, #16
 80098fa:	d01e      	beq.n	800993a <HAL_TIM_OC_ConfigChannel+0x8e>
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b20      	cmp	r3, #32
 8009902:	d01a      	beq.n	800993a <HAL_TIM_OC_ConfigChannel+0x8e>
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2b30      	cmp	r3, #48	; 0x30
 800990a:	d016      	beq.n	800993a <HAL_TIM_OC_ConfigChannel+0x8e>
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b50      	cmp	r3, #80	; 0x50
 8009912:	d012      	beq.n	800993a <HAL_TIM_OC_ConfigChannel+0x8e>
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b40      	cmp	r3, #64	; 0x40
 800991a:	d00e      	beq.n	800993a <HAL_TIM_OC_ConfigChannel+0x8e>
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009924:	d009      	beq.n	800993a <HAL_TIM_OC_ConfigChannel+0x8e>
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a89      	ldr	r2, [pc, #548]	; (8009b50 <HAL_TIM_OC_ConfigChannel+0x2a4>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d004      	beq.n	800993a <HAL_TIM_OC_ConfigChannel+0x8e>
 8009930:	f640 5156 	movw	r1, #3414	; 0xd56
 8009934:	4885      	ldr	r0, [pc, #532]	; (8009b4c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 8009936:	f7fb fa02 	bl	8004d3e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d008      	beq.n	8009954 <HAL_TIM_OC_ConfigChannel+0xa8>
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	2b02      	cmp	r3, #2
 8009948:	d004      	beq.n	8009954 <HAL_TIM_OC_ConfigChannel+0xa8>
 800994a:	f640 5157 	movw	r1, #3415	; 0xd57
 800994e:	487f      	ldr	r0, [pc, #508]	; (8009b4c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 8009950:	f7fb f9f5 	bl	8004d3e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800995a:	2b01      	cmp	r3, #1
 800995c:	d101      	bne.n	8009962 <HAL_TIM_OC_ConfigChannel+0xb6>
 800995e:	2302      	movs	r3, #2
 8009960:	e13e      	b.n	8009be0 <HAL_TIM_OC_ConfigChannel+0x334>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2202      	movs	r2, #2
 800996e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b14      	cmp	r3, #20
 8009976:	f200 8129 	bhi.w	8009bcc <HAL_TIM_OC_ConfigChannel+0x320>
 800997a:	a201      	add	r2, pc, #4	; (adr r2, 8009980 <HAL_TIM_OC_ConfigChannel+0xd4>)
 800997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009980:	080099d5 	.word	0x080099d5
 8009984:	08009bcd 	.word	0x08009bcd
 8009988:	08009bcd 	.word	0x08009bcd
 800998c:	08009bcd 	.word	0x08009bcd
 8009990:	08009a47 	.word	0x08009a47
 8009994:	08009bcd 	.word	0x08009bcd
 8009998:	08009bcd 	.word	0x08009bcd
 800999c:	08009bcd 	.word	0x08009bcd
 80099a0:	08009aa5 	.word	0x08009aa5
 80099a4:	08009bcd 	.word	0x08009bcd
 80099a8:	08009bcd 	.word	0x08009bcd
 80099ac:	08009bcd 	.word	0x08009bcd
 80099b0:	08009af9 	.word	0x08009af9
 80099b4:	08009bcd 	.word	0x08009bcd
 80099b8:	08009bcd 	.word	0x08009bcd
 80099bc:	08009bcd 	.word	0x08009bcd
 80099c0:	08009b75 	.word	0x08009b75
 80099c4:	08009bcd 	.word	0x08009bcd
 80099c8:	08009bcd 	.word	0x08009bcd
 80099cc:	08009bcd 	.word	0x08009bcd
 80099d0:	08009ba1 	.word	0x08009ba1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a5e      	ldr	r2, [pc, #376]	; (8009b54 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d02c      	beq.n	8009a38 <HAL_TIM_OC_ConfigChannel+0x18c>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e6:	d027      	beq.n	8009a38 <HAL_TIM_OC_ConfigChannel+0x18c>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a5a      	ldr	r2, [pc, #360]	; (8009b58 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d022      	beq.n	8009a38 <HAL_TIM_OC_ConfigChannel+0x18c>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a59      	ldr	r2, [pc, #356]	; (8009b5c <HAL_TIM_OC_ConfigChannel+0x2b0>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d01d      	beq.n	8009a38 <HAL_TIM_OC_ConfigChannel+0x18c>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a57      	ldr	r2, [pc, #348]	; (8009b60 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d018      	beq.n	8009a38 <HAL_TIM_OC_ConfigChannel+0x18c>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a56      	ldr	r2, [pc, #344]	; (8009b64 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d013      	beq.n	8009a38 <HAL_TIM_OC_ConfigChannel+0x18c>
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a54      	ldr	r2, [pc, #336]	; (8009b68 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d00e      	beq.n	8009a38 <HAL_TIM_OC_ConfigChannel+0x18c>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a53      	ldr	r2, [pc, #332]	; (8009b6c <HAL_TIM_OC_ConfigChannel+0x2c0>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d009      	beq.n	8009a38 <HAL_TIM_OC_ConfigChannel+0x18c>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a51      	ldr	r2, [pc, #324]	; (8009b70 <HAL_TIM_OC_ConfigChannel+0x2c4>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d004      	beq.n	8009a38 <HAL_TIM_OC_ConfigChannel+0x18c>
 8009a2e:	f640 5163 	movw	r1, #3427	; 0xd63
 8009a32:	4846      	ldr	r0, [pc, #280]	; (8009b4c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 8009a34:	f7fb f983 	bl	8004d3e <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68b9      	ldr	r1, [r7, #8]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 f99a 	bl	8009d78 <TIM_OC1_SetConfig>
      break;
 8009a44:	e0c3      	b.n	8009bce <HAL_TIM_OC_ConfigChannel+0x322>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a42      	ldr	r2, [pc, #264]	; (8009b54 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d022      	beq.n	8009a96 <HAL_TIM_OC_ConfigChannel+0x1ea>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a58:	d01d      	beq.n	8009a96 <HAL_TIM_OC_ConfigChannel+0x1ea>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a3e      	ldr	r2, [pc, #248]	; (8009b58 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d018      	beq.n	8009a96 <HAL_TIM_OC_ConfigChannel+0x1ea>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a3c      	ldr	r2, [pc, #240]	; (8009b5c <HAL_TIM_OC_ConfigChannel+0x2b0>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d013      	beq.n	8009a96 <HAL_TIM_OC_ConfigChannel+0x1ea>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a3b      	ldr	r2, [pc, #236]	; (8009b60 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d00e      	beq.n	8009a96 <HAL_TIM_OC_ConfigChannel+0x1ea>
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a39      	ldr	r2, [pc, #228]	; (8009b64 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d009      	beq.n	8009a96 <HAL_TIM_OC_ConfigChannel+0x1ea>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a38      	ldr	r2, [pc, #224]	; (8009b68 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d004      	beq.n	8009a96 <HAL_TIM_OC_ConfigChannel+0x1ea>
 8009a8c:	f640 516d 	movw	r1, #3437	; 0xd6d
 8009a90:	482e      	ldr	r0, [pc, #184]	; (8009b4c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 8009a92:	f7fb f954 	bl	8004d3e <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68b9      	ldr	r1, [r7, #8]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f000 fa25 	bl	8009eec <TIM_OC2_SetConfig>
      break;
 8009aa2:	e094      	b.n	8009bce <HAL_TIM_OC_ConfigChannel+0x322>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a2a      	ldr	r2, [pc, #168]	; (8009b54 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d01d      	beq.n	8009aea <HAL_TIM_OC_ConfigChannel+0x23e>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ab6:	d018      	beq.n	8009aea <HAL_TIM_OC_ConfigChannel+0x23e>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a26      	ldr	r2, [pc, #152]	; (8009b58 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d013      	beq.n	8009aea <HAL_TIM_OC_ConfigChannel+0x23e>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a25      	ldr	r2, [pc, #148]	; (8009b5c <HAL_TIM_OC_ConfigChannel+0x2b0>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d00e      	beq.n	8009aea <HAL_TIM_OC_ConfigChannel+0x23e>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a23      	ldr	r2, [pc, #140]	; (8009b60 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d009      	beq.n	8009aea <HAL_TIM_OC_ConfigChannel+0x23e>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a22      	ldr	r2, [pc, #136]	; (8009b64 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d004      	beq.n	8009aea <HAL_TIM_OC_ConfigChannel+0x23e>
 8009ae0:	f640 5177 	movw	r1, #3447	; 0xd77
 8009ae4:	4819      	ldr	r0, [pc, #100]	; (8009b4c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 8009ae6:	f7fb f92a 	bl	8004d3e <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68b9      	ldr	r1, [r7, #8]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 faad 	bl	800a050 <TIM_OC3_SetConfig>
      break;
 8009af6:	e06a      	b.n	8009bce <HAL_TIM_OC_ConfigChannel+0x322>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a15      	ldr	r2, [pc, #84]	; (8009b54 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d01d      	beq.n	8009b3e <HAL_TIM_OC_ConfigChannel+0x292>
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b0a:	d018      	beq.n	8009b3e <HAL_TIM_OC_ConfigChannel+0x292>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a11      	ldr	r2, [pc, #68]	; (8009b58 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d013      	beq.n	8009b3e <HAL_TIM_OC_ConfigChannel+0x292>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a10      	ldr	r2, [pc, #64]	; (8009b5c <HAL_TIM_OC_ConfigChannel+0x2b0>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d00e      	beq.n	8009b3e <HAL_TIM_OC_ConfigChannel+0x292>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a0e      	ldr	r2, [pc, #56]	; (8009b60 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d009      	beq.n	8009b3e <HAL_TIM_OC_ConfigChannel+0x292>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a0d      	ldr	r2, [pc, #52]	; (8009b64 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d004      	beq.n	8009b3e <HAL_TIM_OC_ConfigChannel+0x292>
 8009b34:	f640 5181 	movw	r1, #3457	; 0xd81
 8009b38:	4804      	ldr	r0, [pc, #16]	; (8009b4c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 8009b3a:	f7fb f900 	bl	8004d3e <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68b9      	ldr	r1, [r7, #8]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f000 fb35 	bl	800a1b4 <TIM_OC4_SetConfig>
      break;
 8009b4a:	e040      	b.n	8009bce <HAL_TIM_OC_ConfigChannel+0x322>
 8009b4c:	0800baf8 	.word	0x0800baf8
 8009b50:	00010010 	.word	0x00010010
 8009b54:	40012c00 	.word	0x40012c00
 8009b58:	40000400 	.word	0x40000400
 8009b5c:	40000800 	.word	0x40000800
 8009b60:	40000c00 	.word	0x40000c00
 8009b64:	40013400 	.word	0x40013400
 8009b68:	40014000 	.word	0x40014000
 8009b6c:	40014400 	.word	0x40014400
 8009b70:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a1b      	ldr	r2, [pc, #108]	; (8009be8 <HAL_TIM_OC_ConfigChannel+0x33c>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d009      	beq.n	8009b92 <HAL_TIM_OC_ConfigChannel+0x2e6>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a1a      	ldr	r2, [pc, #104]	; (8009bec <HAL_TIM_OC_ConfigChannel+0x340>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d004      	beq.n	8009b92 <HAL_TIM_OC_ConfigChannel+0x2e6>
 8009b88:	f640 518b 	movw	r1, #3467	; 0xd8b
 8009b8c:	4818      	ldr	r0, [pc, #96]	; (8009bf0 <HAL_TIM_OC_ConfigChannel+0x344>)
 8009b8e:	f7fb f8d6 	bl	8004d3e <assert_failed>

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68b9      	ldr	r1, [r7, #8]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 fb83 	bl	800a2a4 <TIM_OC5_SetConfig>
      break;
 8009b9e:	e016      	b.n	8009bce <HAL_TIM_OC_ConfigChannel+0x322>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a10      	ldr	r2, [pc, #64]	; (8009be8 <HAL_TIM_OC_ConfigChannel+0x33c>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d009      	beq.n	8009bbe <HAL_TIM_OC_ConfigChannel+0x312>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a0f      	ldr	r2, [pc, #60]	; (8009bec <HAL_TIM_OC_ConfigChannel+0x340>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d004      	beq.n	8009bbe <HAL_TIM_OC_ConfigChannel+0x312>
 8009bb4:	f640 5195 	movw	r1, #3477	; 0xd95
 8009bb8:	480d      	ldr	r0, [pc, #52]	; (8009bf0 <HAL_TIM_OC_ConfigChannel+0x344>)
 8009bba:	f7fb f8c0 	bl	8004d3e <assert_failed>

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68b9      	ldr	r1, [r7, #8]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 fbd1 	bl	800a36c <TIM_OC6_SetConfig>
      break;
 8009bca:	e000      	b.n	8009bce <HAL_TIM_OC_ConfigChannel+0x322>
    }

    default:
      break;
 8009bcc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	40012c00 	.word	0x40012c00
 8009bec:	40013400 	.word	0x40013400
 8009bf0:	0800baf8 	.word	0x0800baf8

08009bf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bfc:	bf00      	nop
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a40      	ldr	r2, [pc, #256]	; (8009d58 <TIM_Base_SetConfig+0x114>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d013      	beq.n	8009c84 <TIM_Base_SetConfig+0x40>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c62:	d00f      	beq.n	8009c84 <TIM_Base_SetConfig+0x40>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a3d      	ldr	r2, [pc, #244]	; (8009d5c <TIM_Base_SetConfig+0x118>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d00b      	beq.n	8009c84 <TIM_Base_SetConfig+0x40>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a3c      	ldr	r2, [pc, #240]	; (8009d60 <TIM_Base_SetConfig+0x11c>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d007      	beq.n	8009c84 <TIM_Base_SetConfig+0x40>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a3b      	ldr	r2, [pc, #236]	; (8009d64 <TIM_Base_SetConfig+0x120>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d003      	beq.n	8009c84 <TIM_Base_SetConfig+0x40>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a3a      	ldr	r2, [pc, #232]	; (8009d68 <TIM_Base_SetConfig+0x124>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d108      	bne.n	8009c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a2f      	ldr	r2, [pc, #188]	; (8009d58 <TIM_Base_SetConfig+0x114>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d01f      	beq.n	8009cde <TIM_Base_SetConfig+0x9a>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ca4:	d01b      	beq.n	8009cde <TIM_Base_SetConfig+0x9a>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a2c      	ldr	r2, [pc, #176]	; (8009d5c <TIM_Base_SetConfig+0x118>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d017      	beq.n	8009cde <TIM_Base_SetConfig+0x9a>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a2b      	ldr	r2, [pc, #172]	; (8009d60 <TIM_Base_SetConfig+0x11c>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d013      	beq.n	8009cde <TIM_Base_SetConfig+0x9a>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a2a      	ldr	r2, [pc, #168]	; (8009d64 <TIM_Base_SetConfig+0x120>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d00f      	beq.n	8009cde <TIM_Base_SetConfig+0x9a>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a29      	ldr	r2, [pc, #164]	; (8009d68 <TIM_Base_SetConfig+0x124>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d00b      	beq.n	8009cde <TIM_Base_SetConfig+0x9a>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a28      	ldr	r2, [pc, #160]	; (8009d6c <TIM_Base_SetConfig+0x128>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d007      	beq.n	8009cde <TIM_Base_SetConfig+0x9a>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a27      	ldr	r2, [pc, #156]	; (8009d70 <TIM_Base_SetConfig+0x12c>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d003      	beq.n	8009cde <TIM_Base_SetConfig+0x9a>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a26      	ldr	r2, [pc, #152]	; (8009d74 <TIM_Base_SetConfig+0x130>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d108      	bne.n	8009cf0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a10      	ldr	r2, [pc, #64]	; (8009d58 <TIM_Base_SetConfig+0x114>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d00f      	beq.n	8009d3c <TIM_Base_SetConfig+0xf8>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a12      	ldr	r2, [pc, #72]	; (8009d68 <TIM_Base_SetConfig+0x124>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d00b      	beq.n	8009d3c <TIM_Base_SetConfig+0xf8>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a11      	ldr	r2, [pc, #68]	; (8009d6c <TIM_Base_SetConfig+0x128>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d007      	beq.n	8009d3c <TIM_Base_SetConfig+0xf8>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a10      	ldr	r2, [pc, #64]	; (8009d70 <TIM_Base_SetConfig+0x12c>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d003      	beq.n	8009d3c <TIM_Base_SetConfig+0xf8>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a0f      	ldr	r2, [pc, #60]	; (8009d74 <TIM_Base_SetConfig+0x130>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d103      	bne.n	8009d44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	691a      	ldr	r2, [r3, #16]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	615a      	str	r2, [r3, #20]
}
 8009d4a:	bf00      	nop
 8009d4c:	3714      	adds	r7, #20
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	40012c00 	.word	0x40012c00
 8009d5c:	40000400 	.word	0x40000400
 8009d60:	40000800 	.word	0x40000800
 8009d64:	40000c00 	.word	0x40000c00
 8009d68:	40013400 	.word	0x40013400
 8009d6c:	40014000 	.word	0x40014000
 8009d70:	40014400 	.word	0x40014400
 8009d74:	40014800 	.word	0x40014800

08009d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	f023 0201 	bic.w	r2, r3, #1
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f023 0303 	bic.w	r3, r3, #3
 8009db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f023 0302 	bic.w	r3, r3, #2
 8009dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a40      	ldr	r2, [pc, #256]	; (8009ed4 <TIM_OC1_SetConfig+0x15c>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d00f      	beq.n	8009df8 <TIM_OC1_SetConfig+0x80>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a3f      	ldr	r2, [pc, #252]	; (8009ed8 <TIM_OC1_SetConfig+0x160>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d00b      	beq.n	8009df8 <TIM_OC1_SetConfig+0x80>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a3e      	ldr	r2, [pc, #248]	; (8009edc <TIM_OC1_SetConfig+0x164>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d007      	beq.n	8009df8 <TIM_OC1_SetConfig+0x80>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a3d      	ldr	r2, [pc, #244]	; (8009ee0 <TIM_OC1_SetConfig+0x168>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d003      	beq.n	8009df8 <TIM_OC1_SetConfig+0x80>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a3c      	ldr	r2, [pc, #240]	; (8009ee4 <TIM_OC1_SetConfig+0x16c>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d119      	bne.n	8009e2c <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d008      	beq.n	8009e12 <TIM_OC1_SetConfig+0x9a>
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	2b08      	cmp	r3, #8
 8009e06:	d004      	beq.n	8009e12 <TIM_OC1_SetConfig+0x9a>
 8009e08:	f241 718e 	movw	r1, #6030	; 0x178e
 8009e0c:	4836      	ldr	r0, [pc, #216]	; (8009ee8 <TIM_OC1_SetConfig+0x170>)
 8009e0e:	f7fa ff96 	bl	8004d3e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	f023 0308 	bic.w	r3, r3, #8
 8009e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	4313      	orrs	r3, r2
 8009e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	f023 0304 	bic.w	r3, r3, #4
 8009e2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a29      	ldr	r2, [pc, #164]	; (8009ed4 <TIM_OC1_SetConfig+0x15c>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d00f      	beq.n	8009e54 <TIM_OC1_SetConfig+0xdc>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a28      	ldr	r2, [pc, #160]	; (8009ed8 <TIM_OC1_SetConfig+0x160>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d00b      	beq.n	8009e54 <TIM_OC1_SetConfig+0xdc>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a27      	ldr	r2, [pc, #156]	; (8009edc <TIM_OC1_SetConfig+0x164>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d007      	beq.n	8009e54 <TIM_OC1_SetConfig+0xdc>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a26      	ldr	r2, [pc, #152]	; (8009ee0 <TIM_OC1_SetConfig+0x168>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d003      	beq.n	8009e54 <TIM_OC1_SetConfig+0xdc>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a25      	ldr	r2, [pc, #148]	; (8009ee4 <TIM_OC1_SetConfig+0x16c>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d12d      	bne.n	8009eb0 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e5c:	d008      	beq.n	8009e70 <TIM_OC1_SetConfig+0xf8>
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d004      	beq.n	8009e70 <TIM_OC1_SetConfig+0xf8>
 8009e66:	f241 719b 	movw	r1, #6043	; 0x179b
 8009e6a:	481f      	ldr	r0, [pc, #124]	; (8009ee8 <TIM_OC1_SetConfig+0x170>)
 8009e6c:	f7fa ff67 	bl	8004d3e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	695b      	ldr	r3, [r3, #20]
 8009e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e78:	d008      	beq.n	8009e8c <TIM_OC1_SetConfig+0x114>
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d004      	beq.n	8009e8c <TIM_OC1_SetConfig+0x114>
 8009e82:	f241 719c 	movw	r1, #6044	; 0x179c
 8009e86:	4818      	ldr	r0, [pc, #96]	; (8009ee8 <TIM_OC1_SetConfig+0x170>)
 8009e88:	f7fa ff59 	bl	8004d3e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	695b      	ldr	r3, [r3, #20]
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	693a      	ldr	r2, [r7, #16]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	693a      	ldr	r2, [r7, #16]
 8009eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	685a      	ldr	r2, [r3, #4]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	621a      	str	r2, [r3, #32]
}
 8009eca:	bf00      	nop
 8009ecc:	3718      	adds	r7, #24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	40012c00 	.word	0x40012c00
 8009ed8:	40013400 	.word	0x40013400
 8009edc:	40014000 	.word	0x40014000
 8009ee0:	40014400 	.word	0x40014400
 8009ee4:	40014800 	.word	0x40014800
 8009ee8:	0800baf8 	.word	0x0800baf8

08009eec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b086      	sub	sp, #24
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a1b      	ldr	r3, [r3, #32]
 8009efa:	f023 0210 	bic.w	r2, r3, #16
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	021b      	lsls	r3, r3, #8
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	f023 0320 	bic.w	r3, r3, #32
 8009f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	011b      	lsls	r3, r3, #4
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a3b      	ldr	r2, [pc, #236]	; (800a038 <TIM_OC2_SetConfig+0x14c>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d003      	beq.n	8009f58 <TIM_OC2_SetConfig+0x6c>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a3a      	ldr	r2, [pc, #232]	; (800a03c <TIM_OC2_SetConfig+0x150>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d11a      	bne.n	8009f8e <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d008      	beq.n	8009f72 <TIM_OC2_SetConfig+0x86>
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	2b08      	cmp	r3, #8
 8009f66:	d004      	beq.n	8009f72 <TIM_OC2_SetConfig+0x86>
 8009f68:	f241 71d9 	movw	r1, #6105	; 0x17d9
 8009f6c:	4834      	ldr	r0, [pc, #208]	; (800a040 <TIM_OC2_SetConfig+0x154>)
 8009f6e:	f7fa fee6 	bl	8004d3e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	011b      	lsls	r3, r3, #4
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f8c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4a29      	ldr	r2, [pc, #164]	; (800a038 <TIM_OC2_SetConfig+0x14c>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d00f      	beq.n	8009fb6 <TIM_OC2_SetConfig+0xca>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4a28      	ldr	r2, [pc, #160]	; (800a03c <TIM_OC2_SetConfig+0x150>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d00b      	beq.n	8009fb6 <TIM_OC2_SetConfig+0xca>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a28      	ldr	r2, [pc, #160]	; (800a044 <TIM_OC2_SetConfig+0x158>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d007      	beq.n	8009fb6 <TIM_OC2_SetConfig+0xca>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a27      	ldr	r2, [pc, #156]	; (800a048 <TIM_OC2_SetConfig+0x15c>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d003      	beq.n	8009fb6 <TIM_OC2_SetConfig+0xca>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a26      	ldr	r2, [pc, #152]	; (800a04c <TIM_OC2_SetConfig+0x160>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d12f      	bne.n	800a016 <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fbe:	d008      	beq.n	8009fd2 <TIM_OC2_SetConfig+0xe6>
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d004      	beq.n	8009fd2 <TIM_OC2_SetConfig+0xe6>
 8009fc8:	f241 71e7 	movw	r1, #6119	; 0x17e7
 8009fcc:	481c      	ldr	r0, [pc, #112]	; (800a040 <TIM_OC2_SetConfig+0x154>)
 8009fce:	f7fa feb6 	bl	8004d3e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fda:	d008      	beq.n	8009fee <TIM_OC2_SetConfig+0x102>
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	695b      	ldr	r3, [r3, #20]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d004      	beq.n	8009fee <TIM_OC2_SetConfig+0x102>
 8009fe4:	f241 71e8 	movw	r1, #6120	; 0x17e8
 8009fe8:	4815      	ldr	r0, [pc, #84]	; (800a040 <TIM_OC2_SetConfig+0x154>)
 8009fea:	f7fa fea8 	bl	8004d3e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	695b      	ldr	r3, [r3, #20]
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	4313      	orrs	r3, r2
 800a008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	693a      	ldr	r2, [r7, #16]
 800a012:	4313      	orrs	r3, r2
 800a014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	685a      	ldr	r2, [r3, #4]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	621a      	str	r2, [r3, #32]
}
 800a030:	bf00      	nop
 800a032:	3718      	adds	r7, #24
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	40012c00 	.word	0x40012c00
 800a03c:	40013400 	.word	0x40013400
 800a040:	0800baf8 	.word	0x0800baf8
 800a044:	40014000 	.word	0x40014000
 800a048:	40014400 	.word	0x40014400
 800a04c:	40014800 	.word	0x40014800

0800a050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	69db      	ldr	r3, [r3, #28]
 800a076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a07e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f023 0303 	bic.w	r3, r3, #3
 800a08a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	4313      	orrs	r3, r2
 800a094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a09c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	021b      	lsls	r3, r3, #8
 800a0a4:	697a      	ldr	r2, [r7, #20]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a3b      	ldr	r2, [pc, #236]	; (800a19c <TIM_OC3_SetConfig+0x14c>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d003      	beq.n	800a0ba <TIM_OC3_SetConfig+0x6a>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a3a      	ldr	r2, [pc, #232]	; (800a1a0 <TIM_OC3_SetConfig+0x150>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d11a      	bne.n	800a0f0 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d008      	beq.n	800a0d4 <TIM_OC3_SetConfig+0x84>
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	2b08      	cmp	r3, #8
 800a0c8:	d004      	beq.n	800a0d4 <TIM_OC3_SetConfig+0x84>
 800a0ca:	f641 0124 	movw	r1, #6180	; 0x1824
 800a0ce:	4835      	ldr	r0, [pc, #212]	; (800a1a4 <TIM_OC3_SetConfig+0x154>)
 800a0d0:	f7fa fe35 	bl	8004d3e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	021b      	lsls	r3, r3, #8
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a2a      	ldr	r2, [pc, #168]	; (800a19c <TIM_OC3_SetConfig+0x14c>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d00f      	beq.n	800a118 <TIM_OC3_SetConfig+0xc8>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a29      	ldr	r2, [pc, #164]	; (800a1a0 <TIM_OC3_SetConfig+0x150>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d00b      	beq.n	800a118 <TIM_OC3_SetConfig+0xc8>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a29      	ldr	r2, [pc, #164]	; (800a1a8 <TIM_OC3_SetConfig+0x158>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d007      	beq.n	800a118 <TIM_OC3_SetConfig+0xc8>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a28      	ldr	r2, [pc, #160]	; (800a1ac <TIM_OC3_SetConfig+0x15c>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d003      	beq.n	800a118 <TIM_OC3_SetConfig+0xc8>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a27      	ldr	r2, [pc, #156]	; (800a1b0 <TIM_OC3_SetConfig+0x160>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d12f      	bne.n	800a178 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a120:	d008      	beq.n	800a134 <TIM_OC3_SetConfig+0xe4>
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d004      	beq.n	800a134 <TIM_OC3_SetConfig+0xe4>
 800a12a:	f641 0131 	movw	r1, #6193	; 0x1831
 800a12e:	481d      	ldr	r0, [pc, #116]	; (800a1a4 <TIM_OC3_SetConfig+0x154>)
 800a130:	f7fa fe05 	bl	8004d3e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	695b      	ldr	r3, [r3, #20]
 800a138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a13c:	d008      	beq.n	800a150 <TIM_OC3_SetConfig+0x100>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	695b      	ldr	r3, [r3, #20]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d004      	beq.n	800a150 <TIM_OC3_SetConfig+0x100>
 800a146:	f641 0132 	movw	r1, #6194	; 0x1832
 800a14a:	4816      	ldr	r0, [pc, #88]	; (800a1a4 <TIM_OC3_SetConfig+0x154>)
 800a14c:	f7fa fdf7 	bl	8004d3e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a15e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	695b      	ldr	r3, [r3, #20]
 800a164:	011b      	lsls	r3, r3, #4
 800a166:	693a      	ldr	r2, [r7, #16]
 800a168:	4313      	orrs	r3, r2
 800a16a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	011b      	lsls	r3, r3, #4
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	4313      	orrs	r3, r2
 800a176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	693a      	ldr	r2, [r7, #16]
 800a17c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	621a      	str	r2, [r3, #32]
}
 800a192:	bf00      	nop
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	40012c00 	.word	0x40012c00
 800a1a0:	40013400 	.word	0x40013400
 800a1a4:	0800baf8 	.word	0x0800baf8
 800a1a8:	40014000 	.word	0x40014000
 800a1ac:	40014400 	.word	0x40014400
 800a1b0:	40014800 	.word	0x40014800

0800a1b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	69db      	ldr	r3, [r3, #28]
 800a1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	021b      	lsls	r3, r3, #8
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	031b      	lsls	r3, r3, #12
 800a20a:	693a      	ldr	r2, [r7, #16]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a1e      	ldr	r2, [pc, #120]	; (800a28c <TIM_OC4_SetConfig+0xd8>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d00f      	beq.n	800a238 <TIM_OC4_SetConfig+0x84>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a1d      	ldr	r2, [pc, #116]	; (800a290 <TIM_OC4_SetConfig+0xdc>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d00b      	beq.n	800a238 <TIM_OC4_SetConfig+0x84>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a1c      	ldr	r2, [pc, #112]	; (800a294 <TIM_OC4_SetConfig+0xe0>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d007      	beq.n	800a238 <TIM_OC4_SetConfig+0x84>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a1b      	ldr	r2, [pc, #108]	; (800a298 <TIM_OC4_SetConfig+0xe4>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d003      	beq.n	800a238 <TIM_OC4_SetConfig+0x84>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a1a      	ldr	r2, [pc, #104]	; (800a29c <TIM_OC4_SetConfig+0xe8>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d117      	bne.n	800a268 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a240:	d008      	beq.n	800a254 <TIM_OC4_SetConfig+0xa0>
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d004      	beq.n	800a254 <TIM_OC4_SetConfig+0xa0>
 800a24a:	f641 0170 	movw	r1, #6256	; 0x1870
 800a24e:	4814      	ldr	r0, [pc, #80]	; (800a2a0 <TIM_OC4_SetConfig+0xec>)
 800a250:	f7fa fd75 	bl	8004d3e <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a25a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	019b      	lsls	r3, r3, #6
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	4313      	orrs	r3, r2
 800a266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	685a      	ldr	r2, [r3, #4]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	621a      	str	r2, [r3, #32]
}
 800a282:	bf00      	nop
 800a284:	3718      	adds	r7, #24
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	40012c00 	.word	0x40012c00
 800a290:	40013400 	.word	0x40013400
 800a294:	40014000 	.word	0x40014000
 800a298:	40014400 	.word	0x40014400
 800a29c:	40014800 	.word	0x40014800
 800a2a0:	0800baf8 	.word	0x0800baf8

0800a2a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a1b      	ldr	r3, [r3, #32]
 800a2b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a2e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	041b      	lsls	r3, r3, #16
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a17      	ldr	r2, [pc, #92]	; (800a358 <TIM_OC5_SetConfig+0xb4>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d00f      	beq.n	800a31e <TIM_OC5_SetConfig+0x7a>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a16      	ldr	r2, [pc, #88]	; (800a35c <TIM_OC5_SetConfig+0xb8>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d00b      	beq.n	800a31e <TIM_OC5_SetConfig+0x7a>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a15      	ldr	r2, [pc, #84]	; (800a360 <TIM_OC5_SetConfig+0xbc>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d007      	beq.n	800a31e <TIM_OC5_SetConfig+0x7a>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a14      	ldr	r2, [pc, #80]	; (800a364 <TIM_OC5_SetConfig+0xc0>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d003      	beq.n	800a31e <TIM_OC5_SetConfig+0x7a>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a13      	ldr	r2, [pc, #76]	; (800a368 <TIM_OC5_SetConfig+0xc4>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d109      	bne.n	800a332 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a324:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	021b      	lsls	r3, r3, #8
 800a32c:	697a      	ldr	r2, [r7, #20]
 800a32e:	4313      	orrs	r3, r2
 800a330:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	697a      	ldr	r2, [r7, #20]
 800a336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	685a      	ldr	r2, [r3, #4]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	621a      	str	r2, [r3, #32]
}
 800a34c:	bf00      	nop
 800a34e:	371c      	adds	r7, #28
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	40012c00 	.word	0x40012c00
 800a35c:	40013400 	.word	0x40013400
 800a360:	40014000 	.word	0x40014000
 800a364:	40014400 	.word	0x40014400
 800a368:	40014800 	.word	0x40014800

0800a36c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a1b      	ldr	r3, [r3, #32]
 800a37a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a1b      	ldr	r3, [r3, #32]
 800a386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a39a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a39e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	021b      	lsls	r3, r3, #8
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a3b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	051b      	lsls	r3, r3, #20
 800a3ba:	693a      	ldr	r2, [r7, #16]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a18      	ldr	r2, [pc, #96]	; (800a424 <TIM_OC6_SetConfig+0xb8>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d00f      	beq.n	800a3e8 <TIM_OC6_SetConfig+0x7c>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a17      	ldr	r2, [pc, #92]	; (800a428 <TIM_OC6_SetConfig+0xbc>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d00b      	beq.n	800a3e8 <TIM_OC6_SetConfig+0x7c>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a16      	ldr	r2, [pc, #88]	; (800a42c <TIM_OC6_SetConfig+0xc0>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d007      	beq.n	800a3e8 <TIM_OC6_SetConfig+0x7c>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a15      	ldr	r2, [pc, #84]	; (800a430 <TIM_OC6_SetConfig+0xc4>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d003      	beq.n	800a3e8 <TIM_OC6_SetConfig+0x7c>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a14      	ldr	r2, [pc, #80]	; (800a434 <TIM_OC6_SetConfig+0xc8>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d109      	bne.n	800a3fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	029b      	lsls	r3, r3, #10
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	621a      	str	r2, [r3, #32]
}
 800a416:	bf00      	nop
 800a418:	371c      	adds	r7, #28
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	40012c00 	.word	0x40012c00
 800a428:	40013400 	.word	0x40013400
 800a42c:	40014000 	.word	0x40014000
 800a430:	40014400 	.word	0x40014400
 800a434:	40014800 	.word	0x40014800

0800a438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a86      	ldr	r2, [pc, #536]	; (800a660 <HAL_TIMEx_MasterConfigSynchronization+0x228>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d02c      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a454:	d027      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a82      	ldr	r2, [pc, #520]	; (800a664 <HAL_TIMEx_MasterConfigSynchronization+0x22c>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d022      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a80      	ldr	r2, [pc, #512]	; (800a668 <HAL_TIMEx_MasterConfigSynchronization+0x230>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d01d      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a7f      	ldr	r2, [pc, #508]	; (800a66c <HAL_TIMEx_MasterConfigSynchronization+0x234>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d018      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a7d      	ldr	r2, [pc, #500]	; (800a670 <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d013      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a7c      	ldr	r2, [pc, #496]	; (800a674 <HAL_TIMEx_MasterConfigSynchronization+0x23c>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d00e      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a7a      	ldr	r2, [pc, #488]	; (800a678 <HAL_TIMEx_MasterConfigSynchronization+0x240>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d009      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a79      	ldr	r2, [pc, #484]	; (800a67c <HAL_TIMEx_MasterConfigSynchronization+0x244>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d004      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a49c:	f240 6167 	movw	r1, #1639	; 0x667
 800a4a0:	4877      	ldr	r0, [pc, #476]	; (800a680 <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 800a4a2:	f7fa fc4c 	bl	8004d3e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d020      	beq.n	800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b10      	cmp	r3, #16
 800a4b4:	d01c      	beq.n	800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b20      	cmp	r3, #32
 800a4bc:	d018      	beq.n	800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b30      	cmp	r3, #48	; 0x30
 800a4c4:	d014      	beq.n	800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b40      	cmp	r3, #64	; 0x40
 800a4cc:	d010      	beq.n	800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2b50      	cmp	r3, #80	; 0x50
 800a4d4:	d00c      	beq.n	800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b60      	cmp	r3, #96	; 0x60
 800a4dc:	d008      	beq.n	800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b70      	cmp	r3, #112	; 0x70
 800a4e4:	d004      	beq.n	800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4e6:	f44f 61cd 	mov.w	r1, #1640	; 0x668
 800a4ea:	4865      	ldr	r0, [pc, #404]	; (800a680 <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 800a4ec:	f7fa fc27 	bl	8004d3e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	2b80      	cmp	r3, #128	; 0x80
 800a4f6:	d008      	beq.n	800a50a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d004      	beq.n	800a50a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800a500:	f240 6169 	movw	r1, #1641	; 0x669
 800a504:	485e      	ldr	r0, [pc, #376]	; (800a680 <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 800a506:	f7fa fc1a 	bl	8004d3e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a510:	2b01      	cmp	r3, #1
 800a512:	d101      	bne.n	800a518 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800a514:	2302      	movs	r3, #2
 800a516:	e09e      	b.n	800a656 <HAL_TIMEx_MasterConfigSynchronization+0x21e>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2202      	movs	r2, #2
 800a524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a48      	ldr	r2, [pc, #288]	; (800a660 <HAL_TIMEx_MasterConfigSynchronization+0x228>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d004      	beq.n	800a54c <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a4c      	ldr	r2, [pc, #304]	; (800a678 <HAL_TIMEx_MasterConfigSynchronization+0x240>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d161      	bne.n	800a610 <HAL_TIMEx_MasterConfigSynchronization+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d054      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a55c:	d04f      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a566:	d04a      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a570:	d045      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a57a:	d040      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800a584:	d03b      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a58e:	d036      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a598:	d031      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800a5a2:	d02c      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a5ac:	d027      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 800a5b6:	d022      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a5c0:	d01d      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 800a5ca:	d018      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a5d4:	d013      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 800a5de:	d00e      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 800a5e8:	d009      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800a5f2:	d004      	beq.n	800a5fe <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a5f4:	f240 617b 	movw	r1, #1659	; 0x67b
 800a5f8:	4821      	ldr	r0, [pc, #132]	; (800a680 <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 800a5fa:	f7fa fba0 	bl	8004d3e <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a604:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	4313      	orrs	r3, r2
 800a620:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a628:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	4313      	orrs	r3, r2
 800a632:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	40012c00 	.word	0x40012c00
 800a664:	40000400 	.word	0x40000400
 800a668:	40000800 	.word	0x40000800
 800a66c:	40000c00 	.word	0x40000c00
 800a670:	40001000 	.word	0x40001000
 800a674:	40001400 	.word	0x40001400
 800a678:	40013400 	.word	0x40013400
 800a67c:	40014000 	.word	0x40014000
 800a680:	0800bb30 	.word	0x0800bb30

0800a684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d101      	bne.n	800a6d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e08b      	b.n	800a7ea <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d023      	beq.n	800a722 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a45      	ldr	r2, [pc, #276]	; (800a7f4 <HAL_UART_Init+0x134>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d041      	beq.n	800a768 <HAL_UART_Init+0xa8>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a43      	ldr	r2, [pc, #268]	; (800a7f8 <HAL_UART_Init+0x138>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d03c      	beq.n	800a768 <HAL_UART_Init+0xa8>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a42      	ldr	r2, [pc, #264]	; (800a7fc <HAL_UART_Init+0x13c>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d037      	beq.n	800a768 <HAL_UART_Init+0xa8>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a40      	ldr	r2, [pc, #256]	; (800a800 <HAL_UART_Init+0x140>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d032      	beq.n	800a768 <HAL_UART_Init+0xa8>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a3f      	ldr	r2, [pc, #252]	; (800a804 <HAL_UART_Init+0x144>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d02d      	beq.n	800a768 <HAL_UART_Init+0xa8>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a3d      	ldr	r2, [pc, #244]	; (800a808 <HAL_UART_Init+0x148>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d028      	beq.n	800a768 <HAL_UART_Init+0xa8>
 800a716:	f240 113f 	movw	r1, #319	; 0x13f
 800a71a:	483c      	ldr	r0, [pc, #240]	; (800a80c <HAL_UART_Init+0x14c>)
 800a71c:	f7fa fb0f 	bl	8004d3e <assert_failed>
 800a720:	e022      	b.n	800a768 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a33      	ldr	r2, [pc, #204]	; (800a7f4 <HAL_UART_Init+0x134>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d01d      	beq.n	800a768 <HAL_UART_Init+0xa8>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a31      	ldr	r2, [pc, #196]	; (800a7f8 <HAL_UART_Init+0x138>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d018      	beq.n	800a768 <HAL_UART_Init+0xa8>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a30      	ldr	r2, [pc, #192]	; (800a7fc <HAL_UART_Init+0x13c>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d013      	beq.n	800a768 <HAL_UART_Init+0xa8>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a2e      	ldr	r2, [pc, #184]	; (800a800 <HAL_UART_Init+0x140>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d00e      	beq.n	800a768 <HAL_UART_Init+0xa8>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a2d      	ldr	r2, [pc, #180]	; (800a804 <HAL_UART_Init+0x144>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d009      	beq.n	800a768 <HAL_UART_Init+0xa8>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a2b      	ldr	r2, [pc, #172]	; (800a808 <HAL_UART_Init+0x148>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d004      	beq.n	800a768 <HAL_UART_Init+0xa8>
 800a75e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800a762:	482a      	ldr	r0, [pc, #168]	; (800a80c <HAL_UART_Init+0x14c>)
 800a764:	f7fa faeb 	bl	8004d3e <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d106      	bne.n	800a77e <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f7fb fbc7 	bl	8005f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2224      	movs	r2, #36	; 0x24
 800a782:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f022 0201 	bic.w	r2, r2, #1
 800a792:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f99b 	bl	800aad0 <UART_SetConfig>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d101      	bne.n	800a7a4 <HAL_UART_Init+0xe4>
  {
    return HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e022      	b.n	800a7ea <HAL_UART_Init+0x12a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d002      	beq.n	800a7b2 <HAL_UART_Init+0xf2>
  {
    UART_AdvFeatureConfig(huart);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fd7f 	bl	800b2b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	685a      	ldr	r2, [r3, #4]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	689a      	ldr	r2, [r3, #8]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f042 0201 	orr.w	r2, r2, #1
 800a7e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fec2 	bl	800b56c <UART_CheckIdleState>
 800a7e8:	4603      	mov	r3, r0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	40013800 	.word	0x40013800
 800a7f8:	40004400 	.word	0x40004400
 800a7fc:	40004800 	.word	0x40004800
 800a800:	40004c00 	.word	0x40004c00
 800a804:	40005000 	.word	0x40005000
 800a808:	40008000 	.word	0x40008000
 800a80c:	0800bb6c 	.word	0x0800bb6c

0800a810 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b08a      	sub	sp, #40	; 0x28
 800a814:	af02      	add	r7, sp, #8
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	603b      	str	r3, [r7, #0]
 800a81c:	4613      	mov	r3, r2
 800a81e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a824:	2b20      	cmp	r3, #32
 800a826:	f040 8081 	bne.w	800a92c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <HAL_UART_Transmit+0x26>
 800a830:	88fb      	ldrh	r3, [r7, #6]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d101      	bne.n	800a83a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	e079      	b.n	800a92e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a840:	2b01      	cmp	r3, #1
 800a842:	d101      	bne.n	800a848 <HAL_UART_Transmit+0x38>
 800a844:	2302      	movs	r3, #2
 800a846:	e072      	b.n	800a92e <HAL_UART_Transmit+0x11e>
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2221      	movs	r2, #33	; 0x21
 800a85a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a85c:	f7fb fce2 	bl	8006224 <HAL_GetTick>
 800a860:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	88fa      	ldrh	r2, [r7, #6]
 800a866:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	88fa      	ldrh	r2, [r7, #6]
 800a86e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a87a:	d108      	bne.n	800a88e <HAL_UART_Transmit+0x7e>
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d104      	bne.n	800a88e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800a884:	2300      	movs	r3, #0
 800a886:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	61bb      	str	r3, [r7, #24]
 800a88c:	e003      	b.n	800a896 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a892:	2300      	movs	r3, #0
 800a894:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a896:	e02d      	b.n	800a8f4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	2180      	movs	r1, #128	; 0x80
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f000 fea7 	bl	800b5f6 <UART_WaitOnFlagUntilTimeout>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e03d      	b.n	800a92e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10b      	bne.n	800a8d0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	881a      	ldrh	r2, [r3, #0]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8c4:	b292      	uxth	r2, r2
 800a8c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a8c8:	69bb      	ldr	r3, [r7, #24]
 800a8ca:	3302      	adds	r3, #2
 800a8cc:	61bb      	str	r3, [r7, #24]
 800a8ce:	e008      	b.n	800a8e2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	781a      	ldrb	r2, [r3, #0]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	b292      	uxth	r2, r2
 800a8da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d1cb      	bne.n	800a898 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	2200      	movs	r2, #0
 800a908:	2140      	movs	r1, #64	; 0x40
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f000 fe73 	bl	800b5f6 <UART_WaitOnFlagUntilTimeout>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d001      	beq.n	800a91a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e009      	b.n	800a92e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2220      	movs	r2, #32
 800a91e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	e000      	b.n	800a92e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800a92c:	2302      	movs	r3, #2
  }
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3720      	adds	r7, #32
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b08a      	sub	sp, #40	; 0x28
 800a93a:	af02      	add	r7, sp, #8
 800a93c:	60f8      	str	r0, [r7, #12]
 800a93e:	60b9      	str	r1, [r7, #8]
 800a940:	603b      	str	r3, [r7, #0]
 800a942:	4613      	mov	r3, r2
 800a944:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a94a:	2b20      	cmp	r3, #32
 800a94c:	f040 80bb 	bne.w	800aac6 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d002      	beq.n	800a95c <HAL_UART_Receive+0x26>
 800a956:	88fb      	ldrh	r3, [r7, #6]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d101      	bne.n	800a960 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	e0b3      	b.n	800aac8 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a966:	2b01      	cmp	r3, #1
 800a968:	d101      	bne.n	800a96e <HAL_UART_Receive+0x38>
 800a96a:	2302      	movs	r3, #2
 800a96c:	e0ac      	b.n	800aac8 <HAL_UART_Receive+0x192>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2222      	movs	r2, #34	; 0x22
 800a980:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a982:	f7fb fc4f 	bl	8006224 <HAL_GetTick>
 800a986:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	88fa      	ldrh	r2, [r7, #6]
 800a98c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	88fa      	ldrh	r2, [r7, #6]
 800a994:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9a0:	d10e      	bne.n	800a9c0 <HAL_UART_Receive+0x8a>
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d105      	bne.n	800a9b6 <HAL_UART_Receive+0x80>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a9b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9b4:	e02d      	b.n	800aa12 <HAL_UART_Receive+0xdc>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	22ff      	movs	r2, #255	; 0xff
 800a9ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9be:	e028      	b.n	800aa12 <HAL_UART_Receive+0xdc>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d10d      	bne.n	800a9e4 <HAL_UART_Receive+0xae>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d104      	bne.n	800a9da <HAL_UART_Receive+0xa4>
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	22ff      	movs	r2, #255	; 0xff
 800a9d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9d8:	e01b      	b.n	800aa12 <HAL_UART_Receive+0xdc>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	227f      	movs	r2, #127	; 0x7f
 800a9de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9e2:	e016      	b.n	800aa12 <HAL_UART_Receive+0xdc>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9ec:	d10d      	bne.n	800aa0a <HAL_UART_Receive+0xd4>
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d104      	bne.n	800aa00 <HAL_UART_Receive+0xca>
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	227f      	movs	r2, #127	; 0x7f
 800a9fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9fe:	e008      	b.n	800aa12 <HAL_UART_Receive+0xdc>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	223f      	movs	r2, #63	; 0x3f
 800aa04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa08:	e003      	b.n	800aa12 <HAL_UART_Receive+0xdc>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa18:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa22:	d108      	bne.n	800aa36 <HAL_UART_Receive+0x100>
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d104      	bne.n	800aa36 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	61bb      	str	r3, [r7, #24]
 800aa34:	e003      	b.n	800aa3e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800aa3e:	e033      	b.n	800aaa8 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	2200      	movs	r2, #0
 800aa48:	2120      	movs	r1, #32
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f000 fdd3 	bl	800b5f6 <UART_WaitOnFlagUntilTimeout>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 800aa56:	2303      	movs	r3, #3
 800aa58:	e036      	b.n	800aac8 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10c      	bne.n	800aa7a <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	8a7b      	ldrh	r3, [r7, #18]
 800aa6a:	4013      	ands	r3, r2
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	3302      	adds	r3, #2
 800aa76:	61bb      	str	r3, [r7, #24]
 800aa78:	e00d      	b.n	800aa96 <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	b2da      	uxtb	r2, r3
 800aa84:	8a7b      	ldrh	r3, [r7, #18]
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	4013      	ands	r3, r2
 800aa8a:	b2da      	uxtb	r2, r3
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	3301      	adds	r3, #1
 800aa94:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1c5      	bne.n	800aa40 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2220      	movs	r2, #32
 800aab8:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	e000      	b.n	800aac8 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800aac6:	2302      	movs	r3, #2
  }
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3720      	adds	r7, #32
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aad0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800aad4:	b088      	sub	sp, #32
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800aada:	2300      	movs	r3, #0
 800aadc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800aae2:	2300      	movs	r3, #0
 800aae4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	4aab      	ldr	r2, [pc, #684]	; (800ad98 <UART_SetConfig+0x2c8>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d904      	bls.n	800aafa <UART_SetConfig+0x2a>
 800aaf0:	f640 312d 	movw	r1, #2861	; 0xb2d
 800aaf4:	48a9      	ldr	r0, [pc, #676]	; (800ad9c <UART_SetConfig+0x2cc>)
 800aaf6:	f7fa f922 	bl	8004d3e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab02:	d00d      	beq.n	800ab20 <UART_SetConfig+0x50>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d009      	beq.n	800ab20 <UART_SetConfig+0x50>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab14:	d004      	beq.n	800ab20 <UART_SetConfig+0x50>
 800ab16:	f640 312e 	movw	r1, #2862	; 0xb2e
 800ab1a:	48a0      	ldr	r0, [pc, #640]	; (800ad9c <UART_SetConfig+0x2cc>)
 800ab1c:	f7fa f90f 	bl	8004d3e <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a9e      	ldr	r2, [pc, #632]	; (800ada0 <UART_SetConfig+0x2d0>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d10e      	bne.n	800ab48 <UART_SetConfig+0x78>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d030      	beq.n	800ab94 <UART_SetConfig+0xc4>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab3a:	d02b      	beq.n	800ab94 <UART_SetConfig+0xc4>
 800ab3c:	f640 3131 	movw	r1, #2865	; 0xb31
 800ab40:	4896      	ldr	r0, [pc, #600]	; (800ad9c <UART_SetConfig+0x2cc>)
 800ab42:	f7fa f8fc 	bl	8004d3e <assert_failed>
 800ab46:	e025      	b.n	800ab94 <UART_SetConfig+0xc4>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab50:	d012      	beq.n	800ab78 <UART_SetConfig+0xa8>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00e      	beq.n	800ab78 <UART_SetConfig+0xa8>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab62:	d009      	beq.n	800ab78 <UART_SetConfig+0xa8>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab6c:	d004      	beq.n	800ab78 <UART_SetConfig+0xa8>
 800ab6e:	f640 3135 	movw	r1, #2869	; 0xb35
 800ab72:	488a      	ldr	r0, [pc, #552]	; (800ad9c <UART_SetConfig+0x2cc>)
 800ab74:	f7fa f8e3 	bl	8004d3e <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a1b      	ldr	r3, [r3, #32]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d009      	beq.n	800ab94 <UART_SetConfig+0xc4>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a1b      	ldr	r3, [r3, #32]
 800ab84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab88:	d004      	beq.n	800ab94 <UART_SetConfig+0xc4>
 800ab8a:	f640 3136 	movw	r1, #2870	; 0xb36
 800ab8e:	4883      	ldr	r0, [pc, #524]	; (800ad9c <UART_SetConfig+0x2cc>)
 800ab90:	f7fa f8d5 	bl	8004d3e <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00e      	beq.n	800abba <UART_SetConfig+0xea>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aba4:	d009      	beq.n	800abba <UART_SetConfig+0xea>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800abae:	d004      	beq.n	800abba <UART_SetConfig+0xea>
 800abb0:	f640 3139 	movw	r1, #2873	; 0xb39
 800abb4:	4879      	ldr	r0, [pc, #484]	; (800ad9c <UART_SetConfig+0x2cc>)
 800abb6:	f7fa f8c2 	bl	8004d3e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	695b      	ldr	r3, [r3, #20]
 800abbe:	f023 030c 	bic.w	r3, r3, #12
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d103      	bne.n	800abce <UART_SetConfig+0xfe>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	695b      	ldr	r3, [r3, #20]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d104      	bne.n	800abd8 <UART_SetConfig+0x108>
 800abce:	f640 313a 	movw	r1, #2874	; 0xb3a
 800abd2:	4872      	ldr	r0, [pc, #456]	; (800ad9c <UART_SetConfig+0x2cc>)
 800abd4:	f7fa f8b3 	bl	8004d3e <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	699b      	ldr	r3, [r3, #24]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d013      	beq.n	800ac08 <UART_SetConfig+0x138>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	699b      	ldr	r3, [r3, #24]
 800abe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abe8:	d00e      	beq.n	800ac08 <UART_SetConfig+0x138>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	699b      	ldr	r3, [r3, #24]
 800abee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abf2:	d009      	beq.n	800ac08 <UART_SetConfig+0x138>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abfc:	d004      	beq.n	800ac08 <UART_SetConfig+0x138>
 800abfe:	f640 313b 	movw	r1, #2875	; 0xb3b
 800ac02:	4866      	ldr	r0, [pc, #408]	; (800ad9c <UART_SetConfig+0x2cc>)
 800ac04:	f7fa f89b 	bl	8004d3e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	69db      	ldr	r3, [r3, #28]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d009      	beq.n	800ac24 <UART_SetConfig+0x154>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	69db      	ldr	r3, [r3, #28]
 800ac14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac18:	d004      	beq.n	800ac24 <UART_SetConfig+0x154>
 800ac1a:	f640 313c 	movw	r1, #2876	; 0xb3c
 800ac1e:	485f      	ldr	r0, [pc, #380]	; (800ad9c <UART_SetConfig+0x2cc>)
 800ac20:	f7fa f88d 	bl	8004d3e <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	689a      	ldr	r2, [r3, #8]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	431a      	orrs	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	695b      	ldr	r3, [r3, #20]
 800ac32:	431a      	orrs	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	69db      	ldr	r3, [r3, #28]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	4b58      	ldr	r3, [pc, #352]	; (800ada4 <UART_SetConfig+0x2d4>)
 800ac44:	4013      	ands	r3, r2
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	6812      	ldr	r2, [r2, #0]
 800ac4a:	69f9      	ldr	r1, [r7, #28]
 800ac4c:	430b      	orrs	r3, r1
 800ac4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	68da      	ldr	r2, [r3, #12]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	430a      	orrs	r2, r1
 800ac64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a4b      	ldr	r2, [pc, #300]	; (800ada0 <UART_SetConfig+0x2d0>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d004      	beq.n	800ac80 <UART_SetConfig+0x1b0>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	69fa      	ldr	r2, [r7, #28]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	69fa      	ldr	r2, [r7, #28]
 800ac90:	430a      	orrs	r2, r1
 800ac92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a43      	ldr	r2, [pc, #268]	; (800ada8 <UART_SetConfig+0x2d8>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d122      	bne.n	800ace4 <UART_SetConfig+0x214>
 800ac9e:	4b43      	ldr	r3, [pc, #268]	; (800adac <UART_SetConfig+0x2dc>)
 800aca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aca4:	f003 0303 	and.w	r3, r3, #3
 800aca8:	2b03      	cmp	r3, #3
 800acaa:	d817      	bhi.n	800acdc <UART_SetConfig+0x20c>
 800acac:	a201      	add	r2, pc, #4	; (adr r2, 800acb4 <UART_SetConfig+0x1e4>)
 800acae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb2:	bf00      	nop
 800acb4:	0800acc5 	.word	0x0800acc5
 800acb8:	0800acd1 	.word	0x0800acd1
 800acbc:	0800accb 	.word	0x0800accb
 800acc0:	0800acd7 	.word	0x0800acd7
 800acc4:	2301      	movs	r3, #1
 800acc6:	76fb      	strb	r3, [r7, #27]
 800acc8:	e0f9      	b.n	800aebe <UART_SetConfig+0x3ee>
 800acca:	2302      	movs	r3, #2
 800accc:	76fb      	strb	r3, [r7, #27]
 800acce:	e0f6      	b.n	800aebe <UART_SetConfig+0x3ee>
 800acd0:	2304      	movs	r3, #4
 800acd2:	76fb      	strb	r3, [r7, #27]
 800acd4:	e0f3      	b.n	800aebe <UART_SetConfig+0x3ee>
 800acd6:	2308      	movs	r3, #8
 800acd8:	76fb      	strb	r3, [r7, #27]
 800acda:	e0f0      	b.n	800aebe <UART_SetConfig+0x3ee>
 800acdc:	2310      	movs	r3, #16
 800acde:	76fb      	strb	r3, [r7, #27]
 800ace0:	bf00      	nop
 800ace2:	e0ec      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a31      	ldr	r2, [pc, #196]	; (800adb0 <UART_SetConfig+0x2e0>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d134      	bne.n	800ad58 <UART_SetConfig+0x288>
 800acee:	4b2f      	ldr	r3, [pc, #188]	; (800adac <UART_SetConfig+0x2dc>)
 800acf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf4:	f003 030c 	and.w	r3, r3, #12
 800acf8:	2b0c      	cmp	r3, #12
 800acfa:	d829      	bhi.n	800ad50 <UART_SetConfig+0x280>
 800acfc:	a201      	add	r2, pc, #4	; (adr r2, 800ad04 <UART_SetConfig+0x234>)
 800acfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad02:	bf00      	nop
 800ad04:	0800ad39 	.word	0x0800ad39
 800ad08:	0800ad51 	.word	0x0800ad51
 800ad0c:	0800ad51 	.word	0x0800ad51
 800ad10:	0800ad51 	.word	0x0800ad51
 800ad14:	0800ad45 	.word	0x0800ad45
 800ad18:	0800ad51 	.word	0x0800ad51
 800ad1c:	0800ad51 	.word	0x0800ad51
 800ad20:	0800ad51 	.word	0x0800ad51
 800ad24:	0800ad3f 	.word	0x0800ad3f
 800ad28:	0800ad51 	.word	0x0800ad51
 800ad2c:	0800ad51 	.word	0x0800ad51
 800ad30:	0800ad51 	.word	0x0800ad51
 800ad34:	0800ad4b 	.word	0x0800ad4b
 800ad38:	2300      	movs	r3, #0
 800ad3a:	76fb      	strb	r3, [r7, #27]
 800ad3c:	e0bf      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ad3e:	2302      	movs	r3, #2
 800ad40:	76fb      	strb	r3, [r7, #27]
 800ad42:	e0bc      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ad44:	2304      	movs	r3, #4
 800ad46:	76fb      	strb	r3, [r7, #27]
 800ad48:	e0b9      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ad4a:	2308      	movs	r3, #8
 800ad4c:	76fb      	strb	r3, [r7, #27]
 800ad4e:	e0b6      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ad50:	2310      	movs	r3, #16
 800ad52:	76fb      	strb	r3, [r7, #27]
 800ad54:	bf00      	nop
 800ad56:	e0b2      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a15      	ldr	r2, [pc, #84]	; (800adb4 <UART_SetConfig+0x2e4>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d131      	bne.n	800adc6 <UART_SetConfig+0x2f6>
 800ad62:	4b12      	ldr	r3, [pc, #72]	; (800adac <UART_SetConfig+0x2dc>)
 800ad64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ad6c:	2b10      	cmp	r3, #16
 800ad6e:	d00f      	beq.n	800ad90 <UART_SetConfig+0x2c0>
 800ad70:	2b10      	cmp	r3, #16
 800ad72:	d802      	bhi.n	800ad7a <UART_SetConfig+0x2aa>
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d005      	beq.n	800ad84 <UART_SetConfig+0x2b4>
 800ad78:	e021      	b.n	800adbe <UART_SetConfig+0x2ee>
 800ad7a:	2b20      	cmp	r3, #32
 800ad7c:	d005      	beq.n	800ad8a <UART_SetConfig+0x2ba>
 800ad7e:	2b30      	cmp	r3, #48	; 0x30
 800ad80:	d01a      	beq.n	800adb8 <UART_SetConfig+0x2e8>
 800ad82:	e01c      	b.n	800adbe <UART_SetConfig+0x2ee>
 800ad84:	2300      	movs	r3, #0
 800ad86:	76fb      	strb	r3, [r7, #27]
 800ad88:	e099      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ad8a:	2302      	movs	r3, #2
 800ad8c:	76fb      	strb	r3, [r7, #27]
 800ad8e:	e096      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ad90:	2304      	movs	r3, #4
 800ad92:	76fb      	strb	r3, [r7, #27]
 800ad94:	e093      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ad96:	bf00      	nop
 800ad98:	00989680 	.word	0x00989680
 800ad9c:	0800bb6c 	.word	0x0800bb6c
 800ada0:	40008000 	.word	0x40008000
 800ada4:	efff69f3 	.word	0xefff69f3
 800ada8:	40013800 	.word	0x40013800
 800adac:	40021000 	.word	0x40021000
 800adb0:	40004400 	.word	0x40004400
 800adb4:	40004800 	.word	0x40004800
 800adb8:	2308      	movs	r3, #8
 800adba:	76fb      	strb	r3, [r7, #27]
 800adbc:	e07f      	b.n	800aebe <UART_SetConfig+0x3ee>
 800adbe:	2310      	movs	r3, #16
 800adc0:	76fb      	strb	r3, [r7, #27]
 800adc2:	bf00      	nop
 800adc4:	e07b      	b.n	800aebe <UART_SetConfig+0x3ee>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4ab3      	ldr	r2, [pc, #716]	; (800b098 <UART_SetConfig+0x5c8>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d120      	bne.n	800ae12 <UART_SetConfig+0x342>
 800add0:	4bb2      	ldr	r3, [pc, #712]	; (800b09c <UART_SetConfig+0x5cc>)
 800add2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800add6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800adda:	2b40      	cmp	r3, #64	; 0x40
 800addc:	d00f      	beq.n	800adfe <UART_SetConfig+0x32e>
 800adde:	2b40      	cmp	r3, #64	; 0x40
 800ade0:	d802      	bhi.n	800ade8 <UART_SetConfig+0x318>
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d005      	beq.n	800adf2 <UART_SetConfig+0x322>
 800ade6:	e010      	b.n	800ae0a <UART_SetConfig+0x33a>
 800ade8:	2b80      	cmp	r3, #128	; 0x80
 800adea:	d005      	beq.n	800adf8 <UART_SetConfig+0x328>
 800adec:	2bc0      	cmp	r3, #192	; 0xc0
 800adee:	d009      	beq.n	800ae04 <UART_SetConfig+0x334>
 800adf0:	e00b      	b.n	800ae0a <UART_SetConfig+0x33a>
 800adf2:	2300      	movs	r3, #0
 800adf4:	76fb      	strb	r3, [r7, #27]
 800adf6:	e062      	b.n	800aebe <UART_SetConfig+0x3ee>
 800adf8:	2302      	movs	r3, #2
 800adfa:	76fb      	strb	r3, [r7, #27]
 800adfc:	e05f      	b.n	800aebe <UART_SetConfig+0x3ee>
 800adfe:	2304      	movs	r3, #4
 800ae00:	76fb      	strb	r3, [r7, #27]
 800ae02:	e05c      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ae04:	2308      	movs	r3, #8
 800ae06:	76fb      	strb	r3, [r7, #27]
 800ae08:	e059      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ae0a:	2310      	movs	r3, #16
 800ae0c:	76fb      	strb	r3, [r7, #27]
 800ae0e:	bf00      	nop
 800ae10:	e055      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4aa2      	ldr	r2, [pc, #648]	; (800b0a0 <UART_SetConfig+0x5d0>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d124      	bne.n	800ae66 <UART_SetConfig+0x396>
 800ae1c:	4b9f      	ldr	r3, [pc, #636]	; (800b09c <UART_SetConfig+0x5cc>)
 800ae1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae2a:	d012      	beq.n	800ae52 <UART_SetConfig+0x382>
 800ae2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae30:	d802      	bhi.n	800ae38 <UART_SetConfig+0x368>
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d007      	beq.n	800ae46 <UART_SetConfig+0x376>
 800ae36:	e012      	b.n	800ae5e <UART_SetConfig+0x38e>
 800ae38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae3c:	d006      	beq.n	800ae4c <UART_SetConfig+0x37c>
 800ae3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae42:	d009      	beq.n	800ae58 <UART_SetConfig+0x388>
 800ae44:	e00b      	b.n	800ae5e <UART_SetConfig+0x38e>
 800ae46:	2300      	movs	r3, #0
 800ae48:	76fb      	strb	r3, [r7, #27]
 800ae4a:	e038      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ae4c:	2302      	movs	r3, #2
 800ae4e:	76fb      	strb	r3, [r7, #27]
 800ae50:	e035      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ae52:	2304      	movs	r3, #4
 800ae54:	76fb      	strb	r3, [r7, #27]
 800ae56:	e032      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ae58:	2308      	movs	r3, #8
 800ae5a:	76fb      	strb	r3, [r7, #27]
 800ae5c:	e02f      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ae5e:	2310      	movs	r3, #16
 800ae60:	76fb      	strb	r3, [r7, #27]
 800ae62:	bf00      	nop
 800ae64:	e02b      	b.n	800aebe <UART_SetConfig+0x3ee>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a8e      	ldr	r2, [pc, #568]	; (800b0a4 <UART_SetConfig+0x5d4>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d124      	bne.n	800aeba <UART_SetConfig+0x3ea>
 800ae70:	4b8a      	ldr	r3, [pc, #552]	; (800b09c <UART_SetConfig+0x5cc>)
 800ae72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae76:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ae7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae7e:	d012      	beq.n	800aea6 <UART_SetConfig+0x3d6>
 800ae80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae84:	d802      	bhi.n	800ae8c <UART_SetConfig+0x3bc>
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d007      	beq.n	800ae9a <UART_SetConfig+0x3ca>
 800ae8a:	e012      	b.n	800aeb2 <UART_SetConfig+0x3e2>
 800ae8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae90:	d006      	beq.n	800aea0 <UART_SetConfig+0x3d0>
 800ae92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae96:	d009      	beq.n	800aeac <UART_SetConfig+0x3dc>
 800ae98:	e00b      	b.n	800aeb2 <UART_SetConfig+0x3e2>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	76fb      	strb	r3, [r7, #27]
 800ae9e:	e00e      	b.n	800aebe <UART_SetConfig+0x3ee>
 800aea0:	2302      	movs	r3, #2
 800aea2:	76fb      	strb	r3, [r7, #27]
 800aea4:	e00b      	b.n	800aebe <UART_SetConfig+0x3ee>
 800aea6:	2304      	movs	r3, #4
 800aea8:	76fb      	strb	r3, [r7, #27]
 800aeaa:	e008      	b.n	800aebe <UART_SetConfig+0x3ee>
 800aeac:	2308      	movs	r3, #8
 800aeae:	76fb      	strb	r3, [r7, #27]
 800aeb0:	e005      	b.n	800aebe <UART_SetConfig+0x3ee>
 800aeb2:	2310      	movs	r3, #16
 800aeb4:	76fb      	strb	r3, [r7, #27]
 800aeb6:	bf00      	nop
 800aeb8:	e001      	b.n	800aebe <UART_SetConfig+0x3ee>
 800aeba:	2310      	movs	r3, #16
 800aebc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a78      	ldr	r2, [pc, #480]	; (800b0a4 <UART_SetConfig+0x5d4>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	f040 80f3 	bne.w	800b0b0 <UART_SetConfig+0x5e0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aeca:	7efb      	ldrb	r3, [r7, #27]
 800aecc:	2b08      	cmp	r3, #8
 800aece:	d824      	bhi.n	800af1a <UART_SetConfig+0x44a>
 800aed0:	a201      	add	r2, pc, #4	; (adr r2, 800aed8 <UART_SetConfig+0x408>)
 800aed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed6:	bf00      	nop
 800aed8:	0800aefd 	.word	0x0800aefd
 800aedc:	0800af1b 	.word	0x0800af1b
 800aee0:	0800af05 	.word	0x0800af05
 800aee4:	0800af1b 	.word	0x0800af1b
 800aee8:	0800af0b 	.word	0x0800af0b
 800aeec:	0800af1b 	.word	0x0800af1b
 800aef0:	0800af1b 	.word	0x0800af1b
 800aef4:	0800af1b 	.word	0x0800af1b
 800aef8:	0800af13 	.word	0x0800af13
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800aefc:	f7fc fd4c 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800af00:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800af02:	e00d      	b.n	800af20 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800af04:	4b68      	ldr	r3, [pc, #416]	; (800b0a8 <UART_SetConfig+0x5d8>)
 800af06:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800af08:	e00a      	b.n	800af20 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800af0a:	f7fc fcaf 	bl	800786c <HAL_RCC_GetSysClockFreq>
 800af0e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800af10:	e006      	b.n	800af20 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800af12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af16:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800af18:	e002      	b.n	800af20 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	74fb      	strb	r3, [r7, #19]
        break;
 800af1e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2b00      	cmp	r3, #0
 800af24:	f000 81b7 	beq.w	800b296 <UART_SetConfig+0x7c6>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	685a      	ldr	r2, [r3, #4]
 800af2c:	4613      	mov	r3, r2
 800af2e:	005b      	lsls	r3, r3, #1
 800af30:	4413      	add	r3, r2
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	429a      	cmp	r2, r3
 800af36:	d305      	bcc.n	800af44 <UART_SetConfig+0x474>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	429a      	cmp	r2, r3
 800af42:	d902      	bls.n	800af4a <UART_SetConfig+0x47a>
      {
        ret = HAL_ERROR;
 800af44:	2301      	movs	r3, #1
 800af46:	74fb      	strb	r3, [r7, #19]
 800af48:	e1a5      	b.n	800b296 <UART_SetConfig+0x7c6>
      }
      else
      {
        switch (clocksource)
 800af4a:	7efb      	ldrb	r3, [r7, #27]
 800af4c:	2b08      	cmp	r3, #8
 800af4e:	f200 8090 	bhi.w	800b072 <UART_SetConfig+0x5a2>
 800af52:	a201      	add	r2, pc, #4	; (adr r2, 800af58 <UART_SetConfig+0x488>)
 800af54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af58:	0800af7d 	.word	0x0800af7d
 800af5c:	0800b073 	.word	0x0800b073
 800af60:	0800afc9 	.word	0x0800afc9
 800af64:	0800b073 	.word	0x0800b073
 800af68:	0800affd 	.word	0x0800affd
 800af6c:	0800b073 	.word	0x0800b073
 800af70:	0800b073 	.word	0x0800b073
 800af74:	0800b073 	.word	0x0800b073
 800af78:	0800b049 	.word	0x0800b049
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800af7c:	f7fc fd0c 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800af80:	4603      	mov	r3, r0
 800af82:	4619      	mov	r1, r3
 800af84:	f04f 0200 	mov.w	r2, #0
 800af88:	f04f 0300 	mov.w	r3, #0
 800af8c:	f04f 0400 	mov.w	r4, #0
 800af90:	0214      	lsls	r4, r2, #8
 800af92:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800af96:	020b      	lsls	r3, r1, #8
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	6852      	ldr	r2, [r2, #4]
 800af9c:	0852      	lsrs	r2, r2, #1
 800af9e:	4611      	mov	r1, r2
 800afa0:	f04f 0200 	mov.w	r2, #0
 800afa4:	eb13 0b01 	adds.w	fp, r3, r1
 800afa8:	eb44 0c02 	adc.w	ip, r4, r2
 800afac:	4658      	mov	r0, fp
 800afae:	4661      	mov	r1, ip
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	f04f 0400 	mov.w	r4, #0
 800afb8:	461a      	mov	r2, r3
 800afba:	4623      	mov	r3, r4
 800afbc:	f7f5 f954 	bl	8000268 <__aeabi_uldivmod>
 800afc0:	4603      	mov	r3, r0
 800afc2:	460c      	mov	r4, r1
 800afc4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800afc6:	e057      	b.n	800b078 <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	085b      	lsrs	r3, r3, #1
 800afce:	f04f 0400 	mov.w	r4, #0
 800afd2:	4936      	ldr	r1, [pc, #216]	; (800b0ac <UART_SetConfig+0x5dc>)
 800afd4:	f04f 0200 	mov.w	r2, #0
 800afd8:	eb13 0b01 	adds.w	fp, r3, r1
 800afdc:	eb44 0c02 	adc.w	ip, r4, r2
 800afe0:	4658      	mov	r0, fp
 800afe2:	4661      	mov	r1, ip
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	f04f 0400 	mov.w	r4, #0
 800afec:	461a      	mov	r2, r3
 800afee:	4623      	mov	r3, r4
 800aff0:	f7f5 f93a 	bl	8000268 <__aeabi_uldivmod>
 800aff4:	4603      	mov	r3, r0
 800aff6:	460c      	mov	r4, r1
 800aff8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800affa:	e03d      	b.n	800b078 <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800affc:	f7fc fc36 	bl	800786c <HAL_RCC_GetSysClockFreq>
 800b000:	4603      	mov	r3, r0
 800b002:	4619      	mov	r1, r3
 800b004:	f04f 0200 	mov.w	r2, #0
 800b008:	f04f 0300 	mov.w	r3, #0
 800b00c:	f04f 0400 	mov.w	r4, #0
 800b010:	0214      	lsls	r4, r2, #8
 800b012:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b016:	020b      	lsls	r3, r1, #8
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	6852      	ldr	r2, [r2, #4]
 800b01c:	0852      	lsrs	r2, r2, #1
 800b01e:	4611      	mov	r1, r2
 800b020:	f04f 0200 	mov.w	r2, #0
 800b024:	eb13 0b01 	adds.w	fp, r3, r1
 800b028:	eb44 0c02 	adc.w	ip, r4, r2
 800b02c:	4658      	mov	r0, fp
 800b02e:	4661      	mov	r1, ip
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	f04f 0400 	mov.w	r4, #0
 800b038:	461a      	mov	r2, r3
 800b03a:	4623      	mov	r3, r4
 800b03c:	f7f5 f914 	bl	8000268 <__aeabi_uldivmod>
 800b040:	4603      	mov	r3, r0
 800b042:	460c      	mov	r4, r1
 800b044:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800b046:	e017      	b.n	800b078 <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	085b      	lsrs	r3, r3, #1
 800b04e:	f04f 0400 	mov.w	r4, #0
 800b052:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800b056:	f144 0100 	adc.w	r1, r4, #0
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	f04f 0400 	mov.w	r4, #0
 800b062:	461a      	mov	r2, r3
 800b064:	4623      	mov	r3, r4
 800b066:	f7f5 f8ff 	bl	8000268 <__aeabi_uldivmod>
 800b06a:	4603      	mov	r3, r0
 800b06c:	460c      	mov	r4, r1
 800b06e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800b070:	e002      	b.n	800b078 <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	74fb      	strb	r3, [r7, #19]
            break;
 800b076:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b07e:	d308      	bcc.n	800b092 <UART_SetConfig+0x5c2>
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b086:	d204      	bcs.n	800b092 <UART_SetConfig+0x5c2>
        {
          huart->Instance->BRR = usartdiv;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	60da      	str	r2, [r3, #12]
 800b090:	e101      	b.n	800b296 <UART_SetConfig+0x7c6>
        }
        else
        {
          ret = HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	74fb      	strb	r3, [r7, #19]
 800b096:	e0fe      	b.n	800b296 <UART_SetConfig+0x7c6>
 800b098:	40004c00 	.word	0x40004c00
 800b09c:	40021000 	.word	0x40021000
 800b0a0:	40005000 	.word	0x40005000
 800b0a4:	40008000 	.word	0x40008000
 800b0a8:	00f42400 	.word	0x00f42400
 800b0ac:	f4240000 	.word	0xf4240000
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	69db      	ldr	r3, [r3, #28]
 800b0b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0b8:	d17f      	bne.n	800b1ba <UART_SetConfig+0x6ea>
  {
    switch (clocksource)
 800b0ba:	7efb      	ldrb	r3, [r7, #27]
 800b0bc:	2b08      	cmp	r3, #8
 800b0be:	d85c      	bhi.n	800b17a <UART_SetConfig+0x6aa>
 800b0c0:	a201      	add	r2, pc, #4	; (adr r2, 800b0c8 <UART_SetConfig+0x5f8>)
 800b0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c6:	bf00      	nop
 800b0c8:	0800b0ed 	.word	0x0800b0ed
 800b0cc:	0800b10b 	.word	0x0800b10b
 800b0d0:	0800b129 	.word	0x0800b129
 800b0d4:	0800b17b 	.word	0x0800b17b
 800b0d8:	0800b145 	.word	0x0800b145
 800b0dc:	0800b17b 	.word	0x0800b17b
 800b0e0:	0800b17b 	.word	0x0800b17b
 800b0e4:	0800b17b 	.word	0x0800b17b
 800b0e8:	0800b163 	.word	0x0800b163
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800b0ec:	f7fc fc54 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	005a      	lsls	r2, r3, #1
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	085b      	lsrs	r3, r3, #1
 800b0fa:	441a      	add	r2, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	fbb2 f3f3 	udiv	r3, r2, r3
 800b104:	b29b      	uxth	r3, r3
 800b106:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b108:	e03a      	b.n	800b180 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800b10a:	f7fc fc5b 	bl	80079c4 <HAL_RCC_GetPCLK2Freq>
 800b10e:	4603      	mov	r3, r0
 800b110:	005a      	lsls	r2, r3, #1
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	085b      	lsrs	r3, r3, #1
 800b118:	441a      	add	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b122:	b29b      	uxth	r3, r3
 800b124:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b126:	e02b      	b.n	800b180 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	085b      	lsrs	r3, r3, #1
 800b12e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800b132:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	6852      	ldr	r2, [r2, #4]
 800b13a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b13e:	b29b      	uxth	r3, r3
 800b140:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b142:	e01d      	b.n	800b180 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800b144:	f7fc fb92 	bl	800786c <HAL_RCC_GetSysClockFreq>
 800b148:	4603      	mov	r3, r0
 800b14a:	005a      	lsls	r2, r3, #1
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	085b      	lsrs	r3, r3, #1
 800b152:	441a      	add	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	fbb2 f3f3 	udiv	r3, r2, r3
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b160:	e00e      	b.n	800b180 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	085b      	lsrs	r3, r3, #1
 800b168:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	fbb2 f3f3 	udiv	r3, r2, r3
 800b174:	b29b      	uxth	r3, r3
 800b176:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b178:	e002      	b.n	800b180 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800b17a:	2301      	movs	r3, #1
 800b17c:	74fb      	strb	r3, [r7, #19]
        break;
 800b17e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	2b0f      	cmp	r3, #15
 800b184:	d916      	bls.n	800b1b4 <UART_SetConfig+0x6e4>
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b18c:	d212      	bcs.n	800b1b4 <UART_SetConfig+0x6e4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	b29b      	uxth	r3, r3
 800b192:	f023 030f 	bic.w	r3, r3, #15
 800b196:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	085b      	lsrs	r3, r3, #1
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	f003 0307 	and.w	r3, r3, #7
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	897b      	ldrh	r3, [r7, #10]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	897a      	ldrh	r2, [r7, #10]
 800b1b0:	60da      	str	r2, [r3, #12]
 800b1b2:	e070      	b.n	800b296 <UART_SetConfig+0x7c6>
    }
    else
    {
      ret = HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	74fb      	strb	r3, [r7, #19]
 800b1b8:	e06d      	b.n	800b296 <UART_SetConfig+0x7c6>
    }
  }
  else
  {
    switch (clocksource)
 800b1ba:	7efb      	ldrb	r3, [r7, #27]
 800b1bc:	2b08      	cmp	r3, #8
 800b1be:	d859      	bhi.n	800b274 <UART_SetConfig+0x7a4>
 800b1c0:	a201      	add	r2, pc, #4	; (adr r2, 800b1c8 <UART_SetConfig+0x6f8>)
 800b1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c6:	bf00      	nop
 800b1c8:	0800b1ed 	.word	0x0800b1ed
 800b1cc:	0800b209 	.word	0x0800b209
 800b1d0:	0800b225 	.word	0x0800b225
 800b1d4:	0800b275 	.word	0x0800b275
 800b1d8:	0800b241 	.word	0x0800b241
 800b1dc:	0800b275 	.word	0x0800b275
 800b1e0:	0800b275 	.word	0x0800b275
 800b1e4:	0800b275 	.word	0x0800b275
 800b1e8:	0800b25d 	.word	0x0800b25d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800b1ec:	f7fc fbd4 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	085b      	lsrs	r3, r3, #1
 800b1f8:	441a      	add	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b202:	b29b      	uxth	r3, r3
 800b204:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b206:	e038      	b.n	800b27a <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800b208:	f7fc fbdc 	bl	80079c4 <HAL_RCC_GetPCLK2Freq>
 800b20c:	4602      	mov	r2, r0
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	085b      	lsrs	r3, r3, #1
 800b214:	441a      	add	r2, r3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b21e:	b29b      	uxth	r3, r3
 800b220:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b222:	e02a      	b.n	800b27a <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	085b      	lsrs	r3, r3, #1
 800b22a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800b22e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	6852      	ldr	r2, [r2, #4]
 800b236:	fbb3 f3f2 	udiv	r3, r3, r2
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b23e:	e01c      	b.n	800b27a <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800b240:	f7fc fb14 	bl	800786c <HAL_RCC_GetSysClockFreq>
 800b244:	4602      	mov	r2, r0
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	085b      	lsrs	r3, r3, #1
 800b24c:	441a      	add	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	fbb2 f3f3 	udiv	r3, r2, r3
 800b256:	b29b      	uxth	r3, r3
 800b258:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b25a:	e00e      	b.n	800b27a <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	085b      	lsrs	r3, r3, #1
 800b262:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b26e:	b29b      	uxth	r3, r3
 800b270:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b272:	e002      	b.n	800b27a <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	74fb      	strb	r3, [r7, #19]
        break;
 800b278:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	2b0f      	cmp	r3, #15
 800b27e:	d908      	bls.n	800b292 <UART_SetConfig+0x7c2>
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b286:	d204      	bcs.n	800b292 <UART_SetConfig+0x7c2>
    {
      huart->Instance->BRR = usartdiv;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	697a      	ldr	r2, [r7, #20]
 800b28e:	60da      	str	r2, [r3, #12]
 800b290:	e001      	b.n	800b296 <UART_SetConfig+0x7c6>
    }
    else
    {
      ret = HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b2a2:	7cfb      	ldrb	r3, [r7, #19]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3720      	adds	r7, #32
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b2ae:	bf00      	nop

0800b2b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	2bff      	cmp	r3, #255	; 0xff
 800b2be:	d904      	bls.n	800b2ca <UART_AdvFeatureConfig+0x1a>
 800b2c0:	f640 4155 	movw	r1, #3157	; 0xc55
 800b2c4:	489b      	ldr	r0, [pc, #620]	; (800b534 <UART_AdvFeatureConfig+0x284>)
 800b2c6:	f7f9 fd3a 	bl	8004d3e <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ce:	f003 0301 	and.w	r3, r3, #1
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d018      	beq.n	800b308 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d009      	beq.n	800b2f2 <UART_AdvFeatureConfig+0x42>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2e6:	d004      	beq.n	800b2f2 <UART_AdvFeatureConfig+0x42>
 800b2e8:	f640 415a 	movw	r1, #3162	; 0xc5a
 800b2ec:	4891      	ldr	r0, [pc, #580]	; (800b534 <UART_AdvFeatureConfig+0x284>)
 800b2ee:	f7f9 fd26 	bl	8004d3e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	430a      	orrs	r2, r1
 800b306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30c:	f003 0302 	and.w	r3, r3, #2
 800b310:	2b00      	cmp	r3, #0
 800b312:	d018      	beq.n	800b346 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d009      	beq.n	800b330 <UART_AdvFeatureConfig+0x80>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b324:	d004      	beq.n	800b330 <UART_AdvFeatureConfig+0x80>
 800b326:	f640 4161 	movw	r1, #3169	; 0xc61
 800b32a:	4882      	ldr	r0, [pc, #520]	; (800b534 <UART_AdvFeatureConfig+0x284>)
 800b32c:	f7f9 fd07 	bl	8004d3e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	430a      	orrs	r2, r1
 800b344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34a:	f003 0304 	and.w	r3, r3, #4
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d018      	beq.n	800b384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b356:	2b00      	cmp	r3, #0
 800b358:	d009      	beq.n	800b36e <UART_AdvFeatureConfig+0xbe>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b35e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b362:	d004      	beq.n	800b36e <UART_AdvFeatureConfig+0xbe>
 800b364:	f640 4168 	movw	r1, #3176	; 0xc68
 800b368:	4872      	ldr	r0, [pc, #456]	; (800b534 <UART_AdvFeatureConfig+0x284>)
 800b36a:	f7f9 fce8 	bl	8004d3e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	430a      	orrs	r2, r1
 800b382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b388:	f003 0308 	and.w	r3, r3, #8
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d018      	beq.n	800b3c2 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b394:	2b00      	cmp	r3, #0
 800b396:	d009      	beq.n	800b3ac <UART_AdvFeatureConfig+0xfc>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b39c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3a0:	d004      	beq.n	800b3ac <UART_AdvFeatureConfig+0xfc>
 800b3a2:	f640 416f 	movw	r1, #3183	; 0xc6f
 800b3a6:	4863      	ldr	r0, [pc, #396]	; (800b534 <UART_AdvFeatureConfig+0x284>)
 800b3a8:	f7f9 fcc9 	bl	8004d3e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	430a      	orrs	r2, r1
 800b3c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c6:	f003 0310 	and.w	r3, r3, #16
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d018      	beq.n	800b400 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d009      	beq.n	800b3ea <UART_AdvFeatureConfig+0x13a>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3de:	d004      	beq.n	800b3ea <UART_AdvFeatureConfig+0x13a>
 800b3e0:	f640 4176 	movw	r1, #3190	; 0xc76
 800b3e4:	4853      	ldr	r0, [pc, #332]	; (800b534 <UART_AdvFeatureConfig+0x284>)
 800b3e6:	f7f9 fcaa 	bl	8004d3e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	430a      	orrs	r2, r1
 800b3fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b404:	f003 0320 	and.w	r3, r3, #32
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d018      	beq.n	800b43e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b410:	2b00      	cmp	r3, #0
 800b412:	d009      	beq.n	800b428 <UART_AdvFeatureConfig+0x178>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b41c:	d004      	beq.n	800b428 <UART_AdvFeatureConfig+0x178>
 800b41e:	f640 417d 	movw	r1, #3197	; 0xc7d
 800b422:	4844      	ldr	r0, [pc, #272]	; (800b534 <UART_AdvFeatureConfig+0x284>)
 800b424:	f7f9 fc8b 	bl	8004d3e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	430a      	orrs	r2, r1
 800b43c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b446:	2b00      	cmp	r3, #0
 800b448:	d05e      	beq.n	800b508 <UART_AdvFeatureConfig+0x258>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a3a      	ldr	r2, [pc, #232]	; (800b538 <UART_AdvFeatureConfig+0x288>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d018      	beq.n	800b486 <UART_AdvFeatureConfig+0x1d6>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a38      	ldr	r2, [pc, #224]	; (800b53c <UART_AdvFeatureConfig+0x28c>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d013      	beq.n	800b486 <UART_AdvFeatureConfig+0x1d6>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a37      	ldr	r2, [pc, #220]	; (800b540 <UART_AdvFeatureConfig+0x290>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d00e      	beq.n	800b486 <UART_AdvFeatureConfig+0x1d6>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a35      	ldr	r2, [pc, #212]	; (800b544 <UART_AdvFeatureConfig+0x294>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d009      	beq.n	800b486 <UART_AdvFeatureConfig+0x1d6>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a34      	ldr	r2, [pc, #208]	; (800b548 <UART_AdvFeatureConfig+0x298>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d004      	beq.n	800b486 <UART_AdvFeatureConfig+0x1d6>
 800b47c:	f640 4184 	movw	r1, #3204	; 0xc84
 800b480:	482c      	ldr	r0, [pc, #176]	; (800b534 <UART_AdvFeatureConfig+0x284>)
 800b482:	f7f9 fc5c 	bl	8004d3e <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d009      	beq.n	800b4a2 <UART_AdvFeatureConfig+0x1f2>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b496:	d004      	beq.n	800b4a2 <UART_AdvFeatureConfig+0x1f2>
 800b498:	f640 4185 	movw	r1, #3205	; 0xc85
 800b49c:	4825      	ldr	r0, [pc, #148]	; (800b534 <UART_AdvFeatureConfig+0x284>)
 800b49e:	f7f9 fc4e 	bl	8004d3e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	430a      	orrs	r2, r1
 800b4b6:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4c0:	d122      	bne.n	800b508 <UART_AdvFeatureConfig+0x258>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d013      	beq.n	800b4f2 <UART_AdvFeatureConfig+0x242>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4d2:	d00e      	beq.n	800b4f2 <UART_AdvFeatureConfig+0x242>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4dc:	d009      	beq.n	800b4f2 <UART_AdvFeatureConfig+0x242>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b4e6:	d004      	beq.n	800b4f2 <UART_AdvFeatureConfig+0x242>
 800b4e8:	f640 418a 	movw	r1, #3210	; 0xc8a
 800b4ec:	4811      	ldr	r0, [pc, #68]	; (800b534 <UART_AdvFeatureConfig+0x284>)
 800b4ee:	f7f9 fc26 	bl	8004d3e <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	430a      	orrs	r2, r1
 800b506:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b510:	2b00      	cmp	r3, #0
 800b512:	d026      	beq.n	800b562 <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d017      	beq.n	800b54c <UART_AdvFeatureConfig+0x29c>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b520:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b524:	d012      	beq.n	800b54c <UART_AdvFeatureConfig+0x29c>
 800b526:	f640 4192 	movw	r1, #3218	; 0xc92
 800b52a:	4802      	ldr	r0, [pc, #8]	; (800b534 <UART_AdvFeatureConfig+0x284>)
 800b52c:	f7f9 fc07 	bl	8004d3e <assert_failed>
 800b530:	e00c      	b.n	800b54c <UART_AdvFeatureConfig+0x29c>
 800b532:	bf00      	nop
 800b534:	0800bb6c 	.word	0x0800bb6c
 800b538:	40013800 	.word	0x40013800
 800b53c:	40004400 	.word	0x40004400
 800b540:	40004800 	.word	0x40004800
 800b544:	40004c00 	.word	0x40004c00
 800b548:	40005000 	.word	0x40005000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	430a      	orrs	r2, r1
 800b560:	605a      	str	r2, [r3, #4]
  }
}
 800b562:	bf00      	nop
 800b564:	3708      	adds	r7, #8
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop

0800b56c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af02      	add	r7, sp, #8
 800b572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b57a:	f7fa fe53 	bl	8006224 <HAL_GetTick>
 800b57e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 0308 	and.w	r3, r3, #8
 800b58a:	2b08      	cmp	r3, #8
 800b58c:	d10e      	bne.n	800b5ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b58e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2200      	movs	r2, #0
 800b598:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 f82a 	bl	800b5f6 <UART_WaitOnFlagUntilTimeout>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d001      	beq.n	800b5ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5a8:	2303      	movs	r3, #3
 800b5aa:	e020      	b.n	800b5ee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 0304 	and.w	r3, r3, #4
 800b5b6:	2b04      	cmp	r3, #4
 800b5b8:	d10e      	bne.n	800b5d8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b5be:	9300      	str	r3, [sp, #0]
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 f814 	bl	800b5f6 <UART_WaitOnFlagUntilTimeout>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d001      	beq.n	800b5d8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	e00a      	b.n	800b5ee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2220      	movs	r2, #32
 800b5dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2220      	movs	r2, #32
 800b5e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b084      	sub	sp, #16
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	60f8      	str	r0, [r7, #12]
 800b5fe:	60b9      	str	r1, [r7, #8]
 800b600:	603b      	str	r3, [r7, #0]
 800b602:	4613      	mov	r3, r2
 800b604:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b606:	e02a      	b.n	800b65e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b60e:	d026      	beq.n	800b65e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b610:	f7fa fe08 	bl	8006224 <HAL_GetTick>
 800b614:	4602      	mov	r2, r0
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	69ba      	ldr	r2, [r7, #24]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d302      	bcc.n	800b626 <UART_WaitOnFlagUntilTimeout+0x30>
 800b620:	69bb      	ldr	r3, [r7, #24]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d11b      	bne.n	800b65e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b634:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	689a      	ldr	r2, [r3, #8]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f022 0201 	bic.w	r2, r2, #1
 800b644:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2220      	movs	r2, #32
 800b64a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2220      	movs	r2, #32
 800b650:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2200      	movs	r2, #0
 800b656:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b65a:	2303      	movs	r3, #3
 800b65c:	e00f      	b.n	800b67e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	69da      	ldr	r2, [r3, #28]
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	4013      	ands	r3, r2
 800b668:	68ba      	ldr	r2, [r7, #8]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	bf0c      	ite	eq
 800b66e:	2301      	moveq	r3, #1
 800b670:	2300      	movne	r3, #0
 800b672:	b2db      	uxtb	r3, r3
 800b674:	461a      	mov	r2, r3
 800b676:	79fb      	ldrb	r3, [r7, #7]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d0c5      	beq.n	800b608 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b67c:	2300      	movs	r3, #0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
	...

0800b688 <__libc_init_array>:
 800b688:	b570      	push	{r4, r5, r6, lr}
 800b68a:	4e0d      	ldr	r6, [pc, #52]	; (800b6c0 <__libc_init_array+0x38>)
 800b68c:	4c0d      	ldr	r4, [pc, #52]	; (800b6c4 <__libc_init_array+0x3c>)
 800b68e:	1ba4      	subs	r4, r4, r6
 800b690:	10a4      	asrs	r4, r4, #2
 800b692:	2500      	movs	r5, #0
 800b694:	42a5      	cmp	r5, r4
 800b696:	d109      	bne.n	800b6ac <__libc_init_array+0x24>
 800b698:	4e0b      	ldr	r6, [pc, #44]	; (800b6c8 <__libc_init_array+0x40>)
 800b69a:	4c0c      	ldr	r4, [pc, #48]	; (800b6cc <__libc_init_array+0x44>)
 800b69c:	f000 f82c 	bl	800b6f8 <_init>
 800b6a0:	1ba4      	subs	r4, r4, r6
 800b6a2:	10a4      	asrs	r4, r4, #2
 800b6a4:	2500      	movs	r5, #0
 800b6a6:	42a5      	cmp	r5, r4
 800b6a8:	d105      	bne.n	800b6b6 <__libc_init_array+0x2e>
 800b6aa:	bd70      	pop	{r4, r5, r6, pc}
 800b6ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b6b0:	4798      	blx	r3
 800b6b2:	3501      	adds	r5, #1
 800b6b4:	e7ee      	b.n	800b694 <__libc_init_array+0xc>
 800b6b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b6ba:	4798      	blx	r3
 800b6bc:	3501      	adds	r5, #1
 800b6be:	e7f2      	b.n	800b6a6 <__libc_init_array+0x1e>
 800b6c0:	0800cde4 	.word	0x0800cde4
 800b6c4:	0800cde4 	.word	0x0800cde4
 800b6c8:	0800cde4 	.word	0x0800cde4
 800b6cc:	0800cde8 	.word	0x0800cde8

0800b6d0 <memcpy>:
 800b6d0:	b510      	push	{r4, lr}
 800b6d2:	1e43      	subs	r3, r0, #1
 800b6d4:	440a      	add	r2, r1
 800b6d6:	4291      	cmp	r1, r2
 800b6d8:	d100      	bne.n	800b6dc <memcpy+0xc>
 800b6da:	bd10      	pop	{r4, pc}
 800b6dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6e4:	e7f7      	b.n	800b6d6 <memcpy+0x6>

0800b6e6 <memset>:
 800b6e6:	4402      	add	r2, r0
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d100      	bne.n	800b6f0 <memset+0xa>
 800b6ee:	4770      	bx	lr
 800b6f0:	f803 1b01 	strb.w	r1, [r3], #1
 800b6f4:	e7f9      	b.n	800b6ea <memset+0x4>
	...

0800b6f8 <_init>:
 800b6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fa:	bf00      	nop
 800b6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6fe:	bc08      	pop	{r3}
 800b700:	469e      	mov	lr, r3
 800b702:	4770      	bx	lr

0800b704 <_fini>:
 800b704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b706:	bf00      	nop
 800b708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b70a:	bc08      	pop	{r3}
 800b70c:	469e      	mov	lr, r3
 800b70e:	4770      	bx	lr

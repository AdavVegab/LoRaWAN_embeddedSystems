
FW_Feinstaubmessung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016bc  0800b0f4  0800b0f4  0001b0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7b0  0800c7b0  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7b0  0800c7b0  0001c7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7b8  0800c7b8  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7b8  0800c7b8  0001c7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7bc  0800c7bc  0001c7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800c7c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000054  0800c814  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  0800c814  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ade0  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e52  00000000  00000000  0003ae64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a8  00000000  00000000  0003dcb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001490  00000000  00000000  0003f260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000282df  00000000  00000000  000406f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000125be  00000000  00000000  000689cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f63b8  00000000  00000000  0007af8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00171345  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bb0  00000000  00000000  001713c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000054 	.word	0x20000054
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b0dc 	.word	0x0800b0dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000058 	.word	0x20000058
 80001c4:	0800b0dc 	.word	0x0800b0dc

080001c8 <__aeabi_ldivmod>:
 80001c8:	b97b      	cbnz	r3, 80001ea <__aeabi_ldivmod+0x22>
 80001ca:	b972      	cbnz	r2, 80001ea <__aeabi_ldivmod+0x22>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bfbe      	ittt	lt
 80001d0:	2000      	movlt	r0, #0
 80001d2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001d6:	e006      	blt.n	80001e6 <__aeabi_ldivmod+0x1e>
 80001d8:	bf08      	it	eq
 80001da:	2800      	cmpeq	r0, #0
 80001dc:	bf1c      	itt	ne
 80001de:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001e2:	f04f 30ff 	movne.w	r0, #4294967295
 80001e6:	f000 b9bd 	b.w	8000564 <__aeabi_idiv0>
 80001ea:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f2:	2900      	cmp	r1, #0
 80001f4:	db09      	blt.n	800020a <__aeabi_ldivmod+0x42>
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db1a      	blt.n	8000230 <__aeabi_ldivmod+0x68>
 80001fa:	f000 f84d 	bl	8000298 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4770      	bx	lr
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	db1b      	blt.n	800024c <__aeabi_ldivmod+0x84>
 8000214:	f000 f840 	bl	8000298 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4240      	negs	r0, r0
 8000224:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000228:	4252      	negs	r2, r2
 800022a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800022e:	4770      	bx	lr
 8000230:	4252      	negs	r2, r2
 8000232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000236:	f000 f82f 	bl	8000298 <__udivmoddi4>
 800023a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000242:	b004      	add	sp, #16
 8000244:	4240      	negs	r0, r0
 8000246:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024a:	4770      	bx	lr
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	f000 f821 	bl	8000298 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4252      	negs	r2, r2
 8000262:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000266:	4770      	bx	lr

08000268 <__aeabi_uldivmod>:
 8000268:	b953      	cbnz	r3, 8000280 <__aeabi_uldivmod+0x18>
 800026a:	b94a      	cbnz	r2, 8000280 <__aeabi_uldivmod+0x18>
 800026c:	2900      	cmp	r1, #0
 800026e:	bf08      	it	eq
 8000270:	2800      	cmpeq	r0, #0
 8000272:	bf1c      	itt	ne
 8000274:	f04f 31ff 	movne.w	r1, #4294967295
 8000278:	f04f 30ff 	movne.w	r0, #4294967295
 800027c:	f000 b972 	b.w	8000564 <__aeabi_idiv0>
 8000280:	f1ad 0c08 	sub.w	ip, sp, #8
 8000284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000294:	b004      	add	sp, #16
 8000296:	4770      	bx	lr

08000298 <__udivmoddi4>:
 8000298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800029c:	9e08      	ldr	r6, [sp, #32]
 800029e:	4604      	mov	r4, r0
 80002a0:	4688      	mov	r8, r1
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d14b      	bne.n	800033e <__udivmoddi4+0xa6>
 80002a6:	428a      	cmp	r2, r1
 80002a8:	4615      	mov	r5, r2
 80002aa:	d967      	bls.n	800037c <__udivmoddi4+0xe4>
 80002ac:	fab2 f282 	clz	r2, r2
 80002b0:	b14a      	cbz	r2, 80002c6 <__udivmoddi4+0x2e>
 80002b2:	f1c2 0720 	rsb	r7, r2, #32
 80002b6:	fa01 f302 	lsl.w	r3, r1, r2
 80002ba:	fa20 f707 	lsr.w	r7, r0, r7
 80002be:	4095      	lsls	r5, r2
 80002c0:	ea47 0803 	orr.w	r8, r7, r3
 80002c4:	4094      	lsls	r4, r2
 80002c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002ca:	0c23      	lsrs	r3, r4, #16
 80002cc:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d0:	fa1f fc85 	uxth.w	ip, r5
 80002d4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002dc:	fb07 f10c 	mul.w	r1, r7, ip
 80002e0:	4299      	cmp	r1, r3
 80002e2:	d909      	bls.n	80002f8 <__udivmoddi4+0x60>
 80002e4:	18eb      	adds	r3, r5, r3
 80002e6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ea:	f080 811b 	bcs.w	8000524 <__udivmoddi4+0x28c>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 8118 	bls.w	8000524 <__udivmoddi4+0x28c>
 80002f4:	3f02      	subs	r7, #2
 80002f6:	442b      	add	r3, r5
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000300:	fb0e 3310 	mls	r3, lr, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 fc0c 	mul.w	ip, r0, ip
 800030c:	45a4      	cmp	ip, r4
 800030e:	d909      	bls.n	8000324 <__udivmoddi4+0x8c>
 8000310:	192c      	adds	r4, r5, r4
 8000312:	f100 33ff 	add.w	r3, r0, #4294967295
 8000316:	f080 8107 	bcs.w	8000528 <__udivmoddi4+0x290>
 800031a:	45a4      	cmp	ip, r4
 800031c:	f240 8104 	bls.w	8000528 <__udivmoddi4+0x290>
 8000320:	3802      	subs	r0, #2
 8000322:	442c      	add	r4, r5
 8000324:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000328:	eba4 040c 	sub.w	r4, r4, ip
 800032c:	2700      	movs	r7, #0
 800032e:	b11e      	cbz	r6, 8000338 <__udivmoddi4+0xa0>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c6 4300 	strd	r4, r3, [r6]
 8000338:	4639      	mov	r1, r7
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xbe>
 8000342:	2e00      	cmp	r6, #0
 8000344:	f000 80eb 	beq.w	800051e <__udivmoddi4+0x286>
 8000348:	2700      	movs	r7, #0
 800034a:	e9c6 0100 	strd	r0, r1, [r6]
 800034e:	4638      	mov	r0, r7
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f783 	clz	r7, r3
 800035a:	2f00      	cmp	r7, #0
 800035c:	d147      	bne.n	80003ee <__udivmoddi4+0x156>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd0>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80fa 	bhi.w	800055c <__udivmoddi4+0x2c4>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4698      	mov	r8, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa0>
 8000376:	e9c6 4800 	strd	r4, r8, [r6]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa0>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xe8>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 808f 	bne.w	80004a8 <__udivmoddi4+0x210>
 800038a:	1b49      	subs	r1, r1, r5
 800038c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000390:	fa1f f885 	uxth.w	r8, r5
 8000394:	2701      	movs	r7, #1
 8000396:	fbb1 fcfe 	udiv	ip, r1, lr
 800039a:	0c23      	lsrs	r3, r4, #16
 800039c:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a4:	fb08 f10c 	mul.w	r1, r8, ip
 80003a8:	4299      	cmp	r1, r3
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x124>
 80003ac:	18eb      	adds	r3, r5, r3
 80003ae:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x122>
 80003b4:	4299      	cmp	r1, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2bc>
 80003ba:	4684      	mov	ip, r0
 80003bc:	1a59      	subs	r1, r3, r1
 80003be:	b2a3      	uxth	r3, r4
 80003c0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c4:	fb0e 1410 	mls	r4, lr, r0, r1
 80003c8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003cc:	fb08 f800 	mul.w	r8, r8, r0
 80003d0:	45a0      	cmp	r8, r4
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x14c>
 80003d4:	192c      	adds	r4, r5, r4
 80003d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x14a>
 80003dc:	45a0      	cmp	r8, r4
 80003de:	f200 80b6 	bhi.w	800054e <__udivmoddi4+0x2b6>
 80003e2:	4618      	mov	r0, r3
 80003e4:	eba4 0408 	sub.w	r4, r4, r8
 80003e8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003ec:	e79f      	b.n	800032e <__udivmoddi4+0x96>
 80003ee:	f1c7 0c20 	rsb	ip, r7, #32
 80003f2:	40bb      	lsls	r3, r7
 80003f4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003f8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003fc:	fa01 f407 	lsl.w	r4, r1, r7
 8000400:	fa20 f50c 	lsr.w	r5, r0, ip
 8000404:	fa21 f30c 	lsr.w	r3, r1, ip
 8000408:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800040c:	4325      	orrs	r5, r4
 800040e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000412:	0c2c      	lsrs	r4, r5, #16
 8000414:	fb08 3319 	mls	r3, r8, r9, r3
 8000418:	fa1f fa8e 	uxth.w	sl, lr
 800041c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000420:	fb09 f40a 	mul.w	r4, r9, sl
 8000424:	429c      	cmp	r4, r3
 8000426:	fa02 f207 	lsl.w	r2, r2, r7
 800042a:	fa00 f107 	lsl.w	r1, r0, r7
 800042e:	d90b      	bls.n	8000448 <__udivmoddi4+0x1b0>
 8000430:	eb1e 0303 	adds.w	r3, lr, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	f080 8087 	bcs.w	800054a <__udivmoddi4+0x2b2>
 800043c:	429c      	cmp	r4, r3
 800043e:	f240 8084 	bls.w	800054a <__udivmoddi4+0x2b2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	4473      	add	r3, lr
 8000448:	1b1b      	subs	r3, r3, r4
 800044a:	b2ad      	uxth	r5, r5
 800044c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000450:	fb08 3310 	mls	r3, r8, r0, r3
 8000454:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000458:	fb00 fa0a 	mul.w	sl, r0, sl
 800045c:	45a2      	cmp	sl, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x1da>
 8000460:	eb1e 0404 	adds.w	r4, lr, r4
 8000464:	f100 33ff 	add.w	r3, r0, #4294967295
 8000468:	d26b      	bcs.n	8000542 <__udivmoddi4+0x2aa>
 800046a:	45a2      	cmp	sl, r4
 800046c:	d969      	bls.n	8000542 <__udivmoddi4+0x2aa>
 800046e:	3802      	subs	r0, #2
 8000470:	4474      	add	r4, lr
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	eba4 040a 	sub.w	r4, r4, sl
 800047e:	454c      	cmp	r4, r9
 8000480:	46c2      	mov	sl, r8
 8000482:	464b      	mov	r3, r9
 8000484:	d354      	bcc.n	8000530 <__udivmoddi4+0x298>
 8000486:	d051      	beq.n	800052c <__udivmoddi4+0x294>
 8000488:	2e00      	cmp	r6, #0
 800048a:	d069      	beq.n	8000560 <__udivmoddi4+0x2c8>
 800048c:	ebb1 050a 	subs.w	r5, r1, sl
 8000490:	eb64 0403 	sbc.w	r4, r4, r3
 8000494:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000498:	40fd      	lsrs	r5, r7
 800049a:	40fc      	lsrs	r4, r7
 800049c:	ea4c 0505 	orr.w	r5, ip, r5
 80004a0:	e9c6 5400 	strd	r5, r4, [r6]
 80004a4:	2700      	movs	r7, #0
 80004a6:	e747      	b.n	8000338 <__udivmoddi4+0xa0>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f703 	lsr.w	r7, r0, r3
 80004b0:	4095      	lsls	r5, r2
 80004b2:	fa01 f002 	lsl.w	r0, r1, r2
 80004b6:	fa21 f303 	lsr.w	r3, r1, r3
 80004ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004be:	4338      	orrs	r0, r7
 80004c0:	0c01      	lsrs	r1, r0, #16
 80004c2:	fbb3 f7fe 	udiv	r7, r3, lr
 80004c6:	fa1f f885 	uxth.w	r8, r5
 80004ca:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d2:	fb07 f308 	mul.w	r3, r7, r8
 80004d6:	428b      	cmp	r3, r1
 80004d8:	fa04 f402 	lsl.w	r4, r4, r2
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x256>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004e4:	d22f      	bcs.n	8000546 <__udivmoddi4+0x2ae>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d92d      	bls.n	8000546 <__udivmoddi4+0x2ae>
 80004ea:	3f02      	subs	r7, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1acb      	subs	r3, r1, r3
 80004f0:	b281      	uxth	r1, r0
 80004f2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fe:	fb00 f308 	mul.w	r3, r0, r8
 8000502:	428b      	cmp	r3, r1
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x27e>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f100 3cff 	add.w	ip, r0, #4294967295
 800050c:	d217      	bcs.n	800053e <__udivmoddi4+0x2a6>
 800050e:	428b      	cmp	r3, r1
 8000510:	d915      	bls.n	800053e <__udivmoddi4+0x2a6>
 8000512:	3802      	subs	r0, #2
 8000514:	4429      	add	r1, r5
 8000516:	1ac9      	subs	r1, r1, r3
 8000518:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800051c:	e73b      	b.n	8000396 <__udivmoddi4+0xfe>
 800051e:	4637      	mov	r7, r6
 8000520:	4630      	mov	r0, r6
 8000522:	e709      	b.n	8000338 <__udivmoddi4+0xa0>
 8000524:	4607      	mov	r7, r0
 8000526:	e6e7      	b.n	80002f8 <__udivmoddi4+0x60>
 8000528:	4618      	mov	r0, r3
 800052a:	e6fb      	b.n	8000324 <__udivmoddi4+0x8c>
 800052c:	4541      	cmp	r1, r8
 800052e:	d2ab      	bcs.n	8000488 <__udivmoddi4+0x1f0>
 8000530:	ebb8 0a02 	subs.w	sl, r8, r2
 8000534:	eb69 020e 	sbc.w	r2, r9, lr
 8000538:	3801      	subs	r0, #1
 800053a:	4613      	mov	r3, r2
 800053c:	e7a4      	b.n	8000488 <__udivmoddi4+0x1f0>
 800053e:	4660      	mov	r0, ip
 8000540:	e7e9      	b.n	8000516 <__udivmoddi4+0x27e>
 8000542:	4618      	mov	r0, r3
 8000544:	e795      	b.n	8000472 <__udivmoddi4+0x1da>
 8000546:	4667      	mov	r7, ip
 8000548:	e7d1      	b.n	80004ee <__udivmoddi4+0x256>
 800054a:	4681      	mov	r9, r0
 800054c:	e77c      	b.n	8000448 <__udivmoddi4+0x1b0>
 800054e:	3802      	subs	r0, #2
 8000550:	442c      	add	r4, r5
 8000552:	e747      	b.n	80003e4 <__udivmoddi4+0x14c>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	442b      	add	r3, r5
 800055a:	e72f      	b.n	80003bc <__udivmoddi4+0x124>
 800055c:	4638      	mov	r0, r7
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xda>
 8000560:	4637      	mov	r7, r6
 8000562:	e6e9      	b.n	8000338 <__udivmoddi4+0xa0>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <aesroundkeys>:
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[11*16/sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	e021      	b.n	80005b8 <aesroundkeys+0x50>
        AESKEY[i] = swapmsbf(AESKEY[i]);
 8000574:	4a37      	ldr	r2, [pc, #220]	; (8000654 <aesroundkeys+0xec>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800057c:	061a      	lsls	r2, r3, #24
 800057e:	4935      	ldr	r1, [pc, #212]	; (8000654 <aesroundkeys+0xec>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000586:	021b      	lsls	r3, r3, #8
 8000588:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800058c:	431a      	orrs	r2, r3
 800058e:	4931      	ldr	r1, [pc, #196]	; (8000654 <aesroundkeys+0xec>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000596:	0a1b      	lsrs	r3, r3, #8
 8000598:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800059c:	431a      	orrs	r2, r3
 800059e:	492d      	ldr	r1, [pc, #180]	; (8000654 <aesroundkeys+0xec>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005a6:	0e1b      	lsrs	r3, r3, #24
 80005a8:	431a      	orrs	r2, r3
 80005aa:	492a      	ldr	r1, [pc, #168]	; (8000654 <aesroundkeys+0xec>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i=0; i<4; i++) {
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	3301      	adds	r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	ddda      	ble.n	8000574 <aesroundkeys+0xc>
    }
    
    b = AESKEY[3];
 80005be:	4b25      	ldr	r3, [pc, #148]	; (8000654 <aesroundkeys+0xec>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	603b      	str	r3, [r7, #0]
    for( ; i<44; i++ ) {
 80005c4:	e03c      	b.n	8000640 <aesroundkeys+0xd8>
        if( i%4==0 ) {
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f003 0303 	and.w	r3, r3, #3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d127      	bne.n	8000620 <aesroundkeys+0xb8>
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = (AES_S[u1(b >> 16)] << 24) ^
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	0c1b      	lsrs	r3, r3, #16
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <aesroundkeys+0xf0>)
 80005da:	5c9b      	ldrb	r3, [r3, r2]
 80005dc:	061a      	lsls	r2, r3, #24
                (AES_S[u1(b >>  8)] << 16) ^
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	4619      	mov	r1, r3
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <aesroundkeys+0xf0>)
 80005e8:	5c5b      	ldrb	r3, [r3, r1]
 80005ea:	041b      	lsls	r3, r3, #16
            b = (AES_S[u1(b >> 16)] << 24) ^
 80005ec:	405a      	eors	r2, r3
                (AES_S[u1(b)      ] <<  8) ^
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <aesroundkeys+0xf0>)
 80005f6:	5c5b      	ldrb	r3, [r3, r1]
 80005f8:	021b      	lsls	r3, r3, #8
                (AES_S[u1(b >>  8)] << 16) ^
 80005fa:	4053      	eors	r3, r2
                (AES_S[   b >> 24 ]      ) ^
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	0e12      	lsrs	r2, r2, #24
 8000600:	4915      	ldr	r1, [pc, #84]	; (8000658 <aesroundkeys+0xf0>)
 8000602:	5c8a      	ldrb	r2, [r1, r2]
                (AES_S[u1(b)      ] <<  8) ^
 8000604:	4053      	eors	r3, r2
 8000606:	461a      	mov	r2, r3
                 AES_RCON[(i-4)/4];
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b04      	subs	r3, #4
 800060c:	2b00      	cmp	r3, #0
 800060e:	da00      	bge.n	8000612 <aesroundkeys+0xaa>
 8000610:	3303      	adds	r3, #3
 8000612:	109b      	asrs	r3, r3, #2
 8000614:	4619      	mov	r1, r3
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <aesroundkeys+0xf4>)
 8000618:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            b = (AES_S[u1(b >> 16)] << 24) ^
 800061c:	4053      	eors	r3, r2
 800061e:	603b      	str	r3, [r7, #0]
        }
        AESKEY[i] = b ^= AESKEY[i-4];
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3b04      	subs	r3, #4
 8000624:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <aesroundkeys+0xec>)
 8000626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	4053      	eors	r3, r2
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4908      	ldr	r1, [pc, #32]	; (8000654 <aesroundkeys+0xec>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	683a      	ldr	r2, [r7, #0]
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( ; i<44; i++ ) {
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3301      	adds	r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b2b      	cmp	r3, #43	; 0x2b
 8000644:	ddbf      	ble.n	80005c6 <aesroundkeys+0x5e>
    }
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	2000009c 	.word	0x2000009c
 8000658:	0800b5a4 	.word	0x0800b5a4
 800065c:	0800b57c 	.word	0x0800b57c

08000660 <os_aes>:

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	; 0x30
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4613      	mov	r3, r2
 800066e:	80bb      	strh	r3, [r7, #4]
        
        aesroundkeys();
 8000670:	f7ff ff7a 	bl	8000568 <aesroundkeys>

        if( mode & AES_MICNOAUX ) {
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f003 0308 	and.w	r3, r3, #8
 800067a:	2b00      	cmp	r3, #0
 800067c:	d010      	beq.n	80006a0 <os_aes+0x40>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 800067e:	4b5a      	ldr	r3, [pc, #360]	; (80007e8 <os_aes+0x188>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	4b58      	ldr	r3, [pc, #352]	; (80007e8 <os_aes+0x188>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	4a57      	ldr	r2, [pc, #348]	; (80007e8 <os_aes+0x188>)
 800068a:	6093      	str	r3, [r2, #8]
 800068c:	4b56      	ldr	r3, [pc, #344]	; (80007e8 <os_aes+0x188>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a55      	ldr	r2, [pc, #340]	; (80007e8 <os_aes+0x188>)
 8000692:	6053      	str	r3, [r2, #4]
 8000694:	4b54      	ldr	r3, [pc, #336]	; (80007e8 <os_aes+0x188>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4a53      	ldr	r2, [pc, #332]	; (80007e8 <os_aes+0x188>)
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	f000 bca3 	b.w	8000fe6 <os_aes+0x986>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
 80006a0:	4b51      	ldr	r3, [pc, #324]	; (80007e8 <os_aes+0x188>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	061a      	lsls	r2, r3, #24
 80006a6:	4b50      	ldr	r3, [pc, #320]	; (80007e8 <os_aes+0x188>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80006b0:	431a      	orrs	r2, r3
 80006b2:	4b4d      	ldr	r3, [pc, #308]	; (80007e8 <os_aes+0x188>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	0a1b      	lsrs	r3, r3, #8
 80006b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80006bc:	431a      	orrs	r2, r3
 80006be:	4b4a      	ldr	r3, [pc, #296]	; (80007e8 <os_aes+0x188>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	0e1b      	lsrs	r3, r3, #24
 80006c4:	4313      	orrs	r3, r2
 80006c6:	4a48      	ldr	r2, [pc, #288]	; (80007e8 <os_aes+0x188>)
 80006c8:	6013      	str	r3, [r2, #0]
            AESAUX[1] = swapmsbf(AESAUX[1]);
 80006ca:	4b47      	ldr	r3, [pc, #284]	; (80007e8 <os_aes+0x188>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	061a      	lsls	r2, r3, #24
 80006d0:	4b45      	ldr	r3, [pc, #276]	; (80007e8 <os_aes+0x188>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80006da:	431a      	orrs	r2, r3
 80006dc:	4b42      	ldr	r3, [pc, #264]	; (80007e8 <os_aes+0x188>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80006e6:	431a      	orrs	r2, r3
 80006e8:	4b3f      	ldr	r3, [pc, #252]	; (80007e8 <os_aes+0x188>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	0e1b      	lsrs	r3, r3, #24
 80006ee:	4313      	orrs	r3, r2
 80006f0:	4a3d      	ldr	r2, [pc, #244]	; (80007e8 <os_aes+0x188>)
 80006f2:	6053      	str	r3, [r2, #4]
            AESAUX[2] = swapmsbf(AESAUX[2]);
 80006f4:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <os_aes+0x188>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	061a      	lsls	r2, r3, #24
 80006fa:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <os_aes+0x188>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000704:	431a      	orrs	r2, r3
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <os_aes+0x188>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	0a1b      	lsrs	r3, r3, #8
 800070c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000710:	431a      	orrs	r2, r3
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <os_aes+0x188>)
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	0e1b      	lsrs	r3, r3, #24
 8000718:	4313      	orrs	r3, r2
 800071a:	4a33      	ldr	r2, [pc, #204]	; (80007e8 <os_aes+0x188>)
 800071c:	6093      	str	r3, [r2, #8]
            AESAUX[3] = swapmsbf(AESAUX[3]);
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <os_aes+0x188>)
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	061a      	lsls	r2, r3, #24
 8000724:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <os_aes+0x188>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800072e:	431a      	orrs	r2, r3
 8000730:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <os_aes+0x188>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800073a:	431a      	orrs	r2, r3
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <os_aes+0x188>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	0e1b      	lsrs	r3, r3, #24
 8000742:	4313      	orrs	r3, r2
 8000744:	4a28      	ldr	r2, [pc, #160]	; (80007e8 <os_aes+0x188>)
 8000746:	60d3      	str	r3, [r2, #12]
        }

        while( (signed char)len > 0 ) {
 8000748:	f000 bc4d 	b.w	8000fe6 <os_aes+0x986>
            u4_t a0, a1, a2, a3;
            u4_t t0, t1, t2, t3;
            u4_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	2b00      	cmp	r3, #0
 8000754:	d109      	bne.n	800076a <os_aes+0x10a>
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f003 0302 	and.w	r3, r3, #2
 800075c:	2b00      	cmp	r3, #0
 800075e:	d011      	beq.n	8000784 <os_aes+0x124>
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f003 0308 	and.w	r3, r3, #8
 8000766:	2b00      	cmp	r3, #0
 8000768:	d10c      	bne.n	8000784 <os_aes+0x124>
                a0 = AESAUX[0];
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <os_aes+0x188>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
                a1 = AESAUX[1];
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <os_aes+0x188>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
                a2 = AESAUX[2];
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <os_aes+0x188>)
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
                a3 = AESAUX[3];
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <os_aes+0x188>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	e062      	b.n	800084a <os_aes+0x1ea>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	2b00      	cmp	r3, #0
 800078c:	d016      	beq.n	80007bc <os_aes+0x15c>
 800078e:	88bb      	ldrh	r3, [r7, #4]
 8000790:	2b10      	cmp	r3, #16
 8000792:	d813      	bhi.n	80007bc <os_aes+0x15c>
                a0 = a1 = a2 = a3 = 0; // load null block
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
 800079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
 80007a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 80007a4:	88bb      	ldrh	r3, [r7, #4]
 80007a6:	2b10      	cmp	r3, #16
 80007a8:	d101      	bne.n	80007ae <os_aes+0x14e>
 80007aa:	2210      	movs	r2, #16
 80007ac:	e000      	b.n	80007b0 <os_aes+0x150>
 80007ae:	2220      	movs	r2, #32
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	e046      	b.n	800084a <os_aes+0x1ea>
            } else
        LOADDATA: { // load data block (partially)
 80007bc:	bf00      	nop
                for(t0=0; t0<16; t0++) {
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
 80007c2:	e026      	b.n	8000812 <os_aes+0x1b2>
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	021a      	lsls	r2, r3, #8
 80007c8:	88bb      	ldrh	r3, [r7, #4]
 80007ca:	69f9      	ldr	r1, [r7, #28]
 80007cc:	4299      	cmp	r1, r3
 80007ce:	d204      	bcs.n	80007da <os_aes+0x17a>
 80007d0:	6839      	ldr	r1, [r7, #0]
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	440b      	add	r3, r1
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	e009      	b.n	80007ee <os_aes+0x18e>
 80007da:	88bb      	ldrh	r3, [r7, #4]
 80007dc:	69f9      	ldr	r1, [r7, #28]
 80007de:	4299      	cmp	r1, r3
 80007e0:	d104      	bne.n	80007ec <os_aes+0x18c>
 80007e2:	2380      	movs	r3, #128	; 0x80
 80007e4:	e003      	b.n	80007ee <os_aes+0x18e>
 80007e6:	bf00      	nop
 80007e8:	2000014c 	.word	0x2000014c
 80007ec:	2300      	movs	r3, #0
 80007ee:	4313      	orrs	r3, r2
 80007f0:	61bb      	str	r3, [r7, #24]
                    if((t0&3)==3) {
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	f003 0303 	and.w	r3, r3, #3
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d107      	bne.n	800080c <os_aes+0x1ac>
                        a0 = a1;
 80007fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                        a1 = a2;
 8000800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
                        a2 = a3;
 8000804:	6a3b      	ldr	r3, [r7, #32]
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
                        a3 = t1;
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	623b      	str	r3, [r7, #32]
                for(t0=0; t0<16; t0++) {
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	3301      	adds	r3, #1
 8000810:	61fb      	str	r3, [r7, #28]
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d9d5      	bls.n	80007c4 <os_aes+0x164>
                    }
                } 
                if( mode & AES_MIC ) {
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	2b00      	cmp	r3, #0
 8000820:	d013      	beq.n	800084a <os_aes+0x1ea>
                    a0 ^= AESAUX[0];
 8000822:	4ba0      	ldr	r3, [pc, #640]	; (8000aa4 <os_aes+0x444>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000828:	4053      	eors	r3, r2
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    a1 ^= AESAUX[1];
 800082c:	4b9d      	ldr	r3, [pc, #628]	; (8000aa4 <os_aes+0x444>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000832:	4053      	eors	r3, r2
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
                    a2 ^= AESAUX[2];
 8000836:	4b9b      	ldr	r3, [pc, #620]	; (8000aa4 <os_aes+0x444>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	4053      	eors	r3, r2
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
                    a3 ^= AESAUX[3];
 8000840:	4b98      	ldr	r3, [pc, #608]	; (8000aa4 <os_aes+0x444>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	6a3a      	ldr	r2, [r7, #32]
 8000846:	4053      	eors	r3, r2
 8000848:	623b      	str	r3, [r7, #32]
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
 800084a:	4b97      	ldr	r3, [pc, #604]	; (8000aa8 <os_aes+0x448>)
 800084c:	617b      	str	r3, [r7, #20]
            ke = ki + 8*4;
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	3380      	adds	r3, #128	; 0x80
 8000852:	613b      	str	r3, [r7, #16]
            a0 ^= ki[0];
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800085a:	4053      	eors	r3, r2
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
            a1 ^= ki[1];
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	3304      	adds	r3, #4
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000866:	4053      	eors	r3, r2
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
            a2 ^= ki[2];
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	3308      	adds	r3, #8
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000872:	4053      	eors	r3, r2
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
            a3 ^= ki[3];
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	330c      	adds	r3, #12
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	6a3a      	ldr	r2, [r7, #32]
 800087e:	4053      	eors	r3, r2
 8000880:	623b      	str	r3, [r7, #32]
            do {
                AES_key4 (t1,t2,t3,t0,4);
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	691b      	ldr	r3, [r3, #16]
 8000898:	61fb      	str	r3, [r7, #28]
                AES_expr4(t1,t2,t3,t0,a0);
 800089a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800089c:	b2db      	uxtb	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	4b82      	ldr	r3, [pc, #520]	; (8000aac <os_aes+0x44c>)
 80008a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4053      	eors	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ae:	0a1b      	lsrs	r3, r3, #8
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b7e      	ldr	r3, [pc, #504]	; (8000ab0 <os_aes+0x450>)
 80008b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	4053      	eors	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c2:	0c1b      	lsrs	r3, r3, #16
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b7a      	ldr	r3, [pc, #488]	; (8000ab4 <os_aes+0x454>)
 80008ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	4053      	eors	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d6:	0e1b      	lsrs	r3, r3, #24
 80008d8:	4a77      	ldr	r2, [pc, #476]	; (8000ab8 <os_aes+0x458>)
 80008da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008de:	69fa      	ldr	r2, [r7, #28]
 80008e0:	4053      	eors	r3, r2
 80008e2:	61fb      	str	r3, [r7, #28]
                AES_expr4(t2,t3,t0,t1,a1);
 80008e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b70      	ldr	r3, [pc, #448]	; (8000aac <os_aes+0x44c>)
 80008ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	4053      	eors	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b6c      	ldr	r3, [pc, #432]	; (8000ab0 <os_aes+0x450>)
 8000900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	4053      	eors	r3, r2
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090c:	0c1b      	lsrs	r3, r3, #16
 800090e:	b2db      	uxtb	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	4b68      	ldr	r3, [pc, #416]	; (8000ab4 <os_aes+0x454>)
 8000914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000918:	69fa      	ldr	r2, [r7, #28]
 800091a:	4053      	eors	r3, r2
 800091c:	61fb      	str	r3, [r7, #28]
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	0e1b      	lsrs	r3, r3, #24
 8000922:	4a65      	ldr	r2, [pc, #404]	; (8000ab8 <os_aes+0x458>)
 8000924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4053      	eors	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
                AES_expr4(t3,t0,t1,t2,a2);
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	b2db      	uxtb	r3, r3
 8000932:	461a      	mov	r2, r3
 8000934:	4b5d      	ldr	r3, [pc, #372]	; (8000aac <os_aes+0x44c>)
 8000936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	4053      	eors	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	0a1b      	lsrs	r3, r3, #8
 8000944:	b2db      	uxtb	r3, r3
 8000946:	461a      	mov	r2, r3
 8000948:	4b59      	ldr	r3, [pc, #356]	; (8000ab0 <os_aes+0x450>)
 800094a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	4053      	eors	r3, r2
 8000952:	61fb      	str	r3, [r7, #28]
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	0c1b      	lsrs	r3, r3, #16
 8000958:	b2db      	uxtb	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	4b55      	ldr	r3, [pc, #340]	; (8000ab4 <os_aes+0x454>)
 800095e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4053      	eors	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	0e1b      	lsrs	r3, r3, #24
 800096c:	4a52      	ldr	r2, [pc, #328]	; (8000ab8 <os_aes+0x458>)
 800096e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	4053      	eors	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
                AES_expr4(t0,t1,t2,t3,a3);
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	461a      	mov	r2, r3
 800097e:	4b4b      	ldr	r3, [pc, #300]	; (8000aac <os_aes+0x44c>)
 8000980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000984:	69fa      	ldr	r2, [r7, #28]
 8000986:	4053      	eors	r3, r2
 8000988:	61fb      	str	r3, [r7, #28]
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	b2db      	uxtb	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	4b47      	ldr	r3, [pc, #284]	; (8000ab0 <os_aes+0x450>)
 8000994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4053      	eors	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	0c1b      	lsrs	r3, r3, #16
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b43      	ldr	r3, [pc, #268]	; (8000ab4 <os_aes+0x454>)
 80009a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	4053      	eors	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	0e1b      	lsrs	r3, r3, #24
 80009b6:	4a40      	ldr	r2, [pc, #256]	; (8000ab8 <os_aes+0x458>)
 80009b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009bc:	68ba      	ldr	r2, [r7, #8]
 80009be:	4053      	eors	r3, r2
 80009c0:	60bb      	str	r3, [r7, #8]

                AES_key4 (a1,a2,a3,a0,8);
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d2:	623b      	str	r3, [r7, #32]
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	6a1b      	ldr	r3, [r3, #32]
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                AES_expr4(a1,a2,a3,a0,t0);
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	461a      	mov	r2, r3
 80009e0:	4b32      	ldr	r3, [pc, #200]	; (8000aac <os_aes+0x44c>)
 80009e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009e8:	4053      	eors	r3, r2
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	0a1b      	lsrs	r3, r3, #8
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <os_aes+0x450>)
 80009f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009fc:	4053      	eors	r3, r2
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	0c1b      	lsrs	r3, r3, #16
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <os_aes+0x454>)
 8000a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0e:	6a3a      	ldr	r2, [r7, #32]
 8000a10:	4053      	eors	r3, r2
 8000a12:	623b      	str	r3, [r7, #32]
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	0e1b      	lsrs	r3, r3, #24
 8000a18:	4a27      	ldr	r2, [pc, #156]	; (8000ab8 <os_aes+0x458>)
 8000a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a20:	4053      	eors	r3, r2
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
                AES_expr4(a2,a3,a0,a1,t1);
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <os_aes+0x44c>)
 8000a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a32:	4053      	eors	r3, r2
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <os_aes+0x450>)
 8000a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a44:	6a3a      	ldr	r2, [r7, #32]
 8000a46:	4053      	eors	r3, r2
 8000a48:	623b      	str	r3, [r7, #32]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	0c1b      	lsrs	r3, r3, #16
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <os_aes+0x454>)
 8000a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a5a:	4053      	eors	r3, r2
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	0e1b      	lsrs	r3, r3, #24
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <os_aes+0x458>)
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a6a:	4053      	eors	r3, r2
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
                AES_expr4(a3,a0,a1,a2,t2);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <os_aes+0x44c>)
 8000a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a7a:	6a3a      	ldr	r2, [r7, #32]
 8000a7c:	4053      	eors	r3, r2
 8000a7e:	623b      	str	r3, [r7, #32]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <os_aes+0x450>)
 8000a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a90:	4053      	eors	r3, r2
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <os_aes+0x454>)
 8000a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa2:	e00b      	b.n	8000abc <os_aes+0x45c>
 8000aa4:	2000014c 	.word	0x2000014c
 8000aa8:	2000009c 	.word	0x2000009c
 8000aac:	0800c2a4 	.word	0x0800c2a4
 8000ab0:	0800bea4 	.word	0x0800bea4
 8000ab4:	0800baa4 	.word	0x0800baa4
 8000ab8:	0800b6a4 	.word	0x0800b6a4
 8000abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000abe:	4053      	eors	r3, r2
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	0e1b      	lsrs	r3, r3, #24
 8000ac6:	4aa2      	ldr	r2, [pc, #648]	; (8000d50 <os_aes+0x6f0>)
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ace:	4053      	eors	r3, r2
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
                AES_expr4(a0,a1,a2,a3,t3);
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b9e      	ldr	r3, [pc, #632]	; (8000d54 <os_aes+0x6f4>)
 8000ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ae0:	4053      	eors	r3, r2
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b9a      	ldr	r3, [pc, #616]	; (8000d58 <os_aes+0x6f8>)
 8000aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000af4:	4053      	eors	r3, r2
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	0c1b      	lsrs	r3, r3, #16
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b96      	ldr	r3, [pc, #600]	; (8000d5c <os_aes+0x6fc>)
 8000b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b08:	4053      	eors	r3, r2
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	0e1b      	lsrs	r3, r3, #24
 8000b10:	4a8f      	ldr	r2, [pc, #572]	; (8000d50 <os_aes+0x6f0>)
 8000b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b16:	6a3a      	ldr	r2, [r7, #32]
 8000b18:	4053      	eors	r3, r2
 8000b1a:	623b      	str	r3, [r7, #32]
            } while( (ki+=8) < ke );
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3320      	adds	r3, #32
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	f4ff aeab 	bcc.w	8000882 <os_aes+0x222>

            AES_key4 (t1,t2,t3,t0,4);
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	69db      	ldr	r3, [r3, #28]
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	61fb      	str	r3, [r7, #28]
            AES_expr4(t1,t2,t3,t0,a0);
 8000b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b82      	ldr	r3, [pc, #520]	; (8000d54 <os_aes+0x6f4>)
 8000b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	4053      	eors	r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
 8000b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b7e      	ldr	r3, [pc, #504]	; (8000d58 <os_aes+0x6f8>)
 8000b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	4053      	eors	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	0c1b      	lsrs	r3, r3, #16
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b7a      	ldr	r3, [pc, #488]	; (8000d5c <os_aes+0x6fc>)
 8000b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	4053      	eors	r3, r2
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b80:	0e1b      	lsrs	r3, r3, #24
 8000b82:	4a73      	ldr	r2, [pc, #460]	; (8000d50 <os_aes+0x6f0>)
 8000b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b88:	69fa      	ldr	r2, [r7, #28]
 8000b8a:	4053      	eors	r3, r2
 8000b8c:	61fb      	str	r3, [r7, #28]
            AES_expr4(t2,t3,t0,t1,a1);
 8000b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b6f      	ldr	r3, [pc, #444]	; (8000d54 <os_aes+0x6f4>)
 8000b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	4053      	eors	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba2:	0a1b      	lsrs	r3, r3, #8
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b6b      	ldr	r3, [pc, #428]	; (8000d58 <os_aes+0x6f8>)
 8000baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	4053      	eors	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb6:	0c1b      	lsrs	r3, r3, #16
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b67      	ldr	r3, [pc, #412]	; (8000d5c <os_aes+0x6fc>)
 8000bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	4053      	eors	r3, r2
 8000bc6:	61fb      	str	r3, [r7, #28]
 8000bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bca:	0e1b      	lsrs	r3, r3, #24
 8000bcc:	4a60      	ldr	r2, [pc, #384]	; (8000d50 <os_aes+0x6f0>)
 8000bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4053      	eors	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
            AES_expr4(t3,t0,t1,t2,a2);
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b5d      	ldr	r3, [pc, #372]	; (8000d54 <os_aes+0x6f4>)
 8000be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	4053      	eors	r3, r2
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b59      	ldr	r3, [pc, #356]	; (8000d58 <os_aes+0x6f8>)
 8000bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf8:	69fa      	ldr	r2, [r7, #28]
 8000bfa:	4053      	eors	r3, r2
 8000bfc:	61fb      	str	r3, [r7, #28]
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	0c1b      	lsrs	r3, r3, #16
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b55      	ldr	r3, [pc, #340]	; (8000d5c <os_aes+0x6fc>)
 8000c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4053      	eors	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	0e1b      	lsrs	r3, r3, #24
 8000c16:	4a4e      	ldr	r2, [pc, #312]	; (8000d50 <os_aes+0x6f0>)
 8000c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	4053      	eors	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
            AES_expr4(t0,t1,t2,t3,a3);
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <os_aes+0x6f4>)
 8000c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	4053      	eors	r3, r2
 8000c32:	61fb      	str	r3, [r7, #28]
 8000c34:	6a3b      	ldr	r3, [r7, #32]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b46      	ldr	r3, [pc, #280]	; (8000d58 <os_aes+0x6f8>)
 8000c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4053      	eors	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
 8000c48:	6a3b      	ldr	r3, [r7, #32]
 8000c4a:	0c1b      	lsrs	r3, r3, #16
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b42      	ldr	r3, [pc, #264]	; (8000d5c <os_aes+0x6fc>)
 8000c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	4053      	eors	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	0e1b      	lsrs	r3, r3, #24
 8000c60:	4a3b      	ldr	r2, [pc, #236]	; (8000d50 <os_aes+0x6f0>)
 8000c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	4053      	eors	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]

            AES_expr(a0,t0,t1,t2,t3,8);
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	6a1b      	ldr	r3, [r3, #32]
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	0e1b      	lsrs	r3, r3, #24
 8000c76:	4a3a      	ldr	r2, [pc, #232]	; (8000d60 <os_aes+0x700>)
 8000c78:	5cd3      	ldrb	r3, [r2, r3]
 8000c7a:	061b      	lsls	r3, r3, #24
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c80:	4053      	eors	r3, r2
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <os_aes+0x700>)
 8000c8e:	5c9b      	ldrb	r3, [r3, r2]
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	461a      	mov	r2, r3
 8000c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c96:	4053      	eors	r3, r2
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <os_aes+0x700>)
 8000ca4:	5c9b      	ldrb	r3, [r3, r2]
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	461a      	mov	r2, r3
 8000caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cac:	4053      	eors	r3, r2
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <os_aes+0x700>)
 8000cb8:	5c9b      	ldrb	r3, [r3, r2]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbe:	4053      	eors	r3, r2
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
            AES_expr(a1,t1,t2,t3,t0,9);
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	0e1b      	lsrs	r3, r3, #24
 8000ccc:	4a24      	ldr	r2, [pc, #144]	; (8000d60 <os_aes+0x700>)
 8000cce:	5cd3      	ldrb	r3, [r2, r3]
 8000cd0:	061b      	lsls	r3, r3, #24
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd6:	4053      	eors	r3, r2
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	0c1b      	lsrs	r3, r3, #16
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <os_aes+0x700>)
 8000ce4:	5c9b      	ldrb	r3, [r3, r2]
 8000ce6:	041b      	lsls	r3, r3, #16
 8000ce8:	461a      	mov	r2, r3
 8000cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cec:	4053      	eors	r3, r2
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	0a1b      	lsrs	r3, r3, #8
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <os_aes+0x700>)
 8000cfa:	5c9b      	ldrb	r3, [r3, r2]
 8000cfc:	021b      	lsls	r3, r3, #8
 8000cfe:	461a      	mov	r2, r3
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	4053      	eors	r3, r2
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <os_aes+0x700>)
 8000d0e:	5c9b      	ldrb	r3, [r3, r2]
 8000d10:	461a      	mov	r2, r3
 8000d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d14:	4053      	eors	r3, r2
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
            AES_expr(a2,t2,t3,t0,t1,10);
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	0e1b      	lsrs	r3, r3, #24
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <os_aes+0x700>)
 8000d24:	5cd3      	ldrb	r3, [r2, r3]
 8000d26:	061b      	lsls	r3, r3, #24
 8000d28:	461a      	mov	r2, r3
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	4053      	eors	r3, r2
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	0c1b      	lsrs	r3, r3, #16
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <os_aes+0x700>)
 8000d3a:	5c9b      	ldrb	r3, [r3, r2]
 8000d3c:	041b      	lsls	r3, r3, #16
 8000d3e:	461a      	mov	r2, r3
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	4053      	eors	r3, r2
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	e009      	b.n	8000d64 <os_aes+0x704>
 8000d50:	0800b6a4 	.word	0x0800b6a4
 8000d54:	0800c2a4 	.word	0x0800c2a4
 8000d58:	0800bea4 	.word	0x0800bea4
 8000d5c:	0800baa4 	.word	0x0800baa4
 8000d60:	0800b5a4 	.word	0x0800b5a4
 8000d64:	4b66      	ldr	r3, [pc, #408]	; (8000f00 <os_aes+0x8a0>)
 8000d66:	5c9b      	ldrb	r3, [r3, r2]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	4053      	eors	r3, r2
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b61      	ldr	r3, [pc, #388]	; (8000f00 <os_aes+0x8a0>)
 8000d7a:	5c9b      	ldrb	r3, [r3, r2]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	4053      	eors	r3, r2
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
            AES_expr(a3,t3,t0,t1,t2,11);
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d88:	623b      	str	r3, [r7, #32]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	0e1b      	lsrs	r3, r3, #24
 8000d8e:	4a5c      	ldr	r2, [pc, #368]	; (8000f00 <os_aes+0x8a0>)
 8000d90:	5cd3      	ldrb	r3, [r2, r3]
 8000d92:	061b      	lsls	r3, r3, #24
 8000d94:	461a      	mov	r2, r3
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	4053      	eors	r3, r2
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	0c1b      	lsrs	r3, r3, #16
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b56      	ldr	r3, [pc, #344]	; (8000f00 <os_aes+0x8a0>)
 8000da6:	5c9b      	ldrb	r3, [r3, r2]
 8000da8:	041b      	lsls	r3, r3, #16
 8000daa:	461a      	mov	r2, r3
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	4053      	eors	r3, r2
 8000db0:	623b      	str	r3, [r7, #32]
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b51      	ldr	r3, [pc, #324]	; (8000f00 <os_aes+0x8a0>)
 8000dbc:	5c9b      	ldrb	r3, [r3, r2]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	6a3b      	ldr	r3, [r7, #32]
 8000dc4:	4053      	eors	r3, r2
 8000dc6:	623b      	str	r3, [r7, #32]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b4c      	ldr	r3, [pc, #304]	; (8000f00 <os_aes+0x8a0>)
 8000dd0:	5c9b      	ldrb	r3, [r3, r2]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
 8000dd6:	4053      	eors	r3, r2
 8000dd8:	623b      	str	r3, [r7, #32]
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d056      	beq.n	8000e92 <os_aes+0x832>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	111b      	asrs	r3, r3, #4
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d041      	beq.n	8000e78 <os_aes+0x818>
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
 8000df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df6:	0fdb      	lsrs	r3, r3, #31
 8000df8:	61fb      	str	r3, [r7, #28]
                        a0 = (a0 << 1) | (a1 >> 31);
 8000dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfc:	005a      	lsls	r2, r3, #1
 8000dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e00:	0fdb      	lsrs	r3, r3, #31
 8000e02:	4313      	orrs	r3, r2
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
                        a1 = (a1 << 1) | (a2 >> 31);
 8000e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e08:	005a      	lsls	r2, r3, #1
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	0fdb      	lsrs	r3, r3, #31
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
                        a2 = (a2 << 1) | (a3 >> 31);
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	005a      	lsls	r2, r3, #1
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	0fdb      	lsrs	r3, r3, #31
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
                        a3 = (a3 << 1);
 8000e1e:	6a3b      	ldr	r3, [r7, #32]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	623b      	str	r3, [r7, #32]
                        if( t0 ) a3 ^= 0x87;
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <os_aes+0x7d2>
 8000e2a:	6a3b      	ldr	r3, [r7, #32]
 8000e2c:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8000e30:	623b      	str	r3, [r7, #32]
                    } while( --t1 );
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	61bb      	str	r3, [r7, #24]
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1da      	bne.n	8000df4 <os_aes+0x794>

                    AESAUX[0] ^= a0;
 8000e3e:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <os_aes+0x8a4>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e44:	4053      	eors	r3, r2
 8000e46:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <os_aes+0x8a4>)
 8000e48:	6013      	str	r3, [r2, #0]
                    AESAUX[1] ^= a1;
 8000e4a:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <os_aes+0x8a4>)
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e50:	4053      	eors	r3, r2
 8000e52:	4a2c      	ldr	r2, [pc, #176]	; (8000f04 <os_aes+0x8a4>)
 8000e54:	6053      	str	r3, [r2, #4]
                    AESAUX[2] ^= a2;
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <os_aes+0x8a4>)
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	4053      	eors	r3, r2
 8000e5e:	4a29      	ldr	r2, [pc, #164]	; (8000f04 <os_aes+0x8a4>)
 8000e60:	6093      	str	r3, [r2, #8]
                    AESAUX[3] ^= a3;
 8000e62:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <os_aes+0x8a4>)
 8000e64:	68da      	ldr	r2, [r3, #12]
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	4053      	eors	r3, r2
 8000e6a:	4a26      	ldr	r2, [pc, #152]	; (8000f04 <os_aes+0x8a4>)
 8000e6c:	60d3      	str	r3, [r2, #12]
                    mode &= ~AES_MICSUB;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e74:	71fb      	strb	r3, [r7, #7]
                    goto LOADDATA;
 8000e76:	e4a2      	b.n	80007be <os_aes+0x15e>
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
 8000e78:	4a22      	ldr	r2, [pc, #136]	; (8000f04 <os_aes+0x8a4>)
 8000e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7c:	6013      	str	r3, [r2, #0]
                    AESAUX[1] = a1;
 8000e7e:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <os_aes+0x8a4>)
 8000e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e82:	6053      	str	r3, [r2, #4]
                    AESAUX[2] = a2;
 8000e84:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <os_aes+0x8a4>)
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	6093      	str	r3, [r2, #8]
                    AESAUX[3] = a3;
 8000e8a:	4a1e      	ldr	r2, [pc, #120]	; (8000f04 <os_aes+0x8a4>)
 8000e8c:	6a3b      	ldr	r3, [r7, #32]
 8000e8e:	60d3      	str	r3, [r2, #12]
 8000e90:	e095      	b.n	8000fbe <os_aes+0x95e>
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d035      	beq.n	8000f08 <os_aes+0x8a8>
                    t0 = (len > 16) ? 16: len;
 8000e9c:	88bb      	ldrh	r3, [r7, #4]
 8000e9e:	2b10      	cmp	r3, #16
 8000ea0:	bf28      	it	cs
 8000ea2:	2310      	movcs	r3, #16
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	61fb      	str	r3, [r7, #28]
                    for(t1=0; t1<t0; t1++) {
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
 8000eac:	e01d      	b.n	8000eea <os_aes+0x88a>
                        buf[t1] ^= (a0>>24);
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	7819      	ldrb	r1, [r3, #0]
 8000eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb8:	0e1b      	lsrs	r3, r3, #24
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	6838      	ldr	r0, [r7, #0]
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	4403      	add	r3, r0
 8000ec2:	404a      	eors	r2, r1
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	701a      	strb	r2, [r3, #0]
                        a0 <<= 8;
 8000ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if((t1&3)==3) {
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d105      	bne.n	8000ee4 <os_aes+0x884>
                            a0 = a1;
 8000ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
                            a1 = a2;
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
                            a2 = a3;
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
                    for(t1=0; t1<t0; t1++) {
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d3dd      	bcc.n	8000eae <os_aes+0x84e>
                        }
                    }
                    // update counter
                    AESAUX[3]++;
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <os_aes+0x8a4>)
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	4a02      	ldr	r2, [pc, #8]	; (8000f04 <os_aes+0x8a4>)
 8000efa:	60d3      	str	r3, [r2, #12]
 8000efc:	e05f      	b.n	8000fbe <os_aes+0x95e>
 8000efe:	bf00      	nop
 8000f00:	0800b5a4 	.word	0x0800b5a4
 8000f04:	2000014c 	.word	0x2000014c
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
 8000f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0a:	0e1b      	lsrs	r3, r3, #24
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f14:	0c1a      	lsrs	r2, r3, #16
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	0a1a      	lsrs	r2, r3, #8
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	3302      	adds	r3, #2
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	3303      	adds	r3, #3
 8000f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+4,  a1);
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	0e1a      	lsrs	r2, r3, #24
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	0c1a      	lsrs	r2, r3, #16
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	3305      	adds	r3, #5
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4e:	0a1a      	lsrs	r2, r3, #8
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	3306      	adds	r3, #6
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	701a      	strb	r2, [r3, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	3307      	adds	r3, #7
 8000f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+8,  a2);
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	0e1a      	lsrs	r2, r3, #24
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	3308      	adds	r3, #8
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	0c1a      	lsrs	r2, r3, #16
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	3309      	adds	r3, #9
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	0a1a      	lsrs	r2, r3, #8
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	330a      	adds	r3, #10
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	330b      	adds	r3, #11
 8000f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+12, a3);
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	0e1a      	lsrs	r2, r3, #24
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	330c      	adds	r3, #12
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	0c1a      	lsrs	r2, r3, #16
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	330d      	adds	r3, #13
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	0a1a      	lsrs	r2, r3, #8
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	330e      	adds	r3, #14
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	330f      	adds	r3, #15
 8000fb8:	6a3a      	ldr	r2, [r7, #32]
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	701a      	strb	r2, [r3, #0]
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d004      	beq.n	8000fd2 <os_aes+0x972>
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 0308 	and.w	r3, r3, #8
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d005      	beq.n	8000fde <os_aes+0x97e>
                buf += 16;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	3310      	adds	r3, #16
 8000fd6:	603b      	str	r3, [r7, #0]
                len -= 16;
 8000fd8:	88bb      	ldrh	r3, [r7, #4]
 8000fda:	3b10      	subs	r3, #16
 8000fdc:	80bb      	strh	r3, [r7, #4]
            }
            mode |= AES_MICNOAUX;
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f043 0308 	orr.w	r3, r3, #8
 8000fe4:	71fb      	strb	r3, [r7, #7]
        while( (signed char)len > 0 ) {
 8000fe6:	88bb      	ldrh	r3, [r7, #4]
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f73f abae 	bgt.w	800074c <os_aes+0xec>
        }
        return AESAUX[0];
 8000ff0:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <os_aes+0x99c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3730      	adds	r7, #48	; 0x30
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	2000014c 	.word	0x2000014c

08001000 <debug_init>:

/*  ************************************** */
/*    DO NOT CHANGE BELOW THIS LINE        */
/*  ************************************** */

void debug_init () {
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    // configure LED pin as output
    debug_led(0);
 8001004:	2000      	movs	r0, #0
 8001006:	f000 f807 	bl	8001018 <debug_led>

    // configure USART1 (115200/8N1, tx-only)

    // print banner
    debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 800100a:	4802      	ldr	r0, [pc, #8]	; (8001014 <debug_init+0x14>)
 800100c:	f000 f866 	bl	80010dc <debug_str>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	0800b0f4 	.word	0x0800b0f4

08001018 <debug_led>:

void debug_led (int val) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,val);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	461a      	mov	r2, r3
 8001026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <debug_led+0x20>)
 800102c:	f005 fab4 	bl	8006598 <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	48000800 	.word	0x48000800

0800103c <debug_char>:

void debug_char (char c) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  char buffer[] = "";
 8001046:	2300      	movs	r3, #0
 8001048:	733b      	strb	r3, [r7, #12]
  buffer[0]= c;
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	733b      	strb	r3, [r7, #12]
  HAL_UART_Transmit(&myUART,buffer,sizeof(buffer),HAL_MAX_DELAY);
 800104e:	f107 010c 	add.w	r1, r7, #12
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	2201      	movs	r2, #1
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <debug_char+0x2c>)
 800105a:	f009 f997 	bl	800a38c <HAL_UART_Transmit>
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000200 	.word	0x20000200

0800106c <debug_hex>:

void debug_hex (u1_t b) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
    debug_char("0123456789ABCDEF"[b>>4]);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	091b      	lsrs	r3, r3, #4
 800107a:	b2db      	uxtb	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <debug_hex+0x34>)
 8001080:	5c9b      	ldrb	r3, [r3, r2]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ffda 	bl	800103c <debug_char>
    debug_char("0123456789ABCDEF"[b&0xF]);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <debug_hex+0x34>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ffd2 	bl	800103c <debug_char>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	0800b124 	.word	0x0800b124

080010a4 <debug_uint>:
    }
    debug_char('\r');
    debug_char('\n');
}

void debug_uint (u4_t v) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    for(s1_t n=24; n>=0; n-=8) {
 80010ac:	2318      	movs	r3, #24
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	e00c      	b.n	80010cc <debug_uint+0x28>
        debug_hex(v>>n);
 80010b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	fa22 f303 	lsr.w	r3, r2, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ffd4 	bl	800106c <debug_hex>
    for(s1_t n=24; n>=0; n-=8) {
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	3b08      	subs	r3, #8
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	daee      	bge.n	80010b2 <debug_uint+0xe>
    }
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <debug_str>:
    int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
    while(n--)
        debug_char(*p++);
}

void debug_str (const char* str) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    while(*str) {
 80010e4:	e006      	b.n	80010f4 <debug_str+0x18>
        debug_char(*str++);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ffa4 	bl	800103c <debug_char>
    while(*str) {
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f4      	bne.n	80010e6 <debug_str+0xa>
    }
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <debug_val>:

void debug_val (const char* label, u4_t val) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
    debug_str(label);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffe4 	bl	80010dc <debug_str>
    debug_uint(val);
 8001114:	6838      	ldr	r0, [r7, #0]
 8001116:	f7ff ffc5 	bl	80010a4 <debug_uint>
    debug_char('\r');
 800111a:	200d      	movs	r0, #13
 800111c:	f7ff ff8e 	bl	800103c <debug_char>
    debug_char('\n');
 8001120:	200a      	movs	r0, #10
 8001122:	f7ff ff8b 	bl	800103c <debug_char>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <debug_event>:
    while( b-buf < max && p > num );
    // return number of characters written
    return b - buf;
}

void debug_event (int ev) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
        [EV_LINK_DEAD]      = "LINK_DEAD",
        [EV_LINK_ALIVE]     = "LINK_ALIVE",
        [EV_SCAN_FOUND]     = "SCAN_FOUND",
        [EV_TXSTART]        = "EV_TXSTART",
    };
    debug_str((ev < sizeof(evnames)/sizeof(evnames[0])) ? evnames[ev] : "EV_UNKNOWN" );
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b11      	cmp	r3, #17
 800113c:	d804      	bhi.n	8001148 <debug_event+0x18>
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <debug_event+0x34>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001146:	e000      	b.n	800114a <debug_event+0x1a>
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <debug_event+0x38>)
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ffc6 	bl	80010dc <debug_str>
    debug_char('\r');
 8001150:	200d      	movs	r0, #13
 8001152:	f7ff ff73 	bl	800103c <debug_char>
    debug_char('\n');
 8001156:	200a      	movs	r0, #10
 8001158:	f7ff ff70 	bl	800103c <debug_char>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000000 	.word	0x20000000
 8001168:	0800b138 	.word	0x0800b138

0800116c <hal_io_init>:
} HAL;

// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (u1_t val) {
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss (u1_t val) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(NSS_GPIO_Port,NSS_Pin,val);
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	461a      	mov	r2, r3
 800119e:	2140      	movs	r1, #64	; 0x40
 80011a0:	4803      	ldr	r0, [pc, #12]	; (80011b0 <hal_pin_nss+0x20>)
 80011a2:	f005 f9f9 	bl	8006598 <HAL_GPIO_WritePin>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	48000400 	.word	0x48000400

080011b4 <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (u1_t val) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08c      	sub	sp, #48	; 0x30
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
    if(val == 0 || val == 1) { // drive pin
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d002      	beq.n	80011ca <hal_pin_rst+0x16>
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d112      	bne.n	80011f0 <hal_pin_rst+0x3c>
    	GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	480c      	ldr	r0, [pc, #48]	; (8001210 <hal_pin_rst+0x5c>)
 80011de:	f004 ff4d 	bl	800607c <HAL_GPIO_Init>

    	HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin,val);
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	461a      	mov	r2, r3
 80011e6:	2180      	movs	r1, #128	; 0x80
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <hal_pin_rst+0x5c>)
 80011ea:	f005 f9d5 	bl	8006598 <HAL_GPIO_WritePin>
    if(val == 0 || val == 1) { // drive pin
 80011ee:	e00b      	b.n	8001208 <hal_pin_rst+0x54>

    } else { // keep pin floating
        GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	60bb      	str	r3, [r7, #8]
    	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	4619      	mov	r1, r3
 8001202:	4803      	ldr	r0, [pc, #12]	; (8001210 <hal_pin_rst+0x5c>)
 8001204:	f004 ff3a 	bl	800607c <HAL_GPIO_Init>
    }
}
 8001208:	bf00      	nop
 800120a:	3730      	adds	r7, #48	; 0x30
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	48000800 	.word	0x48000800

08001214 <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if(GPIO_Pin_int == DIO0_Pin) {
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001224:	d102      	bne.n	800122c <HAL_GPIO_EXTI_Callback+0x18>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 8001226:	2000      	movs	r0, #0
 8001228:	f004 faf4 	bl	8005814 <radio_irq_handler>
	}
	// DIO 1
	if(GPIO_Pin_int == DIO1_Pin) {
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001232:	d102      	bne.n	800123a <HAL_GPIO_EXTI_Callback+0x26>
	    // invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f004 faed 	bl	8005814 <radio_irq_handler>
	}
	// DIO 2
	if(GPIO_Pin_int == DIO2_Pin) {
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001240:	d102      	bne.n	8001248 <HAL_GPIO_EXTI_Callback+0x34>
	    // invoke radio handler (on IRQ!)
	    radio_irq_handler(2);
 8001242:	2002      	movs	r0, #2
 8001244:	f004 fae6 	bl	8005814 <radio_irq_handler>
	}
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init () {
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi (u1_t out) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af02      	add	r7, sp, #8
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] ="";
 800126a:	2300      	movs	r3, #0
 800126c:	733b      	strb	r3, [r7, #12]
	char inbuffer[] ="";
 800126e:	2300      	movs	r3, #0
 8001270:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI,outbuffer,inbuffer,sizeof(outbuffer),HAL_MAX_DELAY);
 8001276:	f107 0208 	add.w	r2, r7, #8
 800127a:	f107 010c 	add.w	r1, r7, #12
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2301      	movs	r3, #1
 8001286:	4804      	ldr	r0, [pc, #16]	; (8001298 <hal_spi+0x38>)
 8001288:	f007 fb42 	bl	8008910 <HAL_SPI_TransmitReceive>
	return inbuffer[0];
 800128c:	7a3b      	ldrb	r3, [r7, #8]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000019c 	.word	0x2000019c

0800129c <hal_time_init>:


// -----------------------------------------------------------------------------
// TIME
static void hal_time_init () {
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <hal_ticks>:

u4_t hal_ticks () {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 80012b2:	f000 f8af 	bl	8001414 <hal_disableIRQs>
    u4_t t = HAL.ticks;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <hal_ticks+0x58>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	607b      	str	r3, [r7, #4]
    u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <hal_ticks+0x5c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	807b      	strh	r3, [r7, #2]
    if(__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET){
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <hal_ticks+0x5c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d10d      	bne.n	80012ee <hal_ticks+0x42>
    	if(__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) !=RESET){
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <hal_ticks+0x5c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d106      	bne.n	80012ee <hal_ticks+0x42>
    		cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <hal_ticks+0x5c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	807b      	strh	r3, [r7, #2]
    		t++;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3301      	adds	r3, #1
 80012ec:	607b      	str	r3, [r7, #4]
        }
     }
    hal_enableIRQs();
 80012ee:	f000 f8a1 	bl	8001434 <hal_enableIRQs>
    return (t<<16)|cnt;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	041a      	lsls	r2, r3, #16
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	4313      	orrs	r3, r2
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000070 	.word	0x20000070
 8001308:	2000015c 	.word	0x2000015c

0800130c <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    u4_t t = hal_ticks();
 8001314:	f7ff ffca 	bl	80012ac <hal_ticks>
 8001318:	60f8      	str	r0, [r7, #12]
    s4_t d = time - t;
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	60bb      	str	r3, [r7, #8]
    if( d<=0 ) return 0;    // in the past
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	dc01      	bgt.n	800132c <deltaticks+0x20>
 8001328:	2300      	movs	r3, #0
 800132a:	e008      	b.n	800133e <deltaticks+0x32>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	141b      	asrs	r3, r3, #16
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <deltaticks+0x2e>
 8001334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001338:	e001      	b.n	800133e <deltaticks+0x32>
    return (u2_t)d;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29b      	uxth	r3, r3
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <hal_waitUntil>:

void hal_waitUntil (u4_t time) {
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
    while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
 800134e:	bf00      	nop
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ffdb 	bl	800130c <deltaticks>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f9      	bne.n	8001350 <hal_waitUntil+0xa>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
    u2_t dt;
    myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <hal_checkTimer+0x78>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <hal_checkTimer+0x78>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0202 	bic.w	r2, r2, #2
 800137a:	611a      	str	r2, [r3, #16]
    if((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ffc5 	bl	800130c <deltaticks>
 8001382:	4603      	mov	r3, r0
 8001384:	81fb      	strh	r3, [r7, #14]
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	2b04      	cmp	r3, #4
 800138a:	d809      	bhi.n	80013a0 <hal_checkTimer+0x3c>
    	myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <hal_checkTimer+0x78>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <hal_checkTimer+0x78>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0202 	bic.w	r2, r2, #2
 800139a:	60da      	str	r2, [r3, #12]
        return 1;
 800139c:	2301      	movs	r3, #1
 800139e:	e018      	b.n	80013d2 <hal_checkTimer+0x6e>
    } else { // rewind timer (fully or to exact time))
    	myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <hal_checkTimer+0x78>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80013a6:	89fa      	ldrh	r2, [r7, #14]
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <hal_checkTimer+0x78>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	440a      	add	r2, r1
 80013ae:	635a      	str	r2, [r3, #52]	; 0x34
    	myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <hal_checkTimer+0x78>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <hal_checkTimer+0x78>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0202 	orr.w	r2, r2, #2
 80013be:	60da      	str	r2, [r3, #12]
    	myTIMER.Instance->CCER |= TIM_CCER_CC1E;   // enable capture/compare uint 2
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <hal_checkTimer+0x78>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6a1a      	ldr	r2, [r3, #32]
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <hal_checkTimer+0x78>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0201 	orr.w	r2, r2, #1
 80013ce:	621a      	str	r2, [r3, #32]
        return 0;
 80013d0:	2300      	movs	r3, #0
    }
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000015c 	.word	0x2000015c

080013e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == myTIMER.Instance){
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d104      	bne.n	80013fe <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL.ticks++;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	3301      	adds	r3, #1
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80013fc:	6053      	str	r3, [r2, #4]
    }
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	2000015c 	.word	0x2000015c
 8001410:	20000070 	.word	0x20000070

08001414 <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs () {
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
	__disable_irq();
	//__set_BASEPRI(1 << 4);
    HAL.irqlevel++;
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <hal_disableIRQs+0x1c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	4a03      	ldr	r2, [pc, #12]	; (8001430 <hal_disableIRQs+0x1c>)
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000070 	.word	0x20000070

08001434 <hal_enableIRQs>:

void hal_enableIRQs () {
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
    if(--HAL.irqlevel == 0) {
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <hal_enableIRQs+0x24>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3b01      	subs	r3, #1
 800143e:	4a06      	ldr	r2, [pc, #24]	; (8001458 <hal_enableIRQs+0x24>)
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <hal_enableIRQs+0x24>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d100      	bne.n	800144c <hal_enableIRQs+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 800144a:	b662      	cpsie	i
		__enable_irq();
    	//__set_BASEPRI(0);
    }
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000070 	.word	0x20000070

0800145c <hal_sleep>:

void hal_sleep () {
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
    // suspend execution until IRQ, regardless of the CPSR I-bit
    __WFI();
 8001460:	bf30      	wfi
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <hal_init>:

// -----------------------------------------------------------------------------

void hal_init () {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
    memset(&HAL, 0x00, sizeof(HAL));
 8001470:	2208      	movs	r2, #8
 8001472:	2100      	movs	r1, #0
 8001474:	4807      	ldr	r0, [pc, #28]	; (8001494 <hal_init+0x28>)
 8001476:	f009 fe28 	bl	800b0ca <memset>
    hal_disableIRQs();
 800147a:	f7ff ffcb 	bl	8001414 <hal_disableIRQs>
    // configure radio I/O and interrupt handler
    hal_io_init();
 800147e:	f7ff fe75 	bl	800116c <hal_io_init>
    // configure radio SPI
    hal_spi_init();
 8001482:	f7ff fee5 	bl	8001250 <hal_spi_init>
    // configure timer and interrupt handler
    hal_time_init();
 8001486:	f7ff ff09 	bl	800129c <hal_time_init>
    hal_enableIRQs();
 800148a:	f7ff ffd3 	bl	8001434 <hal_enableIRQs>
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000070 	.word	0x20000070

08001498 <hal_failed>:

void hal_failed () {
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
    // HALT...
    hal_disableIRQs();
 800149c:	f7ff ffba 	bl	8001414 <hal_disableIRQs>
    hal_sleep();
 80014a0:	f7ff ffdc 	bl	800145c <hal_sleep>
    while(1);
 80014a4:	e7fe      	b.n	80014a4 <hal_failed+0xc>

080014a6 <getSf>:
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	80fb      	strh	r3, [r7, #6]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <getBw>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	80fb      	strh	r3, [r7, #6]
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	08db      	lsrs	r3, r3, #3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <getCr>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	80fb      	strh	r3, [r7, #6]
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	460a      	mov	r2, r1
 8001518:	80fb      	strh	r3, [r7, #6]
 800151a:	4613      	mov	r3, r2
 800151c:	717b      	strb	r3, [r7, #5]
 800151e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001522:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001526:	b21a      	sxth	r2, r3
 8001528:	797b      	ldrb	r3, [r7, #5]
 800152a:	015b      	lsls	r3, r3, #5
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b21b      	sxth	r3, r3
 8001532:	b29b      	uxth	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	09db      	lsrs	r3, r3, #7
 800154e:	b29b      	uxth	r3, r3
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	80fb      	strh	r3, [r7, #6]
 800156c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001574:	b21a      	sxth	r2, r3
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	01db      	lsls	r3, r3, #7
 800157a:	b21b      	sxth	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	b21b      	sxth	r3, r3
 8001580:	b29b      	uxth	r3, r3
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	80fb      	strh	r3, [r7, #6]
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	0a1b      	lsrs	r3, r3, #8
 800159c:	b29b      	uxth	r3, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	80fb      	strh	r3, [r7, #6]
 80015b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	b21a      	sxth	r2, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	4313      	orrs	r3, r2
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <updr2rps>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	3301      	adds	r3, #1
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <updr2rps+0x20>)
 80015e8:	5cd3      	ldrb	r3, [r2, r3]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	0800c6a4 	.word	0x0800c6a4

080015fc <dndr2rps>:
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ffe5 	bl	80015d8 <updr2rps>
 800160e:	4603      	mov	r3, r0
 8001610:	2101      	movs	r1, #1
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ffa4 	bl	8001560 <setNocrc>
 8001618:	4603      	mov	r3, r0
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <decDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <decDR+0x2c>)
 8001632:	5cd3      	ldrb	r3, [r2, r3]
 8001634:	2bff      	cmp	r3, #255	; 0xff
 8001636:	d003      	beq.n	8001640 <decDR+0x1c>
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	3b01      	subs	r3, #1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	e000      	b.n	8001642 <decDR+0x1e>
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	0800c6a4 	.word	0x0800c6a4

08001654 <validDR>:
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	3301      	adds	r3, #1
 8001662:	4a06      	ldr	r2, [pc, #24]	; (800167c <validDR+0x28>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	2bff      	cmp	r3, #255	; 0xff
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	0800c6a4 	.word	0x0800c6a4

08001680 <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	460a      	mov	r2, r1
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	4613      	mov	r3, r2
 800168e:	71bb      	strb	r3, [r7, #6]
 8001690:	e005      	b.n	800169e <lowerDR+0x1e>
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ffc5 	bl	8001624 <decDR>
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
 800169e:	79bb      	ldrb	r3, [r7, #6]
 80016a0:	1e5a      	subs	r2, r3, #1
 80016a2:	71ba      	strb	r2, [r7, #6]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f4      	bne.n	8001692 <lowerDR+0x12>
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <os_rlsbf2>:
// BEG OS - default implementations for certain OS suport functions

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2 (xref2cu1_t buf) {
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
    return (u2_t)(buf[0] | (buf[1]<<8));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b21a      	sxth	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3301      	adds	r3, #1
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	b29b      	uxth	r3, r3
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4 (xref2cu1_t buf) {
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[0] | (buf[1]<<8) | ((u4_t)buf[2]<<16) | ((u4_t)buf[3]<<24));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3301      	adds	r3, #1
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	4313      	orrs	r3, r2
 80016f4:	461a      	mov	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3302      	adds	r3, #2
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	041b      	lsls	r3, r3, #16
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3303      	adds	r3, #3
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	061b      	lsls	r3, r3, #24
 8001708:	4313      	orrs	r3, r2
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <os_rmsbf4>:
#endif


#if !defined(os_rmsbf4)
u4_t os_rmsbf4 (xref2cu1_t buf) {
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[3] | (buf[2]<<8) | ((u4_t)buf[1]<<16) | ((u4_t)buf[0]<<24));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3303      	adds	r3, #3
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3302      	adds	r3, #2
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	4313      	orrs	r3, r2
 8001730:	461a      	mov	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3301      	adds	r3, #1
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	041b      	lsls	r3, r3, #16
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	061b      	lsls	r3, r3, #24
 8001742:	4313      	orrs	r3, r2
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
    buf[0] = v;
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	0a1b      	lsrs	r3, r3, #8
 8001768:	b29a      	uxth	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3301      	adds	r3, #1
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	701a      	strb	r2, [r3, #0]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (xref2u1_t buf, u4_t v) {
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
    buf[0] = v;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	0a1a      	lsrs	r2, r3, #8
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3301      	adds	r3, #1
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>16;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	0c1a      	lsrs	r2, r3, #16
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3302      	adds	r3, #2
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	701a      	strb	r2, [r3, #0]
    buf[3] = v>>24;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	0e1a      	lsrs	r2, r3, #24
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3303      	adds	r3, #3
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	701a      	strb	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (xref2u1_t buf, u4_t v) {
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
    buf[3] = v;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3303      	adds	r3, #3
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>8;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	0a1a      	lsrs	r2, r3, #8
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3302      	adds	r3, #2
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>16;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	0c1a      	lsrs	r2, r3, #16
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3301      	adds	r3, #1
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	701a      	strb	r2, [r3, #0]
    buf[0] = v>>24;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	0e1b      	lsrs	r3, r3, #24
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	701a      	strb	r2, [r3, #0]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel (void) {
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
    return MCMD_DEVS_BATT_NOINFO;
 8001806:	23ff      	movs	r3, #255	; 0xff
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16 (xref2u1_t data, uint len) {
 8001812:	b480      	push	{r7}
 8001814:	b087      	sub	sp, #28
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
    u2_t remainder = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	82fb      	strh	r3, [r7, #22]
    u2_t polynomial = 0x1021;
 8001820:	f241 0321 	movw	r3, #4129	; 0x1021
 8001824:	81bb      	strh	r3, [r7, #12]
    for( uint i = 0; i < len; i++ ) {
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	e026      	b.n	800187a <os_crc16+0x68>
        remainder ^= data[i] << 8;
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4413      	add	r3, r2
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	b21a      	sxth	r2, r3
 8001838:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800183c:	4053      	eors	r3, r2
 800183e:	b21b      	sxth	r3, r3
 8001840:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 8001842:	2308      	movs	r3, #8
 8001844:	73fb      	strb	r3, [r7, #15]
 8001846:	e012      	b.n	800186e <os_crc16+0x5c>
            if( (remainder & 0x8000) )
 8001848:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800184c:	2b00      	cmp	r3, #0
 800184e:	da08      	bge.n	8001862 <os_crc16+0x50>
                remainder = (remainder << 1) ^ polynomial;
 8001850:	8afb      	ldrh	r3, [r7, #22]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	b21a      	sxth	r2, r3
 8001856:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800185a:	4053      	eors	r3, r2
 800185c:	b21b      	sxth	r3, r3
 800185e:	82fb      	strh	r3, [r7, #22]
 8001860:	e002      	b.n	8001868 <os_crc16+0x56>
            else 
                remainder <<= 1;
 8001862:	8afb      	ldrh	r3, [r7, #22]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	3b01      	subs	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1e9      	bne.n	8001848 <os_crc16+0x36>
    for( uint i = 0; i < len; i++ ) {
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	3301      	adds	r3, #1
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d3d4      	bcc.n	800182c <os_crc16+0x1a>
        }
    }
    return remainder;
 8001882:	8afb      	ldrh	r3, [r7, #22]
}
 8001884:	4618      	mov	r0, r3
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <micB0>:
// ================================================================================

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
    os_clearMem(AESaux,16);
 800189e:	2210      	movs	r2, #16
 80018a0:	2100      	movs	r1, #0
 80018a2:	4810      	ldr	r0, [pc, #64]	; (80018e4 <micB0+0x54>)
 80018a4:	f009 fc11 	bl	800b0ca <memset>
    AESaux[0]  = 0x49;
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <micB0+0x54>)
 80018aa:	2249      	movs	r2, #73	; 0x49
 80018ac:	701a      	strb	r2, [r3, #0]
    AESaux[5]  = dndir?1:0;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <micB0+0x58>)
 80018bc:	701a      	strb	r2, [r3, #0]
    AESaux[15] = len;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <micB0+0x5c>)
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <micB0+0x60>)
 80018c8:	68f9      	ldr	r1, [r7, #12]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff57 	bl	800177e <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <micB0+0x64>)
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff52 	bl	800177e <os_wlsbf4>
}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000014c 	.word	0x2000014c
 80018e8:	20000151 	.word	0x20000151
 80018ec:	2000015b 	.word	0x2000015b
 80018f0:	20000152 	.word	0x20000152
 80018f4:	20000156 	.word	0x20000156

080018f8 <aes_verifyMic>:


static int aes_verifyMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	68b8      	ldr	r0, [r7, #8]
 800190e:	f7ff ffbf 	bl	8001890 <micB0>
    os_copyMem(AESkey,key,16);
 8001912:	2210      	movs	r2, #16
 8001914:	68f9      	ldr	r1, [r7, #12]
 8001916:	480d      	ldr	r0, [pc, #52]	; (800194c <aes_verifyMic+0x54>)
 8001918:	f009 fbcc 	bl	800b0b4 <memcpy>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	b29b      	uxth	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	6a39      	ldr	r1, [r7, #32]
 8001924:	2002      	movs	r0, #2
 8001926:	f7fe fe9b 	bl	8000660 <os_aes>
 800192a:	4604      	mov	r4, r0
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	6a3a      	ldr	r2, [r7, #32]
 8001930:	4413      	add	r3, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff feef 	bl	8001716 <os_rmsbf4>
 8001938:	4603      	mov	r3, r0
 800193a:	429c      	cmp	r4, r3
 800193c:	bf0c      	ite	eq
 800193e:	2301      	moveq	r3, #1
 8001940:	2300      	movne	r3, #0
 8001942:	b2db      	uxtb	r3, r3
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bd90      	pop	{r4, r7, pc}
 800194c:	2000009c 	.word	0x2000009c

08001950 <aes_appendMic>:


static void aes_appendMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	68b8      	ldr	r0, [r7, #8]
 8001966:	f7ff ff93 	bl	8001890 <micB0>
    os_copyMem(AESkey,key,16);
 800196a:	2210      	movs	r2, #16
 800196c:	68f9      	ldr	r1, [r7, #12]
 800196e:	480b      	ldr	r0, [pc, #44]	; (800199c <aes_appendMic+0x4c>)
 8001970:	f009 fba0 	bl	800b0b4 <memcpy>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	6a3a      	ldr	r2, [r7, #32]
 8001978:	18d4      	adds	r4, r2, r3
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	b29b      	uxth	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	6a39      	ldr	r1, [r7, #32]
 8001982:	2002      	movs	r0, #2
 8001984:	f7fe fe6c 	bl	8000660 <os_aes>
 8001988:	4603      	mov	r3, r0
 800198a:	4619      	mov	r1, r3
 800198c:	4620      	mov	r0, r4
 800198e:	f7ff ff17 	bl	80017c0 <os_wmsbf4>
}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}
 800199a:	bf00      	nop
 800199c:	2000009c 	.word	0x2000009c

080019a0 <aes_appendMic0>:


static void aes_appendMic0 (xref2u1_t pdu, int len) {
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 80019aa:	480b      	ldr	r0, [pc, #44]	; (80019d8 <aes_appendMic0+0x38>)
 80019ac:	f002 fea6 	bl	80046fc <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	18d4      	adds	r4, r2, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	200a      	movs	r0, #10
 80019c0:	f7fe fe4e 	bl	8000660 <os_aes>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4619      	mov	r1, r3
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff fef9 	bl	80017c0 <os_wmsbf4>
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000009c 	.word	0x2000009c

080019dc <aes_verifyMic0>:


static int aes_verifyMic0 (xref2u1_t pdu, int len) {
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 80019e6:	480d      	ldr	r0, [pc, #52]	; (8001a1c <aes_verifyMic0+0x40>)
 80019e8:	f002 fe88 	bl	80046fc <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	461a      	mov	r2, r3
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	200a      	movs	r0, #10
 80019f6:	f7fe fe33 	bl	8000660 <os_aes>
 80019fa:	4604      	mov	r4, r0
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fe87 	bl	8001716 <os_rmsbf4>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	429c      	cmp	r4, r3
 8001a0c:	bf0c      	ite	eq
 8001a0e:	2301      	moveq	r3, #1
 8001a10:	2300      	movne	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd90      	pop	{r4, r7, pc}
 8001a1c:	2000009c 	.word	0x2000009c

08001a20 <aes_encrypt>:


static void aes_encrypt (xref2u1_t pdu, int len) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8001a2a:	4807      	ldr	r0, [pc, #28]	; (8001a48 <aes_encrypt+0x28>)
 8001a2c:	f002 fe66 	bl	80046fc <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f7fe fe11 	bl	8000660 <os_aes>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000009c 	.word	0x2000009c

08001a4c <aes_cipher>:


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	603b      	str	r3, [r7, #0]
    if( len <= 0 )
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	dd29      	ble.n	8001ab4 <aes_cipher+0x68>
        return;
    os_clearMem(AESaux, 16);
 8001a60:	2210      	movs	r2, #16
 8001a62:	2100      	movs	r1, #0
 8001a64:	4815      	ldr	r0, [pc, #84]	; (8001abc <aes_cipher+0x70>)
 8001a66:	f009 fb30 	bl	800b0ca <memset>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <aes_cipher+0x74>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	4a12      	ldr	r2, [pc, #72]	; (8001abc <aes_cipher+0x70>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	7013      	strb	r3, [r2, #0]
    AESaux[5] = dndir?1:0;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf14      	ite	ne
 8001a7c:	2301      	movne	r3, #1
 8001a7e:	2300      	moveq	r3, #0
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <aes_cipher+0x78>)
 8001a84:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <aes_cipher+0x7c>)
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fe77 	bl	800177e <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <aes_cipher+0x80>)
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fe72 	bl	800177e <os_wlsbf4>
    os_copyMem(AESkey,key,16);
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	68f9      	ldr	r1, [r7, #12]
 8001a9e:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <aes_cipher+0x84>)
 8001aa0:	f009 fb08 	bl	800b0b4 <memcpy>
    os_aes(AES_CTR, payload, len);
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	69b9      	ldr	r1, [r7, #24]
 8001aac:	2004      	movs	r0, #4
 8001aae:	f7fe fdd7 	bl	8000660 <os_aes>
 8001ab2:	e000      	b.n	8001ab6 <aes_cipher+0x6a>
        return;
 8001ab4:	bf00      	nop
}
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	2000014c 	.word	0x2000014c
 8001ac0:	2000015b 	.word	0x2000015b
 8001ac4:	20000151 	.word	0x20000151
 8001ac8:	20000152 	.word	0x20000152
 8001acc:	20000156 	.word	0x20000156
 8001ad0:	2000009c 	.word	0x2000009c

08001ad4 <aes_sessKeys>:


static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	81fb      	strh	r3, [r7, #14]
    os_clearMem(nwkkey, 16);
 8001ae4:	2210      	movs	r2, #16
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f009 faee 	bl	800b0ca <memset>
    nwkkey[0] = 0x01;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3301      	adds	r3, #1
 8001af8:	2206      	movs	r2, #6
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f009 fad9 	bl	800b0b4 <memcpy>
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3307      	adds	r3, #7
 8001b06:	89fa      	ldrh	r2, [r7, #14]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fe20 	bl	8001750 <os_wlsbf2>
    os_copyMem(artkey, nwkkey, 16);
 8001b10:	2210      	movs	r2, #16
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	6838      	ldr	r0, [r7, #0]
 8001b16:	f009 facd 	bl	800b0b4 <memcpy>
    artkey[0] = 0x02;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	701a      	strb	r2, [r3, #0]

    os_getDevKey(AESkey);
 8001b20:	4809      	ldr	r0, [pc, #36]	; (8001b48 <aes_sessKeys+0x74>)
 8001b22:	f002 fdeb 	bl	80046fc <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
 8001b26:	2210      	movs	r2, #16
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f7fe fd98 	bl	8000660 <os_aes>
    os_getDevKey(AESkey);
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <aes_sessKeys+0x74>)
 8001b32:	f002 fde3 	bl	80046fc <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
 8001b36:	2210      	movs	r2, #16
 8001b38:	6839      	ldr	r1, [r7, #0]
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7fe fd90 	bl	8000660 <os_aes>
}
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	2000009c 	.word	0x2000009c

08001b4c <getSensitivity>:
    { 141-135,  141-132, 141-129 },  // SF10
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	80fb      	strh	r3, [r7, #6]
    return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fca4 	bl	80014a6 <getSf>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	461c      	mov	r4, r3
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fcae 	bl	80014c6 <getBw>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <getSensitivity+0x3c>)
 8001b70:	4623      	mov	r3, r4
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4423      	add	r3, r4
 8001b76:	4413      	add	r3, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	3b8d      	subs	r3, #141	; 0x8d
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}
 8001b86:	bf00      	nop
 8001b88:	0800c6c0 	.word	0x0800c6c0

08001b8c <calcAirTime>:

ostime_t calcAirTime (rps_t rps, u1_t plen) {
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	460a      	mov	r2, r1
 8001b96:	80fb      	strh	r3, [r7, #6]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	717b      	strb	r3, [r7, #5]
    u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fc91 	bl	80014c6 <getBw>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	72fb      	strb	r3, [r7, #11]
    u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fc7b 	bl	80014a6 <getSf>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	72bb      	strb	r3, [r7, #10]
    if( sf == FSK ) {
 8001bb4:	7abb      	ldrb	r3, [r7, #10]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <calcAirTime+0x48>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
 8001bba:	797b      	ldrb	r3, [r7, #5]
 8001bbc:	330b      	adds	r3, #11
            * (s4_t)OSTICKS_PER_SEC / /*kbit/s*/50000;
 8001bbe:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	4a3c      	ldr	r2, [pc, #240]	; (8001cb8 <calcAirTime+0x12c>)
 8001bc8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bcc:	1312      	asrs	r2, r2, #12
 8001bce:	17db      	asrs	r3, r3, #31
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	e06d      	b.n	8001cb0 <calcAirTime+0x124>
    }
    u1_t sfx = 4*(sf+(7-SF7));
 8001bd4:	7abb      	ldrb	r3, [r7, #10]
 8001bd6:	3306      	adds	r3, #6
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	75fb      	strb	r3, [r7, #23]
    u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 8001bde:	7abb      	ldrb	r3, [r7, #10]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d901      	bls.n	8001be8 <calcAirTime+0x5c>
 8001be4:	2308      	movs	r3, #8
 8001be6:	e000      	b.n	8001bea <calcAirTime+0x5e>
 8001be8:	2300      	movs	r3, #0
 8001bea:	7dfa      	ldrb	r2, [r7, #23]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	727b      	strb	r3, [r7, #9]
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
 8001bf0:	797b      	ldrb	r3, [r7, #5]
 8001bf2:	00da      	lsls	r2, r3, #3
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f103 041c 	add.w	r4, r3, #28
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fc9e 	bl	8001540 <getNocrc>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <calcAirTime+0x82>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e000      	b.n	8001c10 <calcAirTime+0x84>
 8001c0e:	2310      	movs	r3, #16
 8001c10:	441c      	add	r4, r3
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fcba 	bl	800158e <getIh>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <calcAirTime+0x98>
 8001c20:	2314      	movs	r3, #20
 8001c22:	e000      	b.n	8001c26 <calcAirTime+0x9a>
 8001c24:	2300      	movs	r3, #0
 8001c26:	1ae3      	subs	r3, r4, r3
 8001c28:	613b      	str	r3, [r7, #16]
    if( tmp > 0 ) {
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	dd15      	ble.n	8001c5c <calcAirTime+0xd0>
        tmp = (tmp + q - 1) / q;
 8001c30:	7a7a      	ldrb	r2, [r7, #9]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4413      	add	r3, r2
 8001c36:	1e5a      	subs	r2, r3, #1
 8001c38:	7a7b      	ldrb	r3, [r7, #9]
 8001c3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c3e:	613b      	str	r3, [r7, #16]
        tmp *= getCr(rps)+5;
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fc51 	bl	80014ea <getCr>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	1d5a      	adds	r2, r3, #5
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	fb02 f303 	mul.w	r3, r2, r3
 8001c52:	613b      	str	r3, [r7, #16]
        tmp += 8;
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	3308      	adds	r3, #8
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	e001      	b.n	8001c60 <calcAirTime+0xd4>
    } else {
        tmp = 8;
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	613b      	str	r3, [r7, #16]
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	3331      	adds	r3, #49	; 0x31
 8001c66:	613b      	str	r3, [r7, #16]
    //
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
 8001c68:	7aba      	ldrb	r2, [r7, #10]
 8001c6a:	7afb      	ldrb	r3, [r7, #11]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	3301      	adds	r3, #1
 8001c72:	75fb      	strb	r3, [r7, #23]
    int div = 15625;
 8001c74:	f643 5309 	movw	r3, #15625	; 0x3d09
 8001c78:	60fb      	str	r3, [r7, #12]
    if( sfx > 4 ) {
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d907      	bls.n	8001c90 <calcAirTime+0x104>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	3b04      	subs	r3, #4
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	fa42 f303 	asr.w	r3, r2, r3
 8001c8a:	60fb      	str	r3, [r7, #12]
        sfx = 4;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	75fb      	strb	r3, [r7, #23]
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * OSTICKS_PER_SEC + div/2) / div;
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001c9c:	fb02 f203 	mul.w	r2, r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	0fd9      	lsrs	r1, r3, #31
 8001ca4:	440b      	add	r3, r1
 8001ca6:	105b      	asrs	r3, r3, #1
 8001ca8:	441a      	add	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd90      	pop	{r4, r7, pc}
 8001cb8:	14f8b589 	.word	0x14f8b589

08001cbc <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
};


static ostime_t calcRxWindow (u1_t secs, dr_t dr) {
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	71fb      	strb	r3, [r7, #7]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	71bb      	strb	r3, [r7, #6]
    ostime_t rxoff, err;
    if( secs==0 ) {
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d108      	bne.n	8001ce4 <calcRxWindow+0x28>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
 8001cd2:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <calcRxWindow+0xa0>)
 8001cd4:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8001cd8:	617b      	str	r3, [r7, #20]
        err = LMIC.lastDriftDiff;
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <calcRxWindow+0xa0>)
 8001cdc:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	e011      	b.n	8001d08 <calcRxWindow+0x4c>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <calcRxWindow+0xa0>)
 8001ce6:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8001cea:	461a      	mov	r2, r3
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	fb03 f302 	mul.w	r3, r3, r2
 8001cf2:	11db      	asrs	r3, r3, #7
 8001cf4:	617b      	str	r3, [r7, #20]
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <calcRxWindow+0xa0>)
 8001cf8:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	fb03 f302 	mul.w	r3, r3, r2
 8001d04:	11db      	asrs	r3, r3, #7
 8001d06:	613b      	str	r3, [r7, #16]
    }
    u1_t rxsyms = MINRX_SYMS;
 8001d08:	2305      	movs	r3, #5
 8001d0a:	73fb      	strb	r3, [r7, #15]
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <calcRxWindow+0xa0>)
 8001d0e:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <calcRxWindow+0xa0>)
 8001d16:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8001d1a:	fb03 f302 	mul.w	r3, r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4413      	add	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 8001d24:	79bb      	ldrb	r3, [r7, #6]
 8001d26:	4a0e      	ldr	r2, [pc, #56]	; (8001d60 <calcRxWindow+0xa4>)
 8001d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	3305      	adds	r3, #5
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <calcRxWindow+0xa0>)
 8001d3a:	741a      	strb	r2, [r3, #16]

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	3b08      	subs	r3, #8
 8001d40:	79ba      	ldrb	r2, [r7, #6]
 8001d42:	4907      	ldr	r1, [pc, #28]	; (8001d60 <calcRxWindow+0xa4>)
 8001d44:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d48:	fb02 f203 	mul.w	r2, r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	4413      	add	r3, r2
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	371c      	adds	r7, #28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	20000280 	.word	0x20000280
 8001d60:	0800c6e4 	.word	0x0800c6e4

08001d64 <calcBcnRxWindowFromMillis>:


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	460a      	mov	r2, r1
 8001d6e:	71fb      	strb	r3, [r7, #7]
 8001d70:	4613      	mov	r3, r2
 8001d72:	71bb      	strb	r3, [r7, #6]
    if( ini ) {
 8001d74:	79bb      	ldrb	r3, [r7, #6]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d014      	beq.n	8001da4 <calcBcnRxWindowFromMillis+0x40>
        LMIC.drift = 0;
 8001d7a:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <calcBcnRxWindowFromMillis+0xf8>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
        LMIC.maxDriftDiff = 0;
 8001d82:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <calcBcnRxWindowFromMillis+0xf8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
        LMIC.missedBcns = 0;
 8001d8a:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <calcBcnRxWindowFromMillis+0xf8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
 8001d92:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <calcBcnRxWindowFromMillis+0xf8>)
 8001d94:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001d98:	f043 030c 	orr.w	r3, r3, #12
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <calcBcnRxWindowFromMillis+0xf8>)
 8001da0:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
    }
    ostime_t hsym = dr2hsym(DR_BCN);
 8001da4:	2342      	movs	r3, #66	; 0x42
 8001da6:	60fb      	str	r3, [r7, #12]
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 8001da8:	79fd      	ldrb	r5, [r7, #7]
 8001daa:	f04f 0600 	mov.w	r6, #0
 8001dae:	462b      	mov	r3, r5
 8001db0:	4634      	mov	r4, r6
 8001db2:	f04f 0100 	mov.w	r1, #0
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	0162      	lsls	r2, r4, #5
 8001dbc:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001dc0:	0159      	lsls	r1, r3, #5
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4614      	mov	r4, r2
 8001dc6:	1b5b      	subs	r3, r3, r5
 8001dc8:	eb64 0406 	sbc.w	r4, r4, r6
 8001dcc:	f04f 0100 	mov.w	r1, #0
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	00a2      	lsls	r2, r4, #2
 8001dd6:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001dda:	0099      	lsls	r1, r3, #2
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4614      	mov	r4, r2
 8001de0:	195b      	adds	r3, r3, r5
 8001de2:	eb44 0406 	adc.w	r4, r4, r6
 8001de6:	f04f 0100 	mov.w	r1, #0
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	0222      	lsls	r2, r4, #8
 8001df0:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8001df4:	0219      	lsls	r1, r3, #8
 8001df6:	460b      	mov	r3, r1
 8001df8:	4614      	mov	r4, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001e02:	f04f 0400 	mov.w	r4, #0
 8001e06:	18cd      	adds	r5, r1, r3
 8001e08:	eb42 0604 	adc.w	r6, r2, r4
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	4631      	mov	r1, r6
 8001e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	f7fe f9d6 	bl	80001c8 <__aeabi_ldivmod>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	460c      	mov	r4, r1
 8001e20:	461a      	mov	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	3305      	adds	r3, #5
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <calcBcnRxWindowFromMillis+0xf8>)
 8001e30:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <calcBcnRxWindowFromMillis+0xf8>)
 8001e36:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001e3a:	f503 127a 	add.w	r2, r3, #4096000	; 0x3e8000
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <calcBcnRxWindowFromMillis+0xf8>)
 8001e40:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8001e44:	3b08      	subs	r3, #8
 8001e46:	68f9      	ldr	r1, [r7, #12]
 8001e48:	fb01 f303 	mul.w	r3, r1, r3
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	4a03      	ldr	r2, [pc, #12]	; (8001e5c <calcBcnRxWindowFromMillis+0xf8>)
 8001e50:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e5c:	20000280 	.word	0x20000280

08001e60 <rxschedInit>:


// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (xref2rxsched_t rxsched) {
 8001e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e64:	b084      	sub	sp, #16
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
    os_clearMem(AESkey,16);
 8001e6a:	2210      	movs	r2, #16
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	484b      	ldr	r0, [pc, #300]	; (8001f9c <rxschedInit+0x13c>)
 8001e70:	f009 f92b 	bl	800b0ca <memset>
    os_clearMem(LMIC.frame+8,8);
 8001e74:	4b4a      	ldr	r3, [pc, #296]	; (8001fa0 <rxschedInit+0x140>)
 8001e76:	2208      	movs	r2, #8
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f009 f925 	bl	800b0ca <memset>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 8001e80:	4b48      	ldr	r3, [pc, #288]	; (8001fa4 <rxschedInit+0x144>)
 8001e82:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8001e86:	4619      	mov	r1, r3
 8001e88:	4847      	ldr	r0, [pc, #284]	; (8001fa8 <rxschedInit+0x148>)
 8001e8a:	f7ff fc78 	bl	800177e <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
 8001e8e:	4a47      	ldr	r2, [pc, #284]	; (8001fac <rxschedInit+0x14c>)
 8001e90:	4b44      	ldr	r3, [pc, #272]	; (8001fa4 <rxschedInit+0x144>)
 8001e92:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001e96:	4619      	mov	r1, r3
 8001e98:	4610      	mov	r0, r2
 8001e9a:	f7ff fc70 	bl	800177e <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
 8001e9e:	2210      	movs	r2, #16
 8001ea0:	4941      	ldr	r1, [pc, #260]	; (8001fa8 <rxschedInit+0x148>)
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7fe fbdc 	bl	8000660 <os_aes>
    u1_t intvExp = rxsched->intvExp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	785b      	ldrb	r3, [r3, #1]
 8001eac:	73fb      	strb	r3, [r7, #15]
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 8001eae:	483e      	ldr	r0, [pc, #248]	; (8001fa8 <rxschedInit+0x148>)
 8001eb0:	f7ff fbff 	bl	80016b2 <os_rlsbf2>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	f1c3 0307 	rsb	r3, r3, #7
 8001ebe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001ec2:	fa42 f303 	asr.w	r3, r2, r3
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	60bb      	str	r3, [r7, #8]
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8001eca:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <rxschedInit+0x144>)
 8001ecc:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001ed0:	f503 3884 	add.w	r8, r3, #67584	; 0x10800
 8001ed4:	f508 7880 	add.w	r8, r8, #256	; 0x100
                       BCN_RESERVE_osticks +
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	461d      	mov	r5, r3
 8001edc:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001ee0:	462b      	mov	r3, r5
 8001ee2:	4634      	mov	r4, r6
 8001ee4:	f04f 0100 	mov.w	r1, #0
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	0162      	lsls	r2, r4, #5
 8001eee:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001ef2:	0159      	lsls	r1, r3, #5
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4614      	mov	r4, r2
 8001ef8:	1b5b      	subs	r3, r3, r5
 8001efa:	eb64 0406 	sbc.w	r4, r4, r6
 8001efe:	f04f 0100 	mov.w	r1, #0
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	00a2      	lsls	r2, r4, #2
 8001f08:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001f0c:	0099      	lsls	r1, r3, #2
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4614      	mov	r4, r2
 8001f12:	195b      	adds	r3, r3, r5
 8001f14:	eb44 0406 	adc.w	r4, r4, r6
 8001f18:	f04f 0100 	mov.w	r1, #0
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	0122      	lsls	r2, r4, #4
 8001f22:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8001f26:	0119      	lsls	r1, r3, #4
 8001f28:	1ac9      	subs	r1, r1, r3
 8001f2a:	eb62 0204 	sbc.w	r2, r2, r4
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	f04f 0400 	mov.w	r4, #0
 8001f36:	0254      	lsls	r4, r2, #9
 8001f38:	ea44 54d1 	orr.w	r4, r4, r1, lsr #23
 8001f3c:	024b      	lsls	r3, r1, #9
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4622      	mov	r2, r4
 8001f42:	4608      	mov	r0, r1
 8001f44:	4611      	mov	r1, r2
 8001f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	f7fe f93b 	bl	80001c8 <__aeabi_ldivmod>
 8001f52:	4603      	mov	r3, r0
 8001f54:	460c      	mov	r4, r1
                       BCN_RESERVE_osticks +
 8001f56:	eb08 0203 	add.w	r2, r8, r3
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	605a      	str	r2, [r3, #4]
    rxsched->slot   = 0;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	709a      	strb	r2, [r3, #2]
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685c      	ldr	r4, [r3, #4]
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	3302      	adds	r3, #2
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	f7ff fe9d 	bl	8001cbc <calcRxWindow>
 8001f82:	4603      	mov	r3, r0
 8001f84:	1ae2      	subs	r2, r4, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <rxschedInit+0x144>)
 8001f8c:	7c1a      	ldrb	r2, [r3, #16]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	70da      	strb	r2, [r3, #3]
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f9c:	2000009c 	.word	0x2000009c
 8001fa0:	200003d0 	.word	0x200003d0
 8001fa4:	20000280 	.word	0x20000280
 8001fa8:	200003c8 	.word	0x200003c8
 8001fac:	200003cc 	.word	0x200003cc

08001fb0 <rxschedNext>:


static bit_t rxschedNext (xref2rxsched_t rxsched, ostime_t cando) {
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  again:
    if( rxsched->rxtime - cando >= 0 )
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db01      	blt.n	8001fca <rxschedNext+0x1a>
        return 1;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e03a      	b.n	8002040 <rxschedNext+0x90>
    u1_t slot;
    if( (slot=rxsched->slot) >= 128 )
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	789b      	ldrb	r3, [r3, #2]
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	da01      	bge.n	8001fdc <rxschedNext+0x2c>
        return 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e031      	b.n	8002040 <rxschedNext+0x90>
    u1_t intv = 1<<rxsched->intvExp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	785b      	ldrb	r3, [r3, #1]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	4093      	lsls	r3, r2
 8001fe6:	73bb      	strb	r3, [r7, #14]
    if( (rxsched->slot = (slot += (intv))) >= 128 )
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	7bbb      	ldrb	r3, [r7, #14]
 8001fec:	4413      	add	r3, r2
 8001fee:	73fb      	strb	r3, [r7, #15]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	709a      	strb	r2, [r3, #2]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	789b      	ldrb	r3, [r3, #2]
 8001ffa:	b25b      	sxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	da01      	bge.n	8002004 <rxschedNext+0x54>
        return 0;
 8002000:	2300      	movs	r3, #0
 8002002:	e01d      	b.n	8002040 <rxschedNext+0x90>
    rxsched->rxtime = rxsched->rxbase
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6859      	ldr	r1, [r3, #4]
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	4613      	mov	r3, r2
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	049b      	lsls	r3, r3, #18
 8002012:	11db      	asrs	r3, r3, #7
 8002014:	18cc      	adds	r4, r1, r3
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	7bbb      	ldrb	r3, [r7, #14]
 800201a:	4413      	add	r3, r2
 800201c:	b2db      	uxtb	r3, r3
 800201e:	3302      	adds	r3, #2
 8002020:	b2da      	uxtb	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	4619      	mov	r1, r3
 8002028:	4610      	mov	r0, r2
 800202a:	f7ff fe47 	bl	8001cbc <calcRxWindow>
 800202e:	4603      	mov	r3, r0
 8002030:	1ae2      	subs	r2, r4, r3
    rxsched->rxtime = rxsched->rxbase
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <rxschedNext+0x98>)
 8002038:	7c1a      	ldrb	r2, [r3, #16]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	70da      	strb	r2, [r3, #3]
    goto again;
 800203e:	e7bc      	b.n	8001fba <rxschedNext+0xa>
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	bd90      	pop	{r4, r7, pc}
 8002048:	20000280 	.word	0x20000280

0800204c <rndDelay>:


static ostime_t rndDelay (u1_t secSpan) {
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
    u2_t r = os_getRndU2();
 8002056:	f003 fbb7 	bl	80057c8 <radio_rand1>
 800205a:	4603      	mov	r3, r0
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	b21c      	sxth	r4, r3
 8002060:	f003 fbb2 	bl	80057c8 <radio_rand1>
 8002064:	4603      	mov	r3, r0
 8002066:	b21b      	sxth	r3, r3
 8002068:	4323      	orrs	r3, r4
 800206a:	b21b      	sxth	r3, r3
 800206c:	817b      	strh	r3, [r7, #10]
    ostime_t delay = r;
 800206e:	897b      	ldrh	r3, [r7, #10]
 8002070:	60fb      	str	r3, [r7, #12]
    if( delay > OSTICKS_PER_SEC )
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002078:	dd0b      	ble.n	8002092 <rndDelay+0x46>
        delay = r % (u2_t)OSTICKS_PER_SEC;
 800207a:	897b      	ldrh	r3, [r7, #10]
 800207c:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <rndDelay+0x78>)
 800207e:	fba2 1203 	umull	r1, r2, r2, r3
 8002082:	0ad2      	lsrs	r2, r2, #11
 8002084:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8002088:	fb01 f202 	mul.w	r2, r1, r2
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	b29b      	uxth	r3, r3
 8002090:	60fb      	str	r3, [r7, #12]
    if( secSpan > 0 )
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d010      	beq.n	80020ba <rndDelay+0x6e>
        delay += ((u1_t)r % secSpan) * OSTICKS_PER_SEC;
 8002098:	897b      	ldrh	r3, [r7, #10]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	79fa      	ldrb	r2, [r7, #7]
 800209e:	fbb3 f1f2 	udiv	r1, r3, r2
 80020a2:	fb02 f201 	mul.w	r2, r2, r1
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80020b0:	fb03 f302 	mul.w	r3, r3, r2
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
    return delay;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd90      	pop	{r4, r7, pc}
 80020c4:	10624dd3 	.word	0x10624dd3

080020c8 <txDelay>:


static void txDelay (ostime_t reftime, u1_t secSpan) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	70fb      	strb	r3, [r7, #3]
    reftime += rndDelay(secSpan);
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ffb8 	bl	800204c <rndDelay>
 80020dc:	4602      	mov	r2, r0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	607b      	str	r3, [r7, #4]
    if( LMIC.globalDutyRate == 0  ||  (reftime - LMIC.globalDutyAvail) > 0 ) {
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <txDelay+0x58>)
 80020e6:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d006      	beq.n	80020fc <txDelay+0x34>
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <txDelay+0x58>)
 80020f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	dd0c      	ble.n	8002116 <txDelay+0x4e>
        LMIC.globalDutyAvail = reftime;
 80020fc:	4a08      	ldr	r2, [pc, #32]	; (8002120 <txDelay+0x58>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        LMIC.opmode |= OP_RNDTX;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <txDelay+0x58>)
 8002106:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800210a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210e:	b29a      	uxth	r2, r3
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <txDelay+0x58>)
 8002112:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    }
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000280 	.word	0x20000280

08002124 <setDrJoin>:


static void setDrJoin (u1_t reason, u1_t dr) {
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	460a      	mov	r2, r1
 800212e:	71fb      	strb	r3, [r7, #7]
 8002130:	4613      	mov	r3, r2
 8002132:	71bb      	strb	r3, [r7, #6]
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
 8002134:	4a04      	ldr	r2, [pc, #16]	; (8002148 <setDrJoin+0x24>)
 8002136:	79bb      	ldrb	r3, [r7, #6]
 8002138:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
    DO_DEVDB(LMIC.datarate,datarate);
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	20000280 	.word	0x20000280

0800214c <setDrTxpow>:


static void setDrTxpow (u1_t reason, u1_t dr, s1_t pow) {
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
 8002156:	460b      	mov	r3, r1
 8002158:	71bb      	strb	r3, [r7, #6]
 800215a:	4613      	mov	r3, r2
 800215c:	717b      	strb	r3, [r7, #5]
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    
    if( pow != KEEP_TXPOW )
 800215e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002162:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8002166:	d003      	beq.n	8002170 <setDrTxpow+0x24>
        LMIC.adrTxPow = pow;
 8002168:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <setDrTxpow+0x58>)
 800216a:	797b      	ldrb	r3, [r7, #5]
 800216c:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
    if( LMIC.datarate != dr ) {
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <setDrTxpow+0x58>)
 8002172:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002176:	79ba      	ldrb	r2, [r7, #6]
 8002178:	429a      	cmp	r2, r3
 800217a:	d00c      	beq.n	8002196 <setDrTxpow+0x4a>
        LMIC.datarate = dr;
 800217c:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <setDrTxpow+0x58>)
 800217e:	79bb      	ldrb	r3, [r7, #6]
 8002180:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
 8002184:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <setDrTxpow+0x58>)
 8002186:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800218a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800218e:	b29a      	uxth	r2, r3
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <setDrTxpow+0x58>)
 8002192:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    }
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000280 	.word	0x20000280

080021a8 <initDefaultChannels>:
    // Default operational frequencies
    EU868_F1|BAND_CENTI, EU868_F2|BAND_CENTI, EU868_F3|BAND_CENTI,
    EU868_F4|BAND_MILLI, EU868_F5|BAND_MILLI, EU868_F6|BAND_DECI
};

static void initDefaultChannels (bit_t join) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
    os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 80021b2:	2240      	movs	r2, #64	; 0x40
 80021b4:	2100      	movs	r1, #0
 80021b6:	483a      	ldr	r0, [pc, #232]	; (80022a0 <initDefaultChannels+0xf8>)
 80021b8:	f008 ff87 	bl	800b0ca <memset>
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 80021bc:	2220      	movs	r2, #32
 80021be:	2100      	movs	r1, #0
 80021c0:	4838      	ldr	r0, [pc, #224]	; (80022a4 <initDefaultChannels+0xfc>)
 80021c2:	f008 ff82 	bl	800b0ca <memset>
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 80021c6:	2220      	movs	r2, #32
 80021c8:	2100      	movs	r1, #0
 80021ca:	4837      	ldr	r0, [pc, #220]	; (80022a8 <initDefaultChannels+0x100>)
 80021cc:	f008 ff7d 	bl	800b0ca <memset>

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 80021d0:	4b36      	ldr	r3, [pc, #216]	; (80022ac <initDefaultChannels+0x104>)
 80021d2:	223f      	movs	r2, #63	; 0x3f
 80021d4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <initDefaultChannels+0x3a>
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <initDefaultChannels+0x3c>
 80021e2:	2306      	movs	r3, #6
 80021e4:	73fb      	strb	r3, [r7, #15]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 80021e6:	2300      	movs	r3, #0
 80021e8:	73bb      	strb	r3, [r7, #14]
 80021ea:	e014      	b.n	8002216 <initDefaultChannels+0x6e>
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	7bbb      	ldrb	r3, [r7, #14]
 80021f0:	492f      	ldr	r1, [pc, #188]	; (80022b0 <initDefaultChannels+0x108>)
 80021f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80021f6:	492d      	ldr	r1, [pc, #180]	; (80022ac <initDefaultChannels+0x104>)
 80021f8:	3310      	adds	r3, #16
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
 80021fe:	7bbb      	ldrb	r3, [r7, #14]
 8002200:	4a2a      	ldr	r2, [pc, #168]	; (80022ac <initDefaultChannels+0x104>)
 8002202:	3340      	adds	r3, #64	; 0x40
 8002204:	213f      	movs	r1, #63	; 0x3f
 8002206:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 800220a:	7bbb      	ldrb	r3, [r7, #14]
 800220c:	3301      	adds	r3, #1
 800220e:	73bb      	strb	r3, [r7, #14]
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	3301      	adds	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
 8002216:	7bbb      	ldrb	r3, [r7, #14]
 8002218:	2b05      	cmp	r3, #5
 800221a:	d9e7      	bls.n	80021ec <initDefaultChannels+0x44>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

    LMIC.bands[BAND_MILLI].txcap    = 1000;  // 0.1%
 800221c:	4b23      	ldr	r3, [pc, #140]	; (80022ac <initDefaultChannels+0x104>)
 800221e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002222:	841a      	strh	r2, [r3, #32]
    LMIC.bands[BAND_MILLI].txpow    = 14;
 8002224:	4b21      	ldr	r3, [pc, #132]	; (80022ac <initDefaultChannels+0x104>)
 8002226:	220e      	movs	r2, #14
 8002228:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 800222c:	f003 facc 	bl	80057c8 <radio_rand1>
 8002230:	4603      	mov	r3, r0
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <initDefaultChannels+0x104>)
 800223a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    LMIC.bands[BAND_CENTI].txcap    = 100;   // 1%
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <initDefaultChannels+0x104>)
 8002240:	2264      	movs	r2, #100	; 0x64
 8002242:	851a      	strh	r2, [r3, #40]	; 0x28
    LMIC.bands[BAND_CENTI].txpow    = 14;
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <initDefaultChannels+0x104>)
 8002246:	220e      	movs	r2, #14
 8002248:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 800224c:	f003 fabc 	bl	80057c8 <radio_rand1>
 8002250:	4603      	mov	r3, r0
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	b2da      	uxtb	r2, r3
 8002258:	4b14      	ldr	r3, [pc, #80]	; (80022ac <initDefaultChannels+0x104>)
 800225a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <initDefaultChannels+0x104>)
 8002260:	220a      	movs	r2, #10
 8002262:	861a      	strh	r2, [r3, #48]	; 0x30
    LMIC.bands[BAND_DECI ].txpow    = 27;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <initDefaultChannels+0x104>)
 8002266:	221b      	movs	r2, #27
 8002268:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
 800226c:	f003 faac 	bl	80057c8 <radio_rand1>
 8002270:	4603      	mov	r3, r0
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	b2da      	uxtb	r2, r3
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <initDefaultChannels+0x104>)
 800227a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
 800227e:	f002 fd7d 	bl	8004d7c <os_getTime>
 8002282:	4602      	mov	r2, r0
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <initDefaultChannels+0x104>)
 8002286:	635a      	str	r2, [r3, #52]	; 0x34
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <initDefaultChannels+0x104>)
 800228a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    LMIC.bands[BAND_CENTI].avail =
 800228c:	4a07      	ldr	r2, [pc, #28]	; (80022ac <initDefaultChannels+0x104>)
 800228e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <initDefaultChannels+0x104>)
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    LMIC.bands[BAND_MILLI].avail = 
 8002294:	4a05      	ldr	r2, [pc, #20]	; (80022ac <initDefaultChannels+0x104>)
 8002296:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	200002c0 	.word	0x200002c0
 80022a4:	20000300 	.word	0x20000300
 80022a8:	200002a0 	.word	0x200002a0
 80022ac:	20000280 	.word	0x20000280
 80022b0:	0800c704 	.word	0x0800c704

080022b4 <LMIC_setupChannel>:
    b->avail = os_getTime();
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    return 1;
}

bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6039      	str	r1, [r7, #0]
 80022bc:	4611      	mov	r1, r2
 80022be:	461a      	mov	r2, r3
 80022c0:	4603      	mov	r3, r0
 80022c2:	71fb      	strb	r3, [r7, #7]
 80022c4:	460b      	mov	r3, r1
 80022c6:	80bb      	strh	r3, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71bb      	strb	r3, [r7, #6]
    if( chidx >= MAX_CHANNELS )
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	2b0f      	cmp	r3, #15
 80022d0:	d901      	bls.n	80022d6 <LMIC_setupChannel+0x22>
        return 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e054      	b.n	8002380 <LMIC_setupChannel+0xcc>
    if( band == -1 ) {
 80022d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022de:	d121      	bne.n	8002324 <LMIC_setupChannel+0x70>
        if( freq >= 869400000 && freq <= 869650000 )
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	4a2a      	ldr	r2, [pc, #168]	; (800238c <LMIC_setupChannel+0xd8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d908      	bls.n	80022fa <LMIC_setupChannel+0x46>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	4a29      	ldr	r2, [pc, #164]	; (8002390 <LMIC_setupChannel+0xdc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d804      	bhi.n	80022fa <LMIC_setupChannel+0x46>
            freq |= BAND_DECI;   // 10% 27dBm
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f043 0302 	orr.w	r3, r3, #2
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	e021      	b.n	800233e <LMIC_setupChannel+0x8a>
        else if( (freq >= 868000000 && freq <= 868600000) ||
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	4a25      	ldr	r2, [pc, #148]	; (8002394 <LMIC_setupChannel+0xe0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d903      	bls.n	800230a <LMIC_setupChannel+0x56>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	4a24      	ldr	r2, [pc, #144]	; (8002398 <LMIC_setupChannel+0xe4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d907      	bls.n	800231a <LMIC_setupChannel+0x66>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	4a23      	ldr	r2, [pc, #140]	; (800239c <LMIC_setupChannel+0xe8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d915      	bls.n	800233e <LMIC_setupChannel+0x8a>
                 (freq >= 869700000 && freq <= 870000000)  )
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	4a22      	ldr	r2, [pc, #136]	; (80023a0 <LMIC_setupChannel+0xec>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d811      	bhi.n	800233e <LMIC_setupChannel+0x8a>
            freq |= BAND_CENTI;  // 1% 14dBm 
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	603b      	str	r3, [r7, #0]
 8002322:	e00c      	b.n	800233e <LMIC_setupChannel+0x8a>
        else 
            freq |= BAND_MILLI;  // 0.1% 14dBm
    } else {
        if( band > BAND_AUX ) return 0;
 8002324:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002328:	2b03      	cmp	r3, #3
 800232a:	dd01      	ble.n	8002330 <LMIC_setupChannel+0x7c>
 800232c:	2300      	movs	r3, #0
 800232e:	e027      	b.n	8002380 <LMIC_setupChannel+0xcc>
        freq = (freq&~3) | band;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f023 0203 	bic.w	r2, r3, #3
 8002336:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800233a:	4313      	orrs	r3, r2
 800233c:	603b      	str	r3, [r7, #0]
    }
    LMIC.channelFreq [chidx] = freq;
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	4918      	ldr	r1, [pc, #96]	; (80023a4 <LMIC_setupChannel+0xf0>)
 8002342:	3310      	adds	r3, #16
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
 800234a:	88bb      	ldrh	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <LMIC_setupChannel+0xa0>
 8002350:	88ba      	ldrh	r2, [r7, #4]
 8002352:	e000      	b.n	8002356 <LMIC_setupChannel+0xa2>
 8002354:	223f      	movs	r2, #63	; 0x3f
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	4912      	ldr	r1, [pc, #72]	; (80023a4 <LMIC_setupChannel+0xf0>)
 800235a:	3340      	adds	r3, #64	; 0x40
 800235c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    LMIC.channelMap |= 1<<chidx;  // enabled right away
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <LMIC_setupChannel+0xf0>)
 8002362:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002366:	b21a      	sxth	r2, r3
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	2101      	movs	r1, #1
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	b21b      	sxth	r3, r3
 8002372:	4313      	orrs	r3, r2
 8002374:	b21b      	sxth	r3, r3
 8002376:	b29a      	uxth	r2, r3
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <LMIC_setupChannel+0xf0>)
 800237a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    return 1;
 800237e:	2301      	movs	r3, #1
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	33d1fdbf 	.word	0x33d1fdbf
 8002390:	33d5ce50 	.word	0x33d5ce50
 8002394:	33bca0ff 	.word	0x33bca0ff
 8002398:	33c5c8c0 	.word	0x33c5c8c0
 800239c:	33d6919f 	.word	0x33d6919f
 80023a0:	33db2580 	.word	0x33db2580
 80023a4:	20000280 	.word	0x20000280

080023a8 <convFreq>:
    LMIC.channelFreq[channel] = 0;
    LMIC.channelDrMap[channel] = 0;
    LMIC.channelMap &= ~(1<<channel);
}

static u4_t convFreq (xref2u1_t ptr) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    u4_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff f991 	bl	80016dc <os_rlsbf4>
 80023ba:	4603      	mov	r3, r0
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	2264      	movs	r2, #100	; 0x64
 80023c0:	fb02 f303 	mul.w	r3, r2, r3
 80023c4:	60fb      	str	r3, [r7, #12]
    if( freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX )
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4a06      	ldr	r2, [pc, #24]	; (80023e4 <convFreq+0x3c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d903      	bls.n	80023d6 <convFreq+0x2e>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <convFreq+0x40>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <convFreq+0x32>
        freq = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
    return freq;
 80023da:	68fb      	ldr	r3, [r7, #12]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	337055bf 	.word	0x337055bf
 80023e8:	33db2580 	.word	0x33db2580

080023ec <mapChannels>:

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	460a      	mov	r2, r1
 80023f6:	71fb      	strb	r3, [r7, #7]
 80023f8:	4613      	mov	r3, r2
 80023fa:	80bb      	strh	r3, [r7, #4]
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10a      	bne.n	8002418 <mapChannels+0x2c>
 8002402:	88bb      	ldrh	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d007      	beq.n	8002418 <mapChannels+0x2c>
 8002408:	88ba      	ldrh	r2, [r7, #4]
 800240a:	4b1c      	ldr	r3, [pc, #112]	; (800247c <mapChannels+0x90>)
 800240c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002410:	43db      	mvns	r3, r3
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <mapChannels+0x30>
        return 0;  // illegal input
 8002418:	2300      	movs	r3, #0
 800241a:	e028      	b.n	800246e <mapChannels+0x82>
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e01d      	b.n	800245e <mapChannels+0x72>
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
 8002422:	88ba      	ldrh	r2, [r7, #4]
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	fa42 f303 	asr.w	r3, r2, r3
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d012      	beq.n	8002458 <mapChannels+0x6c>
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	4a11      	ldr	r2, [pc, #68]	; (800247c <mapChannels+0x90>)
 8002436:	3310      	adds	r3, #16
 8002438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10b      	bne.n	8002458 <mapChannels+0x6c>
            chmap &= ~(1<<chnl); // ignore - channel is not defined
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2201      	movs	r2, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	b21b      	sxth	r3, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	b21a      	sxth	r2, r3
 800244e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002452:	4013      	ands	r3, r2
 8002454:	b21b      	sxth	r3, r3
 8002456:	80bb      	strh	r3, [r7, #4]
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	3301      	adds	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d9de      	bls.n	8002422 <mapChannels+0x36>
    }
    LMIC.channelMap = chmap;
 8002464:	4a05      	ldr	r2, [pc, #20]	; (800247c <mapChannels+0x90>)
 8002466:	88bb      	ldrh	r3, [r7, #4]
 8002468:	f8a2 30a0 	strh.w	r3, [r2, #160]	; 0xa0
    return 1;
 800246c:	2301      	movs	r3, #1
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000280 	.word	0x20000280

08002480 <updateTx>:


static void updateTx (ostime_t txbeg) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
    u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 8002488:	4b21      	ldr	r3, [pc, #132]	; (8002510 <updateTx+0x90>)
 800248a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800248e:	4a20      	ldr	r2, [pc, #128]	; (8002510 <updateTx+0x90>)
 8002490:	3310      	adds	r3, #16
 8002492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002496:	617b      	str	r3, [r7, #20]
    // Update global/band specific duty cycle stats
    ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <updateTx+0x90>)
 800249a:	89da      	ldrh	r2, [r3, #14]
 800249c:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <updateTx+0x90>)
 800249e:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f7ff fb71 	bl	8001b8c <calcAirTime>
 80024aa:	6138      	str	r0, [r7, #16]
    // Update channel/global duty cycle stats
    xref2band_t band = &LMIC.bands[freq & 0x3];
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	3304      	adds	r3, #4
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4a16      	ldr	r2, [pc, #88]	; (8002510 <updateTx+0x90>)
 80024b8:	4413      	add	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
    LMIC.freq  = freq & ~(u4_t)3;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f023 0303 	bic.w	r3, r3, #3
 80024c2:	4a13      	ldr	r2, [pc, #76]	; (8002510 <updateTx+0x90>)
 80024c4:	6093      	str	r3, [r2, #8]
    LMIC.txpow = band->txpow;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <updateTx+0x90>)
 80024ce:	749a      	strb	r2, [r3, #18]
    band->avail = txbeg + airtime * band->txcap;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	fb03 f202 	mul.w	r2, r3, r2
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	441a      	add	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	605a      	str	r2, [r3, #4]
    if( LMIC.globalDutyRate != 0 )
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <updateTx+0x90>)
 80024e6:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <updateTx+0x86>
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <updateTx+0x90>)
 80024f0:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80024f4:	461a      	mov	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	fa03 f202 	lsl.w	r2, r3, r2
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	4a03      	ldr	r2, [pc, #12]	; (8002510 <updateTx+0x90>)
 8002502:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
}
 8002506:	bf00      	nop
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000280 	.word	0x20000280

08002514 <nextTx>:

static ostime_t nextTx (ostime_t now) {
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
    u1_t bmap=0xF;
 800251c:	230f      	movs	r3, #15
 800251e:	75fb      	strb	r3, [r7, #23]
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	4b48      	ldr	r3, [pc, #288]	; (8002644 <nextTx+0x130>)
 8002524:	4413      	add	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        u1_t band=0;
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]
        for( u1_t bi=0; bi<4; bi++ ) {
 800252c:	2300      	movs	r3, #0
 800252e:	73bb      	strb	r3, [r7, #14]
 8002530:	e01d      	b.n	800256e <nextTx+0x5a>
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
 8002532:	7dfa      	ldrb	r2, [r7, #23]
 8002534:	7bbb      	ldrb	r3, [r7, #14]
 8002536:	fa42 f303 	asr.w	r3, r2, r3
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d012      	beq.n	8002568 <nextTx+0x54>
 8002542:	7bbb      	ldrb	r3, [r7, #14]
 8002544:	4a40      	ldr	r2, [pc, #256]	; (8002648 <nextTx+0x134>)
 8002546:	3304      	adds	r3, #4
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	dd08      	ble.n	8002568 <nextTx+0x54>
                mintime = LMIC.bands[band = bi].avail;
 8002556:	7bbb      	ldrb	r3, [r7, #14]
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	4a3a      	ldr	r2, [pc, #232]	; (8002648 <nextTx+0x134>)
 800255e:	3304      	adds	r3, #4
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	613b      	str	r3, [r7, #16]
        for( u1_t bi=0; bi<4; bi++ ) {
 8002568:	7bbb      	ldrb	r3, [r7, #14]
 800256a:	3301      	adds	r3, #1
 800256c:	73bb      	strb	r3, [r7, #14]
 800256e:	7bbb      	ldrb	r3, [r7, #14]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d9de      	bls.n	8002532 <nextTx+0x1e>
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	4a34      	ldr	r2, [pc, #208]	; (8002648 <nextTx+0x134>)
 8002578:	3304      	adds	r3, #4
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	78db      	ldrb	r3, [r3, #3]
 8002580:	737b      	strb	r3, [r7, #13]
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 8002582:	2300      	movs	r3, #0
 8002584:	733b      	strb	r3, [r7, #12]
 8002586:	e042      	b.n	800260e <nextTx+0xfa>
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
 8002588:	7b7b      	ldrb	r3, [r7, #13]
 800258a:	3301      	adds	r3, #1
 800258c:	737b      	strb	r3, [r7, #13]
 800258e:	7b7b      	ldrb	r3, [r7, #13]
 8002590:	2b0f      	cmp	r3, #15
 8002592:	d902      	bls.n	800259a <nextTx+0x86>
                chnl -=  MAX_CHANNELS;
 8002594:	7b7b      	ldrb	r3, [r7, #13]
 8002596:	3b10      	subs	r3, #16
 8002598:	737b      	strb	r3, [r7, #13]
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 800259a:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <nextTx+0x134>)
 800259c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80025a0:	461a      	mov	r2, r3
 80025a2:	7b7b      	ldrb	r3, [r7, #13]
 80025a4:	fa42 f303 	asr.w	r3, r2, r3
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d02b      	beq.n	8002608 <nextTx+0xf4>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 80025b0:	7b7b      	ldrb	r3, [r7, #13]
 80025b2:	4a25      	ldr	r2, [pc, #148]	; (8002648 <nextTx+0x134>)
 80025b4:	3340      	adds	r3, #64	; 0x40
 80025b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b22      	ldr	r3, [pc, #136]	; (8002648 <nextTx+0x134>)
 80025be:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	fa42 f303 	asr.w	r3, r2, r3
 80025ca:	f003 0301 	and.w	r3, r3, #1
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d01a      	beq.n	8002608 <nextTx+0xf4>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
 80025d2:	7bfa      	ldrb	r2, [r7, #15]
 80025d4:	7b7b      	ldrb	r3, [r7, #13]
 80025d6:	491c      	ldr	r1, [pc, #112]	; (8002648 <nextTx+0x134>)
 80025d8:	3310      	adds	r3, #16
 80025da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025de:	f003 0303 	and.w	r3, r3, #3
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d110      	bne.n	8002608 <nextTx+0xf4>
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	4917      	ldr	r1, [pc, #92]	; (8002648 <nextTx+0x134>)
 80025ea:	1d13      	adds	r3, r2, #4
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	440b      	add	r3, r1
 80025f0:	7b79      	ldrb	r1, [r7, #13]
 80025f2:	70d9      	strb	r1, [r3, #3]
 80025f4:	4914      	ldr	r1, [pc, #80]	; (8002648 <nextTx+0x134>)
 80025f6:	1d13      	adds	r3, r2, #4
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	440b      	add	r3, r1
 80025fc:	78da      	ldrb	r2, [r3, #3]
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <nextTx+0x134>)
 8002600:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
                return mintime;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	e016      	b.n	8002636 <nextTx+0x122>
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 8002608:	7b3b      	ldrb	r3, [r7, #12]
 800260a:	3301      	adds	r3, #1
 800260c:	733b      	strb	r3, [r7, #12]
 800260e:	7b3b      	ldrb	r3, [r7, #12]
 8002610:	2b0f      	cmp	r3, #15
 8002612:	d9b9      	bls.n	8002588 <nextTx+0x74>
            }
        }
        if( (bmap &= ~(1<<band)) == 0 ) {
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2201      	movs	r2, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	b25b      	sxtb	r3, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	b25a      	sxtb	r2, r3
 8002622:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002626:	4013      	ands	r3, r2
 8002628:	b25b      	sxtb	r3, r3
 800262a:	75fb      	strb	r3, [r7, #23]
 800262c:	7dfb      	ldrb	r3, [r7, #23]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f47f af76 	bne.w	8002520 <nextTx+0xc>
            // No feasible channel  found!
            return mintime;
 8002634:	693b      	ldr	r3, [r7, #16]
        }
    } while(1);
}
 8002636:	4618      	mov	r0, r3
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	44aa2000 	.word	0x44aa2000
 8002648:	20000280 	.word	0x20000280

0800264c <setBcnRxParams>:


static void setBcnRxParams (void) {
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
    LMIC.dataLen = 0;
 8002650:	4b10      	ldr	r3, [pc, #64]	; (8002694 <setBcnRxParams+0x48>)
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t)3;
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <setBcnRxParams+0x48>)
 800265a:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 800265e:	4a0d      	ldr	r2, [pc, #52]	; (8002694 <setBcnRxParams+0x48>)
 8002660:	3310      	adds	r3, #16
 8002662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002666:	f023 0303 	bic.w	r3, r3, #3
 800266a:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <setBcnRxParams+0x48>)
 800266c:	6093      	str	r3, [r2, #8]
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
 800266e:	2003      	movs	r0, #3
 8002670:	f7fe ffc4 	bl	80015fc <dndr2rps>
 8002674:	4603      	mov	r3, r0
 8002676:	2101      	movs	r1, #1
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe ff71 	bl	8001560 <setNocrc>
 800267e:	4603      	mov	r3, r0
 8002680:	2111      	movs	r1, #17
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe ff92 	bl	80015ac <setIh>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	4b01      	ldr	r3, [pc, #4]	; (8002694 <setBcnRxParams+0x48>)
 800268e:	81da      	strh	r2, [r3, #14]
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000280 	.word	0x20000280

08002698 <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop (void) {
 8002698:	b598      	push	{r3, r4, r7, lr}
 800269a:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 800269c:	f003 f894 	bl	80057c8 <radio_rand1>
 80026a0:	4603      	mov	r3, r0
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b15      	ldr	r3, [pc, #84]	; (80026fc <initJoinLoop+0x64>)
 80026a6:	fba3 1302 	umull	r1, r3, r3, r2
 80026aa:	0899      	lsrs	r1, r3, #2
 80026ac:	460b      	mov	r3, r1
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	440b      	add	r3, r1
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <initJoinLoop+0x68>)
 80026ba:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
#endif
    LMIC.adrTxPow = 14;
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <initJoinLoop+0x68>)
 80026c0:	220e      	movs	r2, #14
 80026c2:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
    setDrJoin(DRCHG_SET, DR_SF7);
 80026c6:	2105      	movs	r1, #5
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7ff fd2b 	bl	8002124 <setDrJoin>
    initDefaultChannels(1);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f7ff fd6a 	bl	80021a8 <initDefaultChannels>
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <initJoinLoop+0x68>)
 80026d6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80026da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <initJoinLoop+0x4e>
 80026e2:	f7fe fed9 	bl	8001498 <hal_failed>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <initJoinLoop+0x68>)
 80026e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80026ea:	2008      	movs	r0, #8
 80026ec:	f7ff fcae 	bl	800204c <rndDelay>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4423      	add	r3, r4
 80026f4:	4a02      	ldr	r2, [pc, #8]	; (8002700 <initJoinLoop+0x68>)
 80026f6:	6013      	str	r3, [r2, #0]
}
 80026f8:	bf00      	nop
 80026fa:	bd98      	pop	{r3, r4, r7, pc}
 80026fc:	aaaaaaab 	.word	0xaaaaaaab
 8002700:	20000280 	.word	0x20000280

08002704 <nextJoinState>:


static ostime_t nextJoinState (void) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
    u1_t failed = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	71fb      	strb	r3, [r7, #7]

    // Try 869.x and then 864.x with same DR
    // If both fail try next lower datarate
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
 800270e:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <nextJoinState+0xcc>)
 8002710:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002714:	3301      	adds	r3, #1
 8002716:	b2da      	uxtb	r2, r3
 8002718:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <nextJoinState+0xcc>)
 800271a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800271e:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <nextJoinState+0xcc>)
 8002720:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002724:	2b06      	cmp	r3, #6
 8002726:	d103      	bne.n	8002730 <nextJoinState+0x2c>
        LMIC.txChnl = 0;
 8002728:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <nextJoinState+0xcc>)
 800272a:	2200      	movs	r2, #0
 800272c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    if( (++LMIC.txCnt & 1) == 0 ) {
 8002730:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <nextJoinState+0xcc>)
 8002732:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8002736:	3301      	adds	r3, #1
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <nextJoinState+0xcc>)
 800273c:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
 8002740:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <nextJoinState+0xcc>)
 8002742:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d112      	bne.n	8002774 <nextJoinState+0x70>
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
 800274e:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <nextJoinState+0xcc>)
 8002750:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <nextJoinState+0x5a>
            failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 8002758:	2301      	movs	r3, #1
 800275a:	71fb      	strb	r3, [r7, #7]
 800275c:	e00a      	b.n	8002774 <nextJoinState+0x70>
        else
            setDrJoin(DRCHG_NOJACC, decDR((dr_t)LMIC.datarate));
 800275e:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <nextJoinState+0xcc>)
 8002760:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe ff5d 	bl	8001624 <decDR>
 800276a:	4603      	mov	r3, r0
 800276c:	4619      	mov	r1, r3
 800276e:	2001      	movs	r0, #1
 8002770:	f7ff fcd8 	bl	8002124 <setDrJoin>
    }
    // Clear NEXTCHNL because join state engine controls channel hopping
    LMIC.opmode &= ~OP_NEXTCHNL;
 8002774:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <nextJoinState+0xcc>)
 8002776:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800277a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800277e:	b29a      	uxth	r2, r3
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <nextJoinState+0xcc>)
 8002782:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
 8002786:	f002 faf9 	bl	8004d7c <os_getTime>
 800278a:	6038      	str	r0, [r7, #0]
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <nextJoinState+0xcc>)
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	da02      	bge.n	800279e <nextJoinState+0x9a>
        time = LMIC.bands[BAND_MILLI].avail;
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <nextJoinState+0xcc>)
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	603b      	str	r3, [r7, #0]
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <nextJoinState+0xcc>)
 80027a0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80027a4:	461a      	mov	r2, r3
 80027a6:	23ff      	movs	r3, #255	; 0xff
 80027a8:	4113      	asrs	r3, r2
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fc4d 	bl	800204c <rndDelay>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80027b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
    LMIC.txend = time +
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	4a03      	ldr	r2, [pc, #12]	; (80027d0 <nextJoinState+0xcc>)
 80027c2:	6013      	str	r3, [r2, #0]
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
 80027c4:	79fb      	ldrb	r3, [r7, #7]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000280 	.word	0x20000280

080027d4 <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif


static void runEngineUpdate (xref2osjob_t osjob) {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
    engineUpdate();
 80027dc:	f001 fcf2 	bl	80041c4 <engineUpdate>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <reportEvent>:


static void reportEvent (ev_t ev) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 ffeb 	bl	80047d0 <onEvent>
    engineUpdate();
 80027fa:	f001 fce3 	bl	80041c4 <engineUpdate>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <runReset>:


static void runReset (xref2osjob_t osjob) {
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
    // Disable session
    LMIC_reset();
 800280e:	f001 fea3 	bl	8004558 <LMIC_reset>
    LMIC_startJoining();
 8002812:	f001 fa4b 	bl	8003cac <LMIC_startJoining>
    reportEvent(EV_RESET);
 8002816:	200c      	movs	r0, #12
 8002818:	f7ff ffe6 	bl	80027e8 <reportEvent>
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <stateJustJoined>:

static void stateJustJoined (void) {
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
 8002828:	4b2f      	ldr	r3, [pc, #188]	; (80028e8 <stateJustJoined+0xc4>)
 800282a:	2200      	movs	r2, #0
 800282c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <stateJustJoined+0xc4>)
 8002832:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002836:	4a2c      	ldr	r2, [pc, #176]	; (80028e8 <stateJustJoined+0xc4>)
 8002838:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    LMIC.rejoinCnt   = 0;
 800283c:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <stateJustJoined+0xc4>)
 800283e:	2200      	movs	r2, #0
 8002840:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 8002844:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <stateJustJoined+0xc4>)
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
 800284c:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <stateJustJoined+0xc4>)
 800284e:	f893 2126 	ldrb.w	r2, [r3, #294]	; 0x126
 8002852:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <stateJustJoined+0xc4>)
 8002854:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
 8002858:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <stateJustJoined+0xc4>)
 800285a:	f893 2125 	ldrb.w	r2, [r3, #293]	; 0x125
 800285e:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <stateJustJoined+0xc4>)
 8002860:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 8002864:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <stateJustJoined+0xc4>)
 8002866:	f893 2122 	ldrb.w	r2, [r3, #290]	; 0x122
 800286a:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <stateJustJoined+0xc4>)
 800286c:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    LMIC.moreData    = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <stateJustJoined+0xc4>)
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8002878:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <stateJustJoined+0xc4>)
 800287a:	f893 2129 	ldrb.w	r2, [r3, #297]	; 0x129
 800287e:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <stateJustJoined+0xc4>)
 8002880:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 8002884:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <stateJustJoined+0xc4>)
 8002886:	f893 212a 	ldrb.w	r2, [r3, #298]	; 0x12a
 800288a:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <stateJustJoined+0xc4>)
 800288c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8002890:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <stateJustJoined+0xc4>)
 8002892:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8002896:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <stateJustJoined+0xc4>)
 8002898:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    LMIC.pingSetAns  = 0;
 800289c:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <stateJustJoined+0xc4>)
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
    LMIC.upRepeat    = 0;
 80028a4:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <stateJustJoined+0xc4>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
    LMIC.adrAckReq   = LINK_CHECK_INIT;
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <stateJustJoined+0xc4>)
 80028ae:	22f4      	movs	r2, #244	; 0xf4
 80028b0:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
    LMIC.dn2Dr       = DR_DNW2;
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <stateJustJoined+0xc4>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
    LMIC.dn2Freq     = FREQ_DNW2;
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <stateJustJoined+0xc4>)
 80028be:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <stateJustJoined+0xc8>)
 80028c0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    LMIC.bcnChnl     = CHNL_BCN;
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <stateJustJoined+0xc4>)
 80028c6:	2205      	movs	r2, #5
 80028c8:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
    LMIC.ping.freq   = FREQ_PING;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <stateJustJoined+0xc4>)
 80028ce:	4a07      	ldr	r2, [pc, #28]	; (80028ec <stateJustJoined+0xc8>)
 80028d0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    LMIC.ping.dr     = DR_PING;
 80028d4:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <stateJustJoined+0xc4>)
 80028d6:	2203      	movs	r2, #3
 80028d8:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000280 	.word	0x20000280
 80028ec:	33d3e608 	.word	0x33d3e608

080028f0 <decodeBeacon>:
// ================================================================================
// Decoding frames


// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 80028f6:	4b46      	ldr	r3, [pc, #280]	; (8002a10 <decodeBeacon+0x120>)
 80028f8:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80028fc:	2b11      	cmp	r3, #17
 80028fe:	d001      	beq.n	8002904 <decodeBeacon+0x14>
 8002900:	f7fe fdca 	bl	8001498 <hal_failed>
    xref2u1_t d = LMIC.frame;
 8002904:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <decodeBeacon+0x124>)
 8002906:	607b      	str	r3, [r7, #4]
    if(
#if defined CFG_eu868
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3307      	adds	r3, #7
 800290c:	781c      	ldrb	r4, [r3, #0]
 800290e:	2107      	movs	r1, #7
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7fe ff7e 	bl	8001812 <os_crc16>
 8002916:	4603      	mov	r3, r0
 8002918:	b2db      	uxtb	r3, r3
    if(
 800291a:	429c      	cmp	r4, r3
 800291c:	d001      	beq.n	8002922 <decodeBeacon+0x32>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
 800291e:	2300      	movs	r3, #0
 8002920:	e071      	b.n	8002a06 <decodeBeacon+0x116>
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fe feda 	bl	80016dc <os_rlsbf4>
 8002928:	4603      	mov	r3, r0
 800292a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800292e:	603b      	str	r3, [r7, #0]
    if( bcnnetid != LMIC.netid )
 8002930:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <decodeBeacon+0x120>)
 8002932:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d002      	beq.n	8002942 <decodeBeacon+0x52>
        return -1;  // not the beacon we're looking for
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
 8002940:	e061      	b.n	8002a06 <decodeBeacon+0x116>

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
 8002942:	4b33      	ldr	r3, [pc, #204]	; (8002a10 <decodeBeacon+0x120>)
 8002944:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002948:	f023 0303 	bic.w	r3, r3, #3
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <decodeBeacon+0x120>)
 8002950:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
 8002954:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <decodeBeacon+0x120>)
 8002956:	f993 200d 	ldrsb.w	r2, [r3, #13]
 800295a:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <decodeBeacon+0x120>)
 800295c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    LMIC.bcninfo.rssi   = LMIC.rssi;
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <decodeBeacon+0x120>)
 8002962:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8002966:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <decodeBeacon+0x120>)
 8002968:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 800296c:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <decodeBeacon+0x120>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 8002974:	3b0c      	subs	r3, #12
 8002976:	4a26      	ldr	r2, [pc, #152]	; (8002a10 <decodeBeacon+0x120>)
 8002978:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3303      	adds	r3, #3
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe feab 	bl	80016dc <os_rlsbf4>
 8002986:	4602      	mov	r2, r0
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <decodeBeacon+0x120>)
 800298a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    LMIC.bcninfo.flags |= BCN_PARTIAL;
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <decodeBeacon+0x120>)
 8002990:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <decodeBeacon+0x120>)
 800299c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	330f      	adds	r3, #15
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe fe84 	bl	80016b2 <os_rlsbf2>
 80029aa:	4603      	mov	r3, r0
 80029ac:	461c      	mov	r4, r3
 80029ae:	210f      	movs	r1, #15
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7fe ff2e 	bl	8001812 <os_crc16>
 80029b6:	4603      	mov	r3, r0
 80029b8:	429c      	cmp	r4, r3
 80029ba:	d001      	beq.n	80029c0 <decodeBeacon+0xd0>
        return 1;
 80029bc:	2301      	movs	r3, #1
 80029be:	e022      	b.n	8002a06 <decodeBeacon+0x116>
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3308      	adds	r3, #8
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe fe89 	bl	80016dc <os_rlsbf4>
 80029ca:	4603      	mov	r3, r0
 80029cc:	121b      	asrs	r3, r3, #8
 80029ce:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <decodeBeacon+0x120>)
 80029d0:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	330b      	adds	r3, #11
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe fe7f 	bl	80016dc <os_rlsbf4>
 80029de:	4603      	mov	r3, r0
 80029e0:	121b      	asrs	r3, r3, #8
 80029e2:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <decodeBeacon+0x120>)
 80029e4:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7a1a      	ldrb	r2, [r3, #8]
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <decodeBeacon+0x120>)
 80029ee:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
    LMIC.bcninfo.flags |= BCN_FULL;
 80029f2:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <decodeBeacon+0x120>)
 80029f4:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <decodeBeacon+0x120>)
 8002a00:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
    return 2;
 8002a04:	2302      	movs	r3, #2
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd90      	pop	{r4, r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000280 	.word	0x20000280
 8002a14:	200003c8 	.word	0x200003c8

08002a18 <decodeFrame>:


static bit_t decodeFrame (void) {
 8002a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a1a:	b09d      	sub	sp, #116	; 0x74
 8002a1c:	af02      	add	r7, sp, #8
    xref2u1_t d = LMIC.frame;
 8002a1e:	4b97      	ldr	r3, [pc, #604]	; (8002c7c <decodeFrame+0x264>)
 8002a20:	653b      	str	r3, [r7, #80]	; 0x50
    u1_t hdr    = d[0];
 8002a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    u1_t ftype  = hdr & HDR_FTYPE;
 8002a2a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002a2e:	f023 031f 	bic.w	r3, r3, #31
 8002a32:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    int  dlen   = LMIC.dataLen;
 8002a36:	4b92      	ldr	r3, [pc, #584]	; (8002c80 <decodeFrame+0x268>)
 8002a38:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8002a3c:	64bb      	str	r3, [r7, #72]	; 0x48
    if( dlen < OFF_DAT_OPTS+4 ||
 8002a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a40:	2b0b      	cmp	r3, #11
 8002a42:	dd0d      	ble.n	8002a60 <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8002a44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002a48:	f003 0303 	and.w	r3, r3, #3
    if( dlen < OFF_DAT_OPTS+4 ||
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d107      	bne.n	8002a60 <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8002a50:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002a54:	2b60      	cmp	r3, #96	; 0x60
 8002a56:	d012      	beq.n	8002a7e <decodeFrame+0x66>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
 8002a58:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002a5c:	2ba0      	cmp	r3, #160	; 0xa0
 8002a5e:	d00e      	beq.n	8002a7e <decodeFrame+0x66>
        // Basic sanity checks failed
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
 8002a60:	bf00      	nop
 8002a62:	e006      	b.n	8002a72 <decodeFrame+0x5a>
    if( addr != LMIC.devaddr ) {
        EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
 8002a64:	bf00      	nop
 8002a66:	e004      	b.n	8002a72 <decodeFrame+0x5a>
    }
    if( poff > pend ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
 8002a68:	bf00      	nop
 8002a6a:	e002      	b.n	8002a72 <decodeFrame+0x5a>
        EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
                           e_.eui1   = MAIN::CDEV->getEui(),
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
 8002a6c:	bf00      	nop
 8002a6e:	e000      	b.n	8002a72 <decodeFrame+0x5a>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 8002a70:	bf00      	nop
        LMIC.dataLen = 0;
 8002a72:	4b83      	ldr	r3, [pc, #524]	; (8002c80 <decodeFrame+0x268>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
        return 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e331      	b.n	80030e2 <decodeFrame+0x6ca>
    int  fct   = d[OFF_DAT_FCT];
 8002a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a80:	3305      	adds	r3, #5
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	647b      	str	r3, [r7, #68]	; 0x44
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
 8002a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a88:	3301      	adds	r3, #1
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe fe26 	bl	80016dc <os_rlsbf4>
 8002a90:	6438      	str	r0, [r7, #64]	; 0x40
    u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 8002a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a94:	3306      	adds	r3, #6
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fe0b 	bl	80016b2 <os_rlsbf2>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    int  olen  = fct & FCT_OPTLEN;
 8002aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	63bb      	str	r3, [r7, #56]	; 0x38
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 8002aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aaa:	115b      	asrs	r3, r3, #5
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
    int  poff  = OFF_DAT_OPTS+olen;
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab4:	3308      	adds	r3, #8
 8002ab6:	667b      	str	r3, [r7, #100]	; 0x64
    int  pend  = dlen-4;  // MIC
 8002ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aba:	3b04      	subs	r3, #4
 8002abc:	633b      	str	r3, [r7, #48]	; 0x30
    if( addr != LMIC.devaddr ) {
 8002abe:	4b70      	ldr	r3, [pc, #448]	; (8002c80 <decodeFrame+0x268>)
 8002ac0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002ac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d1cc      	bne.n	8002a64 <decodeFrame+0x4c>
    if( poff > pend ) {
 8002aca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	dcca      	bgt.n	8002a68 <decodeFrame+0x50>
    int port = -1;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	663b      	str	r3, [r7, #96]	; 0x60
    int replayConf = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	65fb      	str	r3, [r7, #92]	; 0x5c
    if( pend > poff )
 8002adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	dd07      	ble.n	8002af4 <decodeFrame+0xdc>
        port = d[poff++];
 8002ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	667a      	str	r2, [r7, #100]	; 0x64
 8002aea:	461a      	mov	r2, r3
 8002aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aee:	4413      	add	r3, r2
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	663b      	str	r3, [r7, #96]	; 0x60
    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);
 8002af4:	4b62      	ldr	r3, [pc, #392]	; (8002c80 <decodeFrame+0x268>)
 8002af6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002afa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002afc:	b291      	uxth	r1, r2
 8002afe:	4a60      	ldr	r2, [pc, #384]	; (8002c80 <decodeFrame+0x268>)
 8002b00:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8002b04:	b292      	uxth	r2, r2
 8002b06:	1a8a      	subs	r2, r1, r2
 8002b08:	b292      	uxth	r2, r2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
 8002b0e:	4b5c      	ldr	r3, [pc, #368]	; (8002c80 <decodeFrame+0x268>)
 8002b10:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b20:	4858      	ldr	r0, [pc, #352]	; (8002c84 <decodeFrame+0x26c>)
 8002b22:	f7fe fee9 	bl	80018f8 <aes_verifyMic>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d09f      	beq.n	8002a6c <decodeFrame+0x54>
    if( seqno < LMIC.seqnoDn ) {
 8002b2c:	4b54      	ldr	r3, [pc, #336]	; (8002c80 <decodeFrame+0x268>)
 8002b2e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002b32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d21a      	bcs.n	8002b6e <decodeFrame+0x156>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
 8002b38:	4b51      	ldr	r3, [pc, #324]	; (8002c80 <decodeFrame+0x268>)
 8002b3a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002b3e:	461a      	mov	r2, r3
 8002b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b42:	429a      	cmp	r2, r3
 8002b44:	db94      	blt.n	8002a70 <decodeFrame+0x58>
        }
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
 8002b46:	4b4e      	ldr	r3, [pc, #312]	; (8002c80 <decodeFrame+0x268>)
 8002b48:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d185      	bne.n	8002a60 <decodeFrame+0x48>
 8002b54:	4b4a      	ldr	r3, [pc, #296]	; (8002c80 <decodeFrame+0x268>)
 8002b56:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d080      	beq.n	8002a60 <decodeFrame+0x48>
 8002b5e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002b62:	2ba0      	cmp	r3, #160	; 0xa0
 8002b64:	f47f af7c 	bne.w	8002a60 <decodeFrame+0x48>
                                e_.info2  = seqno));
            goto norx;
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b6c:	e00e      	b.n	8002b8c <decodeFrame+0x174>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
 8002b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b70:	3301      	adds	r3, #1
 8002b72:	4a43      	ldr	r2, [pc, #268]	; (8002c80 <decodeFrame+0x268>)
 8002b74:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 8002b78:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002b7c:	2ba0      	cmp	r3, #160	; 0xa0
 8002b7e:	d101      	bne.n	8002b84 <decodeFrame+0x16c>
 8002b80:	2220      	movs	r2, #32
 8002b82:	e000      	b.n	8002b86 <decodeFrame+0x16e>
 8002b84:	2200      	movs	r2, #0
 8002b86:	4b3e      	ldr	r3, [pc, #248]	; (8002c80 <decodeFrame+0x268>)
 8002b88:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
 8002b8c:	4b3c      	ldr	r3, [pc, #240]	; (8002c80 <decodeFrame+0x268>)
 8002b8e:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <decodeFrame+0x188>
 8002b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <decodeFrame+0x19a>
        LMIC.opmode |= OP_POLL;
 8002ba0:	4b37      	ldr	r3, [pc, #220]	; (8002c80 <decodeFrame+0x268>)
 8002ba2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002ba6:	f043 0310 	orr.w	r3, r3, #16
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <decodeFrame+0x268>)
 8002bae:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
 8002bb2:	4b33      	ldr	r3, [pc, #204]	; (8002c80 <decodeFrame+0x268>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8002bba:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <decodeFrame+0x268>)
 8002bbc:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
 8002bc0:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <decodeFrame+0x268>)
 8002bc2:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8002bc6:	4b2e      	ldr	r3, [pc, #184]	; (8002c80 <decodeFrame+0x268>)
 8002bc8:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 8002bcc:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8002bd0:	d003      	beq.n	8002bda <decodeFrame+0x1c2>
        LMIC.adrAckReq = LINK_CHECK_INIT;
 8002bd2:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <decodeFrame+0x268>)
 8002bd4:	22f4      	movs	r2, #244	; 0xf4
 8002bd6:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 8002bda:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <decodeFrame+0x268>)
 8002bdc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002be0:	f1a3 0440 	sub.w	r4, r3, #64	; 0x40
 8002be4:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <decodeFrame+0x268>)
 8002be6:	89db      	ldrh	r3, [r3, #14]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe ffaf 	bl	8001b4c <getSensitivity>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	1ae3      	subs	r3, r4, r3
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 8002bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	db05      	blt.n	8002c06 <decodeFrame+0x1ee>
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	2bfe      	cmp	r3, #254	; 0xfe
 8002bfe:	bfa8      	it	ge
 8002c00:	23fe      	movge	r3, #254	; 0xfe
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	e000      	b.n	8002c08 <decodeFrame+0x1f0>
 8002c06:	2300      	movs	r3, #0
 8002c08:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <decodeFrame+0x268>)
 8002c0a:	f882 3124 	strb.w	r3, [r2, #292]	; 0x124

    xref2u1_t opts = &d[OFF_DAT_OPTS];
 8002c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c10:	3308      	adds	r3, #8
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
    int oidx = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	65bb      	str	r3, [r7, #88]	; 0x58
    while( oidx < olen ) {
 8002c18:	e1f5      	b.n	8003006 <decodeFrame+0x5ee>
        switch( opts[oidx] ) {
 8002c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c1e:	4413      	add	r3, r2
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	3b02      	subs	r3, #2
 8002c24:	2b10      	cmp	r3, #16
 8002c26:	f200 81f4 	bhi.w	8003012 <decodeFrame+0x5fa>
 8002c2a:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <decodeFrame+0x218>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002c75 	.word	0x08002c75
 8002c34:	08002c89 	.word	0x08002c89
 8002c38:	08002de7 	.word	0x08002de7
 8002c3c:	08002d63 	.word	0x08002d63
 8002c40:	08002d53 	.word	0x08002d53
 8002c44:	08002e35 	.word	0x08002e35
 8002c48:	08003013 	.word	0x08003013
 8002c4c:	08003013 	.word	0x08003013
 8002c50:	08003013 	.word	0x08003013
 8002c54:	08003013 	.word	0x08003013
 8002c58:	08003013 	.word	0x08003013
 8002c5c:	08003013 	.word	0x08003013
 8002c60:	08003013 	.word	0x08003013
 8002c64:	08003013 	.word	0x08003013
 8002c68:	08003013 	.word	0x08003013
 8002c6c:	08002ec5 	.word	0x08002ec5
 8002c70:	08002f11 	.word	0x08002f11
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
 8002c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c76:	3303      	adds	r3, #3
 8002c78:	65bb      	str	r3, [r7, #88]	; 0x58
            continue;
 8002c7a:	e1c4      	b.n	8003006 <decodeFrame+0x5ee>
 8002c7c:	200003c8 	.word	0x200003c8
 8002c80:	20000280 	.word	0x20000280
 8002c84:	20000374 	.word	0x20000374
        }
        case MCMD_LADR_REQ: {
            u1_t p1     = opts[oidx+1];            // txpow + DR
 8002c88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c8e:	4413      	add	r3, r2
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	74bb      	strb	r3, [r7, #18]
            u2_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
 8002c94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c96:	3302      	adds	r3, #2
 8002c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe fd08 	bl	80016b2 <os_rlsbf2>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	823b      	strh	r3, [r7, #16]
            u1_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
 8002ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca8:	3304      	adds	r3, #4
 8002caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cac:	4413      	add	r3, r2
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	f023 030f 	bic.w	r3, r3, #15
 8002cb4:	73fb      	strb	r3, [r7, #15]
            u1_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
 8002cb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb8:	3304      	adds	r3, #4
 8002cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cbc:	4413      	add	r3, r2
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	73bb      	strb	r3, [r7, #14]
            oidx += 5;
 8002cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc8:	3305      	adds	r3, #5
 8002cca:	65bb      	str	r3, [r7, #88]	; 0x58

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
 8002ccc:	4b8e      	ldr	r3, [pc, #568]	; (8002f08 <decodeFrame+0x4f0>)
 8002cce:	2287      	movs	r2, #135	; 0x87
 8002cd0:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
 8002cd4:	8a3a      	ldrh	r2, [r7, #16]
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fb86 	bl	80023ec <mapChannels>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d108      	bne.n	8002cf8 <decodeFrame+0x2e0>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 8002ce6:	4b88      	ldr	r3, [pc, #544]	; (8002f08 <decodeFrame+0x4f0>)
 8002ce8:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4b85      	ldr	r3, [pc, #532]	; (8002f08 <decodeFrame+0x4f0>)
 8002cf4:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
 8002cf8:	7cbb      	ldrb	r3, [r7, #18]
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	737b      	strb	r3, [r7, #13]
            if( !validDR(dr) ) {
 8002cfe:	7b7b      	ldrb	r3, [r7, #13]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe fca7 	bl	8001654 <validDR>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d108      	bne.n	8002d1e <decodeFrame+0x306>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 8002d0c:	4b7e      	ldr	r3, [pc, #504]	; (8002f08 <decodeFrame+0x4f0>)
 8002d0e:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8002d12:	f023 0302 	bic.w	r3, r3, #2
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	4b7b      	ldr	r3, [pc, #492]	; (8002f08 <decodeFrame+0x4f0>)
 8002d1a:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
 8002d1e:	4b7a      	ldr	r3, [pc, #488]	; (8002f08 <decodeFrame+0x4f0>)
 8002d20:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8002d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d28:	2b07      	cmp	r3, #7
 8002d2a:	d10d      	bne.n	8002d48 <decodeFrame+0x330>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
 8002d2c:	4a76      	ldr	r2, [pc, #472]	; (8002f08 <decodeFrame+0x4f0>)
 8002d2e:	7bbb      	ldrb	r3, [r7, #14]
 8002d30:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 8002d34:	7cbb      	ldrb	r3, [r7, #18]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	4a74      	ldr	r2, [pc, #464]	; (8002f0c <decodeFrame+0x4f4>)
 8002d3c:	56d2      	ldrsb	r2, [r2, r3]
 8002d3e:	7b7b      	ldrb	r3, [r7, #13]
 8002d40:	4619      	mov	r1, r3
 8002d42:	2004      	movs	r0, #4
 8002d44:	f7ff fa02 	bl	800214c <setDrTxpow>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 8002d48:	4b6f      	ldr	r3, [pc, #444]	; (8002f08 <decodeFrame+0x4f0>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
            continue;
 8002d50:	e159      	b.n	8003006 <decodeFrame+0x5ee>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
 8002d52:	4b6d      	ldr	r3, [pc, #436]	; (8002f08 <decodeFrame+0x4f0>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
            oidx += 1;
 8002d5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	65bb      	str	r3, [r7, #88]	; 0x58
            continue;
 8002d60:	e151      	b.n	8003006 <decodeFrame+0x5ee>
        }
        case MCMD_DN2P_SET: {
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
 8002d62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d64:	3301      	adds	r3, #1
 8002d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d68:	4413      	add	r3, r2
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	76bb      	strb	r3, [r7, #26]
            u4_t freq = convFreq(&opts[oidx+2]);
 8002d72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d74:	3302      	adds	r3, #2
 8002d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d78:	4413      	add	r3, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fb14 	bl	80023a8 <convFreq>
 8002d80:	6178      	str	r0, [r7, #20]
            oidx += 5;
 8002d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d84:	3305      	adds	r3, #5
 8002d86:	65bb      	str	r3, [r7, #88]	; 0x58
            LMIC.dn2Ans = 0x80;   // answer pending
 8002d88:	4b5f      	ldr	r3, [pc, #380]	; (8002f08 <decodeFrame+0x4f0>)
 8002d8a:	2280      	movs	r2, #128	; 0x80
 8002d8c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            if( validDR(dr) )
 8002d90:	7ebb      	ldrb	r3, [r7, #26]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe fc5e 	bl	8001654 <validDR>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <decodeFrame+0x398>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 8002d9e:	4b5a      	ldr	r3, [pc, #360]	; (8002f08 <decodeFrame+0x4f0>)
 8002da0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4b57      	ldr	r3, [pc, #348]	; (8002f08 <decodeFrame+0x4f0>)
 8002dac:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            if( freq != 0 )
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d008      	beq.n	8002dc8 <decodeFrame+0x3b0>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 8002db6:	4b54      	ldr	r3, [pc, #336]	; (8002f08 <decodeFrame+0x4f0>)
 8002db8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	4b51      	ldr	r3, [pc, #324]	; (8002f08 <decodeFrame+0x4f0>)
 8002dc4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
 8002dc8:	4b4f      	ldr	r3, [pc, #316]	; (8002f08 <decodeFrame+0x4f0>)
 8002dca:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002dce:	2b83      	cmp	r3, #131	; 0x83
 8002dd0:	f040 8119 	bne.w	8003006 <decodeFrame+0x5ee>
                LMIC.dn2Dr = dr;
 8002dd4:	4a4c      	ldr	r2, [pc, #304]	; (8002f08 <decodeFrame+0x4f0>)
 8002dd6:	7ebb      	ldrb	r3, [r7, #26]
 8002dd8:	f882 312b 	strb.w	r3, [r2, #299]	; 0x12b
                LMIC.dn2Freq = freq;
 8002ddc:	4a4a      	ldr	r2, [pc, #296]	; (8002f08 <decodeFrame+0x4f0>)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
                DO_DEVDB(LMIC.dn2Dr,dn2Dr);
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
            continue;
 8002de4:	e10f      	b.n	8003006 <decodeFrame+0x5ee>
        }
        case MCMD_DCAP_REQ: {
            u1_t cap = opts[oidx+1];
 8002de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de8:	3301      	adds	r3, #1
 8002dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dec:	4413      	add	r3, r2
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	74fb      	strb	r3, [r7, #19]
            oidx += 2;
 8002df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002df4:	3302      	adds	r3, #2
 8002df6:	65bb      	str	r3, [r7, #88]	; 0x58
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
 8002df8:	7cfb      	ldrb	r3, [r7, #19]
 8002dfa:	2bff      	cmp	r3, #255	; 0xff
 8002dfc:	d108      	bne.n	8002e10 <decodeFrame+0x3f8>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 8002dfe:	4b42      	ldr	r3, [pc, #264]	; (8002f08 <decodeFrame+0x4f0>)
 8002e00:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <decodeFrame+0x4f0>)
 8002e0c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            LMIC.globalDutyRate  = cap & 0xF;
 8002e10:	7cfb      	ldrb	r3, [r7, #19]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <decodeFrame+0x4f0>)
 8002e1a:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
            LMIC.globalDutyAvail = os_getTime();
 8002e1e:	f001 ffad 	bl	8004d7c <os_getTime>
 8002e22:	4602      	mov	r2, r0
 8002e24:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <decodeFrame+0x4f0>)
 8002e26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
 8002e2a:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <decodeFrame+0x4f0>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            continue;
 8002e32:	e0e8      	b.n	8003006 <decodeFrame+0x5ee>
        }
        case MCMD_SNCH_REQ: {
            u1_t chidx = opts[oidx+1];  // channel
 8002e34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e36:	3301      	adds	r3, #1
 8002e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e3a:	4413      	add	r3, r2
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            u4_t freq  = convFreq(&opts[oidx+2]); // freq
 8002e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e44:	3302      	adds	r3, #2
 8002e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e48:	4413      	add	r3, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff faac 	bl	80023a8 <convFreq>
 8002e50:	61f8      	str	r0, [r7, #28]
            u1_t drs   = opts[oidx+5];  // datarate span
 8002e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e54:	3305      	adds	r3, #5
 8002e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e58:	4413      	add	r3, r2
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	76fb      	strb	r3, [r7, #27]
            LMIC.snchAns = 0x80;
 8002e5e:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <decodeFrame+0x4f0>)
 8002e60:	2280      	movs	r2, #128	; 0x80
 8002e62:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d027      	beq.n	8002ebc <decodeFrame+0x4a4>
 8002e6c:	7efb      	ldrb	r3, [r7, #27]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	b21a      	sxth	r2, r3
 8002e7c:	7efb      	ldrb	r3, [r7, #27]
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f1c3 030f 	rsb	r3, r3, #15
 8002e86:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e8a:	fa41 f303 	asr.w	r3, r1, r3
 8002e8e:	b21b      	sxth	r3, r3
 8002e90:	4013      	ands	r3, r2
 8002e92:	b21b      	sxth	r3, r3
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 8002e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9e:	69f9      	ldr	r1, [r7, #28]
 8002ea0:	f7ff fa08 	bl	80022b4 <LMIC_setupChannel>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <decodeFrame+0x4a4>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
 8002eaa:	4b17      	ldr	r3, [pc, #92]	; (8002f08 <decodeFrame+0x4f0>)
 8002eac:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8002eb0:	f043 0303 	orr.w	r3, r3, #3
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <decodeFrame+0x4f0>)
 8002eb8:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
            oidx += 6;
 8002ebc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ebe:	3306      	adds	r3, #6
 8002ec0:	65bb      	str	r3, [r7, #88]	; 0x58
            continue;
 8002ec2:	e0a0      	b.n	8003006 <decodeFrame+0x5ee>
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
 8002ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eca:	4413      	add	r3, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fa6b 	bl	80023a8 <convFreq>
 8002ed2:	6278      	str	r0, [r7, #36]	; 0x24
            oidx += 4;
 8002ed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	65bb      	str	r3, [r7, #88]	; 0x58
            u1_t flags = 0x80;
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            if( freq != 0 ) {
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <decodeFrame+0x4e2>
                flags |= MCMD_PING_ANS_FQACK;
 8002ee6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                LMIC.ping.freq = freq;
 8002ef2:	4a05      	ldr	r2, [pc, #20]	; (8002f08 <decodeFrame+0x4f0>)
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
 8002efa:	4a03      	ldr	r2, [pc, #12]	; (8002f08 <decodeFrame+0x4f0>)
 8002efc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f00:	f882 3133 	strb.w	r3, [r2, #307]	; 0x133
            continue;
 8002f04:	e07f      	b.n	8003006 <decodeFrame+0x5ee>
 8002f06:	bf00      	nop
 8002f08:	20000280 	.word	0x20000280
 8002f0c:	0800c6b0 	.word	0x0800c6b0
        }
        case MCMD_BCNI_ANS: {
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
 8002f10:	4b76      	ldr	r3, [pc, #472]	; (80030ec <decodeFrame+0x6d4>)
 8002f12:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d16f      	bne.n	8002ffe <decodeFrame+0x5e6>
                LMIC.bcnChnl = opts[oidx+3];
 8002f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f20:	3303      	adds	r3, #3
 8002f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f24:	4413      	add	r3, r2
 8002f26:	781a      	ldrb	r2, [r3, #0]
 8002f28:	4b70      	ldr	r3, [pc, #448]	; (80030ec <decodeFrame+0x6d4>)
 8002f2a:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
 8002f2e:	4b6f      	ldr	r3, [pc, #444]	; (80030ec <decodeFrame+0x6d4>)
 8002f30:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	4b6c      	ldr	r3, [pc, #432]	; (80030ec <decodeFrame+0x6d4>)
 8002f3c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
 8002f40:	4b6a      	ldr	r3, [pc, #424]	; (80030ec <decodeFrame+0x6d4>)
 8002f42:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <decodeFrame+0x536>
 8002f4a:	f7fe faa5 	bl	8001498 <hal_failed>
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8002f4e:	4b67      	ldr	r3, [pc, #412]	; (80030ec <decodeFrame+0x6d4>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	607b      	str	r3, [r7, #4]
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
 8002f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f56:	3301      	adds	r3, #1
 8002f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5a:	4413      	add	r3, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe fba8 	bl	80016b2 <os_rlsbf2>
 8002f62:	4603      	mov	r3, r0
 8002f64:	b29d      	uxth	r5, r3
 8002f66:	f04f 0600 	mov.w	r6, #0
 8002f6a:	462b      	mov	r3, r5
 8002f6c:	4634      	mov	r4, r6
 8002f6e:	f04f 0100 	mov.w	r1, #0
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	0162      	lsls	r2, r4, #5
 8002f78:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002f7c:	0159      	lsls	r1, r3, #5
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4614      	mov	r4, r2
 8002f82:	1b5b      	subs	r3, r3, r5
 8002f84:	eb64 0406 	sbc.w	r4, r4, r6
 8002f88:	f04f 0100 	mov.w	r1, #0
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	00a2      	lsls	r2, r4, #2
 8002f92:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002f96:	0099      	lsls	r1, r3, #2
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4614      	mov	r4, r2
 8002f9c:	195b      	adds	r3, r3, r5
 8002f9e:	eb44 0406 	adc.w	r4, r4, r6
 8002fa2:	f04f 0100 	mov.w	r1, #0
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	0122      	lsls	r2, r4, #4
 8002fac:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8002fb0:	0119      	lsls	r1, r3, #4
 8002fb2:	1ac9      	subs	r1, r1, r3
 8002fb4:	eb62 0204 	sbc.w	r2, r2, r4
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	f04f 0400 	mov.w	r4, #0
 8002fc0:	0254      	lsls	r4, r2, #9
 8002fc2:	ea44 54d1 	orr.w	r4, r4, r1, lsr #23
 8002fc6:	024b      	lsls	r3, r1, #9
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4622      	mov	r2, r4
 8002fcc:	4608      	mov	r0, r1
 8002fce:	4611      	mov	r1, r2
 8002fd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	f7fd f8f6 	bl	80001c8 <__aeabi_ldivmod>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	460c      	mov	r4, r1
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	441a      	add	r2, r3
                                       + ms2osticksCeil(MCMD_BCNI_TUNIT/2)
                                       - BCN_INTV_osticks);
 8002fe4:	4b42      	ldr	r3, [pc, #264]	; (80030f0 <decodeFrame+0x6d8>)
 8002fe6:	4413      	add	r3, r2
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8002fe8:	4a40      	ldr	r2, [pc, #256]	; (80030ec <decodeFrame+0x6d4>)
 8002fea:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
                LMIC.bcninfo.flags = 0;  // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 8002fee:	4b3f      	ldr	r3, [pc, #252]	; (80030ec <decodeFrame+0x6d4>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
                calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT,1);  // error of +/-N ms 
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	201e      	movs	r0, #30
 8002ffa:	f7fe feb3 	bl	8001d64 <calcBcnRxWindowFromMillis>
                                     e_.info    = (LMIC.missedBcns |
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
            oidx += 4;
 8002ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003000:	3304      	adds	r3, #4
 8003002:	65bb      	str	r3, [r7, #88]	; 0x58
            continue;
 8003004:	bf00      	nop
    while( oidx < olen ) {
 8003006:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300a:	429a      	cmp	r2, r3
 800300c:	f6ff ae05 	blt.w	8002c1a <decodeFrame+0x202>
 8003010:	e000      	b.n	8003014 <decodeFrame+0x5fc>
        }
        EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = Base::lsbf4(&d[pend]),
                           e_.info2  = Base::msbf4(&opts[oidx])));
        break;
 8003012:	bf00      	nop
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
 8003014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d11d      	bne.n	8003056 <decodeFrame+0x63e>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
 800301a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800301c:	2b00      	cmp	r3, #0
 800301e:	db1a      	blt.n	8003056 <decodeFrame+0x63e>
 8003020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003022:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	dd15      	ble.n	8003056 <decodeFrame+0x63e>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
 800302a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800302c:	2b00      	cmp	r3, #0
 800302e:	dc01      	bgt.n	8003034 <decodeFrame+0x61c>
 8003030:	4830      	ldr	r0, [pc, #192]	; (80030f4 <decodeFrame+0x6dc>)
 8003032:	e000      	b.n	8003036 <decodeFrame+0x61e>
 8003034:	4830      	ldr	r0, [pc, #192]	; (80030f8 <decodeFrame+0x6e0>)
 8003036:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <decodeFrame+0x6d4>)
 8003038:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
 800303c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800303e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003040:	4413      	add	r3, r2
 8003042:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003044:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003046:	1a8a      	subs	r2, r1, r2
 8003048:	9201      	str	r2, [sp, #4]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2301      	movs	r3, #1
 800304e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003050:	4621      	mov	r1, r4
 8003052:	f7fe fcfb 	bl	8001a4c <aes_cipher>
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = Base::lsbf4(&d[pend]),
                            e_.info2  = seqno));
    }

    if( // NWK acks but we don't have a frame pending
 8003056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003058:	2b00      	cmp	r3, #0
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
 800305a:	4b24      	ldr	r3, [pc, #144]	; (80030ec <decodeFrame+0x6d4>)
 800305c:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003060:	2b00      	cmp	r3, #0
 8003062:	d010      	beq.n	8003086 <decodeFrame+0x66e>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 8003064:	4b21      	ldr	r3, [pc, #132]	; (80030ec <decodeFrame+0x6d4>)
 8003066:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 800306a:	b25b      	sxtb	r3, r3
 800306c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800306e:	2a00      	cmp	r2, #0
 8003070:	d002      	beq.n	8003078 <decodeFrame+0x660>
 8003072:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003076:	e000      	b.n	800307a <decodeFrame+0x662>
 8003078:	2240      	movs	r2, #64	; 0x40
 800307a:	4313      	orrs	r3, r2
 800307c:	b25b      	sxtb	r3, r3
 800307e:	b2da      	uxtb	r2, r3
 8003080:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <decodeFrame+0x6d4>)
 8003082:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145

    if( port < 0 ) {
 8003086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003088:	2b00      	cmp	r3, #0
 800308a:	da12      	bge.n	80030b2 <decodeFrame+0x69a>
        LMIC.txrxFlags |= TXRX_NOPORT;
 800308c:	4b17      	ldr	r3, [pc, #92]	; (80030ec <decodeFrame+0x6d4>)
 800308e:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8003092:	f043 0320 	orr.w	r3, r3, #32
 8003096:	b2da      	uxtb	r2, r3
 8003098:	4b14      	ldr	r3, [pc, #80]	; (80030ec <decodeFrame+0x6d4>)
 800309a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        LMIC.dataBeg = poff;
 800309e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <decodeFrame+0x6d4>)
 80030a4:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
        LMIC.dataLen = 0;
 80030a8:	4b10      	ldr	r3, [pc, #64]	; (80030ec <decodeFrame+0x6d4>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 80030b0:	e016      	b.n	80030e0 <decodeFrame+0x6c8>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
 80030b2:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <decodeFrame+0x6d4>)
 80030b4:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 80030b8:	f043 0310 	orr.w	r3, r3, #16
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <decodeFrame+0x6d4>)
 80030c0:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        LMIC.dataBeg = poff;
 80030c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <decodeFrame+0x6d4>)
 80030ca:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
        LMIC.dataLen = pend-poff;
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4b04      	ldr	r3, [pc, #16]	; (80030ec <decodeFrame+0x6d4>)
 80030dc:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    }
    return 1;
 80030e0:	2301      	movs	r3, #1
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	376c      	adds	r7, #108	; 0x6c
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000280 	.word	0x20000280
 80030f0:	ffc181e0 	.word	0xffc181e0
 80030f4:	20000374 	.word	0x20000374
 80030f8:	20000384 	.word	0x20000384

080030fc <setupRx2>:

// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
    LMIC.txrxFlags = TXRX_DNW2;
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <setupRx2+0x3c>)
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <setupRx2+0x3c>)
 800310a:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fa74 	bl	80015fc <dndr2rps>
 8003114:	4603      	mov	r3, r0
 8003116:	461a      	mov	r2, r3
 8003118:	4b07      	ldr	r3, [pc, #28]	; (8003138 <setupRx2+0x3c>)
 800311a:	81da      	strh	r2, [r3, #14]
    LMIC.freq = LMIC.dn2Freq;
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <setupRx2+0x3c>)
 800311e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8003122:	4a05      	ldr	r2, [pc, #20]	; (8003138 <setupRx2+0x3c>)
 8003124:	6093      	str	r3, [r2, #8]
    LMIC.dataLen = 0;
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <setupRx2+0x3c>)
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    os_radio(RADIO_RX);
 800312e:	2002      	movs	r0, #2
 8003130:	f002 fc46 	bl	80059c0 <os_radio>
}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000280 	.word	0x20000280

0800313c <schedRx2>:


static void schedRx2 (ostime_t delay, osjobcb_t func) {
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
 8003146:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <schedRx2+0x44>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	18d1      	adds	r1, r2, r3
 800314e:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <schedRx2+0x44>)
 8003150:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8003154:	461a      	mov	r2, r3
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <schedRx2+0x48>)
 8003158:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800315c:	4613      	mov	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4413      	add	r3, r2
 8003162:	440b      	add	r3, r1
 8003164:	4a06      	ldr	r2, [pc, #24]	; (8003180 <schedRx2+0x44>)
 8003166:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8003168:	4b05      	ldr	r3, [pc, #20]	; (8003180 <schedRx2+0x44>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	3b40      	subs	r3, #64	; 0x40
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	4619      	mov	r1, r3
 8003172:	4805      	ldr	r0, [pc, #20]	; (8003188 <schedRx2+0x4c>)
 8003174:	f001 fe6c 	bl	8004e50 <os_setTimedCallback>
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000280 	.word	0x20000280
 8003184:	0800c6e4 	.word	0x0800c6e4
 8003188:	20000294 	.word	0x20000294

0800318c <setupRx1>:

static void setupRx1 (osjobcb_t func) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
    LMIC.txrxFlags = TXRX_DNW1;
 8003194:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <setupRx1+0x40>)
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <setupRx1+0x40>)
 800319e:	89db      	ldrh	r3, [r3, #14]
 80031a0:	2101      	movs	r1, #1
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe f9dc 	bl	8001560 <setNocrc>
 80031a8:	4603      	mov	r3, r0
 80031aa:	461a      	mov	r2, r3
 80031ac:	4b07      	ldr	r3, [pc, #28]	; (80031cc <setupRx1+0x40>)
 80031ae:	81da      	strh	r2, [r3, #14]
    LMIC.dataLen = 0;
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <setupRx1+0x40>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    LMIC.osjob.func = func;
 80031b8:	4a04      	ldr	r2, [pc, #16]	; (80031cc <setupRx1+0x40>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	61d3      	str	r3, [r2, #28]
    os_radio(RADIO_RX);
 80031be:	2002      	movs	r0, #2
 80031c0:	f002 fbfe 	bl	80059c0 <os_radio>
}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000280 	.word	0x20000280

080031d0 <txDone>:


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
 80031da:	4b22      	ldr	r3, [pc, #136]	; (8003264 <txDone+0x94>)
 80031dc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80031e0:	461a      	mov	r2, r3
 80031e2:	f240 6302 	movw	r3, #1538	; 0x602
 80031e6:	4013      	ands	r3, r2
 80031e8:	f240 4202 	movw	r2, #1026	; 0x402
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d10b      	bne.n	8003208 <txDone+0x38>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 80031f0:	481d      	ldr	r0, [pc, #116]	; (8003268 <txDone+0x98>)
 80031f2:	f7fe fe35 	bl	8001e60 <rxschedInit>
        LMIC.opmode |= OP_PINGINI;
 80031f6:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <txDone+0x94>)
 80031f8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80031fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003200:	b29a      	uxth	r2, r3
 8003202:	4b18      	ldr	r3, [pc, #96]	; (8003264 <txDone+0x94>)
 8003204:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    setRx1Params();
    // LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
    // Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
    // into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
    if( /* TX datarate */LMIC.rxsyms == DR_FSK ) {
 8003208:	4b16      	ldr	r3, [pc, #88]	; (8003264 <txDone+0x94>)
 800320a:	7c1b      	ldrb	r3, [r3, #16]
 800320c:	2b07      	cmp	r3, #7
 800320e:	d10a      	bne.n	8003226 <txDone+0x56>
        LMIC.rxtime = LMIC.txend + delay - PRERX_FSK*us2osticksRound(160);
 8003210:	4b14      	ldr	r3, [pc, #80]	; (8003264 <txDone+0x94>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	3b05      	subs	r3, #5
 800321a:	4a12      	ldr	r2, [pc, #72]	; (8003264 <txDone+0x94>)
 800321c:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = RXLEN_FSK;
 800321e:	4b11      	ldr	r3, [pc, #68]	; (8003264 <txDone+0x94>)
 8003220:	2208      	movs	r2, #8
 8003222:	741a      	strb	r2, [r3, #16]
 8003224:	e012      	b.n	800324c <txDone+0x7c>
    }
    else
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <txDone+0x94>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	18d1      	adds	r1, r2, r3
 800322e:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <txDone+0x94>)
 8003230:	7c5b      	ldrb	r3, [r3, #17]
 8003232:	461a      	mov	r2, r3
 8003234:	4b0d      	ldr	r3, [pc, #52]	; (800326c <txDone+0x9c>)
 8003236:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800323a:	4613      	mov	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4413      	add	r3, r2
 8003240:	440b      	add	r3, r1
 8003242:	4a08      	ldr	r2, [pc, #32]	; (8003264 <txDone+0x94>)
 8003244:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = MINRX_SYMS;
 8003246:	4b07      	ldr	r3, [pc, #28]	; (8003264 <txDone+0x94>)
 8003248:	2205      	movs	r2, #5
 800324a:	741a      	strb	r2, [r3, #16]
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <txDone+0x94>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	3b40      	subs	r3, #64	; 0x40
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	4619      	mov	r1, r3
 8003256:	4806      	ldr	r0, [pc, #24]	; (8003270 <txDone+0xa0>)
 8003258:	f001 fdfa 	bl	8004e50 <os_setTimedCallback>
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000280 	.word	0x20000280
 8003268:	200003b4 	.word	0x200003b4
 800326c:	0800c6e4 	.word	0x0800c6e4
 8003270:	20000294 	.word	0x20000294

08003274 <onJoinFailed>:


// ======================================== Join frames


static void onJoinFailed (xref2osjob_t osjob) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
 800327c:	2008      	movs	r0, #8
 800327e:	f7ff fab3 	bl	80027e8 <reportEvent>
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <processJoinAccept>:


static bit_t processJoinAccept (void) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 8003292:	4b99      	ldr	r3, [pc, #612]	; (80034f8 <processJoinAccept+0x26c>)
 8003294:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8003298:	2b01      	cmp	r3, #1
 800329a:	d106      	bne.n	80032aa <processJoinAccept+0x1e>
 800329c:	4b96      	ldr	r3, [pc, #600]	; (80034f8 <processJoinAccept+0x26c>)
 800329e:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <processJoinAccept+0x1e>
 80032a6:	f7fe f8f7 	bl	8001498 <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 80032aa:	4b93      	ldr	r3, [pc, #588]	; (80034f8 <processJoinAccept+0x26c>)
 80032ac:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80032b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <processJoinAccept+0x30>
 80032b8:	f7fe f8ee 	bl	8001498 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 80032bc:	4b8e      	ldr	r3, [pc, #568]	; (80034f8 <processJoinAccept+0x26c>)
 80032be:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d14c      	bne.n	8003360 <processJoinAccept+0xd4>
      nojoinframe:
 80032c6:	bf00      	nop
 80032c8:	e000      	b.n	80032cc <processJoinAccept+0x40>
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
 80032ca:	bf00      	nop
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
 80032cc:	4b8a      	ldr	r3, [pc, #552]	; (80034f8 <processJoinAccept+0x26c>)
 80032ce:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d123      	bne.n	8003322 <processJoinAccept+0x96>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 80032da:	4b87      	ldr	r3, [pc, #540]	; (80034f8 <processJoinAccept+0x26c>)
 80032dc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <processJoinAccept+0x60>
 80032e8:	f7fe f8d6 	bl	8001498 <hal_failed>
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
 80032ec:	4b82      	ldr	r3, [pc, #520]	; (80034f8 <processJoinAccept+0x26c>)
 80032ee:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80032f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	4b7f      	ldr	r3, [pc, #508]	; (80034f8 <processJoinAccept+0x26c>)
 80032fa:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            if( LMIC.rejoinCnt < 10 )
 80032fe:	4b7e      	ldr	r3, [pc, #504]	; (80034f8 <processJoinAccept+0x26c>)
 8003300:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8003304:	2b09      	cmp	r3, #9
 8003306:	d807      	bhi.n	8003318 <processJoinAccept+0x8c>
                LMIC.rejoinCnt++;
 8003308:	4b7b      	ldr	r3, [pc, #492]	; (80034f8 <processJoinAccept+0x26c>)
 800330a:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800330e:	3301      	adds	r3, #1
 8003310:	b2da      	uxtb	r2, r3
 8003312:	4b79      	ldr	r3, [pc, #484]	; (80034f8 <processJoinAccept+0x26c>)
 8003314:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
            reportEvent(EV_REJOIN_FAILED);
 8003318:	2009      	movs	r0, #9
 800331a:	f7ff fa65 	bl	80027e8 <reportEvent>
            return 1;
 800331e:	2301      	movs	r3, #1
 8003320:	e0e6      	b.n	80034f0 <processJoinAccept+0x264>
        LMIC.opmode &= ~OP_TXRXPEND;
 8003322:	4b75      	ldr	r3, [pc, #468]	; (80034f8 <processJoinAccept+0x26c>)
 8003324:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800332c:	b29a      	uxth	r2, r3
 800332e:	4b72      	ldr	r3, [pc, #456]	; (80034f8 <processJoinAccept+0x26c>)
 8003330:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        ostime_t delay = nextJoinState();
 8003334:	f7ff f9e6 	bl	8002704 <nextJoinState>
 8003338:	6078      	str	r0, [r7, #4]
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800333a:	f001 fd1f 	bl	8004d7c <os_getTime>
 800333e:	4602      	mov	r2, r0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	18d1      	adds	r1, r2, r3
                            (delay&1) != 0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f003 0301 	and.w	r3, r3, #1
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <processJoinAccept+0xc6>
 800334e:	4b6b      	ldr	r3, [pc, #428]	; (80034fc <processJoinAccept+0x270>)
 8003350:	e000      	b.n	8003354 <processJoinAccept+0xc8>
 8003352:	4b6b      	ldr	r3, [pc, #428]	; (8003500 <processJoinAccept+0x274>)
 8003354:	461a      	mov	r2, r3
 8003356:	486b      	ldr	r0, [pc, #428]	; (8003504 <processJoinAccept+0x278>)
 8003358:	f001 fd7a 	bl	8004e50 <os_setTimedCallback>
        return 1;
 800335c:	2301      	movs	r3, #1
 800335e:	e0c7      	b.n	80034f0 <processJoinAccept+0x264>
    u1_t hdr  = LMIC.frame[0];
 8003360:	4b65      	ldr	r3, [pc, #404]	; (80034f8 <processJoinAccept+0x26c>)
 8003362:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8003366:	757b      	strb	r3, [r7, #21]
    u1_t dlen = LMIC.dataLen;
 8003368:	4b63      	ldr	r3, [pc, #396]	; (80034f8 <processJoinAccept+0x26c>)
 800336a:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 800336e:	75fb      	strb	r3, [r7, #23]
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
 8003370:	7dfb      	ldrb	r3, [r7, #23]
 8003372:	3b04      	subs	r3, #4
 8003374:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003378:	4a5f      	ldr	r2, [pc, #380]	; (80034f8 <processJoinAccept+0x26c>)
 800337a:	4413      	add	r3, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe f9ad 	bl	80016dc <os_rlsbf4>
 8003382:	6138      	str	r0, [r7, #16]
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	2b11      	cmp	r3, #17
 8003388:	d002      	beq.n	8003390 <processJoinAccept+0x104>
 800338a:	7dfb      	ldrb	r3, [r7, #23]
 800338c:	2b21      	cmp	r3, #33	; 0x21
 800338e:	d104      	bne.n	800339a <processJoinAccept+0x10e>
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
 8003390:	7d7b      	ldrb	r3, [r7, #21]
 8003392:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 8003396:	2b20      	cmp	r3, #32
 8003398:	d00b      	beq.n	80033b2 <processJoinAccept+0x126>
      badframe:
 800339a:	bf00      	nop
 800339c:	e000      	b.n	80033a0 <processJoinAccept+0x114>
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
 800339e:	bf00      	nop
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 80033a0:	4b55      	ldr	r3, [pc, #340]	; (80034f8 <processJoinAccept+0x26c>)
 80033a2:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d08d      	beq.n	80032ca <processJoinAccept+0x3e>
            return 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e09e      	b.n	80034f0 <processJoinAccept+0x264>
    aes_encrypt(LMIC.frame+1, dlen-1);
 80033b2:	4a55      	ldr	r2, [pc, #340]	; (8003508 <processJoinAccept+0x27c>)
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	4619      	mov	r1, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f7fe fb30 	bl	8001a20 <aes_encrypt>
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	3b04      	subs	r3, #4
 80033c4:	4619      	mov	r1, r3
 80033c6:	4851      	ldr	r0, [pc, #324]	; (800350c <processJoinAccept+0x280>)
 80033c8:	f7fe fb08 	bl	80019dc <aes_verifyMic0>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0e5      	beq.n	800339e <processJoinAccept+0x112>
    }

    u4_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
 80033d2:	4b4f      	ldr	r3, [pc, #316]	; (8003510 <processJoinAccept+0x284>)
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fe f981 	bl	80016dc <os_rlsbf4>
 80033da:	60f8      	str	r0, [r7, #12]
    LMIC.devaddr = addr;
 80033dc:	4a46      	ldr	r2, [pc, #280]	; (80034f8 <processJoinAccept+0x26c>)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 80033e4:	484b      	ldr	r0, [pc, #300]	; (8003514 <processJoinAccept+0x288>)
 80033e6:	f7fe f979 	bl	80016dc <os_rlsbf4>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033f0:	4a41      	ldr	r2, [pc, #260]	; (80034f8 <processJoinAccept+0x26c>)
 80033f2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

#if defined(CFG_eu868)
    initDefaultChannels(0);
 80033f6:	2000      	movs	r0, #0
 80033f8:	f7fe fed6 	bl	80021a8 <initDefaultChannels>
#endif
    if( dlen > LEN_JA ) {
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
 80033fe:	2b11      	cmp	r3, #17
 8003400:	d920      	bls.n	8003444 <processJoinAccept+0x1b8>
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
 8003402:	230d      	movs	r3, #13
 8003404:	75fb      	strb	r3, [r7, #23]
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003406:	2303      	movs	r3, #3
 8003408:	75bb      	strb	r3, [r7, #22]
 800340a:	e018      	b.n	800343e <processJoinAccept+0x1b2>
            u4_t freq = convFreq(&LMIC.frame[dlen]);
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003412:	4a39      	ldr	r2, [pc, #228]	; (80034f8 <processJoinAccept+0x26c>)
 8003414:	4413      	add	r3, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe ffc6 	bl	80023a8 <convFreq>
 800341c:	60b8      	str	r0, [r7, #8]
            if( freq )
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d006      	beq.n	8003432 <processJoinAccept+0x1a6>
                LMIC_setupChannel(chidx, freq, 0, -1);
 8003424:	7db8      	ldrb	r0, [r7, #22]
 8003426:	f04f 33ff 	mov.w	r3, #4294967295
 800342a:	2200      	movs	r2, #0
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	f7fe ff41 	bl	80022b4 <LMIC_setupChannel>
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003432:	7dbb      	ldrb	r3, [r7, #22]
 8003434:	3301      	adds	r3, #1
 8003436:	75bb      	strb	r3, [r7, #22]
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	3303      	adds	r3, #3
 800343c:	75fb      	strb	r3, [r7, #23]
 800343e:	7dbb      	ldrb	r3, [r7, #22]
 8003440:	2b07      	cmp	r3, #7
 8003442:	d9e3      	bls.n	800340c <processJoinAccept+0x180>
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
 8003444:	4b2c      	ldr	r3, [pc, #176]	; (80034f8 <processJoinAccept+0x26c>)
 8003446:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 800344a:	3b01      	subs	r3, #1
 800344c:	b298      	uxth	r0, r3
 800344e:	4b32      	ldr	r3, [pc, #200]	; (8003518 <processJoinAccept+0x28c>)
 8003450:	4a32      	ldr	r2, [pc, #200]	; (800351c <processJoinAccept+0x290>)
 8003452:	492d      	ldr	r1, [pc, #180]	; (8003508 <processJoinAccept+0x27c>)
 8003454:	f7fe fb3e 	bl	8001ad4 <aes_sessKeys>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <processJoinAccept+0x26c>)
 800345a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800345e:	f003 0324 	and.w	r3, r3, #36	; 0x24
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <processJoinAccept+0x1de>
 8003466:	f7fe f817 	bl	8001498 <hal_failed>
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 800346a:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <processJoinAccept+0x26c>)
 800346c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00e      	beq.n	8003496 <processJoinAccept+0x20a>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 8003478:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <processJoinAccept+0x26c>)
 800347a:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 800347e:	4b1e      	ldr	r3, [pc, #120]	; (80034f8 <processJoinAccept+0x26c>)
 8003480:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f7fe f8fa 	bl	8001680 <lowerDR>
 800348c:	4603      	mov	r3, r0
 800348e:	461a      	mov	r2, r3
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <processJoinAccept+0x26c>)
 8003492:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
 8003496:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <processJoinAccept+0x26c>)
 8003498:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800349c:	f423 7329 	bic.w	r3, r3, #676	; 0x2a4
 80034a0:	f023 0302 	bic.w	r3, r3, #2
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <processJoinAccept+0x26c>)
 80034a8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    LMIC.txCnt = 0;
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <processJoinAccept+0x26c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
    stateJustJoined();
 80034b4:	f7ff f9b6 	bl	8002824 <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <processJoinAccept+0x26c>)
 80034ba:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <processJoinAccept+0x26c>)
 80034c6:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <processJoinAccept+0x26c>)
 80034cc:	f893 2154 	ldrb.w	r2, [r3, #340]	; 0x154
 80034d0:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <processJoinAccept+0x26c>)
 80034d2:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;   
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <processJoinAccept+0x26c>)
 80034d8:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d103      	bne.n	80034e8 <processJoinAccept+0x25c>
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <processJoinAccept+0x26c>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
    reportEvent(EV_JOINED);
 80034e8:	2006      	movs	r0, #6
 80034ea:	f7ff f97d 	bl	80027e8 <reportEvent>
    return 1;
 80034ee:	2301      	movs	r3, #1
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000280 	.word	0x20000280
 80034fc:	08003275 	.word	0x08003275
 8003500:	080027d5 	.word	0x080027d5
 8003504:	20000294 	.word	0x20000294
 8003508:	200003c9 	.word	0x200003c9
 800350c:	200003c8 	.word	0x200003c8
 8003510:	200003cf 	.word	0x200003cf
 8003514:	200003cc 	.word	0x200003cc
 8003518:	20000384 	.word	0x20000384
 800351c:	20000374 	.word	0x20000374

08003520 <processRx2Jacc>:


static void processRx2Jacc (xref2osjob_t osjob) {
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 )
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <processRx2Jacc+0x28>)
 800352a:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <processRx2Jacc+0x1a>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <processRx2Jacc+0x28>)
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    processJoinAccept();
 800353a:	f7ff fea7 	bl	800328c <processJoinAccept>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000280 	.word	0x20000280

0800354c <setupRx2Jacc>:


static void setupRx2Jacc (xref2osjob_t osjob) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <setupRx2Jacc+0x1c>)
 8003556:	4a05      	ldr	r2, [pc, #20]	; (800356c <setupRx2Jacc+0x20>)
 8003558:	61da      	str	r2, [r3, #28]
    setupRx2();
 800355a:	f7ff fdcf 	bl	80030fc <setupRx2>
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000280 	.word	0x20000280
 800356c:	08003521 	.word	0x08003521

08003570 <processRx1Jacc>:


static void processRx1Jacc (xref2osjob_t osjob) {
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processJoinAccept() )
 8003578:	4b08      	ldr	r3, [pc, #32]	; (800359c <processRx1Jacc+0x2c>)
 800357a:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 800357e:	2b00      	cmp	r3, #0
 8003580:	d004      	beq.n	800358c <processRx1Jacc+0x1c>
 8003582:	f7ff fe83 	bl	800328c <processJoinAccept>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d103      	bne.n	8003594 <processRx1Jacc+0x24>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 800358c:	4904      	ldr	r1, [pc, #16]	; (80035a0 <processRx1Jacc+0x30>)
 800358e:	4805      	ldr	r0, [pc, #20]	; (80035a4 <processRx1Jacc+0x34>)
 8003590:	f7ff fdd4 	bl	800313c <schedRx2>
}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20000280 	.word	0x20000280
 80035a0:	0800354d 	.word	0x0800354d
 80035a4:	0002ee00 	.word	0x0002ee00

080035a8 <setupRx1Jacc>:


static void setupRx1Jacc (xref2osjob_t osjob) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1Jacc));
 80035b0:	4803      	ldr	r0, [pc, #12]	; (80035c0 <setupRx1Jacc+0x18>)
 80035b2:	f7ff fdeb 	bl	800318c <setupRx1>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	08003571 	.word	0x08003571

080035c4 <jreqDone>:


static void jreqDone (xref2osjob_t osjob) {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 80035cc:	4903      	ldr	r1, [pc, #12]	; (80035dc <jreqDone+0x18>)
 80035ce:	4804      	ldr	r0, [pc, #16]	; (80035e0 <jreqDone+0x1c>)
 80035d0:	f7ff fdfe 	bl	80031d0 <txDone>
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	080035a9 	.word	0x080035a9
 80035e0:	00027100 	.word	0x00027100

080035e4 <processRx2DnDataDelay>:
// ======================================== Data frames

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay (xref2osjob_t osjob) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
    processDnData();
 80035ec:	f000 fbc6 	bl	8003d7c <processDnData>
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <processRx2DnData>:

static void processRx2DnData (xref2osjob_t osjob) {
 80035f8:	b590      	push	{r4, r7, lr}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 ) {
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <processRx2DnData+0x48>)
 8003602:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003606:	2b00      	cmp	r3, #0
 8003608:	d115      	bne.n	8003636 <processRx2DnData+0x3e>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 800360a:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <processRx2DnData+0x48>)
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 8003612:	f001 fbb3 	bl	8004d7c <os_getTime>
 8003616:	4603      	mov	r3, r0
 8003618:	f503 34bb 	add.w	r4, r3, #95744	; 0x17600
 800361c:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8003620:	2002      	movs	r0, #2
 8003622:	f7fe fd13 	bl	800204c <rndDelay>
 8003626:	4603      	mov	r3, r0
        os_setTimedCallback(&LMIC.osjob,
 8003628:	4423      	add	r3, r4
 800362a:	4a06      	ldr	r2, [pc, #24]	; (8003644 <processRx2DnData+0x4c>)
 800362c:	4619      	mov	r1, r3
 800362e:	4806      	ldr	r0, [pc, #24]	; (8003648 <processRx2DnData+0x50>)
 8003630:	f001 fc0e 	bl	8004e50 <os_setTimedCallback>
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
 8003634:	e001      	b.n	800363a <processRx2DnData+0x42>
    }
    processDnData();
 8003636:	f000 fba1 	bl	8003d7c <processDnData>
}
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bd90      	pop	{r4, r7, pc}
 8003640:	20000280 	.word	0x20000280
 8003644:	080035e5 	.word	0x080035e5
 8003648:	20000294 	.word	0x20000294

0800364c <setupRx2DnData>:


static void setupRx2DnData (xref2osjob_t osjob) {
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <setupRx2DnData+0x1c>)
 8003656:	4a05      	ldr	r2, [pc, #20]	; (800366c <setupRx2DnData+0x20>)
 8003658:	61da      	str	r2, [r3, #28]
    setupRx2();
 800365a:	f7ff fd4f 	bl	80030fc <setupRx2>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000280 	.word	0x20000280
 800366c:	080035f9 	.word	0x080035f9

08003670 <processRx1DnData>:


static void processRx1DnData (xref2osjob_t osjob) {
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processDnData() )
 8003678:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <processRx1DnData+0x40>)
 800367a:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 800367e:	2b00      	cmp	r3, #0
 8003680:	d004      	beq.n	800368c <processRx1DnData+0x1c>
 8003682:	f000 fb7b 	bl	8003d7c <processDnData>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10c      	bne.n	80036a6 <processRx1DnData+0x36>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <processRx1DnData+0x40>)
 800368e:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8003692:	3301      	adds	r3, #1
 8003694:	461a      	mov	r2, r3
 8003696:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800369a:	fb03 f302 	mul.w	r3, r3, r2
 800369e:	4905      	ldr	r1, [pc, #20]	; (80036b4 <processRx1DnData+0x44>)
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff fd4b 	bl	800313c <schedRx2>
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000280 	.word	0x20000280
 80036b4:	0800364d 	.word	0x0800364d

080036b8 <setupRx1DnData>:


static void setupRx1DnData (xref2osjob_t osjob) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1DnData));
 80036c0:	4803      	ldr	r0, [pc, #12]	; (80036d0 <setupRx1DnData+0x18>)
 80036c2:	f7ff fd63 	bl	800318c <setupRx1>
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	08003671 	.word	0x08003671

080036d4 <updataDone>:


static void updataDone (xref2osjob_t osjob) {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 80036dc:	4b07      	ldr	r3, [pc, #28]	; (80036fc <updataDone+0x28>)
 80036de:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 80036e2:	461a      	mov	r2, r3
 80036e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80036e8:	fb03 f302 	mul.w	r3, r3, r2
 80036ec:	4904      	ldr	r1, [pc, #16]	; (8003700 <updataDone+0x2c>)
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fd6e 	bl	80031d0 <txDone>
}
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20000280 	.word	0x20000280
 8003700:	080036b9 	.word	0x080036b9

08003704 <buildDataFrame>:

// ======================================== 


static void buildDataFrame (void) {
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b087      	sub	sp, #28
 8003708:	af02      	add	r7, sp, #8
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
 800370a:	4ba3      	ldr	r3, [pc, #652]	; (8003998 <buildDataFrame+0x294>)
 800370c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003710:	f003 0318 	and.w	r3, r3, #24
 8003714:	2b10      	cmp	r3, #16
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	73fb      	strb	r3, [r7, #15]
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <buildDataFrame+0x2a>
 8003726:	4b9c      	ldr	r3, [pc, #624]	; (8003998 <buildDataFrame+0x294>)
 8003728:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800372c:	e000      	b.n	8003730 <buildDataFrame+0x2c>
 800372e:	2300      	movs	r3, #0
 8003730:	71bb      	strb	r3, [r7, #6]

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
 8003732:	2308      	movs	r3, #8
 8003734:	60bb      	str	r3, [r7, #8]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
 8003736:	4b98      	ldr	r3, [pc, #608]	; (8003998 <buildDataFrame+0x294>)
 8003738:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800373c:	461a      	mov	r2, r3
 800373e:	f240 4302 	movw	r3, #1026	; 0x402
 8003742:	4013      	ands	r3, r2
 8003744:	f240 4202 	movw	r2, #1026	; 0x402
 8003748:	4293      	cmp	r3, r2
 800374a:	d11c      	bne.n	8003786 <buildDataFrame+0x82>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
 800374c:	4a92      	ldr	r2, [pc, #584]	; (8003998 <buildDataFrame+0x294>)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4413      	add	r3, r2
 8003752:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003756:	2210      	movs	r2, #16
 8003758:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
 800375a:	4b8f      	ldr	r3, [pc, #572]	; (8003998 <buildDataFrame+0x294>)
 800375c:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8003760:	b25a      	sxtb	r2, r3
 8003762:	4b8d      	ldr	r3, [pc, #564]	; (8003998 <buildDataFrame+0x294>)
 8003764:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	b25b      	sxtb	r3, r3
 800376c:	4313      	orrs	r3, r2
 800376e:	b25a      	sxtb	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	3301      	adds	r3, #1
 8003774:	b2d1      	uxtb	r1, r2
 8003776:	4a88      	ldr	r2, [pc, #544]	; (8003998 <buildDataFrame+0x294>)
 8003778:	4413      	add	r3, r2
 800377a:	460a      	mov	r2, r1
 800377c:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	3302      	adds	r3, #2
 8003784:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.dutyCapAns ) {
 8003786:	4b84      	ldr	r3, [pc, #528]	; (8003998 <buildDataFrame+0x294>)
 8003788:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00d      	beq.n	80037ac <buildDataFrame+0xa8>
        LMIC.frame[end] = MCMD_DCAP_ANS;
 8003790:	4a81      	ldr	r2, [pc, #516]	; (8003998 <buildDataFrame+0x294>)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4413      	add	r3, r2
 8003796:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800379a:	2204      	movs	r2, #4
 800379c:	701a      	strb	r2, [r3, #0]
        end += 1;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	3301      	adds	r3, #1
 80037a2:	60bb      	str	r3, [r7, #8]
        LMIC.dutyCapAns = 0;
 80037a4:	4b7c      	ldr	r3, [pc, #496]	; (8003998 <buildDataFrame+0x294>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
    }
    if( LMIC.dn2Ans ) {
 80037ac:	4b7a      	ldr	r3, [pc, #488]	; (8003998 <buildDataFrame+0x294>)
 80037ae:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d01a      	beq.n	80037ec <buildDataFrame+0xe8>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
 80037b6:	4a78      	ldr	r2, [pc, #480]	; (8003998 <buildDataFrame+0x294>)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80037c0:	2205      	movs	r2, #5
 80037c2:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 80037c4:	4b74      	ldr	r3, [pc, #464]	; (8003998 <buildDataFrame+0x294>)
 80037c6:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3301      	adds	r3, #1
 80037ce:	f002 0203 	and.w	r2, r2, #3
 80037d2:	b2d1      	uxtb	r1, r2
 80037d4:	4a70      	ldr	r2, [pc, #448]	; (8003998 <buildDataFrame+0x294>)
 80037d6:	4413      	add	r3, r2
 80037d8:	460a      	mov	r2, r1
 80037da:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	3302      	adds	r3, #2
 80037e2:	60bb      	str	r3, [r7, #8]
        LMIC.dn2Ans = 0;
 80037e4:	4b6c      	ldr	r3, [pc, #432]	; (8003998 <buildDataFrame+0x294>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }
    if( LMIC.devsAns ) {  // answer to device status
 80037ec:	4b6a      	ldr	r3, [pc, #424]	; (8003998 <buildDataFrame+0x294>)
 80037ee:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d021      	beq.n	800383a <buildDataFrame+0x136>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
 80037f6:	4a68      	ldr	r2, [pc, #416]	; (8003998 <buildDataFrame+0x294>)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003800:	2206      	movs	r2, #6
 8003802:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = os_getBattLevel();
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	1c5c      	adds	r4, r3, #1
 8003808:	f7fd fffb 	bl	8001802 <os_getBattLevel>
 800380c:	4603      	mov	r3, r0
 800380e:	461a      	mov	r2, r3
 8003810:	4b61      	ldr	r3, [pc, #388]	; (8003998 <buildDataFrame+0x294>)
 8003812:	4423      	add	r3, r4
 8003814:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        LMIC.frame[end+2] = LMIC.margin;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	3302      	adds	r3, #2
 800381c:	4a5e      	ldr	r2, [pc, #376]	; (8003998 <buildDataFrame+0x294>)
 800381e:	f892 1124 	ldrb.w	r1, [r2, #292]	; 0x124
 8003822:	4a5d      	ldr	r2, [pc, #372]	; (8003998 <buildDataFrame+0x294>)
 8003824:	4413      	add	r3, r2
 8003826:	460a      	mov	r2, r1
 8003828:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 3;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	3303      	adds	r3, #3
 8003830:	60bb      	str	r3, [r7, #8]
        LMIC.devsAns = 0;
 8003832:	4b59      	ldr	r3, [pc, #356]	; (8003998 <buildDataFrame+0x294>)
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
 800383a:	4b57      	ldr	r3, [pc, #348]	; (8003998 <buildDataFrame+0x294>)
 800383c:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01a      	beq.n	800387a <buildDataFrame+0x176>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
 8003844:	4a54      	ldr	r2, [pc, #336]	; (8003998 <buildDataFrame+0x294>)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4413      	add	r3, r2
 800384a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800384e:	2203      	movs	r2, #3
 8003850:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 8003852:	4b51      	ldr	r3, [pc, #324]	; (8003998 <buildDataFrame+0x294>)
 8003854:	f893 2125 	ldrb.w	r2, [r3, #293]	; 0x125
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	3301      	adds	r3, #1
 800385c:	f002 0207 	and.w	r2, r2, #7
 8003860:	b2d1      	uxtb	r1, r2
 8003862:	4a4d      	ldr	r2, [pc, #308]	; (8003998 <buildDataFrame+0x294>)
 8003864:	4413      	add	r3, r2
 8003866:	460a      	mov	r2, r1
 8003868:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	3302      	adds	r3, #2
 8003870:	60bb      	str	r3, [r7, #8]
        LMIC.ladrAns = 0;
 8003872:	4b49      	ldr	r3, [pc, #292]	; (8003998 <buildDataFrame+0x294>)
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
    }
    if( LMIC.bcninfoTries > 0 ) {
 800387a:	4b47      	ldr	r3, [pc, #284]	; (8003998 <buildDataFrame+0x294>)
 800387c:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8003880:	2b00      	cmp	r3, #0
 8003882:	d009      	beq.n	8003898 <buildDataFrame+0x194>
        LMIC.frame[end] = MCMD_BCNI_REQ;
 8003884:	4a44      	ldr	r2, [pc, #272]	; (8003998 <buildDataFrame+0x294>)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4413      	add	r3, r2
 800388a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800388e:	2212      	movs	r2, #18
 8003890:	701a      	strb	r2, [r3, #0]
        end += 1;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	3301      	adds	r3, #1
 8003896:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.adrChanged ) {
 8003898:	4b3f      	ldr	r3, [pc, #252]	; (8003998 <buildDataFrame+0x294>)
 800389a:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00c      	beq.n	80038bc <buildDataFrame+0x1b8>
        if( LMIC.adrAckReq < 0 )
 80038a2:	4b3d      	ldr	r3, [pc, #244]	; (8003998 <buildDataFrame+0x294>)
 80038a4:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	da03      	bge.n	80038b4 <buildDataFrame+0x1b0>
            LMIC.adrAckReq = 0;
 80038ac:	4b3a      	ldr	r3, [pc, #232]	; (8003998 <buildDataFrame+0x294>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        LMIC.adrChanged = 0;
 80038b4:	4b38      	ldr	r3, [pc, #224]	; (8003998 <buildDataFrame+0x294>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
    }
    if( LMIC.pingSetAns != 0 ) {
 80038bc:	4b36      	ldr	r3, [pc, #216]	; (8003998 <buildDataFrame+0x294>)
 80038be:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01a      	beq.n	80038fc <buildDataFrame+0x1f8>
        LMIC.frame[end+0] = MCMD_PING_ANS;
 80038c6:	4a34      	ldr	r2, [pc, #208]	; (8003998 <buildDataFrame+0x294>)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80038d0:	2211      	movs	r2, #17
 80038d2:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 80038d4:	4b30      	ldr	r3, [pc, #192]	; (8003998 <buildDataFrame+0x294>)
 80038d6:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	3301      	adds	r3, #1
 80038de:	f002 0201 	and.w	r2, r2, #1
 80038e2:	b2d1      	uxtb	r1, r2
 80038e4:	4a2c      	ldr	r2, [pc, #176]	; (8003998 <buildDataFrame+0x294>)
 80038e6:	4413      	add	r3, r2
 80038e8:	460a      	mov	r2, r1
 80038ea:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	3302      	adds	r3, #2
 80038f2:	60bb      	str	r3, [r7, #8]
        LMIC.pingSetAns = 0;
 80038f4:	4b28      	ldr	r3, [pc, #160]	; (8003998 <buildDataFrame+0x294>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
    }
    if( LMIC.snchAns ) {
 80038fc:	4b26      	ldr	r3, [pc, #152]	; (8003998 <buildDataFrame+0x294>)
 80038fe:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8003902:	2b00      	cmp	r3, #0
 8003904:	d01a      	beq.n	800393c <buildDataFrame+0x238>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
 8003906:	4a24      	ldr	r2, [pc, #144]	; (8003998 <buildDataFrame+0x294>)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4413      	add	r3, r2
 800390c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003910:	2207      	movs	r2, #7
 8003912:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 8003914:	4b20      	ldr	r3, [pc, #128]	; (8003998 <buildDataFrame+0x294>)
 8003916:	f893 212a 	ldrb.w	r2, [r3, #298]	; 0x12a
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	3301      	adds	r3, #1
 800391e:	f002 0203 	and.w	r2, r2, #3
 8003922:	b2d1      	uxtb	r1, r2
 8003924:	4a1c      	ldr	r2, [pc, #112]	; (8003998 <buildDataFrame+0x294>)
 8003926:	4413      	add	r3, r2
 8003928:	460a      	mov	r2, r1
 800392a:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3302      	adds	r3, #2
 8003932:	60bb      	str	r3, [r7, #8]
        LMIC.snchAns = 0;
 8003934:	4b18      	ldr	r3, [pc, #96]	; (8003998 <buildDataFrame+0x294>)
 8003936:	2200      	movs	r2, #0
 8003938:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
    }
    ASSERT(end <= OFF_DAT_OPTS+16);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b18      	cmp	r3, #24
 8003940:	dd01      	ble.n	8003946 <buildDataFrame+0x242>
 8003942:	f7fd fda9 	bl	8001498 <hal_failed>

    u1_t flen = end + (txdata ? 5+dlen : 4);
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <buildDataFrame+0x250>
 800394c:	79bb      	ldrb	r3, [r7, #6]
 800394e:	3305      	adds	r3, #5
 8003950:	b2db      	uxtb	r3, r3
 8003952:	e000      	b.n	8003956 <buildDataFrame+0x252>
 8003954:	2304      	movs	r3, #4
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	4413      	add	r3, r2
 800395c:	71fb      	strb	r3, [r7, #7]
    if( flen > MAX_LEN_FRAME ) {
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d905      	bls.n	8003970 <buildDataFrame+0x26c>
        // Options and payload too big - delay payload
        txdata = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	73fb      	strb	r3, [r7, #15]
        flen = end+4;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	3304      	adds	r3, #4
 800396e:	71fb      	strb	r3, [r7, #7]
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 8003970:	4b09      	ldr	r3, [pc, #36]	; (8003998 <buildDataFrame+0x294>)
 8003972:	2240      	movs	r2, #64	; 0x40
 8003974:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8003978:	4b07      	ldr	r3, [pc, #28]	; (8003998 <buildDataFrame+0x294>)
 800397a:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <buildDataFrame+0x294>)
 8003980:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
 8003984:	4313      	orrs	r3, r2
 8003986:	b2db      	uxtb	r3, r3
 8003988:	b25b      	sxtb	r3, r3
 800398a:	4a03      	ldr	r2, [pc, #12]	; (8003998 <buildDataFrame+0x294>)
 800398c:	f992 2121 	ldrsb.w	r2, [r2, #289]	; 0x121
 8003990:	2a00      	cmp	r2, #0
 8003992:	db03      	blt.n	800399c <buildDataFrame+0x298>
 8003994:	2240      	movs	r2, #64	; 0x40
 8003996:	e002      	b.n	800399e <buildDataFrame+0x29a>
 8003998:	20000280 	.word	0x20000280
 800399c:	2200      	movs	r2, #0
 800399e:	4313      	orrs	r3, r2
 80039a0:	b25a      	sxtb	r2, r3
                              | (end-OFF_DAT_OPTS));
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	3b08      	subs	r3, #8
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	b25b      	sxtb	r3, r3
 80039ac:	4313      	orrs	r3, r2
 80039ae:	b25b      	sxtb	r3, r3
 80039b0:	b2da      	uxtb	r2, r3
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 80039b2:	4b40      	ldr	r3, [pc, #256]	; (8003ab4 <buildDataFrame+0x3b0>)
 80039b4:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
 80039b8:	4a3f      	ldr	r2, [pc, #252]	; (8003ab8 <buildDataFrame+0x3b4>)
 80039ba:	4b3e      	ldr	r3, [pc, #248]	; (8003ab4 <buildDataFrame+0x3b0>)
 80039bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80039c0:	4619      	mov	r1, r3
 80039c2:	4610      	mov	r0, r2
 80039c4:	f7fd fedb 	bl	800177e <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
 80039c8:	4b3a      	ldr	r3, [pc, #232]	; (8003ab4 <buildDataFrame+0x3b0>)
 80039ca:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <buildDataFrame+0x2dc>
        LMIC.seqnoUp += 1;
 80039d2:	4b38      	ldr	r3, [pc, #224]	; (8003ab4 <buildDataFrame+0x3b0>)
 80039d4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80039d8:	3301      	adds	r3, #1
 80039da:	4a36      	ldr	r2, [pc, #216]	; (8003ab4 <buildDataFrame+0x3b0>)
 80039dc:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (DRADJUST[LMIC.txCnt+1] << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
 80039e0:	4a36      	ldr	r2, [pc, #216]	; (8003abc <buildDataFrame+0x3b8>)
 80039e2:	4b34      	ldr	r3, [pc, #208]	; (8003ab4 <buildDataFrame+0x3b0>)
 80039e4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	4619      	mov	r1, r3
 80039f0:	4610      	mov	r0, r2
 80039f2:	f7fd fead 	bl	8001750 <os_wlsbf2>

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
 80039f6:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <buildDataFrame+0x3b0>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

    if( txdata ) {
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d03e      	beq.n	8003a82 <buildDataFrame+0x37e>
        if( LMIC.pendTxConf ) {
 8003a04:	4b2b      	ldr	r3, [pc, #172]	; (8003ab4 <buildDataFrame+0x3b0>)
 8003a06:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00c      	beq.n	8003a28 <buildDataFrame+0x324>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 8003a0e:	4b29      	ldr	r3, [pc, #164]	; (8003ab4 <buildDataFrame+0x3b0>)
 8003a10:	2280      	movs	r2, #128	; 0x80
 8003a12:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
 8003a16:	4b27      	ldr	r3, [pc, #156]	; (8003ab4 <buildDataFrame+0x3b0>)
 8003a18:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d103      	bne.n	8003a28 <buildDataFrame+0x324>
 8003a20:	4b24      	ldr	r3, [pc, #144]	; (8003ab4 <buildDataFrame+0x3b0>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        }
        LMIC.frame[end] = LMIC.pendTxPort;
 8003a28:	4b22      	ldr	r3, [pc, #136]	; (8003ab4 <buildDataFrame+0x3b0>)
 8003a2a:	f893 10ba 	ldrb.w	r1, [r3, #186]	; 0xba
 8003a2e:	4a21      	ldr	r2, [pc, #132]	; (8003ab4 <buildDataFrame+0x3b0>)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003a38:	460a      	mov	r2, r1
 8003a3a:	701a      	strb	r2, [r3, #0]
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	4a1f      	ldr	r2, [pc, #124]	; (8003ac0 <buildDataFrame+0x3bc>)
 8003a42:	4413      	add	r3, r2
 8003a44:	79ba      	ldrb	r2, [r7, #6]
 8003a46:	491f      	ldr	r1, [pc, #124]	; (8003ac4 <buildDataFrame+0x3c0>)
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f007 fb33 	bl	800b0b4 <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8003a4e:	4b19      	ldr	r3, [pc, #100]	; (8003ab4 <buildDataFrame+0x3b0>)
 8003a50:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <buildDataFrame+0x358>
 8003a58:	481b      	ldr	r0, [pc, #108]	; (8003ac8 <buildDataFrame+0x3c4>)
 8003a5a:	e000      	b.n	8003a5e <buildDataFrame+0x35a>
 8003a5c:	481b      	ldr	r0, [pc, #108]	; (8003acc <buildDataFrame+0x3c8>)
 8003a5e:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <buildDataFrame+0x3b0>)
 8003a60:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                   LMIC.devaddr, LMIC.seqnoUp-1,
 8003a64:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <buildDataFrame+0x3b0>)
 8003a66:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8003a6a:	1e5c      	subs	r4, r3, #1
                   /*up*/0, LMIC.frame+end+1, dlen);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	3301      	adds	r3, #1
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8003a70:	4a13      	ldr	r2, [pc, #76]	; (8003ac0 <buildDataFrame+0x3bc>)
 8003a72:	4413      	add	r3, r2
 8003a74:	79ba      	ldrb	r2, [r7, #6]
 8003a76:	9201      	str	r2, [sp, #4]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	4622      	mov	r2, r4
 8003a7e:	f7fd ffe5 	bl	8001a4c <aes_cipher>
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
 8003a82:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <buildDataFrame+0x3b0>)
 8003a84:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 8003a88:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <buildDataFrame+0x3b0>)
 8003a8a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8003a8e:	1e5a      	subs	r2, r3, #1
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	3b04      	subs	r3, #4
 8003a94:	9301      	str	r3, [sp, #4]
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <buildDataFrame+0x3bc>)
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	480a      	ldr	r0, [pc, #40]	; (8003ac8 <buildDataFrame+0x3c4>)
 8003a9e:	f7fd ff57 	bl	8001950 <aes_appendMic>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
 8003aa2:	4a04      	ldr	r2, [pc, #16]	; (8003ab4 <buildDataFrame+0x3b0>)
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	f882 3147 	strb.w	r3, [r2, #327]	; 0x147
}
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd90      	pop	{r4, r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000280 	.word	0x20000280
 8003ab8:	200003c9 	.word	0x200003c9
 8003abc:	200003ce 	.word	0x200003ce
 8003ac0:	200003c8 	.word	0x200003c8
 8003ac4:	2000033d 	.word	0x2000033d
 8003ac8:	20000374 	.word	0x20000374
 8003acc:	20000384 	.word	0x20000384

08003ad0 <onBcnRx>:


// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (xref2osjob_t job) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
 8003ad8:	2000      	movs	r0, #0
 8003ada:	f001 ff71 	bl	80059c0 <os_radio>
    os_clearCallback(&LMIC.osjob);
 8003ade:	4823      	ldr	r0, [pc, #140]	; (8003b6c <onBcnRx+0x9c>)
 8003ae0:	f001 f972 	bl	8004dc8 <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
 8003ae4:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <onBcnRx+0xa0>)
 8003ae6:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10c      	bne.n	8003b08 <onBcnRx+0x38>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <onBcnRx+0xa0>)
 8003af0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003af4:	f023 0303 	bic.w	r3, r3, #3
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <onBcnRx+0xa0>)
 8003afc:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        reportEvent(EV_SCAN_TIMEOUT);
 8003b00:	2001      	movs	r0, #1
 8003b02:	f7fe fe71 	bl	80027e8 <reportEvent>
        return;
 8003b06:	e02d      	b.n	8003b64 <onBcnRx+0x94>
    }
    if( decodeBeacon() <= 0 ) {
 8003b08:	f7fe fef2 	bl	80028f0 <decodeBeacon>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	dc0f      	bgt.n	8003b32 <onBcnRx+0x62>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
 8003b12:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <onBcnRx+0xa0>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
        os_radio(RADIO_RXON);
 8003b1a:	2003      	movs	r0, #3
 8003b1c:	f001 ff50 	bl	80059c0 <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
 8003b20:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <onBcnRx+0xa0>)
 8003b22:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003b26:	4a13      	ldr	r2, [pc, #76]	; (8003b74 <onBcnRx+0xa4>)
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4810      	ldr	r0, [pc, #64]	; (8003b6c <onBcnRx+0x9c>)
 8003b2c:	f001 f990 	bl	8004e50 <os_setTimedCallback>
        return;
 8003b30:	e018      	b.n	8003b64 <onBcnRx+0x94>
    }
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
 8003b32:	2101      	movs	r1, #1
 8003b34:	200d      	movs	r0, #13
 8003b36:	f7fe f915 	bl	8001d64 <calcBcnRxWindowFromMillis>
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <onBcnRx+0xa0>)
 8003b3c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <onBcnRx+0xa0>)
 8003b48:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <onBcnRx+0xa0>)
 8003b4e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003b52:	f043 0302 	orr.w	r3, r3, #2
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <onBcnRx+0xa0>)
 8003b5a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 8003b5e:	2002      	movs	r0, #2
 8003b60:	f7fe fe42 	bl	80027e8 <reportEvent>
}
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000294 	.word	0x20000294
 8003b70:	20000280 	.word	0x20000280
 8003b74:	08003ad1 	.word	0x08003ad1

08003b78 <startScan>:
// Enable receiver to listen to incoming beacons
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
 8003b7c:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <startScan+0xa4>)
 8003b7e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d006      	beq.n	8003b94 <startScan+0x1c>
 8003b86:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <startScan+0xa4>)
 8003b88:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <startScan+0x20>
 8003b94:	f7fd fc80 	bl	8001498 <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
 8003b98:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <startScan+0xa4>)
 8003b9a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d137      	bne.n	8003c16 <startScan+0x9e>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <startScan+0xa4>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 8003bae:	4b1b      	ldr	r3, [pc, #108]	; (8003c1c <startScan+0xa4>)
 8003bb0:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 8003bb4:	4b19      	ldr	r3, [pc, #100]	; (8003c1c <startScan+0xa4>)
 8003bb6:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
 8003bba:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <startScan+0xa4>)
 8003bbc:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <startScan+0xa4>)
 8003bc2:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 8003bc6:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <startScan+0xa4>)
 8003bc8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <startScan+0xa4>)
 8003bda:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    setBcnRxParams();
 8003bde:	f7fe fd35 	bl	800264c <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
 8003be2:	f001 f8cb 	bl	8004d7c <os_getTime>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f503 137b 	add.w	r3, r3, #4112384	; 0x3ec000
 8003bec:	f503 5374 	add.w	r3, r3, #15616	; 0x3d00
 8003bf0:	4a0a      	ldr	r2, [pc, #40]	; (8003c1c <startScan+0xa4>)
 8003bf2:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
 8003bf6:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <startScan+0xa4>)
 8003bf8:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003bfc:	4a07      	ldr	r2, [pc, #28]	; (8003c1c <startScan+0xa4>)
 8003bfe:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 8003c00:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <startScan+0xa4>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4a06      	ldr	r2, [pc, #24]	; (8003c20 <startScan+0xa8>)
 8003c06:	4619      	mov	r1, r3
 8003c08:	4806      	ldr	r0, [pc, #24]	; (8003c24 <startScan+0xac>)
 8003c0a:	f001 f921 	bl	8004e50 <os_setTimedCallback>
    os_radio(RADIO_RXON);
 8003c0e:	2003      	movs	r0, #3
 8003c10:	f001 fed6 	bl	80059c0 <os_radio>
 8003c14:	e000      	b.n	8003c18 <startScan+0xa0>
        return;
 8003c16:	bf00      	nop
}
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000280 	.word	0x20000280
 8003c20:	08003ad1 	.word	0x08003ad1
 8003c24:	20000294 	.word	0x20000294

08003c28 <buildJoinRequest>:
//
// Join stuff
//
// ================================================================================

static void buildJoinRequest (u1_t ftype) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    xref2u1_t d = LMIC.frame;
 8003c32:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <buildJoinRequest+0x64>)
 8003c34:	60fb      	str	r3, [r7, #12]
    d[OFF_JR_HDR] = ftype;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	79fa      	ldrb	r2, [r7, #7]
 8003c3a:	701a      	strb	r2, [r3, #0]
    os_getArtEui(d + OFF_JR_ARTEUI);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fd33 	bl	80046ac <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	3309      	adds	r3, #9
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fd42 	bl	80046d4 <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f103 0211 	add.w	r2, r3, #17
 8003c56:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <buildJoinRequest+0x68>)
 8003c58:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4610      	mov	r0, r2
 8003c60:	f7fd fd76 	bl	8001750 <os_wlsbf2>
    aes_appendMic0(d, OFF_JR_MIC);
 8003c64:	2113      	movs	r1, #19
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f7fd fe9a 	bl	80019a0 <aes_appendMic0>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <buildJoinRequest+0x68>)
 8003c6e:	2217      	movs	r2, #23
 8003c70:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    LMIC.devNonce++;
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <buildJoinRequest+0x68>)
 8003c76:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <buildJoinRequest+0x68>)
 8003c80:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
    DO_DEVDB(LMIC.devNonce,devNonce);
}
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	200003c8 	.word	0x200003c8
 8003c90:	20000280 	.word	0x20000280

08003c94 <startJoining>:

static void startJoining (xref2osjob_t osjob) {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
    reportEvent(EV_JOINING);
 8003c9c:	2005      	movs	r0, #5
 8003c9e:	f7fe fda3 	bl	80027e8 <reportEvent>
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining (void) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
    if( LMIC.devaddr == 0 ) {
 8003cb0:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <LMIC_startJoining+0x88>)
 8003cb2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d138      	bne.n	8003d2c <LMIC_startJoining+0x80>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
 8003cba:	4b1e      	ldr	r3, [pc, #120]	; (8003d34 <LMIC_startJoining+0x88>)
 8003cbc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003cc0:	f003 0390 	and.w	r3, r3, #144	; 0x90
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <LMIC_startJoining+0x20>
 8003cc8:	f7fd fbe6 	bl	8001498 <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
 8003ccc:	4b19      	ldr	r3, [pc, #100]	; (8003d34 <LMIC_startJoining+0x88>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
 8003cd4:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <LMIC_startJoining+0x88>)
 8003cd6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003cda:	f423 53c1 	bic.w	r3, r3, #6176	; 0x1820
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <LMIC_startJoining+0x88>)
 8003ce6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 8003cea:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <LMIC_startJoining+0x88>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <LMIC_startJoining+0x88>)
 8003cf4:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
 8003cf8:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <LMIC_startJoining+0x88>)
 8003cfa:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <LMIC_startJoining+0x88>)
 8003d00:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <LMIC_startJoining+0x88>)
 8003d06:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
        initJoinLoop();
 8003d0a:	f7fe fcc5 	bl	8002698 <initJoinLoop>
        LMIC.opmode |= OP_JOINING;
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <LMIC_startJoining+0x88>)
 8003d10:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003d14:	f043 0304 	orr.w	r3, r3, #4
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <LMIC_startJoining+0x88>)
 8003d1c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 8003d20:	4905      	ldr	r1, [pc, #20]	; (8003d38 <LMIC_startJoining+0x8c>)
 8003d22:	4806      	ldr	r0, [pc, #24]	; (8003d3c <LMIC_startJoining+0x90>)
 8003d24:	f001 f86e 	bl	8004e04 <os_setCallback>
        return 1;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <LMIC_startJoining+0x82>
    }
    return 0; // already joined
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000280 	.word	0x20000280
 8003d38:	08003c95 	.word	0x08003c95
 8003d3c:	20000294 	.word	0x20000294

08003d40 <processPingRx>:
//
//
//
// ================================================================================

static void processPingRx (xref2osjob_t osjob) {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen != 0 ) {
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <processPingRx+0x38>)
 8003d4a:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00c      	beq.n	8003d6c <processPingRx+0x2c>
        LMIC.txrxFlags = TXRX_PING;
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <processPingRx+0x38>)
 8003d54:	2204      	movs	r2, #4
 8003d56:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        if( decodeFrame() ) {
 8003d5a:	f7fe fe5d 	bl	8002a18 <decodeFrame>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <processPingRx+0x2c>
            reportEvent(EV_RXCOMPLETE);
 8003d64:	200d      	movs	r0, #13
 8003d66:	f7fe fd3f 	bl	80027e8 <reportEvent>
            return;
 8003d6a:	e001      	b.n	8003d70 <processPingRx+0x30>
        }
    }
    // Pick next ping slot
    engineUpdate();
 8003d6c:	f000 fa2a 	bl	80041c4 <engineUpdate>
}
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000280 	.word	0x20000280

08003d7c <processDnData>:


static bit_t processDnData (void) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8003d80:	4b76      	ldr	r3, [pc, #472]	; (8003f5c <processDnData+0x1e0>)
 8003d82:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <processDnData+0x16>
 8003d8e:	f7fd fb83 	bl	8001498 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8003d92:	4b72      	ldr	r3, [pc, #456]	; (8003f5c <processDnData+0x1e0>)
 8003d94:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f040 80ce 	bne.w	8003f3a <processDnData+0x1be>
      norx:
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <processDnData+0x28>
        return 1;
    }
    if( !decodeFrame() ) {
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto norx;
 8003da2:	bf00      	nop
        if( LMIC.txCnt != 0 ) {
 8003da4:	4b6d      	ldr	r3, [pc, #436]	; (8003f5c <processDnData+0x1e0>)
 8003da6:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d038      	beq.n	8003e20 <processDnData+0xa4>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
 8003dae:	4b6b      	ldr	r3, [pc, #428]	; (8003f5c <processDnData+0x1e0>)
 8003db0:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003db4:	2b07      	cmp	r3, #7
 8003db6:	d82e      	bhi.n	8003e16 <processDnData+0x9a>
                LMIC.txCnt += 1;
 8003db8:	4b68      	ldr	r3, [pc, #416]	; (8003f5c <processDnData+0x1e0>)
 8003dba:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	4b66      	ldr	r3, [pc, #408]	; (8003f5c <processDnData+0x1e0>)
 8003dc4:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]), KEEP_TXPOW);
 8003dc8:	4b64      	ldr	r3, [pc, #400]	; (8003f5c <processDnData+0x1e0>)
 8003dca:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8003dce:	4b63      	ldr	r3, [pc, #396]	; (8003f5c <processDnData+0x1e0>)
 8003dd0:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4b62      	ldr	r3, [pc, #392]	; (8003f60 <processDnData+0x1e4>)
 8003dd8:	5c5b      	ldrb	r3, [r3, r1]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f7fd fc4f 	bl	8001680 <lowerDR>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003de8:	4619      	mov	r1, r3
 8003dea:	2002      	movs	r0, #2
 8003dec:	f7fe f9ae 	bl	800214c <setDrTxpow>
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 8003df0:	4b5a      	ldr	r3, [pc, #360]	; (8003f5c <processDnData+0x1e0>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2103      	movs	r1, #3
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe f966 	bl	80020c8 <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
 8003dfc:	4b57      	ldr	r3, [pc, #348]	; (8003f5c <processDnData+0x1e0>)
 8003dfe:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	4b54      	ldr	r3, [pc, #336]	; (8003f5c <processDnData+0x1e0>)
 8003e0a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
                engineUpdate();
 8003e0e:	f000 f9d9 	bl	80041c4 <engineUpdate>
                return 1;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e09f      	b.n	8003f56 <processDnData+0x1da>
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 8003e16:	4b51      	ldr	r3, [pc, #324]	; (8003f5c <processDnData+0x1e0>)
 8003e18:	2260      	movs	r2, #96	; 0x60
 8003e1a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
 8003e1e:	e003      	b.n	8003e28 <processDnData+0xac>
            LMIC.txrxFlags = TXRX_NOPORT;
 8003e20:	4b4e      	ldr	r3, [pc, #312]	; (8003f5c <processDnData+0x1e0>)
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8003e28:	4b4c      	ldr	r3, [pc, #304]	; (8003f5c <processDnData+0x1e0>)
 8003e2a:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 8003e2e:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8003e32:	d009      	beq.n	8003e48 <processDnData+0xcc>
            LMIC.adrAckReq += 1;
 8003e34:	4b49      	ldr	r3, [pc, #292]	; (8003f5c <processDnData+0x1e0>)
 8003e36:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	b25a      	sxtb	r2, r3
 8003e42:	4b46      	ldr	r3, [pc, #280]	; (8003f5c <processDnData+0x1e0>)
 8003e44:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        LMIC.dataBeg = LMIC.dataLen = 0;
 8003e48:	4b44      	ldr	r3, [pc, #272]	; (8003f5c <processDnData+0x1e0>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8003e50:	4b42      	ldr	r3, [pc, #264]	; (8003f5c <processDnData+0x1e0>)
 8003e52:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
 8003e56:	4b41      	ldr	r3, [pc, #260]	; (8003f5c <processDnData+0x1e0>)
 8003e58:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 8003e5c:	e000      	b.n	8003e60 <processDnData+0xe4>
    }
    goto txcomplete;
 8003e5e:	bf00      	nop
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
 8003e60:	4b3e      	ldr	r3, [pc, #248]	; (8003f5c <processDnData+0x1e0>)
 8003e62:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003e66:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	4b3b      	ldr	r3, [pc, #236]	; (8003f5c <processDnData+0x1e0>)
 8003e6e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
 8003e72:	4b3a      	ldr	r3, [pc, #232]	; (8003f5c <processDnData+0x1e0>)
 8003e74:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d012      	beq.n	8003ea6 <processDnData+0x12a>
 8003e80:	4b36      	ldr	r3, [pc, #216]	; (8003f5c <processDnData+0x1e0>)
 8003e82:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <processDnData+0x12a>
            LMIC.opmode &= ~OP_LINKDEAD;
 8003e8e:	4b33      	ldr	r3, [pc, #204]	; (8003f5c <processDnData+0x1e0>)
 8003e90:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003e94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	4b30      	ldr	r3, [pc, #192]	; (8003f5c <processDnData+0x1e0>)
 8003e9c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            reportEvent(EV_LINK_ALIVE);
 8003ea0:	200f      	movs	r0, #15
 8003ea2:	f7fe fca1 	bl	80027e8 <reportEvent>
        reportEvent(EV_TXCOMPLETE);
 8003ea6:	200a      	movs	r0, #10
 8003ea8:	f7fe fc9e 	bl	80027e8 <reportEvent>
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
 8003eac:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <processDnData+0x1e0>)
 8003eae:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 8003eb2:	2b18      	cmp	r3, #24
 8003eb4:	dd1c      	ble.n	8003ef0 <processDnData+0x174>
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
 8003eb6:	4b29      	ldr	r3, [pc, #164]	; (8003f5c <processDnData+0x1e0>)
 8003eb8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fd fbb1 	bl	8001624 <decDR>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003ec8:	4619      	mov	r1, r3
 8003eca:	2003      	movs	r0, #3
 8003ecc:	f7fe f93e 	bl	800214c <setDrTxpow>
            LMIC.adrAckReq = LINK_CHECK_CONT;
 8003ed0:	4b22      	ldr	r3, [pc, #136]	; (8003f5c <processDnData+0x1e0>)
 8003ed2:	220c      	movs	r2, #12
 8003ed4:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
 8003ed8:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <processDnData+0x1e0>)
 8003eda:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003ede:	f443 5381 	orr.w	r3, r3, #4128	; 0x1020
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <processDnData+0x1e0>)
 8003ee6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            reportEvent(EV_LINK_DEAD);
 8003eea:	200e      	movs	r0, #14
 8003eec:	f7fe fc7c 	bl	80027e8 <reportEvent>
        if( LMIC.bcninfoTries > 0 ) {
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <processDnData+0x1e0>)
 8003ef2:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01d      	beq.n	8003f36 <processDnData+0x1ba>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8003efa:	4b18      	ldr	r3, [pc, #96]	; (8003f5c <processDnData+0x1e0>)
 8003efc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d007      	beq.n	8003f18 <processDnData+0x19c>
                reportEvent(EV_BEACON_FOUND);
 8003f08:	2002      	movs	r0, #2
 8003f0a:	f7fe fc6d 	bl	80027e8 <reportEvent>
                LMIC.bcninfoTries = 0;
 8003f0e:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <processDnData+0x1e0>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8003f16:	e00e      	b.n	8003f36 <processDnData+0x1ba>
            else if( --LMIC.bcninfoTries == 0 ) {
 8003f18:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <processDnData+0x1e0>)
 8003f1a:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <processDnData+0x1e0>)
 8003f24:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8003f28:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <processDnData+0x1e0>)
 8003f2a:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <processDnData+0x1ba>
                startScan();   // NWK did not answer - try scan
 8003f32:	f7ff fe21 	bl	8003b78 <startScan>
        return 1;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e00d      	b.n	8003f56 <processDnData+0x1da>
    if( !decodeFrame() ) {
 8003f3a:	f7fe fd6d 	bl	8002a18 <decodeFrame>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d18c      	bne.n	8003e5e <processDnData+0xe2>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <processDnData+0x1e0>)
 8003f46:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f43f af27 	beq.w	8003da2 <processDnData+0x26>
            return 0;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000280 	.word	0x20000280
 8003f60:	0800c6d8 	.word	0x0800c6d8

08003f64 <processBeacon>:


static void processBeacon (xref2osjob_t osjob) {
 8003f64:	b590      	push	{r4, r7, lr}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
 8003f6c:	4b81      	ldr	r3, [pc, #516]	; (8004174 <processBeacon+0x210>)
 8003f6e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003f72:	60fb      	str	r3, [r7, #12]
    u1_t flags = LMIC.bcninfo.flags;
 8003f74:	4b7f      	ldr	r3, [pc, #508]	; (8004174 <processBeacon+0x210>)
 8003f76:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003f7a:	72fb      	strb	r3, [r7, #11]
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8003f7c:	4b7d      	ldr	r3, [pc, #500]	; (8004174 <processBeacon+0x210>)
 8003f7e:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 8087 	beq.w	8004096 <processBeacon+0x132>
 8003f88:	f7fe fcb2 	bl	80028f0 <decodeBeacon>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f340 8081 	ble.w	8004096 <processBeacon+0x132>
        ev = EV_BEACON_TRACKED;
 8003f94:	2304      	movs	r3, #4
 8003f96:	75fb      	strb	r3, [r7, #23]
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
 8003f98:	7afb      	ldrb	r3, [r7, #11]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d104      	bne.n	8003fac <processBeacon+0x48>
            // We don't have a previous beacon to calc some drift - assume
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	200d      	movs	r0, #13
 8003fa6:	f7fd fedd 	bl	8001d64 <calcBcnRxWindowFromMillis>
            goto rev;
 8003faa:	e0d2      	b.n	8004152 <processBeacon+0x1ee>
        }
        // We have a previous BEACON to calculate some drift
        s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	4b70      	ldr	r3, [pc, #448]	; (8004174 <processBeacon+0x210>)
 8003fb2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	82bb      	strh	r3, [r7, #20]
        if( LMIC.missedBcns > 0 ) {
 8003fc4:	4b6b      	ldr	r3, [pc, #428]	; (8004174 <processBeacon+0x210>)
 8003fc6:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d013      	beq.n	8003ff6 <processBeacon+0x92>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
 8003fce:	4b69      	ldr	r3, [pc, #420]	; (8004174 <processBeacon+0x210>)
 8003fd0:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003fda:	4966      	ldr	r1, [pc, #408]	; (8004174 <processBeacon+0x210>)
 8003fdc:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	; 0xb4
 8003fe0:	1a59      	subs	r1, r3, r1
 8003fe2:	4b64      	ldr	r3, [pc, #400]	; (8004174 <processBeacon+0x210>)
 8003fe4:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8003fe8:	3301      	adds	r3, #1
 8003fea:	fb91 f3f3 	sdiv	r3, r1, r3
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	82bb      	strh	r3, [r7, #20]
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
 8003ff6:	4b5f      	ldr	r3, [pc, #380]	; (8004174 <processBeacon+0x210>)
 8003ff8:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d127      	bne.n	8004054 <processBeacon+0xf0>
            s2_t diff = LMIC.drift - drift;
 8004004:	4b5b      	ldr	r3, [pc, #364]	; (8004174 <processBeacon+0x210>)
 8004006:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 800400a:	b29a      	uxth	r2, r3
 800400c:	8abb      	ldrh	r3, [r7, #20]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	b29b      	uxth	r3, r3
 8004012:	827b      	strh	r3, [r7, #18]
            if( diff < 0 ) diff = -diff;
 8004014:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004018:	2b00      	cmp	r3, #0
 800401a:	da03      	bge.n	8004024 <processBeacon+0xc0>
 800401c:	8a7b      	ldrh	r3, [r7, #18]
 800401e:	425b      	negs	r3, r3
 8004020:	b29b      	uxth	r3, r3
 8004022:	827b      	strh	r3, [r7, #18]
            LMIC.lastDriftDiff = diff;
 8004024:	4a53      	ldr	r2, [pc, #332]	; (8004174 <processBeacon+0x210>)
 8004026:	8a7b      	ldrh	r3, [r7, #18]
 8004028:	f8a2 30b6 	strh.w	r3, [r2, #182]	; 0xb6
            if( LMIC.maxDriftDiff < diff )
 800402c:	4b51      	ldr	r3, [pc, #324]	; (8004174 <processBeacon+0x210>)
 800402e:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8004032:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004036:	429a      	cmp	r2, r3
 8004038:	dd03      	ble.n	8004042 <processBeacon+0xde>
                LMIC.maxDriftDiff = diff;
 800403a:	4a4e      	ldr	r2, [pc, #312]	; (8004174 <processBeacon+0x210>)
 800403c:	8a7b      	ldrh	r3, [r7, #18]
 800403e:	f8a2 30b8 	strh.w	r3, [r2, #184]	; 0xb8
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 8004042:	4b4c      	ldr	r3, [pc, #304]	; (8004174 <processBeacon+0x210>)
 8004044:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8004048:	f023 0308 	bic.w	r3, r3, #8
 800404c:	b2da      	uxtb	r2, r3
 800404e:	4b49      	ldr	r3, [pc, #292]	; (8004174 <processBeacon+0x210>)
 8004050:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
        }
        LMIC.drift = drift;
 8004054:	4a47      	ldr	r2, [pc, #284]	; (8004174 <processBeacon+0x210>)
 8004056:	8abb      	ldrh	r3, [r7, #20]
 8004058:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
 800405c:	4b45      	ldr	r3, [pc, #276]	; (8004174 <processBeacon+0x210>)
 800405e:	2200      	movs	r2, #0
 8004060:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8004064:	4b43      	ldr	r3, [pc, #268]	; (8004174 <processBeacon+0x210>)
 8004066:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
 800406a:	4b42      	ldr	r3, [pc, #264]	; (8004174 <processBeacon+0x210>)
 800406c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 8004070:	4b40      	ldr	r3, [pc, #256]	; (8004174 <processBeacon+0x210>)
 8004072:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8004076:	f023 0304 	bic.w	r3, r3, #4
 800407a:	b2da      	uxtb	r2, r3
 800407c:	4b3d      	ldr	r3, [pc, #244]	; (8004174 <processBeacon+0x210>)
 800407e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
 8004082:	4b3c      	ldr	r3, [pc, #240]	; (8004174 <processBeacon+0x210>)
 8004084:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d14c      	bne.n	800412a <processBeacon+0x1c6>
 8004090:	f7fd fa02 	bl	8001498 <hal_failed>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004094:	e049      	b.n	800412a <processBeacon+0x1c6>
    } else {
        ev = EV_BEACON_MISSED;
 8004096:	2303      	movs	r3, #3
 8004098:	75fb      	strb	r3, [r7, #23]
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 800409a:	4b36      	ldr	r3, [pc, #216]	; (8004174 <processBeacon+0x210>)
 800409c:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 80040a0:	4b34      	ldr	r3, [pc, #208]	; (8004174 <processBeacon+0x210>)
 80040a2:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 80040a6:	f5c3 137a 	rsb	r3, r3, #4096000	; 0x3e8000
 80040aa:	4413      	add	r3, r2
 80040ac:	4a31      	ldr	r2, [pc, #196]	; (8004174 <processBeacon+0x210>)
 80040ae:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
        LMIC.bcninfo.time   += BCN_INTV_sec;
 80040b2:	4b30      	ldr	r3, [pc, #192]	; (8004174 <processBeacon+0x210>)
 80040b4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80040b8:	3380      	adds	r3, #128	; 0x80
 80040ba:	4a2e      	ldr	r2, [pc, #184]	; (8004174 <processBeacon+0x210>)
 80040bc:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
        LMIC.missedBcns++;
 80040c0:	4b2c      	ldr	r3, [pc, #176]	; (8004174 <processBeacon+0x210>)
 80040c2:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80040c6:	3301      	adds	r3, #1
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <processBeacon+0x210>)
 80040cc:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 80040d0:	4b28      	ldr	r3, [pc, #160]	; (8004174 <processBeacon+0x210>)
 80040d2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80040d6:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80040da:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80040de:	2104      	movs	r1, #4
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fd fff1 	bl	80020c8 <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
 80040e6:	4b23      	ldr	r3, [pc, #140]	; (8004174 <processBeacon+0x210>)
 80040e8:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80040ec:	2b14      	cmp	r3, #20
 80040ee:	d908      	bls.n	8004102 <processBeacon+0x19e>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 80040f0:	4b20      	ldr	r3, [pc, #128]	; (8004174 <processBeacon+0x210>)
 80040f2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80040f6:	f043 0320 	orr.w	r3, r3, #32
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <processBeacon+0x210>)
 80040fe:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
 8004102:	4b1c      	ldr	r3, [pc, #112]	; (8004174 <processBeacon+0x210>)
 8004104:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8004108:	2b64      	cmp	r3, #100	; 0x64
 800410a:	d90f      	bls.n	800412c <processBeacon+0x1c8>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
 800410c:	4b19      	ldr	r3, [pc, #100]	; (8004174 <processBeacon+0x210>)
 800410e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004112:	f423 63c4 	bic.w	r3, r3, #1568	; 0x620
 8004116:	f023 0302 	bic.w	r3, r3, #2
 800411a:	b29a      	uxth	r2, r3
 800411c:	4b15      	ldr	r3, [pc, #84]	; (8004174 <processBeacon+0x210>)
 800411e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            reportEvent(EV_LOST_TSYNC);
 8004122:	200b      	movs	r0, #11
 8004124:	f7fe fb60 	bl	80027e8 <reportEvent>
            return;
 8004128:	e021      	b.n	800416e <processBeacon+0x20a>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 800412a:	bf00      	nop
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
 800412c:	4b11      	ldr	r3, [pc, #68]	; (8004174 <processBeacon+0x210>)
 800412e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8004132:	f503 147a 	add.w	r4, r3, #4096000	; 0x3e8000
 8004136:	2103      	movs	r1, #3
 8004138:	2000      	movs	r0, #0
 800413a:	f7fd fdbf 	bl	8001cbc <calcRxWindow>
 800413e:	4603      	mov	r3, r0
 8004140:	1ae3      	subs	r3, r4, r3
 8004142:	4a0c      	ldr	r2, [pc, #48]	; (8004174 <processBeacon+0x210>)
 8004144:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
    LMIC.bcnRxsyms = LMIC.rxsyms;    
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <processBeacon+0x210>)
 800414a:	7c1a      	ldrb	r2, [r3, #16]
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <processBeacon+0x210>)
 800414e:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <processBeacon+0x210>)
 8004154:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <processBeacon+0x202>
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 8004160:	4805      	ldr	r0, [pc, #20]	; (8004178 <processBeacon+0x214>)
 8004162:	f7fd fe7d 	bl	8001e60 <rxschedInit>
    reportEvent(ev);
 8004166:	7dfb      	ldrb	r3, [r7, #23]
 8004168:	4618      	mov	r0, r3
 800416a:	f7fe fb3d 	bl	80027e8 <reportEvent>
}
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	bd90      	pop	{r4, r7, pc}
 8004174:	20000280 	.word	0x20000280
 8004178:	200003b4 	.word	0x200003b4

0800417c <startRxBcn>:


static void startRxBcn (xref2osjob_t osjob) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8004184:	4b04      	ldr	r3, [pc, #16]	; (8004198 <startRxBcn+0x1c>)
 8004186:	4a05      	ldr	r2, [pc, #20]	; (800419c <startRxBcn+0x20>)
 8004188:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 800418a:	2002      	movs	r0, #2
 800418c:	f001 fc18 	bl	80059c0 <os_radio>
}
 8004190:	bf00      	nop
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000280 	.word	0x20000280
 800419c:	08003f65 	.word	0x08003f65

080041a0 <startRxPing>:


static void startRxPing (xref2osjob_t osjob) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
 80041a8:	4b04      	ldr	r3, [pc, #16]	; (80041bc <startRxPing+0x1c>)
 80041aa:	4a05      	ldr	r2, [pc, #20]	; (80041c0 <startRxPing+0x20>)
 80041ac:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 80041ae:	2002      	movs	r0, #2
 80041b0:	f001 fc06 	bl	80059c0 <os_radio>
}
 80041b4:	bf00      	nop
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000280 	.word	0x20000280
 80041c0:	08003d41 	.word	0x08003d41

080041c4 <engineUpdate>:


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
 80041ca:	4b90      	ldr	r3, [pc, #576]	; (800440c <engineUpdate+0x248>)
 80041cc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80041d0:	f003 03c1 	and.w	r3, r3, #193	; 0xc1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f040 81ab 	bne.w	8004530 <engineUpdate+0x36c>
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
 80041da:	4b8c      	ldr	r3, [pc, #560]	; (800440c <engineUpdate+0x248>)
 80041dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d109      	bne.n	80041f8 <engineUpdate+0x34>
 80041e4:	4b89      	ldr	r3, [pc, #548]	; (800440c <engineUpdate+0x248>)
 80041e6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <engineUpdate+0x34>
        LMIC_startJoining();
 80041f2:	f7ff fd5b 	bl	8003cac <LMIC_startJoining>
        return;
 80041f6:	e19e      	b.n	8004536 <engineUpdate+0x372>
    }

    ostime_t now    = os_getTime();
 80041f8:	f000 fdc0 	bl	8004d7c <os_getTime>
 80041fc:	60b8      	str	r0, [r7, #8]
    ostime_t rxtime = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]
    ostime_t txbeg  = 0;
 8004202:	2300      	movs	r3, #0
 8004204:	613b      	str	r3, [r7, #16]

    if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8004206:	4b81      	ldr	r3, [pc, #516]	; (800440c <engineUpdate+0x248>)
 8004208:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00f      	beq.n	8004234 <engineUpdate+0x70>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800421a:	4b7c      	ldr	r3, [pc, #496]	; (800440c <engineUpdate+0x248>)
 800421c:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	dd01      	ble.n	800422a <engineUpdate+0x66>
 8004226:	f7fd f937 	bl	8001498 <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 800422a:	4b78      	ldr	r3, [pc, #480]	; (800440c <engineUpdate+0x248>)
 800422c:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8004230:	3b40      	subs	r3, #64	; 0x40
 8004232:	617b      	str	r3, [r7, #20]
    }

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
 8004234:	4b75      	ldr	r3, [pc, #468]	; (800440c <engineUpdate+0x248>)
 8004236:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800423a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80f2 	beq.w	8004428 <engineUpdate+0x264>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
 8004244:	4b71      	ldr	r3, [pc, #452]	; (800440c <engineUpdate+0x248>)
 8004246:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800424a:	f003 0324 	and.w	r3, r3, #36	; 0x24
 800424e:	2b00      	cmp	r3, #0
 8004250:	bf14      	ite	ne
 8004252:	2301      	movne	r3, #1
 8004254:	2300      	moveq	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	71fb      	strb	r3, [r7, #7]
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
 800425a:	4b6c      	ldr	r3, [pc, #432]	; (800440c <engineUpdate+0x248>)
 800425c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004264:	2b00      	cmp	r3, #0
 8004266:	d012      	beq.n	800428e <engineUpdate+0xca>
            txbeg = LMIC.txend = nextTx(now);
 8004268:	68b8      	ldr	r0, [r7, #8]
 800426a:	f7fe f953 	bl	8002514 <nextTx>
 800426e:	4602      	mov	r2, r0
 8004270:	4b66      	ldr	r3, [pc, #408]	; (800440c <engineUpdate+0x248>)
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	4b65      	ldr	r3, [pc, #404]	; (800440c <engineUpdate+0x248>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	613b      	str	r3, [r7, #16]
            LMIC.opmode &= ~OP_NEXTCHNL;
 800427a:	4b64      	ldr	r3, [pc, #400]	; (800440c <engineUpdate+0x248>)
 800427c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004284:	b29a      	uxth	r2, r3
 8004286:	4b61      	ldr	r3, [pc, #388]	; (800440c <engineUpdate+0x248>)
 8004288:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800428c:	e002      	b.n	8004294 <engineUpdate+0xd0>
        } else {
            txbeg = LMIC.txend;
 800428e:	4b5f      	ldr	r3, [pc, #380]	; (800440c <engineUpdate+0x248>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	613b      	str	r3, [r7, #16]
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
 8004294:	4b5d      	ldr	r3, [pc, #372]	; (800440c <engineUpdate+0x248>)
 8004296:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <engineUpdate+0xe8>
 800429e:	4b5b      	ldr	r3, [pc, #364]	; (800440c <engineUpdate+0x248>)
 80042a0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <engineUpdate+0xfe>
 80042ac:	4b57      	ldr	r3, [pc, #348]	; (800440c <engineUpdate+0x248>)
 80042ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	da03      	bge.n	80042c2 <engineUpdate+0xfe>
            txbeg = LMIC.globalDutyAvail;
 80042ba:	4b54      	ldr	r3, [pc, #336]	; (800440c <engineUpdate+0x248>)
 80042bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042c0:	613b      	str	r3, [r7, #16]
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 80042c2:	4b52      	ldr	r3, [pc, #328]	; (800440c <engineUpdate+0x248>)
 80042c4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d017      	beq.n	8004300 <engineUpdate+0x13c>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <engineUpdate+0x116>
 80042d6:	4a4e      	ldr	r2, [pc, #312]	; (8004410 <engineUpdate+0x24c>)
 80042d8:	e000      	b.n	80042dc <engineUpdate+0x118>
 80042da:	4a4e      	ldr	r2, [pc, #312]	; (8004414 <engineUpdate+0x250>)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	441a      	add	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	1ad3      	subs	r3, r2, r3
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	dd0b      	ble.n	8004300 <engineUpdate+0x13c>
            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80042ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80042f2:	2110      	movs	r1, #16
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fd fee7 	bl	80020c8 <txDelay>
            txbeg = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
            goto checkrx;
 80042fe:	e09b      	b.n	8004438 <engineUpdate+0x274>
        }
        // Earliest possible time vs overhead to setup radio
        if( txbeg - (now + TX_RAMPUP) < 0 ) {
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	3340      	adds	r3, #64	; 0x40
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	da70      	bge.n	80043ee <engineUpdate+0x22a>
            // We could send right now!
        txbeg = now;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	613b      	str	r3, [r7, #16]
            dr_t txdr = (dr_t)LMIC.datarate;
 8004310:	4b3e      	ldr	r3, [pc, #248]	; (800440c <engineUpdate+0x248>)
 8004312:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004316:	73fb      	strb	r3, [r7, #15]
            if( jacc ) {
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01d      	beq.n	800435a <engineUpdate+0x196>
                u1_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 800431e:	4b3b      	ldr	r3, [pc, #236]	; (800440c <engineUpdate+0x248>)
 8004320:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00c      	beq.n	8004346 <engineUpdate+0x182>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
 800432c:	4b37      	ldr	r3, [pc, #220]	; (800440c <engineUpdate+0x248>)
 800432e:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	4611      	mov	r1, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f7fd f9a2 	bl	8001680 <lowerDR>
 800433c:	4603      	mov	r3, r0
 800433e:	73fb      	strb	r3, [r7, #15]
                    ftype = HDR_FTYPE_REJOIN;
 8004340:	23c0      	movs	r3, #192	; 0xc0
 8004342:	73bb      	strb	r3, [r7, #14]
 8004344:	e001      	b.n	800434a <engineUpdate+0x186>
                } else {
                    ftype = HDR_FTYPE_JREQ;
 8004346:	2300      	movs	r3, #0
 8004348:	73bb      	strb	r3, [r7, #14]
                }
                buildJoinRequest(ftype);
 800434a:	7bbb      	ldrb	r3, [r7, #14]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff fc6b 	bl	8003c28 <buildJoinRequest>
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
 8004352:	4b2e      	ldr	r3, [pc, #184]	; (800440c <engineUpdate+0x248>)
 8004354:	4a30      	ldr	r2, [pc, #192]	; (8004418 <engineUpdate+0x254>)
 8004356:	61da      	str	r2, [r3, #28]
 8004358:	e01d      	b.n	8004396 <engineUpdate+0x1d2>
            } else {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
 800435a:	4b2c      	ldr	r3, [pc, #176]	; (800440c <engineUpdate+0x248>)
 800435c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004360:	f113 0f81 	cmn.w	r3, #129	; 0x81
 8004364:	d907      	bls.n	8004376 <engineUpdate+0x1b2>
                                        e_.eui    = MAIN::CDEV->getEui(),
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
 8004366:	bf00      	nop
 8004368:	e000      	b.n	800436c <engineUpdate+0x1a8>
                    EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
                                       e_.eui    = MAIN::CDEV->getEui(),
                                       e_.info2  = LMIC.seqnoUp));
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
 800436a:	bf00      	nop
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 800436c:	492b      	ldr	r1, [pc, #172]	; (800441c <engineUpdate+0x258>)
 800436e:	482c      	ldr	r0, [pc, #176]	; (8004420 <engineUpdate+0x25c>)
 8004370:	f000 fd48 	bl	8004e04 <os_setCallback>
                    return;
 8004374:	e0df      	b.n	8004536 <engineUpdate+0x372>
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
 8004376:	4b25      	ldr	r3, [pc, #148]	; (800440c <engineUpdate+0x248>)
 8004378:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 800437c:	2b00      	cmp	r3, #0
 800437e:	d105      	bne.n	800438c <engineUpdate+0x1c8>
 8004380:	4b22      	ldr	r3, [pc, #136]	; (800440c <engineUpdate+0x248>)
 8004382:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d0ee      	beq.n	800436a <engineUpdate+0x1a6>
                }
                buildDataFrame();
 800438c:	f7ff f9ba 	bl	8003704 <buildDataFrame>
                LMIC.osjob.func = FUNC_ADDR(updataDone);
 8004390:	4b1e      	ldr	r3, [pc, #120]	; (800440c <engineUpdate+0x248>)
 8004392:	4a24      	ldr	r2, [pc, #144]	; (8004424 <engineUpdate+0x260>)
 8004394:	61da      	str	r2, [r3, #28]
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	4618      	mov	r0, r3
 800439a:	f7fd f91d 	bl	80015d8 <updr2rps>
 800439e:	4603      	mov	r3, r0
 80043a0:	461a      	mov	r2, r3
 80043a2:	4b1a      	ldr	r3, [pc, #104]	; (800440c <engineUpdate+0x248>)
 80043a4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f7fd f8af 	bl	800150e <setCr>
 80043b0:	4603      	mov	r3, r0
 80043b2:	461a      	mov	r2, r3
 80043b4:	4b15      	ldr	r3, [pc, #84]	; (800440c <engineUpdate+0x248>)
 80043b6:	81da      	strh	r2, [r3, #14]
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 80043b8:	4a14      	ldr	r2, [pc, #80]	; (800440c <engineUpdate+0x248>)
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	7453      	strb	r3, [r2, #17]
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
 80043be:	4b13      	ldr	r3, [pc, #76]	; (800440c <engineUpdate+0x248>)
 80043c0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80043c4:	b21b      	sxth	r3, r3
 80043c6:	f423 6319 	bic.w	r3, r3, #2448	; 0x990
 80043ca:	b21b      	sxth	r3, r3
 80043cc:	f443 6308 	orr.w	r3, r3, #2176	; 0x880
 80043d0:	b21b      	sxth	r3, r3
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	4b0d      	ldr	r3, [pc, #52]	; (800440c <engineUpdate+0x248>)
 80043d6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            updateTx(txbeg);
 80043da:	6938      	ldr	r0, [r7, #16]
 80043dc:	f7fe f850 	bl	8002480 <updateTx>
            reportEvent(EV_TXSTART);
 80043e0:	2011      	movs	r0, #17
 80043e2:	f7fe fa01 	bl	80027e8 <reportEvent>
            os_radio(RADIO_TX);
 80043e6:	2001      	movs	r0, #1
 80043e8:	f001 faea 	bl	80059c0 <os_radio>
            return;
 80043ec:	e0a3      	b.n	8004536 <engineUpdate+0x372>
        }
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 80043ee:	4b07      	ldr	r3, [pc, #28]	; (800440c <engineUpdate+0x248>)
 80043f0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 808c 	beq.w	8004516 <engineUpdate+0x352>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d119      	bne.n	8004438 <engineUpdate+0x274>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	3301      	adds	r3, #1
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	e015      	b.n	8004438 <engineUpdate+0x274>
 800440c:	20000280 	.word	0x20000280
 8004410:	00046500 	.word	0x00046500
 8004414:	0002ee00 	.word	0x0002ee00
 8004418:	080035c5 	.word	0x080035c5
 800441c:	08002807 	.word	0x08002807
 8004420:	20000294 	.word	0x20000294
 8004424:	080036d5 	.word	0x080036d5
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8004428:	4b44      	ldr	r3, [pc, #272]	; (800453c <engineUpdate+0x378>)
 800442a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d07e      	beq.n	8004534 <engineUpdate+0x370>
            return;
    }

    // Are we pingable?
  checkrx:
 8004436:	bf00      	nop
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
 8004438:	4b40      	ldr	r3, [pc, #256]	; (800453c <engineUpdate+0x378>)
 800443a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800443e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004442:	2b00      	cmp	r3, #0
 8004444:	d041      	beq.n	80044ca <engineUpdate+0x306>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	3340      	adds	r3, #64	; 0x40
 800444a:	4619      	mov	r1, r3
 800444c:	483c      	ldr	r0, [pc, #240]	; (8004540 <engineUpdate+0x37c>)
 800444e:	f7fd fdaf 	bl	8001fb0 <rxschedNext>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d038      	beq.n	80044ca <engineUpdate+0x306>
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d006      	beq.n	800446c <engineUpdate+0x2a8>
 800445e:	4b37      	ldr	r3, [pc, #220]	; (800453c <engineUpdate+0x378>)
 8004460:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	db56      	blt.n	800451a <engineUpdate+0x356>
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
 800446c:	4b33      	ldr	r3, [pc, #204]	; (800453c <engineUpdate+0x378>)
 800446e:	f893 2137 	ldrb.w	r2, [r3, #311]	; 0x137
 8004472:	4b32      	ldr	r3, [pc, #200]	; (800453c <engineUpdate+0x378>)
 8004474:	741a      	strb	r2, [r3, #16]
            LMIC.rxtime  = LMIC.ping.rxtime;
 8004476:	4b31      	ldr	r3, [pc, #196]	; (800453c <engineUpdate+0x378>)
 8004478:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800447c:	4a2f      	ldr	r2, [pc, #188]	; (800453c <engineUpdate+0x378>)
 800447e:	6053      	str	r3, [r2, #4]
            LMIC.freq    = LMIC.ping.freq;
 8004480:	4b2e      	ldr	r3, [pc, #184]	; (800453c <engineUpdate+0x378>)
 8004482:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004486:	4a2d      	ldr	r2, [pc, #180]	; (800453c <engineUpdate+0x378>)
 8004488:	6093      	str	r3, [r2, #8]
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
 800448a:	4b2c      	ldr	r3, [pc, #176]	; (800453c <engineUpdate+0x378>)
 800448c:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8004490:	4618      	mov	r0, r3
 8004492:	f7fd f8b3 	bl	80015fc <dndr2rps>
 8004496:	4603      	mov	r3, r0
 8004498:	461a      	mov	r2, r3
 800449a:	4b28      	ldr	r3, [pc, #160]	; (800453c <engineUpdate+0x378>)
 800449c:	81da      	strh	r2, [r3, #14]
            LMIC.dataLen = 0;
 800449e:	4b27      	ldr	r3, [pc, #156]	; (800453c <engineUpdate+0x378>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
 80044a6:	4b25      	ldr	r3, [pc, #148]	; (800453c <engineUpdate+0x378>)
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	3340      	adds	r3, #64	; 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	da01      	bge.n	80044b8 <engineUpdate+0x2f4>
 80044b4:	f7fc fff0 	bl	8001498 <hal_failed>
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
 80044b8:	4b20      	ldr	r3, [pc, #128]	; (800453c <engineUpdate+0x378>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	3b40      	subs	r3, #64	; 0x40
 80044be:	4a21      	ldr	r2, [pc, #132]	; (8004544 <engineUpdate+0x380>)
 80044c0:	4619      	mov	r1, r3
 80044c2:	4821      	ldr	r0, [pc, #132]	; (8004548 <engineUpdate+0x384>)
 80044c4:	f000 fcc4 	bl	8004e50 <os_setTimedCallback>
            return;
 80044c8:	e035      	b.n	8004536 <engineUpdate+0x372>
        }
        // no - just wait for the beacon
    }

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <engineUpdate+0x316>
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	db21      	blt.n	800451e <engineUpdate+0x35a>
        goto txdelay;

    setBcnRxParams();
 80044da:	f7fe f8b7 	bl	800264c <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
 80044de:	4b17      	ldr	r3, [pc, #92]	; (800453c <engineUpdate+0x378>)
 80044e0:	f893 2189 	ldrb.w	r2, [r3, #393]	; 0x189
 80044e4:	4b15      	ldr	r3, [pc, #84]	; (800453c <engineUpdate+0x378>)
 80044e6:	741a      	strb	r2, [r3, #16]
    LMIC.rxtime = LMIC.bcnRxtime;
 80044e8:	4b14      	ldr	r3, [pc, #80]	; (800453c <engineUpdate+0x378>)
 80044ea:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80044ee:	4a13      	ldr	r2, [pc, #76]	; (800453c <engineUpdate+0x378>)
 80044f0:	6053      	str	r3, [r2, #4]
    if( now - rxtime >= 0 ) {
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	db06      	blt.n	800450a <engineUpdate+0x346>
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
 80044fc:	4b0f      	ldr	r3, [pc, #60]	; (800453c <engineUpdate+0x378>)
 80044fe:	4a13      	ldr	r2, [pc, #76]	; (800454c <engineUpdate+0x388>)
 8004500:	61da      	str	r2, [r3, #28]
        os_radio(RADIO_RX);
 8004502:	2002      	movs	r0, #2
 8004504:	f001 fa5c 	bl	80059c0 <os_radio>
        return;
 8004508:	e015      	b.n	8004536 <engineUpdate+0x372>
    }
    os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 800450a:	4a11      	ldr	r2, [pc, #68]	; (8004550 <engineUpdate+0x38c>)
 800450c:	6979      	ldr	r1, [r7, #20]
 800450e:	480e      	ldr	r0, [pc, #56]	; (8004548 <engineUpdate+0x384>)
 8004510:	f000 fc9e 	bl	8004e50 <os_setTimedCallback>
    return;
 8004514:	e00f      	b.n	8004536 <engineUpdate+0x372>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
 8004516:	bf00      	nop
 8004518:	e002      	b.n	8004520 <engineUpdate+0x35c>
                goto txdelay;
 800451a:	bf00      	nop
 800451c:	e000      	b.n	8004520 <engineUpdate+0x35c>
        goto txdelay;
 800451e:	bf00      	nop
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	3b40      	subs	r3, #64	; 0x40
 8004524:	4a0b      	ldr	r2, [pc, #44]	; (8004554 <engineUpdate+0x390>)
 8004526:	4619      	mov	r1, r3
 8004528:	4807      	ldr	r0, [pc, #28]	; (8004548 <engineUpdate+0x384>)
 800452a:	f000 fc91 	bl	8004e50 <os_setTimedCallback>
 800452e:	e002      	b.n	8004536 <engineUpdate+0x372>
        return;
 8004530:	bf00      	nop
 8004532:	e000      	b.n	8004536 <engineUpdate+0x372>
            return;
 8004534:	bf00      	nop
}
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	20000280 	.word	0x20000280
 8004540:	200003b4 	.word	0x200003b4
 8004544:	080041a1 	.word	0x080041a1
 8004548:	20000294 	.word	0x20000294
 800454c:	08003f65 	.word	0x08003f65
 8004550:	0800417d 	.word	0x0800417d
 8004554:	080027d5 	.word	0x080027d5

08004558 <LMIC_reset>:
    os_radio(RADIO_RST);
    LMIC.opmode |= OP_SHUTDOWN;
}


void LMIC_reset (void) {
 8004558:	b598      	push	{r3, r4, r7, lr}
 800455a:	af00      	add	r7, sp, #0
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
 800455c:	2000      	movs	r0, #0
 800455e:	f001 fa2f 	bl	80059c0 <os_radio>
    os_clearCallback(&LMIC.osjob);
 8004562:	4821      	ldr	r0, [pc, #132]	; (80045e8 <LMIC_reset+0x90>)
 8004564:	f000 fc30 	bl	8004dc8 <os_clearCallback>

    os_clearMem((xref2u1_t)&LMIC,SIZEOFEXPR(LMIC));
 8004568:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800456c:	2100      	movs	r1, #0
 800456e:	481f      	ldr	r0, [pc, #124]	; (80045ec <LMIC_reset+0x94>)
 8004570:	f006 fdab 	bl	800b0ca <memset>
    LMIC.devaddr      =  0;
 8004574:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <LMIC_reset+0x94>)
 8004576:	2200      	movs	r2, #0
 8004578:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    LMIC.devNonce     =  os_getRndU2();
 800457c:	f001 f924 	bl	80057c8 <radio_rand1>
 8004580:	4603      	mov	r3, r0
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	b21c      	sxth	r4, r3
 8004586:	f001 f91f 	bl	80057c8 <radio_rand1>
 800458a:	4603      	mov	r3, r0
 800458c:	b21b      	sxth	r3, r3
 800458e:	4323      	orrs	r3, r4
 8004590:	b21b      	sxth	r3, r3
 8004592:	b29a      	uxth	r2, r3
 8004594:	4b15      	ldr	r3, [pc, #84]	; (80045ec <LMIC_reset+0x94>)
 8004596:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
    LMIC.opmode       =  OP_NONE;
 800459a:	4b14      	ldr	r3, [pc, #80]	; (80045ec <LMIC_reset+0x94>)
 800459c:	2200      	movs	r2, #0
 800459e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    LMIC.errcr        =  CR_4_5;
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <LMIC_reset+0x94>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    LMIC.adrEnabled   =  FCT_ADREN;
 80045aa:	4b10      	ldr	r3, [pc, #64]	; (80045ec <LMIC_reset+0x94>)
 80045ac:	2280      	movs	r2, #128	; 0x80
 80045ae:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
 80045b2:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <LMIC_reset+0x94>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <LMIC_reset+0x94>)
 80045bc:	4a0c      	ldr	r2, [pc, #48]	; (80045f0 <LMIC_reset+0x98>)
 80045be:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    LMIC.rxDelay      =  DELAY_DNW1;
 80045c2:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <LMIC_reset+0x94>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <LMIC_reset+0x94>)
 80045cc:	4a08      	ldr	r2, [pc, #32]	; (80045f0 <LMIC_reset+0x98>)
 80045ce:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    LMIC.ping.dr      =  DR_PING;   // ditto
 80045d2:	4b06      	ldr	r3, [pc, #24]	; (80045ec <LMIC_reset+0x94>)
 80045d4:	2203      	movs	r2, #3
 80045d6:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    LMIC.ping.intvExp =  0xFF;
 80045da:	4b04      	ldr	r3, [pc, #16]	; (80045ec <LMIC_reset+0x94>)
 80045dc:	22ff      	movs	r2, #255	; 0xff
 80045de:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    DO_DEVDB(LMIC.dn2Dr,        dn2Dr);
    DO_DEVDB(LMIC.dn2Freq,      dn2Freq);
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 80045e2:	bf00      	nop
 80045e4:	bd98      	pop	{r3, r4, r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20000294 	.word	0x20000294
 80045ec:	20000280 	.word	0x20000280
 80045f0:	33d3e608 	.word	0x33d3e608

080045f4 <LMIC_init>:


void LMIC_init (void) {
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
    LMIC.opmode = OP_SHUTDOWN;
 80045f8:	4b04      	ldr	r3, [pc, #16]	; (800460c <LMIC_init+0x18>)
 80045fa:	2240      	movs	r2, #64	; 0x40
 80045fc:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000280 	.word	0x20000280

08004610 <LMIC_setTxData>:
    os_radio(RADIO_RST);
    engineUpdate();
}


void LMIC_setTxData (void) {
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
    LMIC.opmode |= OP_TXDATA;
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <LMIC_setTxData+0x34>)
 8004616:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800461a:	f043 0308 	orr.w	r3, r3, #8
 800461e:	b29a      	uxth	r2, r3
 8004620:	4b08      	ldr	r3, [pc, #32]	; (8004644 <LMIC_setTxData+0x34>)
 8004622:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    if( (LMIC.opmode & OP_JOINING) == 0 )
 8004626:	4b07      	ldr	r3, [pc, #28]	; (8004644 <LMIC_setTxData+0x34>)
 8004628:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d103      	bne.n	800463c <LMIC_setTxData+0x2c>
        LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 8004634:	4b03      	ldr	r3, [pc, #12]	; (8004644 <LMIC_setTxData+0x34>)
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
    engineUpdate();
 800463c:	f7ff fdc2 	bl	80041c4 <engineUpdate>
}
 8004640:	bf00      	nop
 8004642:	bd80      	pop	{r7, pc}
 8004644:	20000280 	.word	0x20000280

08004648 <LMIC_setTxData2>:


//
int LMIC_setTxData2 (u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed) {
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6039      	str	r1, [r7, #0]
 8004650:	4611      	mov	r1, r2
 8004652:	461a      	mov	r2, r3
 8004654:	4603      	mov	r3, r0
 8004656:	71fb      	strb	r3, [r7, #7]
 8004658:	460b      	mov	r3, r1
 800465a:	71bb      	strb	r3, [r7, #6]
 800465c:	4613      	mov	r3, r2
 800465e:	717b      	strb	r3, [r7, #5]
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
 8004660:	79bb      	ldrb	r3, [r7, #6]
 8004662:	2b34      	cmp	r3, #52	; 0x34
 8004664:	d902      	bls.n	800466c <LMIC_setTxData2+0x24>
        return -2;
 8004666:	f06f 0301 	mvn.w	r3, #1
 800466a:	e017      	b.n	800469c <LMIC_setTxData2+0x54>
    if( data != (xref2u1_t)0 )
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <LMIC_setTxData2+0x36>
        os_copyMem(LMIC.pendTxData, data, dlen);
 8004672:	79bb      	ldrb	r3, [r7, #6]
 8004674:	461a      	mov	r2, r3
 8004676:	6839      	ldr	r1, [r7, #0]
 8004678:	480a      	ldr	r0, [pc, #40]	; (80046a4 <LMIC_setTxData2+0x5c>)
 800467a:	f006 fd1b 	bl	800b0b4 <memcpy>
    LMIC.pendTxConf = confirmed;
 800467e:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <LMIC_setTxData2+0x60>)
 8004680:	797b      	ldrb	r3, [r7, #5]
 8004682:	f882 30bb 	strb.w	r3, [r2, #187]	; 0xbb
    LMIC.pendTxPort = port;
 8004686:	4a08      	ldr	r2, [pc, #32]	; (80046a8 <LMIC_setTxData2+0x60>)
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	f882 30ba 	strb.w	r3, [r2, #186]	; 0xba
    LMIC.pendTxLen  = dlen;
 800468e:	4a06      	ldr	r2, [pc, #24]	; (80046a8 <LMIC_setTxData2+0x60>)
 8004690:	79bb      	ldrb	r3, [r7, #6]
 8004692:	f882 30bc 	strb.w	r3, [r2, #188]	; 0xbc
    LMIC_setTxData();
 8004696:	f7ff ffbb 	bl	8004610 <LMIC_setTxData>
    return 0;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	2000033d 	.word	0x2000033d
 80046a8:	20000280 	.word	0x20000280

080046ac <os_getArtEui>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// provide application router ID (8 bytes, LSBF)
void os_getArtEui (u1_t* buf) {
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
    memcpy(buf, APPEUI, 8);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4906      	ldr	r1, [pc, #24]	; (80046d0 <os_getArtEui+0x24>)
 80046b8:	461a      	mov	r2, r3
 80046ba:	460b      	mov	r3, r1
 80046bc:	cb03      	ldmia	r3!, {r0, r1}
 80046be:	6010      	str	r0, [r2, #0]
 80046c0:	6051      	str	r1, [r2, #4]
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	0800c734 	.word	0x0800c734

080046d4 <os_getDevEui>:

// provide device ID (8 bytes, LSBF)
void os_getDevEui (u1_t* buf) {
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
    memcpy(buf, DEVEUI, 8);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4906      	ldr	r1, [pc, #24]	; (80046f8 <os_getDevEui+0x24>)
 80046e0:	461a      	mov	r2, r3
 80046e2:	460b      	mov	r3, r1
 80046e4:	cb03      	ldmia	r3!, {r0, r1}
 80046e6:	6010      	str	r0, [r2, #0]
 80046e8:	6051      	str	r1, [r2, #4]
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	0800c73c 	.word	0x0800c73c

080046fc <os_getDevKey>:

// provide device key (16 bytes)
void os_getDevKey (u1_t* buf) {
 80046fc:	b4b0      	push	{r4, r5, r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
    memcpy(buf, DEVKEY, 16);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a06      	ldr	r2, [pc, #24]	; (8004720 <os_getDevKey+0x24>)
 8004708:	461c      	mov	r4, r3
 800470a:	4615      	mov	r5, r2
 800470c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800470e:	6020      	str	r0, [r4, #0]
 8004710:	6061      	str	r1, [r4, #4]
 8004712:	60a2      	str	r2, [r4, #8]
 8004714:	60e3      	str	r3, [r4, #12]
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bcb0      	pop	{r4, r5, r7}
 800471e:	4770      	bx	lr
 8004720:	0800c744 	.word	0x0800c744

08004724 <initsensor>:

void initsensor(){
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
	 // Here you init your sensors
}
 8004728:	bf00      	nop
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <initfunc>:

void initfunc (osjob_t* j) {
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
    // intialize sensor hardware
    initsensor();
 800473a:	f7ff fff3 	bl	8004724 <initsensor>
    // reset MAC state
    LMIC_reset();
 800473e:	f7ff ff0b 	bl	8004558 <LMIC_reset>
    // start joining
    LMIC_startJoining();
 8004742:	f7ff fab3 	bl	8003cac <LMIC_startJoining>
    // init done - onEvent() callback will be invoked...
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <readsensor>:

u2_t readsensor(){
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
	u2_t value = 0xDF;    /// read from evrything ...make your own sensor
 8004754:	23df      	movs	r3, #223	; 0xdf
 8004756:	80fb      	strh	r3, [r7, #6]
	return value;
 8004758:	88fb      	ldrh	r3, [r7, #6]
}
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <reportfunc>:

static osjob_t reportjob;

// report sensor value every minute
static void reportfunc (osjob_t* j) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
    // read sensor
    u2_t val = readsensor();
 8004770:	f7ff ffed 	bl	800474e <readsensor>
 8004774:	4603      	mov	r3, r0
 8004776:	81fb      	strh	r3, [r7, #14]
    debug_val("val = ", val);
 8004778:	89fb      	ldrh	r3, [r7, #14]
 800477a:	4619      	mov	r1, r3
 800477c:	4810      	ldr	r0, [pc, #64]	; (80047c0 <reportfunc+0x58>)
 800477e:	f7fc fcc1 	bl	8001104 <debug_val>
    // prepare and schedule data for transmission
    LMIC.frame[0] = val << 8;
 8004782:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <reportfunc+0x5c>)
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    LMIC.frame[1] = val;
 800478a:	89fb      	ldrh	r3, [r7, #14]
 800478c:	b2da      	uxtb	r2, r3
 800478e:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <reportfunc+0x5c>)
 8004790:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    LMIC_setTxData2(1, LMIC.frame, 2, 0); // (port 1, 2 bytes, unconfirmed)
 8004794:	2300      	movs	r3, #0
 8004796:	2202      	movs	r2, #2
 8004798:	490b      	ldr	r1, [pc, #44]	; (80047c8 <reportfunc+0x60>)
 800479a:	2001      	movs	r0, #1
 800479c:	f7ff ff54 	bl	8004648 <LMIC_setTxData2>
    // reschedule job in 60 seconds
    os_setTimedCallback(j, os_getTime()+sec2osticks(10), reportfunc);
 80047a0:	f000 faec 	bl	8004d7c <os_getTime>
 80047a4:	4603      	mov	r3, r0
 80047a6:	f503 239c 	add.w	r3, r3, #319488	; 0x4e000
 80047aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80047ae:	4a07      	ldr	r2, [pc, #28]	; (80047cc <reportfunc+0x64>)
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fb4c 	bl	8004e50 <os_setTimedCallback>
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	0800b214 	.word	0x0800b214
 80047c4:	20000280 	.word	0x20000280
 80047c8:	200003c8 	.word	0x200003c8
 80047cc:	08004769 	.word	0x08004769

080047d0 <onEvent>:

//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////

void onEvent (ev_t ev) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	71fb      	strb	r3, [r7, #7]
    debug_event(ev);
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fc fca7 	bl	8001130 <debug_event>

    switch(ev) {
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	2b0e      	cmp	r3, #14
 80047e8:	d879      	bhi.n	80048de <onEvent+0x10e>
 80047ea:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <onEvent+0x20>)
 80047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f0:	0800484b 	.word	0x0800484b
 80047f4:	08004853 	.word	0x08004853
 80047f8:	0800485b 	.word	0x0800485b
 80047fc:	08004863 	.word	0x08004863
 8004800:	0800482d 	.word	0x0800482d
 8004804:	08004835 	.word	0x08004835
 8004808:	0800486b 	.word	0x0800486b
 800480c:	08004843 	.word	0x08004843
 8004810:	08004873 	.word	0x08004873
 8004814:	0800487b 	.word	0x0800487b
 8004818:	080048b7 	.word	0x080048b7
 800481c:	080048bf 	.word	0x080048bf
 8004820:	080048c7 	.word	0x080048c7
 8004824:	080048cf 	.word	0x080048cf
 8004828:	080048d7 	.word	0x080048d7

      // network joined, session established
      case EV_JOINING:
       	  debug_str("try joining\r\n");
 800482c:	4830      	ldr	r0, [pc, #192]	; (80048f0 <onEvent+0x120>)
 800482e:	f7fc fc55 	bl	80010dc <debug_str>
       	  break;
 8004832:	e059      	b.n	80048e8 <onEvent+0x118>
      case EV_JOINED:
          debug_led(1);
 8004834:	2001      	movs	r0, #1
 8004836:	f7fc fbef 	bl	8001018 <debug_led>
          // kick-off periodic sensor job
          reportfunc(&reportjob);
 800483a:	482e      	ldr	r0, [pc, #184]	; (80048f4 <onEvent+0x124>)
 800483c:	f7ff ff94 	bl	8004768 <reportfunc>
          break;
 8004840:	e052      	b.n	80048e8 <onEvent+0x118>
      case EV_JOIN_FAILED:
    	  debug_str("join failed\r\n");
 8004842:	482d      	ldr	r0, [pc, #180]	; (80048f8 <onEvent+0x128>)
 8004844:	f7fc fc4a 	bl	80010dc <debug_str>
    	  break;
 8004848:	e04e      	b.n	80048e8 <onEvent+0x118>
      case EV_SCAN_TIMEOUT:
    	  debug_str("EV_SCAN_TIMEOUT\r\n");
 800484a:	482c      	ldr	r0, [pc, #176]	; (80048fc <onEvent+0x12c>)
 800484c:	f7fc fc46 	bl	80010dc <debug_str>
		  break;
 8004850:	e04a      	b.n	80048e8 <onEvent+0x118>
	  case EV_BEACON_FOUND:
		  debug_str("EV_BEACON_FOUND\r\n");
 8004852:	482b      	ldr	r0, [pc, #172]	; (8004900 <onEvent+0x130>)
 8004854:	f7fc fc42 	bl	80010dc <debug_str>
		  break;
 8004858:	e046      	b.n	80048e8 <onEvent+0x118>
	  case EV_BEACON_MISSED:
		  debug_str("EV_BEACON_MISSED\r\n");
 800485a:	482a      	ldr	r0, [pc, #168]	; (8004904 <onEvent+0x134>)
 800485c:	f7fc fc3e 	bl	80010dc <debug_str>
		  break;
 8004860:	e042      	b.n	80048e8 <onEvent+0x118>
	  case EV_BEACON_TRACKED:
		  debug_str("EV_BEACON_TRACKED\r\n");
 8004862:	4829      	ldr	r0, [pc, #164]	; (8004908 <onEvent+0x138>)
 8004864:	f7fc fc3a 	bl	80010dc <debug_str>
		  break;
 8004868:	e03e      	b.n	80048e8 <onEvent+0x118>
	  case EV_RFU1:
		  debug_str("EV_RFU1\r\n");
 800486a:	4828      	ldr	r0, [pc, #160]	; (800490c <onEvent+0x13c>)
 800486c:	f7fc fc36 	bl	80010dc <debug_str>
		  break;
 8004870:	e03a      	b.n	80048e8 <onEvent+0x118>
	  case EV_REJOIN_FAILED:
		  debug_str("EV_REJOIN_FAILED\r\n");
 8004872:	4827      	ldr	r0, [pc, #156]	; (8004910 <onEvent+0x140>)
 8004874:	f7fc fc32 	bl	80010dc <debug_str>
		  break;
 8004878:	e036      	b.n	80048e8 <onEvent+0x118>
	  case EV_TXCOMPLETE:
		  debug_str("EV_TXCOMPLETE (includes waiting for RX windows)\r\n");
 800487a:	4826      	ldr	r0, [pc, #152]	; (8004914 <onEvent+0x144>)
 800487c:	f7fc fc2e 	bl	80010dc <debug_str>
		  if (LMIC.txrxFlags & TXRX_ACK)
 8004880:	4b25      	ldr	r3, [pc, #148]	; (8004918 <onEvent+0x148>)
 8004882:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8004886:	b25b      	sxtb	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	da02      	bge.n	8004892 <onEvent+0xc2>
			  debug_str("Received ack\r\n");
 800488c:	4823      	ldr	r0, [pc, #140]	; (800491c <onEvent+0x14c>)
 800488e:	f7fc fc25 	bl	80010dc <debug_str>
		  if (LMIC.dataLen) {
 8004892:	4b21      	ldr	r3, [pc, #132]	; (8004918 <onEvent+0x148>)
 8004894:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8004898:	2b00      	cmp	r3, #0
 800489a:	d024      	beq.n	80048e6 <onEvent+0x116>
			  debug_str("Received ");
 800489c:	4820      	ldr	r0, [pc, #128]	; (8004920 <onEvent+0x150>)
 800489e:	f7fc fc1d 	bl	80010dc <debug_str>
			  debug_str(LMIC.dataLen);
 80048a2:	4b1d      	ldr	r3, [pc, #116]	; (8004918 <onEvent+0x148>)
 80048a4:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fc fc17 	bl	80010dc <debug_str>
			  debug_str(" bytes of payload\r\n");
 80048ae:	481d      	ldr	r0, [pc, #116]	; (8004924 <onEvent+0x154>)
 80048b0:	f7fc fc14 	bl	80010dc <debug_str>
		  }
		  break;
 80048b4:	e017      	b.n	80048e6 <onEvent+0x116>
	  case EV_LOST_TSYNC:
		  debug_str("EV_LOST_TSYNC\r\n");
 80048b6:	481c      	ldr	r0, [pc, #112]	; (8004928 <onEvent+0x158>)
 80048b8:	f7fc fc10 	bl	80010dc <debug_str>
		  break;
 80048bc:	e014      	b.n	80048e8 <onEvent+0x118>
	  case EV_RESET:
		  debug_str("EV_RESET\r\n");
 80048be:	481b      	ldr	r0, [pc, #108]	; (800492c <onEvent+0x15c>)
 80048c0:	f7fc fc0c 	bl	80010dc <debug_str>
		  break;
 80048c4:	e010      	b.n	80048e8 <onEvent+0x118>
	  case EV_RXCOMPLETE:
		  // data received in ping slot
		  debug_str("EV_RXCOMPLETE\r\n");
 80048c6:	481a      	ldr	r0, [pc, #104]	; (8004930 <onEvent+0x160>)
 80048c8:	f7fc fc08 	bl	80010dc <debug_str>
		  break;
 80048cc:	e00c      	b.n	80048e8 <onEvent+0x118>
	  case EV_LINK_DEAD:
		  debug_str("EV_LINK_DEAD\r\n");
 80048ce:	4819      	ldr	r0, [pc, #100]	; (8004934 <onEvent+0x164>)
 80048d0:	f7fc fc04 	bl	80010dc <debug_str>
		  break;
 80048d4:	e008      	b.n	80048e8 <onEvent+0x118>
	  case EV_LINK_ALIVE:
		  debug_str("EV_LINK_ALIVE\r\n");
 80048d6:	4818      	ldr	r0, [pc, #96]	; (8004938 <onEvent+0x168>)
 80048d8:	f7fc fc00 	bl	80010dc <debug_str>
		  break;
 80048dc:	e004      	b.n	80048e8 <onEvent+0x118>
	  default:
		   debug_str("Unknown event\r\n");
 80048de:	4817      	ldr	r0, [pc, #92]	; (800493c <onEvent+0x16c>)
 80048e0:	f7fc fbfc 	bl	80010dc <debug_str>
		  break;
 80048e4:	e000      	b.n	80048e8 <onEvent+0x118>
		  break;
 80048e6:	bf00      	nop
    }
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	0800b21c 	.word	0x0800b21c
 80048f4:	20000078 	.word	0x20000078
 80048f8:	0800b22c 	.word	0x0800b22c
 80048fc:	0800b23c 	.word	0x0800b23c
 8004900:	0800b250 	.word	0x0800b250
 8004904:	0800b264 	.word	0x0800b264
 8004908:	0800b278 	.word	0x0800b278
 800490c:	0800b28c 	.word	0x0800b28c
 8004910:	0800b298 	.word	0x0800b298
 8004914:	0800b2ac 	.word	0x0800b2ac
 8004918:	20000280 	.word	0x20000280
 800491c:	0800b2e0 	.word	0x0800b2e0
 8004920:	0800b2f0 	.word	0x0800b2f0
 8004924:	0800b2fc 	.word	0x0800b2fc
 8004928:	0800b310 	.word	0x0800b310
 800492c:	0800b320 	.word	0x0800b320
 8004930:	0800b32c 	.word	0x0800b32c
 8004934:	0800b33c 	.word	0x0800b33c
 8004938:	0800b34c 	.word	0x0800b34c
 800493c:	0800b35c 	.word	0x0800b35c

08004940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004946:	f001 f9e1 	bl	8005d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800494a:	f000 f829 	bl	80049a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800494e:	f000 f963 	bl	8004c18 <MX_GPIO_Init>
  MX_SPI1_Init();
 8004952:	f000 f89b 	bl	8004a8c <MX_SPI1_Init>
  MX_TIM4_Init();
 8004956:	f000 f8d7 	bl	8004b08 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800495a:	f000 f92d 	bl	8004bb8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);    // <-----------  change to your setup
 800495e:	480d      	ldr	r0, [pc, #52]	; (8004994 <main+0x54>)
 8004960:	f004 fb12 	bl	8008f88 <HAL_TIM_Base_Start_IT>
  __HAL_SPI_ENABLE(&hspi1);         // <-----------  change to your setup
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <main+0x58>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <main+0x58>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004972:	601a      	str	r2, [r3, #0]

  osjob_t initjob;

  // initialize runtime env
  os_init();
 8004974:	f000 f9f0 	bl	8004d58 <os_init>

  // initialize debug library
  debug_init();
 8004978:	f7fc fb42 	bl	8001000 <debug_init>
  // setup initial job
   os_setCallback(&initjob, initfunc);
 800497c:	1d3b      	adds	r3, r7, #4
 800497e:	4907      	ldr	r1, [pc, #28]	; (800499c <main+0x5c>)
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fa3f 	bl	8004e04 <os_setCallback>
  // execute scheduled jobs and events
  os_runloop();
 8004986:	f000 fa99 	bl	8004ebc <os_runloop>
  // (not reached)
  return 0;
 800498a:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	2000015c 	.word	0x2000015c
 8004998:	2000019c 	.word	0x2000019c
 800499c:	08004733 	.word	0x08004733

080049a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b0b8      	sub	sp, #224	; 0xe0
 80049a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80049aa:	2244      	movs	r2, #68	; 0x44
 80049ac:	2100      	movs	r1, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f006 fb8b 	bl	800b0ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	605a      	str	r2, [r3, #4]
 80049be:	609a      	str	r2, [r3, #8]
 80049c0:	60da      	str	r2, [r3, #12]
 80049c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049c4:	463b      	mov	r3, r7
 80049c6:	2288      	movs	r2, #136	; 0x88
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f006 fb7d 	bl	800b0ca <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80049d0:	2302      	movs	r3, #2
 80049d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80049d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80049de:	2310      	movs	r3, #16
 80049e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049e4:	2302      	movs	r3, #2
 80049e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80049ea:	2302      	movs	r3, #2
 80049ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80049f0:	2301      	movs	r3, #1
 80049f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 9;
 80049f6:	2309      	movs	r3, #9
 80049f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80049fc:	2307      	movs	r3, #7
 80049fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004a02:	2302      	movs	r3, #2
 8004a04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a08:	2302      	movs	r3, #2
 8004a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a12:	4618      	mov	r0, r3
 8004a14:	f001 fe78 	bl	8006708 <HAL_RCC_OscConfig>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004a1e:	f000 f989 	bl	8004d34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a22:	230f      	movs	r3, #15
 8004a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a34:	2300      	movs	r3, #0
 8004a36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004a40:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004a44:	2104      	movs	r1, #4
 8004a46:	4618      	mov	r0, r3
 8004a48:	f002 fb4c 	bl	80070e4 <HAL_RCC_ClockConfig>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8004a52:	f000 f96f 	bl	8004d34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004a56:	2302      	movs	r3, #2
 8004a58:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a5e:	463b      	mov	r3, r7
 8004a60:	4618      	mov	r0, r3
 8004a62:	f002 fde3 	bl	800762c <HAL_RCCEx_PeriphCLKConfig>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8004a6c:	f000 f962 	bl	8004d34 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004a70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a74:	f001 fde6 	bl	8006644 <HAL_PWREx_ControlVoltageScaling>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8004a7e:	f000 f959 	bl	8004d34 <Error_Handler>
  }
}
 8004a82:	bf00      	nop
 8004a84:	37e0      	adds	r7, #224	; 0xe0
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004a90:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <MX_SPI1_Init+0x74>)
 8004a92:	4a1c      	ldr	r2, [pc, #112]	; (8004b04 <MX_SPI1_Init+0x78>)
 8004a94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004a96:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <MX_SPI1_Init+0x74>)
 8004a98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004a9e:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <MX_SPI1_Init+0x74>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004aa4:	4b16      	ldr	r3, [pc, #88]	; (8004b00 <MX_SPI1_Init+0x74>)
 8004aa6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004aaa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aac:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <MX_SPI1_Init+0x74>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ab2:	4b13      	ldr	r3, [pc, #76]	; (8004b00 <MX_SPI1_Init+0x74>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004ab8:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <MX_SPI1_Init+0x74>)
 8004aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004abe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <MX_SPI1_Init+0x74>)
 8004ac2:	2230      	movs	r2, #48	; 0x30
 8004ac4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ac6:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <MX_SPI1_Init+0x74>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004acc:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <MX_SPI1_Init+0x74>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <MX_SPI1_Init+0x74>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004ad8:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <MX_SPI1_Init+0x74>)
 8004ada:	2207      	movs	r2, #7
 8004adc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004ade:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <MX_SPI1_Init+0x74>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <MX_SPI1_Init+0x74>)
 8004ae6:	2208      	movs	r2, #8
 8004ae8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004aea:	4805      	ldr	r0, [pc, #20]	; (8004b00 <MX_SPI1_Init+0x74>)
 8004aec:	f003 fd86 	bl	80085fc <HAL_SPI_Init>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004af6:	f000 f91d 	bl	8004d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004afa:	bf00      	nop
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	2000019c 	.word	0x2000019c
 8004b04:	40013000 	.word	0x40013000

08004b08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	; 0x28
 8004b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b0e:	f107 031c 	add.w	r3, r7, #28
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b1a:	463b      	mov	r3, r7
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	609a      	str	r2, [r3, #8]
 8004b24:	60da      	str	r2, [r3, #12]
 8004b26:	611a      	str	r2, [r3, #16]
 8004b28:	615a      	str	r2, [r3, #20]
 8004b2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004b2c:	4b20      	ldr	r3, [pc, #128]	; (8004bb0 <MX_TIM4_Init+0xa8>)
 8004b2e:	4a21      	ldr	r2, [pc, #132]	; (8004bb4 <MX_TIM4_Init+0xac>)
 8004b30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2250-1;
 8004b32:	4b1f      	ldr	r3, [pc, #124]	; (8004bb0 <MX_TIM4_Init+0xa8>)
 8004b34:	f640 02c9 	movw	r2, #2249	; 0x8c9
 8004b38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b3a:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <MX_TIM4_Init+0xa8>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 8004b40:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <MX_TIM4_Init+0xa8>)
 8004b42:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b48:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <MX_TIM4_Init+0xa8>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b4e:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <MX_TIM4_Init+0xa8>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8004b54:	4816      	ldr	r0, [pc, #88]	; (8004bb0 <MX_TIM4_Init+0xa8>)
 8004b56:	f004 fa91 	bl	800907c <HAL_TIM_OC_Init>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8004b60:	f000 f8e8 	bl	8004d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b6c:	f107 031c 	add.w	r3, r7, #28
 8004b70:	4619      	mov	r1, r3
 8004b72:	480f      	ldr	r0, [pc, #60]	; (8004bb0 <MX_TIM4_Init+0xa8>)
 8004b74:	f005 fa1e 	bl	8009fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8004b7e:	f000 f8d9 	bl	8004d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004b82:	2300      	movs	r3, #0
 8004b84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b92:	463b      	mov	r3, r7
 8004b94:	2200      	movs	r2, #0
 8004b96:	4619      	mov	r1, r3
 8004b98:	4805      	ldr	r0, [pc, #20]	; (8004bb0 <MX_TIM4_Init+0xa8>)
 8004b9a:	f004 fc45 	bl	8009428 <HAL_TIM_OC_ConfigChannel>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8004ba4:	f000 f8c6 	bl	8004d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004ba8:	bf00      	nop
 8004baa:	3728      	adds	r7, #40	; 0x28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	2000015c 	.word	0x2000015c
 8004bb4:	40000800 	.word	0x40000800

08004bb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004bbc:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <MX_USART2_UART_Init+0x58>)
 8004bbe:	4a15      	ldr	r2, [pc, #84]	; (8004c14 <MX_USART2_UART_Init+0x5c>)
 8004bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004bc2:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <MX_USART2_UART_Init+0x58>)
 8004bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <MX_USART2_UART_Init+0x58>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004bd0:	4b0f      	ldr	r3, [pc, #60]	; (8004c10 <MX_USART2_UART_Init+0x58>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004bd6:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <MX_USART2_UART_Init+0x58>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <MX_USART2_UART_Init+0x58>)
 8004bde:	220c      	movs	r2, #12
 8004be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004be2:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <MX_USART2_UART_Init+0x58>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004be8:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <MX_USART2_UART_Init+0x58>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bee:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <MX_USART2_UART_Init+0x58>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bf4:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <MX_USART2_UART_Init+0x58>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004bfa:	4805      	ldr	r0, [pc, #20]	; (8004c10 <MX_USART2_UART_Init+0x58>)
 8004bfc:	f005 fb1e 	bl	800a23c <HAL_UART_Init>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004c06:	f000 f895 	bl	8004d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c0a:	bf00      	nop
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000200 	.word	0x20000200
 8004c14:	40004400 	.word	0x40004400

08004c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	; 0x28
 8004c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c1e:	f107 0314 	add.w	r3, r7, #20
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	605a      	str	r2, [r3, #4]
 8004c28:	609a      	str	r2, [r3, #8]
 8004c2a:	60da      	str	r2, [r3, #12]
 8004c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c2e:	4b3d      	ldr	r3, [pc, #244]	; (8004d24 <MX_GPIO_Init+0x10c>)
 8004c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c32:	4a3c      	ldr	r2, [pc, #240]	; (8004d24 <MX_GPIO_Init+0x10c>)
 8004c34:	f043 0304 	orr.w	r3, r3, #4
 8004c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c3a:	4b3a      	ldr	r3, [pc, #232]	; (8004d24 <MX_GPIO_Init+0x10c>)
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c46:	4b37      	ldr	r3, [pc, #220]	; (8004d24 <MX_GPIO_Init+0x10c>)
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	4a36      	ldr	r2, [pc, #216]	; (8004d24 <MX_GPIO_Init+0x10c>)
 8004c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c52:	4b34      	ldr	r3, [pc, #208]	; (8004d24 <MX_GPIO_Init+0x10c>)
 8004c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c5e:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <MX_GPIO_Init+0x10c>)
 8004c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c62:	4a30      	ldr	r2, [pc, #192]	; (8004d24 <MX_GPIO_Init+0x10c>)
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c6a:	4b2e      	ldr	r3, [pc, #184]	; (8004d24 <MX_GPIO_Init+0x10c>)
 8004c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c76:	4b2b      	ldr	r3, [pc, #172]	; (8004d24 <MX_GPIO_Init+0x10c>)
 8004c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7a:	4a2a      	ldr	r2, [pc, #168]	; (8004d24 <MX_GPIO_Init+0x10c>)
 8004c7c:	f043 0302 	orr.w	r3, r3, #2
 8004c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c82:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <MX_GPIO_Init+0x10c>)
 8004c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	607b      	str	r3, [r7, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RST_Pin|LED_Pin, GPIO_PIN_RESET);
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004c94:	4824      	ldr	r0, [pc, #144]	; (8004d28 <MX_GPIO_Init+0x110>)
 8004c96:	f001 fc7f 	bl	8006598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2140      	movs	r1, #64	; 0x40
 8004c9e:	4823      	ldr	r0, [pc, #140]	; (8004d2c <MX_GPIO_Init+0x114>)
 8004ca0:	f001 fc7a 	bl	8006598 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin LED_Pin */
  GPIO_InitStruct.Pin = RST_Pin|LED_Pin;
 8004ca4:	f44f 7320 	mov.w	r3, #640	; 0x280
 8004ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004caa:	2301      	movs	r3, #1
 8004cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cb6:	f107 0314 	add.w	r3, r7, #20
 8004cba:	4619      	mov	r1, r3
 8004cbc:	481a      	ldr	r0, [pc, #104]	; (8004d28 <MX_GPIO_Init+0x110>)
 8004cbe:	f001 f9dd 	bl	800607c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO2_Pin DIO1_Pin DIO0_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|DIO1_Pin|DIO0_Pin;
 8004cc2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004cc8:	4b19      	ldr	r3, [pc, #100]	; (8004d30 <MX_GPIO_Init+0x118>)
 8004cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd0:	f107 0314 	add.w	r3, r7, #20
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cda:	f001 f9cf 	bl	800607c <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8004cde:	2340      	movs	r3, #64	; 0x40
 8004ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cea:	2300      	movs	r3, #0
 8004cec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8004cee:	f107 0314 	add.w	r3, r7, #20
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	480d      	ldr	r0, [pc, #52]	; (8004d2c <MX_GPIO_Init+0x114>)
 8004cf6:	f001 f9c1 	bl	800607c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	2017      	movs	r0, #23
 8004d00:	f001 f96c 	bl	8005fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d04:	2017      	movs	r0, #23
 8004d06:	f001 f995 	bl	8006034 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	2028      	movs	r0, #40	; 0x28
 8004d10:	f001 f964 	bl	8005fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d14:	2028      	movs	r0, #40	; 0x28
 8004d16:	f001 f98d 	bl	8006034 <HAL_NVIC_EnableIRQ>

}
 8004d1a:	bf00      	nop
 8004d1c:	3728      	adds	r7, #40	; 0x28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40021000 	.word	0x40021000
 8004d28:	48000800 	.word	0x48000800
 8004d2c:	48000400 	.word	0x48000400
 8004d30:	10110000 	.word	0x10110000

08004d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004d38:	bf00      	nop
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(char *file, uint32_t line)
{ 
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <os_init>:
static struct {
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
    memset(&OS, 0x00, sizeof(OS));
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	2100      	movs	r1, #0
 8004d60:	4805      	ldr	r0, [pc, #20]	; (8004d78 <os_init+0x20>)
 8004d62:	f006 f9b2 	bl	800b0ca <memset>
    hal_init();
 8004d66:	f7fc fb81 	bl	800146c <hal_init>
    radio_init();
 8004d6a:	f000 fcb9 	bl	80056e0 <radio_init>
    LMIC_init();
 8004d6e:	f7ff fc41 	bl	80045f4 <LMIC_init>
}
 8004d72:	bf00      	nop
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000084 	.word	0x20000084

08004d7c <os_getTime>:

ostime_t os_getTime () {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
    return hal_ticks();
 8004d80:	f7fc fa94 	bl	80012ac <hal_ticks>
 8004d84:	4603      	mov	r3, r0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6039      	str	r1, [r7, #0]
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8004d94:	e00d      	b.n	8004db2 <unlinkjob+0x28>
        if(*pnext == job) { // unlink
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d105      	bne.n	8004dac <unlinkjob+0x22>
            *pnext = job->next;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	601a      	str	r2, [r3, #0]
            return 1;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e007      	b.n	8004dbc <unlinkjob+0x32>
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	607b      	str	r3, [r7, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1ed      	bne.n	8004d96 <unlinkjob+0xc>
        }
    }
    return 0;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <os_clearCallback>:

// clear scheduled job
void os_clearCallback (osjob_t* job) {
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
    hal_disableIRQs();
 8004dd0:	f7fc fb20 	bl	8001414 <hal_disableIRQs>
    unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4809      	ldr	r0, [pc, #36]	; (8004dfc <os_clearCallback+0x34>)
 8004dd8:	f7ff ffd7 	bl	8004d8a <unlinkjob>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d105      	bne.n	8004dee <os_clearCallback+0x26>
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	4806      	ldr	r0, [pc, #24]	; (8004e00 <os_clearCallback+0x38>)
 8004de6:	f7ff ffd0 	bl	8004d8a <unlinkjob>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
    hal_enableIRQs();
 8004dee:	f7fc fb21 	bl	8001434 <hal_enableIRQs>
}
 8004df2:	bf00      	nop
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000084 	.word	0x20000084
 8004e00:	20000088 	.word	0x20000088

08004e04 <os_setCallback>:

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
    osjob_t** pnext;
    hal_disableIRQs();
 8004e0e:	f7fc fb01 	bl	8001414 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	480d      	ldr	r0, [pc, #52]	; (8004e4c <os_setCallback+0x48>)
 8004e16:	f7ff ffb8 	bl	8004d8a <unlinkjob>
    // fill-in job
    job->func = cb;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
 8004e26:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <os_setCallback+0x48>)
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	e002      	b.n	8004e32 <os_setCallback+0x2e>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f8      	bne.n	8004e2c <os_setCallback+0x28>
    *pnext = job;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8004e40:	f7fc faf8 	bl	8001434 <hal_enableIRQs>
}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	20000088 	.word	0x20000088

08004e50 <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
    osjob_t** pnext;
    hal_disableIRQs();
 8004e5c:	f7fc fada 	bl	8001414 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
 8004e60:	68f9      	ldr	r1, [r7, #12]
 8004e62:	4815      	ldr	r0, [pc, #84]	; (8004eb8 <os_setTimedCallback+0x68>)
 8004e64:	f7ff ff91 	bl	8004d8a <unlinkjob>
    // fill-in job
    job->deadline = time;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	605a      	str	r2, [r3, #4]
    job->func = cb;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8004e7a:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <os_setTimedCallback+0x68>)
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	e00e      	b.n	8004e9e <os_setTimedCallback+0x4e>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	dd04      	ble.n	8004e98 <os_setTimedCallback+0x48>
            // enqueue before next element and stop
            job->next = *pnext;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	601a      	str	r2, [r3, #0]
            break;
 8004e96:	e006      	b.n	8004ea6 <os_setTimedCallback+0x56>
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1ec      	bne.n	8004e80 <os_setTimedCallback+0x30>
        }
    }
    *pnext = job;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8004eac:	f7fc fac2 	bl	8001434 <hal_enableIRQs>
}
 8004eb0:	bf00      	nop
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20000084 	.word	0x20000084

08004ebc <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
    while(1) {
        osjob_t* j = NULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	607b      	str	r3, [r7, #4]
        hal_disableIRQs();
 8004ec6:	f7fc faa5 	bl	8001414 <hal_disableIRQs>
        // check for runnable jobs
        if(OS.runnablejobs) {
 8004eca:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <os_runloop+0x68>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d007      	beq.n	8004ee2 <os_runloop+0x26>
            j = OS.runnablejobs;
 8004ed2:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <os_runloop+0x68>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	607b      	str	r3, [r7, #4]
            OS.runnablejobs = j->next;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <os_runloop+0x68>)
 8004ede:	6053      	str	r3, [r2, #4]
 8004ee0:	e016      	b.n	8004f10 <os_runloop+0x54>
        } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 8004ee2:	4b10      	ldr	r3, [pc, #64]	; (8004f24 <os_runloop+0x68>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d010      	beq.n	8004f0c <os_runloop+0x50>
 8004eea:	4b0e      	ldr	r3, [pc, #56]	; (8004f24 <os_runloop+0x68>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fc fa37 	bl	8001364 <hal_checkTimer>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d007      	beq.n	8004f0c <os_runloop+0x50>
            j = OS.scheduledjobs;
 8004efc:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <os_runloop+0x68>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	607b      	str	r3, [r7, #4]
            OS.scheduledjobs = j->next;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a07      	ldr	r2, [pc, #28]	; (8004f24 <os_runloop+0x68>)
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e001      	b.n	8004f10 <os_runloop+0x54>
        } else { // nothing pending
            hal_sleep(); // wake by irq (timer already restarted)
 8004f0c:	f7fc faa6 	bl	800145c <hal_sleep>
        }
        hal_enableIRQs();
 8004f10:	f7fc fa90 	bl	8001434 <hal_enableIRQs>
        if(j) { // run job callback
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0d3      	beq.n	8004ec2 <os_runloop+0x6>
            j->func(j);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
    while(1) {
 8004f22:	e7ce      	b.n	8004ec2 <os_runloop+0x6>
 8004f24:	20000084 	.word	0x20000084

08004f28 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif


static void writeReg (u1_t addr, u1_t data ) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	460a      	mov	r2, r1
 8004f32:	71fb      	strb	r3, [r7, #7]
 8004f34:	4613      	mov	r3, r2
 8004f36:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8004f38:	2000      	movs	r0, #0
 8004f3a:	f7fc f929 	bl	8001190 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fc f98a 	bl	8001260 <hal_spi>
    hal_spi(data);
 8004f4c:	79bb      	ldrb	r3, [r7, #6]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fc f986 	bl	8001260 <hal_spi>
    hal_pin_nss(1);
 8004f54:	2001      	movs	r0, #1
 8004f56:	f7fc f91b 	bl	8001190 <hal_pin_nss>
}
 8004f5a:	bf00      	nop
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <readReg>:

static u1_t readReg (u1_t addr) {
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	4603      	mov	r3, r0
 8004f6a:	71fb      	strb	r3, [r7, #7]
    hal_pin_nss(0);
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	f7fc f90f 	bl	8001190 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fc f970 	bl	8001260 <hal_spi>
    u1_t val = hal_spi(0x00);
 8004f80:	2000      	movs	r0, #0
 8004f82:	f7fc f96d 	bl	8001260 <hal_spi>
 8004f86:	4603      	mov	r3, r0
 8004f88:	73fb      	strb	r3, [r7, #15]
    hal_pin_nss(1);
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	f7fc f900 	bl	8001190 <hal_pin_nss>
    return val;
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <writeBuf>:

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	6039      	str	r1, [r7, #0]
 8004fa4:	71fb      	strb	r3, [r7, #7]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8004faa:	2000      	movs	r0, #0
 8004fac:	f7fc f8f0 	bl	8001190 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8004fb0:	79fb      	ldrb	r3, [r7, #7]
 8004fb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fc f951 	bl	8001260 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	73fb      	strb	r3, [r7, #15]
 8004fc2:	e009      	b.n	8004fd8 <writeBuf+0x3e>
        hal_spi(buf[i]);
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	4413      	add	r3, r2
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fc f947 	bl	8001260 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
 8004fd8:	7bfa      	ldrb	r2, [r7, #15]
 8004fda:	79bb      	ldrb	r3, [r7, #6]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d3f1      	bcc.n	8004fc4 <writeBuf+0x2a>
    }
    hal_pin_nss(1);
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	f7fc f8d5 	bl	8001190 <hal_pin_nss>
}
 8004fe6:	bf00      	nop
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <readBuf>:

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8004fee:	b590      	push	{r4, r7, lr}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	6039      	str	r1, [r7, #0]
 8004ff8:	71fb      	strb	r3, [r7, #7]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8004ffe:	2000      	movs	r0, #0
 8005000:	f7fc f8c6 	bl	8001190 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800500a:	b2db      	uxtb	r3, r3
 800500c:	4618      	mov	r0, r3
 800500e:	f7fc f927 	bl	8001260 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]
 8005016:	e00a      	b.n	800502e <readBuf+0x40>
        buf[i] = hal_spi(0x00);
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	18d4      	adds	r4, r2, r3
 800501e:	2000      	movs	r0, #0
 8005020:	f7fc f91e 	bl	8001260 <hal_spi>
 8005024:	4603      	mov	r3, r0
 8005026:	7023      	strb	r3, [r4, #0]
    for (u1_t i=0; i<len; i++) {
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	3301      	adds	r3, #1
 800502c:	73fb      	strb	r3, [r7, #15]
 800502e:	7bfa      	ldrb	r2, [r7, #15]
 8005030:	79bb      	ldrb	r3, [r7, #6]
 8005032:	429a      	cmp	r2, r3
 8005034:	d3f0      	bcc.n	8005018 <readBuf+0x2a>
    }
    hal_pin_nss(1);
 8005036:	2001      	movs	r0, #1
 8005038:	f7fc f8aa 	bl	8001190 <hal_pin_nss>
}
 800503c:	bf00      	nop
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	bd90      	pop	{r4, r7, pc}

08005044 <opmode>:

static void opmode (u1_t mode) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	71fb      	strb	r3, [r7, #7]
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 800504e:	2001      	movs	r0, #1
 8005050:	f7ff ff87 	bl	8004f62 <readReg>
 8005054:	4603      	mov	r3, r0
 8005056:	b25b      	sxtb	r3, r3
 8005058:	f023 0307 	bic.w	r3, r3, #7
 800505c:	b25a      	sxtb	r2, r3
 800505e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005062:	4313      	orrs	r3, r2
 8005064:	b25b      	sxtb	r3, r3
 8005066:	b2db      	uxtb	r3, r3
 8005068:	4619      	mov	r1, r3
 800506a:	2001      	movs	r0, #1
 800506c:	f7ff ff5c 	bl	8004f28 <writeReg>
}
 8005070:	bf00      	nop
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <opmodeLora>:

static void opmodeLora() {
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
    u1_t u = OPMODE_LORA;
 800507e:	2380      	movs	r3, #128	; 0x80
 8005080:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	f043 0308 	orr.w	r3, r3, #8
 8005088:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	4619      	mov	r1, r3
 800508e:	2001      	movs	r0, #1
 8005090:	f7ff ff4a 	bl	8004f28 <writeReg>
}
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <opmodeFSK>:

static void opmodeFSK() {
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
    u1_t u = 0;
 80050a2:	2300      	movs	r3, #0
 80050a4:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 80050a6:	79fb      	ldrb	r3, [r7, #7]
 80050a8:	f043 0308 	orr.w	r3, r3, #8
 80050ac:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	4619      	mov	r1, r3
 80050b2:	2001      	movs	r0, #1
 80050b4:	f7ff ff38 	bl	8004f28 <writeReg>
}
 80050b8:	bf00      	nop
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
    sf_t sf = getSf(LMIC.rps);
 80050c6:	4b52      	ldr	r3, [pc, #328]	; (8005210 <configLoraModem+0x150>)
 80050c8:	89db      	ldrh	r3, [r3, #14]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fc f9eb 	bl	80014a6 <getSf>
 80050d0:	4603      	mov	r3, r0
 80050d2:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	71fb      	strb	r3, [r7, #7]
 80050d8:	2300      	movs	r3, #0
 80050da:	71bb      	strb	r3, [r7, #6]
 80050dc:	2300      	movs	r3, #0
 80050de:	717b      	strb	r3, [r7, #5]

        switch (getBw(LMIC.rps)) {
 80050e0:	4b4b      	ldr	r3, [pc, #300]	; (8005210 <configLoraModem+0x150>)
 80050e2:	89db      	ldrh	r3, [r3, #14]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fc f9ee 	bl	80014c6 <getBw>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d008      	beq.n	8005102 <configLoraModem+0x42>
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d00b      	beq.n	800510c <configLoraModem+0x4c>
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10e      	bne.n	8005116 <configLoraModem+0x56>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80050fe:	71fb      	strb	r3, [r7, #7]
 8005100:	e00b      	b.n	800511a <configLoraModem+0x5a>
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005108:	71fb      	strb	r3, [r7, #7]
 800510a:	e006      	b.n	800511a <configLoraModem+0x5a>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8005112:	71fb      	strb	r3, [r7, #7]
 8005114:	e001      	b.n	800511a <configLoraModem+0x5a>
        default:
            ASSERT(0);
 8005116:	f7fc f9bf 	bl	8001498 <hal_failed>
        }
        switch( getCr(LMIC.rps) ) {
 800511a:	4b3d      	ldr	r3, [pc, #244]	; (8005210 <configLoraModem+0x150>)
 800511c:	89db      	ldrh	r3, [r3, #14]
 800511e:	4618      	mov	r0, r3
 8005120:	f7fc f9e3 	bl	80014ea <getCr>
 8005124:	4603      	mov	r3, r0
 8005126:	2b03      	cmp	r3, #3
 8005128:	d81e      	bhi.n	8005168 <configLoraModem+0xa8>
 800512a:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <configLoraModem+0x70>)
 800512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005130:	08005141 	.word	0x08005141
 8005134:	0800514b 	.word	0x0800514b
 8005138:	08005155 	.word	0x08005155
 800513c:	0800515f 	.word	0x0800515f
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
 8005140:	79fb      	ldrb	r3, [r7, #7]
 8005142:	f043 0302 	orr.w	r3, r3, #2
 8005146:	71fb      	strb	r3, [r7, #7]
 8005148:	e010      	b.n	800516c <configLoraModem+0xac>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	f043 0304 	orr.w	r3, r3, #4
 8005150:	71fb      	strb	r3, [r7, #7]
 8005152:	e00b      	b.n	800516c <configLoraModem+0xac>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	f043 0306 	orr.w	r3, r3, #6
 800515a:	71fb      	strb	r3, [r7, #7]
 800515c:	e006      	b.n	800516c <configLoraModem+0xac>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	f043 0308 	orr.w	r3, r3, #8
 8005164:	71fb      	strb	r3, [r7, #7]
 8005166:	e001      	b.n	800516c <configLoraModem+0xac>
        default:
            ASSERT(0);
 8005168:	f7fc f996 	bl	8001498 <hal_failed>
        }

        if (getIh(LMIC.rps)) {
 800516c:	4b28      	ldr	r3, [pc, #160]	; (8005210 <configLoraModem+0x150>)
 800516e:	89db      	ldrh	r3, [r3, #14]
 8005170:	4618      	mov	r0, r3
 8005172:	f7fc fa0c 	bl	800158e <getIh>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00e      	beq.n	800519a <configLoraModem+0xda>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	71fb      	strb	r3, [r7, #7]
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 8005184:	4b22      	ldr	r3, [pc, #136]	; (8005210 <configLoraModem+0x150>)
 8005186:	89db      	ldrh	r3, [r3, #14]
 8005188:	4618      	mov	r0, r3
 800518a:	f7fc fa00 	bl	800158e <getIh>
 800518e:	4603      	mov	r3, r0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	4619      	mov	r1, r3
 8005194:	2022      	movs	r0, #34	; 0x22
 8005196:	f7ff fec7 	bl	8004f28 <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	4619      	mov	r1, r3
 800519e:	201d      	movs	r0, #29
 80051a0:	f7ff fec2 	bl	8004f28 <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
 80051a4:	793b      	ldrb	r3, [r7, #4]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	3370      	adds	r3, #112	; 0x70
 80051b0:	71bb      	strb	r3, [r7, #6]
        if (getNocrc(LMIC.rps) == 0) {
 80051b2:	4b17      	ldr	r3, [pc, #92]	; (8005210 <configLoraModem+0x150>)
 80051b4:	89db      	ldrh	r3, [r3, #14]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fc f9c2 	bl	8001540 <getNocrc>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <configLoraModem+0x10a>
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 80051c2:	79bb      	ldrb	r3, [r7, #6]
 80051c4:	f043 0304 	orr.w	r3, r3, #4
 80051c8:	71bb      	strb	r3, [r7, #6]
        }
        writeReg(LORARegModemConfig2, mc2);
 80051ca:	79bb      	ldrb	r3, [r7, #6]
 80051cc:	4619      	mov	r1, r3
 80051ce:	201e      	movs	r0, #30
 80051d0:	f7ff feaa 	bl	8004f28 <writeReg>
        
        mc3 = SX1276_MC3_AGCAUTO;
 80051d4:	2304      	movs	r3, #4
 80051d6:	717b      	strb	r3, [r7, #5]
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 80051d8:	793b      	ldrb	r3, [r7, #4]
 80051da:	2b05      	cmp	r3, #5
 80051dc:	d002      	beq.n	80051e4 <configLoraModem+0x124>
 80051de:	793b      	ldrb	r3, [r7, #4]
 80051e0:	2b06      	cmp	r3, #6
 80051e2:	d10b      	bne.n	80051fc <configLoraModem+0x13c>
 80051e4:	4b0a      	ldr	r3, [pc, #40]	; (8005210 <configLoraModem+0x150>)
 80051e6:	89db      	ldrh	r3, [r3, #14]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fc f96c 	bl	80014c6 <getBw>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d103      	bne.n	80051fc <configLoraModem+0x13c>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 80051f4:	797b      	ldrb	r3, [r7, #5]
 80051f6:	f043 0308 	orr.w	r3, r3, #8
 80051fa:	717b      	strb	r3, [r7, #5]
        }
        writeReg(LORARegModemConfig3, mc3);
 80051fc:	797b      	ldrb	r3, [r7, #5]
 80051fe:	4619      	mov	r1, r3
 8005200:	2026      	movs	r0, #38	; 0x26
 8005202:	f7ff fe91 	bl	8004f28 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8005206:	bf00      	nop
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000280 	.word	0x20000280

08005214 <configChannel>:

static void configChannel () {
 8005214:	b590      	push	{r4, r7, lr}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    u8_t frf = ((u8_t)LMIC.freq << 19) / 32000000;
 800521a:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <configChannel+0x74>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f04f 0400 	mov.w	r4, #0
 8005222:	0b59      	lsrs	r1, r3, #13
 8005224:	04d8      	lsls	r0, r3, #19
 8005226:	4a19      	ldr	r2, [pc, #100]	; (800528c <configChannel+0x78>)
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	f7fb f81c 	bl	8000268 <__aeabi_uldivmod>
 8005230:	4603      	mov	r3, r0
 8005232:	460c      	mov	r4, r1
 8005234:	e9c7 3400 	strd	r3, r4, [r7]
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
 8005238:	e9d7 1200 	ldrd	r1, r2, [r7]
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	f04f 0400 	mov.w	r4, #0
 8005244:	0c0b      	lsrs	r3, r1, #16
 8005246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800524a:	0c14      	lsrs	r4, r2, #16
 800524c:	b2db      	uxtb	r3, r3
 800524e:	4619      	mov	r1, r3
 8005250:	2006      	movs	r0, #6
 8005252:	f7ff fe69 	bl	8004f28 <writeReg>
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
 8005256:	e9d7 1200 	ldrd	r1, r2, [r7]
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	f04f 0400 	mov.w	r4, #0
 8005262:	0a0b      	lsrs	r3, r1, #8
 8005264:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005268:	0a14      	lsrs	r4, r2, #8
 800526a:	b2db      	uxtb	r3, r3
 800526c:	4619      	mov	r1, r3
 800526e:	2007      	movs	r0, #7
 8005270:	f7ff fe5a 	bl	8004f28 <writeReg>
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
 8005274:	783b      	ldrb	r3, [r7, #0]
 8005276:	4619      	mov	r1, r3
 8005278:	2008      	movs	r0, #8
 800527a:	f7ff fe55 	bl	8004f28 <writeReg>
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	bd90      	pop	{r4, r7, pc}
 8005286:	bf00      	nop
 8005288:	20000280 	.word	0x20000280
 800528c:	01e84800 	.word	0x01e84800

08005290 <configPower>:



static void configPower () {
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
 8005296:	4b15      	ldr	r3, [pc, #84]	; (80052ec <configPower+0x5c>)
 8005298:	7c9b      	ldrb	r3, [r3, #18]
 800529a:	71fb      	strb	r3, [r7, #7]
    if(pw >= 17) {
 800529c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	dd02      	ble.n	80052aa <configPower+0x1a>
        pw = 15;
 80052a4:	230f      	movs	r3, #15
 80052a6:	71fb      	strb	r3, [r7, #7]
 80052a8:	e005      	b.n	80052b6 <configPower+0x26>
    } else if(pw < 2) {
 80052aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	dc01      	bgt.n	80052b6 <configPower+0x26>
        pw = 2;
 80052b2:	2302      	movs	r3, #2
 80052b4:	71fb      	strb	r3, [r7, #7]
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (u1_t)(0x80|(pw&0xf)));
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	b25b      	sxtb	r3, r3
 80052be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052c2:	b25b      	sxtb	r3, r3
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	4619      	mov	r1, r3
 80052c8:	2009      	movs	r0, #9
 80052ca:	f7ff fe2d 	bl	8004f28 <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
 80052ce:	205a      	movs	r0, #90	; 0x5a
 80052d0:	f7ff fe47 	bl	8004f62 <readReg>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f043 0304 	orr.w	r3, r3, #4
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	4619      	mov	r1, r3
 80052de:	205a      	movs	r0, #90	; 0x5a
 80052e0:	f7ff fe22 	bl	8004f28 <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 80052e4:	bf00      	nop
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	20000280 	.word	0x20000280

080052f0 <txfsk>:

static void txfsk () {
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 80052f4:	2110      	movs	r1, #16
 80052f6:	2001      	movs	r0, #1
 80052f8:	f7ff fe16 	bl	8004f28 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
 80052fc:	2001      	movs	r0, #1
 80052fe:	f7ff fe30 	bl	8004f62 <readReg>
 8005302:	4603      	mov	r3, r0
 8005304:	2b10      	cmp	r3, #16
 8005306:	d001      	beq.n	800530c <txfsk+0x1c>
 8005308:	f7fc f8c6 	bl	8001498 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 800530c:	2001      	movs	r0, #1
 800530e:	f7ff fe99 	bl	8005044 <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8005312:	2102      	movs	r1, #2
 8005314:	2002      	movs	r0, #2
 8005316:	f7ff fe07 	bl	8004f28 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 800531a:	2180      	movs	r1, #128	; 0x80
 800531c:	2003      	movs	r0, #3
 800531e:	f7ff fe03 	bl	8004f28 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8005322:	2101      	movs	r1, #1
 8005324:	2004      	movs	r0, #4
 8005326:	f7ff fdff 	bl	8004f28 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 800532a:	2199      	movs	r1, #153	; 0x99
 800532c:	2005      	movs	r0, #5
 800532e:	f7ff fdfb 	bl	8004f28 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
 8005332:	2100      	movs	r1, #0
 8005334:	2025      	movs	r0, #37	; 0x25
 8005336:	f7ff fdf7 	bl	8004f28 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
 800533a:	2105      	movs	r1, #5
 800533c:	2026      	movs	r0, #38	; 0x26
 800533e:	f7ff fdf3 	bl	8004f28 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
 8005342:	2112      	movs	r1, #18
 8005344:	2027      	movs	r0, #39	; 0x27
 8005346:	f7ff fdef 	bl	8004f28 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
 800534a:	21d0      	movs	r1, #208	; 0xd0
 800534c:	2030      	movs	r0, #48	; 0x30
 800534e:	f7ff fdeb 	bl	8004f28 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
 8005352:	2140      	movs	r1, #64	; 0x40
 8005354:	2031      	movs	r0, #49	; 0x31
 8005356:	f7ff fde7 	bl	8004f28 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
 800535a:	21c1      	movs	r1, #193	; 0xc1
 800535c:	2028      	movs	r0, #40	; 0x28
 800535e:	f7ff fde3 	bl	8004f28 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8005362:	2194      	movs	r1, #148	; 0x94
 8005364:	2029      	movs	r0, #41	; 0x29
 8005366:	f7ff fddf 	bl	8004f28 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 800536a:	21c1      	movs	r1, #193	; 0xc1
 800536c:	202a      	movs	r0, #42	; 0x2a
 800536e:	f7ff fddb 	bl	8004f28 <writeReg>
    // configure frequency
    configChannel();
 8005372:	f7ff ff4f 	bl	8005214 <configChannel>
    // configure output power
    configPower();
 8005376:	f7ff ff8b 	bl	8005290 <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
 800537a:	2134      	movs	r1, #52	; 0x34
 800537c:	2040      	movs	r0, #64	; 0x40
 800537e:	f7ff fdd3 	bl	8004f28 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
 8005382:	4b10      	ldr	r3, [pc, #64]	; (80053c4 <txfsk+0xd4>)
 8005384:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005388:	3301      	adds	r3, #1
 800538a:	b2db      	uxtb	r3, r3
 800538c:	4619      	mov	r1, r3
 800538e:	2032      	movs	r0, #50	; 0x32
 8005390:	f7ff fdca 	bl	8004f28 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
 8005394:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <txfsk+0xd4>)
 8005396:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 800539a:	4619      	mov	r1, r3
 800539c:	2000      	movs	r0, #0
 800539e:	f7ff fdc3 	bl	8004f28 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80053a2:	4b08      	ldr	r3, [pc, #32]	; (80053c4 <txfsk+0xd4>)
 80053a4:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80053a8:	461a      	mov	r2, r3
 80053aa:	4907      	ldr	r1, [pc, #28]	; (80053c8 <txfsk+0xd8>)
 80053ac:	2000      	movs	r0, #0
 80053ae:	f7ff fdf4 	bl	8004f9a <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 80053b2:	2001      	movs	r0, #1
 80053b4:	f7fb fee1 	bl	800117a <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 80053b8:	2003      	movs	r0, #3
 80053ba:	f7ff fe43 	bl	8005044 <opmode>
}
 80053be:	bf00      	nop
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000280 	.word	0x20000280
 80053c8:	200003c8 	.word	0x200003c8

080053cc <txlora>:

static void txlora () {
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
 80053d0:	f7ff fe52 	bl	8005078 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 80053d4:	2001      	movs	r0, #1
 80053d6:	f7ff fdc4 	bl	8004f62 <readReg>
 80053da:	4603      	mov	r3, r0
 80053dc:	b25b      	sxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	db01      	blt.n	80053e6 <txlora+0x1a>
 80053e2:	f7fc f859 	bl	8001498 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 80053e6:	2001      	movs	r0, #1
 80053e8:	f7ff fe2c 	bl	8005044 <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
 80053ec:	f7ff fe68 	bl	80050c0 <configLoraModem>
    // configure frequency
    configChannel();
 80053f0:	f7ff ff10 	bl	8005214 <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 80053f4:	200a      	movs	r0, #10
 80053f6:	f7ff fdb4 	bl	8004f62 <readReg>
 80053fa:	4603      	mov	r3, r0
 80053fc:	b25b      	sxtb	r3, r3
 80053fe:	f023 030f 	bic.w	r3, r3, #15
 8005402:	b25b      	sxtb	r3, r3
 8005404:	f043 0308 	orr.w	r3, r3, #8
 8005408:	b25b      	sxtb	r3, r3
 800540a:	b2db      	uxtb	r3, r3
 800540c:	4619      	mov	r1, r3
 800540e:	200a      	movs	r0, #10
 8005410:	f7ff fd8a 	bl	8004f28 <writeReg>
    configPower();
 8005414:	f7ff ff3c 	bl	8005290 <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005418:	2134      	movs	r1, #52	; 0x34
 800541a:	2039      	movs	r0, #57	; 0x39
 800541c:	f7ff fd84 	bl	8004f28 <writeReg>
    
    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 8005420:	21f0      	movs	r1, #240	; 0xf0
 8005422:	2040      	movs	r0, #64	; 0x40
 8005424:	f7ff fd80 	bl	8004f28 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005428:	21ff      	movs	r1, #255	; 0xff
 800542a:	2012      	movs	r0, #18
 800542c:	f7ff fd7c 	bl	8004f28 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 8005430:	21f7      	movs	r1, #247	; 0xf7
 8005432:	2011      	movs	r0, #17
 8005434:	f7ff fd78 	bl	8004f28 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(LORARegFifoTxBaseAddr, 0x00);
 8005438:	2100      	movs	r1, #0
 800543a:	200e      	movs	r0, #14
 800543c:	f7ff fd74 	bl	8004f28 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
 8005440:	2100      	movs	r1, #0
 8005442:	200d      	movs	r0, #13
 8005444:	f7ff fd70 	bl	8004f28 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
 8005448:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <txlora+0xac>)
 800544a:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 800544e:	4619      	mov	r1, r3
 8005450:	2022      	movs	r0, #34	; 0x22
 8005452:	f7ff fd69 	bl	8004f28 <writeReg>
       
    // download buffer to the radio FIFO
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005456:	4b08      	ldr	r3, [pc, #32]	; (8005478 <txlora+0xac>)
 8005458:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 800545c:	461a      	mov	r2, r3
 800545e:	4907      	ldr	r1, [pc, #28]	; (800547c <txlora+0xb0>)
 8005460:	2000      	movs	r0, #0
 8005462:	f7ff fd9a 	bl	8004f9a <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8005466:	2001      	movs	r0, #1
 8005468:	f7fb fe87 	bl	800117a <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 800546c:	2003      	movs	r0, #3
 800546e:	f7ff fde9 	bl	8005044 <opmode>
}
 8005472:	bf00      	nop
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000280 	.word	0x20000280
 800547c:	200003c8 	.word	0x200003c8

08005480 <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8005484:	2001      	movs	r0, #1
 8005486:	f7ff fd6c 	bl	8004f62 <readReg>
 800548a:	4603      	mov	r3, r0
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <starttx+0x18>
 8005494:	f7fc f800 	bl	8001498 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8005498:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <starttx+0x38>)
 800549a:	89db      	ldrh	r3, [r3, #14]
 800549c:	4618      	mov	r0, r3
 800549e:	f7fc f802 	bl	80014a6 <getSf>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <starttx+0x2e>
        txfsk();
 80054a8:	f7ff ff22 	bl	80052f0 <txfsk>
    } else { // LoRa modem
        txlora();
    }
    // the radio will go back to STANDBY mode as soon as the TX is finished
    // the corresponding IRQ will inform us about completion.
}
 80054ac:	e001      	b.n	80054b2 <starttx+0x32>
        txlora();
 80054ae:	f7ff ff8d 	bl	80053cc <txlora>
}
 80054b2:	bf00      	nop
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000280 	.word	0x20000280

080054bc <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	71fb      	strb	r3, [r7, #7]
    // select LoRa modem (from sleep mode)
    opmodeLora();
 80054c6:	f7ff fdd7 	bl	8005078 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 80054ca:	2001      	movs	r0, #1
 80054cc:	f7ff fd49 	bl	8004f62 <readReg>
 80054d0:	4603      	mov	r3, r0
 80054d2:	b25b      	sxtb	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	db01      	blt.n	80054dc <rxlora+0x20>
 80054d8:	f7fb ffde 	bl	8001498 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 80054dc:	2001      	movs	r0, #1
 80054de:	f7ff fdb1 	bl	8005044 <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d108      	bne.n	80054fa <rxlora+0x3e>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 80054e8:	210a      	movs	r1, #10
 80054ea:	201d      	movs	r0, #29
 80054ec:	f7ff fd1c 	bl	8004f28 <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 80054f0:	2170      	movs	r1, #112	; 0x70
 80054f2:	201e      	movs	r0, #30
 80054f4:	f7ff fd18 	bl	8004f28 <writeReg>
 80054f8:	e003      	b.n	8005502 <rxlora+0x46>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
 80054fa:	f7ff fde1 	bl	80050c0 <configLoraModem>
        // configure frequency
        configChannel();
 80054fe:	f7ff fe89 	bl	8005214 <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN); 
 8005502:	2121      	movs	r1, #33	; 0x21
 8005504:	200c      	movs	r0, #12
 8005506:	f7ff fd0f 	bl	8004f28 <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
 800550a:	2140      	movs	r1, #64	; 0x40
 800550c:	2023      	movs	r0, #35	; 0x23
 800550e:	f7ff fd0b 	bl	8004f28 <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
 8005512:	4b26      	ldr	r3, [pc, #152]	; (80055ac <rxlora+0xf0>)
 8005514:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00b      	beq.n	8005534 <rxlora+0x78>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
 800551c:	2033      	movs	r0, #51	; 0x33
 800551e:	f7ff fd20 	bl	8004f62 <readReg>
 8005522:	4603      	mov	r3, r0
 8005524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005528:	b2db      	uxtb	r3, r3
 800552a:	4619      	mov	r1, r3
 800552c:	2033      	movs	r0, #51	; 0x33
 800552e:	f7ff fcfb 	bl	8004f28 <writeReg>
 8005532:	e00a      	b.n	800554a <rxlora+0x8e>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
 8005534:	2033      	movs	r0, #51	; 0x33
 8005536:	f7ff fd14 	bl	8004f62 <readReg>
 800553a:	4603      	mov	r3, r0
 800553c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005540:	b2db      	uxtb	r3, r3
 8005542:	4619      	mov	r1, r3
 8005544:	2033      	movs	r0, #51	; 0x33
 8005546:	f7ff fcef 	bl	8004f28 <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 800554a:	4b18      	ldr	r3, [pc, #96]	; (80055ac <rxlora+0xf0>)
 800554c:	7c1b      	ldrb	r3, [r3, #16]
 800554e:	4619      	mov	r1, r3
 8005550:	201f      	movs	r0, #31
 8005552:	f7ff fce9 	bl	8004f28 <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005556:	2134      	movs	r1, #52	; 0x34
 8005558:	2039      	movs	r0, #57	; 0x39
 800555a:	f7ff fce5 	bl	8004f28 <writeReg>
    
    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
 800555e:	21c0      	movs	r1, #192	; 0xc0
 8005560:	2040      	movs	r0, #64	; 0x40
 8005562:	f7ff fce1 	bl	8004f28 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005566:	21ff      	movs	r1, #255	; 0xff
 8005568:	2012      	movs	r0, #18
 800556a:	f7ff fcdd 	bl	8004f28 <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	4a0f      	ldr	r2, [pc, #60]	; (80055b0 <rxlora+0xf4>)
 8005572:	5cd3      	ldrb	r3, [r2, r3]
 8005574:	43db      	mvns	r3, r3
 8005576:	b2db      	uxtb	r3, r3
 8005578:	4619      	mov	r1, r3
 800557a:	2011      	movs	r0, #17
 800557c:	f7ff fcd4 	bl	8004f28 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8005580:	2000      	movs	r0, #0
 8005582:	f7fb fdfa 	bl	800117a <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d108      	bne.n	800559e <rxlora+0xe2>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 800558c:	4b07      	ldr	r3, [pc, #28]	; (80055ac <rxlora+0xf0>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4618      	mov	r0, r3
 8005592:	f7fb fed8 	bl	8001346 <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
 8005596:	2006      	movs	r0, #6
 8005598:	f7ff fd54 	bl	8005044 <opmode>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    }
}
 800559c:	e002      	b.n	80055a4 <rxlora+0xe8>
        opmode(OPMODE_RX); 
 800559e:	2005      	movs	r0, #5
 80055a0:	f7ff fd50 	bl	8005044 <opmode>
}
 80055a4:	bf00      	nop
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20000280 	.word	0x20000280
 80055b0:	0800c754 	.word	0x0800c754

080055b4 <rxfsk>:

static void rxfsk (u1_t rxmode) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	71fb      	strb	r3, [r7, #7]
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <rxfsk+0x14>
 80055c4:	f7fb ff68 	bl	8001498 <hal_failed>
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
 80055c8:	f7ff fd68 	bl	800509c <opmodeFSK>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 80055cc:	2001      	movs	r0, #1
 80055ce:	f7ff fcc8 	bl	8004f62 <readReg>
 80055d2:	4603      	mov	r3, r0
 80055d4:	b25b      	sxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	da01      	bge.n	80055de <rxfsk+0x2a>
 80055da:	f7fb ff5d 	bl	8001498 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 80055de:	2001      	movs	r0, #1
 80055e0:	f7ff fd30 	bl	8005044 <opmode>
    // configure frequency
    configChannel();
 80055e4:	f7ff fe16 	bl	8005214 <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
 80055e8:	2121      	movs	r1, #33	; 0x21
 80055ea:	200c      	movs	r0, #12
 80055ec:	f7ff fc9c 	bl	8004f28 <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 80055f0:	211e      	movs	r1, #30
 80055f2:	200d      	movs	r0, #13
 80055f4:	f7ff fc98 	bl	8004f28 <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 80055f8:	210b      	movs	r1, #11
 80055fa:	2012      	movs	r0, #18
 80055fc:	f7ff fc94 	bl	8004f28 <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 8005600:	2112      	movs	r1, #18
 8005602:	2013      	movs	r0, #19
 8005604:	f7ff fc90 	bl	8004f28 <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 8005608:	21aa      	movs	r1, #170	; 0xaa
 800560a:	201f      	movs	r0, #31
 800560c:	f7ff fc8c 	bl	8004f28 <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 8005610:	2112      	movs	r1, #18
 8005612:	2027      	movs	r0, #39	; 0x27
 8005614:	f7ff fc88 	bl	8004f28 <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 8005618:	21d8      	movs	r1, #216	; 0xd8
 800561a:	2030      	movs	r0, #48	; 0x30
 800561c:	f7ff fc84 	bl	8004f28 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 8005620:	2140      	movs	r1, #64	; 0x40
 8005622:	2031      	movs	r0, #49	; 0x31
 8005624:	f7ff fc80 	bl	8004f28 <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
 8005628:	21c1      	movs	r1, #193	; 0xc1
 800562a:	2028      	movs	r0, #40	; 0x28
 800562c:	f7ff fc7c 	bl	8004f28 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8005630:	2194      	movs	r1, #148	; 0x94
 8005632:	2029      	movs	r0, #41	; 0x29
 8005634:	f7ff fc78 	bl	8004f28 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005638:	21c1      	movs	r1, #193	; 0xc1
 800563a:	202a      	movs	r0, #42	; 0x2a
 800563c:	f7ff fc74 	bl	8004f28 <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
 8005640:	21ff      	movs	r1, #255	; 0xff
 8005642:	2021      	movs	r0, #33	; 0x21
 8005644:	f7ff fc70 	bl	8004f28 <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8005648:	2102      	movs	r1, #2
 800564a:	2002      	movs	r0, #2
 800564c:	f7ff fc6c 	bl	8004f28 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 8005650:	2180      	movs	r1, #128	; 0x80
 8005652:	2003      	movs	r0, #3
 8005654:	f7ff fc68 	bl	8004f28 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8005658:	2101      	movs	r1, #1
 800565a:	2004      	movs	r0, #4
 800565c:	f7ff fc64 	bl	8004f28 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8005660:	2199      	movs	r1, #153	; 0x99
 8005662:	2005      	movs	r0, #5
 8005664:	f7ff fc60 	bl	8004f28 <writeReg>
    
    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
 8005668:	2138      	movs	r1, #56	; 0x38
 800566a:	2040      	movs	r0, #64	; 0x40
 800566c:	f7ff fc5c 	bl	8004f28 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8005670:	2000      	movs	r0, #0
 8005672:	f7fb fd82 	bl	800117a <hal_pin_rxtx>
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8005676:	4b06      	ldr	r3, [pc, #24]	; (8005690 <rxfsk+0xdc>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	4618      	mov	r0, r3
 800567c:	f7fb fe63 	bl	8001346 <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
 8005680:	2005      	movs	r0, #5
 8005682:	f7ff fcdf 	bl	8005044 <opmode>
}
 8005686:	bf00      	nop
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20000280 	.word	0x20000280

08005694 <startrx>:

static void startrx (u1_t rxmode) {
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 800569e:	2001      	movs	r0, #1
 80056a0:	f7ff fc5f 	bl	8004f62 <readReg>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <startrx+0x1e>
 80056ae:	f7fb fef3 	bl	8001498 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 80056b2:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <startrx+0x48>)
 80056b4:	89db      	ldrh	r3, [r3, #14]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fb fef5 	bl	80014a6 <getSf>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d104      	bne.n	80056cc <startrx+0x38>
        rxfsk(rxmode);
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff ff75 	bl	80055b4 <rxfsk>
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
 80056ca:	e003      	b.n	80056d4 <startrx+0x40>
        rxlora(rxmode);
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff fef4 	bl	80054bc <rxlora>
}
 80056d4:	bf00      	nop
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20000280 	.word	0x20000280

080056e0 <radio_init>:

// get random seed from wideband noise rssi
void radio_init () {
 80056e0:	b590      	push	{r4, r7, lr}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 80056e6:	f7fb fe95 	bl	8001414 <hal_disableIRQs>

    // manually reset radio
#ifdef CFG_sx1276_radio
    hal_pin_rst(0); // drive RST pin low
 80056ea:	2000      	movs	r0, #0
 80056ec:	f7fb fd62 	bl	80011b4 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
 80056f0:	f7ff fb44 	bl	8004d7c <os_getTime>
 80056f4:	4603      	mov	r3, r0
 80056f6:	3320      	adds	r3, #32
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fb fe24 	bl	8001346 <hal_waitUntil>
    hal_pin_rst(2); // configure RST pin floating!
 80056fe:	2002      	movs	r0, #2
 8005700:	f7fb fd58 	bl	80011b4 <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
 8005704:	f7ff fb3a 	bl	8004d7c <os_getTime>
 8005708:	4603      	mov	r3, r0
 800570a:	33a0      	adds	r3, #160	; 0xa0
 800570c:	4618      	mov	r0, r3
 800570e:	f7fb fe1a 	bl	8001346 <hal_waitUntil>

    opmode(OPMODE_SLEEP);
 8005712:	2000      	movs	r0, #0
 8005714:	f7ff fc96 	bl	8005044 <opmode>

    // some sanity checks, e.g., read version number
    u1_t v = readReg(RegVersion);
 8005718:	2042      	movs	r0, #66	; 0x42
 800571a:	f7ff fc22 	bl	8004f62 <readReg>
 800571e:	4603      	mov	r3, r0
 8005720:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    ASSERT(v == 0x12 ); 
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	2b12      	cmp	r3, #18
 8005726:	d001      	beq.n	800572c <radio_init+0x4c>
 8005728:	f7fb feb6 	bl	8001498 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
 800572c:	2002      	movs	r0, #2
 800572e:	f7ff fec5 	bl	80054bc <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
 8005732:	bf00      	nop
 8005734:	2001      	movs	r0, #1
 8005736:	f7ff fc14 	bl	8004f62 <readReg>
 800573a:	4603      	mov	r3, r0
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	2b05      	cmp	r3, #5
 8005742:	d1f7      	bne.n	8005734 <radio_init+0x54>
    for(int i=1; i<16; i++) {
 8005744:	2301      	movs	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	e02c      	b.n	80057a4 <radio_init+0xc4>
        for(int j=0; j<8; j++) {
 800574a:	2300      	movs	r3, #0
 800574c:	60bb      	str	r3, [r7, #8]
 800574e:	e023      	b.n	8005798 <radio_init+0xb8>
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
 8005750:	bf00      	nop
 8005752:	202c      	movs	r0, #44	; 0x2c
 8005754:	f7ff fc05 	bl	8004f62 <readReg>
 8005758:	4603      	mov	r3, r0
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	71bb      	strb	r3, [r7, #6]
 8005760:	79bc      	ldrb	r4, [r7, #6]
 8005762:	202c      	movs	r0, #44	; 0x2c
 8005764:	f7ff fbfd 	bl	8004f62 <readReg>
 8005768:	4603      	mov	r3, r0
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	429c      	cmp	r4, r3
 8005770:	d0ef      	beq.n	8005752 <radio_init+0x72>
            randbuf[i] = (randbuf[i] << 1) | b;
 8005772:	4a14      	ldr	r2, [pc, #80]	; (80057c4 <radio_init+0xe4>)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	b25a      	sxtb	r2, r3
 800577e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005782:	4313      	orrs	r3, r2
 8005784:	b25b      	sxtb	r3, r3
 8005786:	b2d9      	uxtb	r1, r3
 8005788:	4a0e      	ldr	r2, [pc, #56]	; (80057c4 <radio_init+0xe4>)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4413      	add	r3, r2
 800578e:	460a      	mov	r2, r1
 8005790:	701a      	strb	r2, [r3, #0]
        for(int j=0; j<8; j++) {
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	3301      	adds	r3, #1
 8005796:	60bb      	str	r3, [r7, #8]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b07      	cmp	r3, #7
 800579c:	ddd8      	ble.n	8005750 <radio_init+0x70>
    for(int i=1; i<16; i++) {
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3301      	adds	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b0f      	cmp	r3, #15
 80057a8:	ddcf      	ble.n	800574a <radio_init+0x6a>
        }
    }
    randbuf[0] = 16; // set initial index
 80057aa:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <radio_init+0xe4>)
 80057ac:	2210      	movs	r2, #16
 80057ae:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
 80057b0:	2000      	movs	r0, #0
 80057b2:	f7ff fc47 	bl	8005044 <opmode>

    hal_enableIRQs();
 80057b6:	f7fb fe3d 	bl	8001434 <hal_enableIRQs>
}
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd90      	pop	{r4, r7, pc}
 80057c2:	bf00      	nop
 80057c4:	2000008c 	.word	0x2000008c

080057c8 <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1 () {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
    u1_t i = randbuf[0];
 80057ce:	4b10      	ldr	r3, [pc, #64]	; (8005810 <radio_rand1+0x48>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	71fb      	strb	r3, [r7, #7]
    ASSERT( i != 0 );
 80057d4:	79fb      	ldrb	r3, [r7, #7]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <radio_rand1+0x16>
 80057da:	f7fb fe5d 	bl	8001498 <hal_failed>
    if( i==16 ) {
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	2b10      	cmp	r3, #16
 80057e2:	d106      	bne.n	80057f2 <radio_rand1+0x2a>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 80057e4:	2210      	movs	r2, #16
 80057e6:	490a      	ldr	r1, [pc, #40]	; (8005810 <radio_rand1+0x48>)
 80057e8:	2000      	movs	r0, #0
 80057ea:	f7fa ff39 	bl	8000660 <os_aes>
        i = 0;
 80057ee:	2300      	movs	r3, #0
 80057f0:	71fb      	strb	r3, [r7, #7]
    }
    u1_t v = randbuf[i++];
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	71fa      	strb	r2, [r7, #7]
 80057f8:	461a      	mov	r2, r3
 80057fa:	4b05      	ldr	r3, [pc, #20]	; (8005810 <radio_rand1+0x48>)
 80057fc:	5c9b      	ldrb	r3, [r3, r2]
 80057fe:	71bb      	strb	r3, [r7, #6]
    randbuf[0] = i;
 8005800:	4a03      	ldr	r2, [pc, #12]	; (8005810 <radio_rand1+0x48>)
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	7013      	strb	r3, [r2, #0]
    return v;
 8005806:	79bb      	ldrb	r3, [r7, #6]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	2000008c 	.word	0x2000008c

08005814 <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
    ostime_t now = os_getTime();
 800581e:	f7ff faad 	bl	8004d7c <os_getTime>
 8005822:	60f8      	str	r0, [r7, #12]
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 8005824:	2001      	movs	r0, #1
 8005826:	f7ff fb9c 	bl	8004f62 <readReg>
 800582a:	4603      	mov	r3, r0
 800582c:	b25b      	sxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	da74      	bge.n	800591c <radio_irq_handler+0x108>
        u1_t flags = readReg(LORARegIrqFlags);
 8005832:	2012      	movs	r0, #18
 8005834:	f7ff fb95 	bl	8004f62 <readReg>
 8005838:	4603      	mov	r3, r0
 800583a:	727b      	strb	r3, [r7, #9]
        if( flags & IRQ_LORA_TXDONE_MASK ) {
 800583c:	7a7b      	ldrb	r3, [r7, #9]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d004      	beq.n	8005850 <radio_irq_handler+0x3c>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3b01      	subs	r3, #1
 800584a:	4a59      	ldr	r2, [pc, #356]	; (80059b0 <radio_irq_handler+0x19c>)
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	e05c      	b.n	800590a <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
 8005850:	7a7b      	ldrb	r3, [r7, #9]
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d04f      	beq.n	80058fa <radio_irq_handler+0xe6>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
 800585a:	4b55      	ldr	r3, [pc, #340]	; (80059b0 <radio_irq_handler+0x19c>)
 800585c:	89db      	ldrh	r3, [r3, #14]
 800585e:	4618      	mov	r0, r3
 8005860:	f7fb fe31 	bl	80014c6 <getBw>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10d      	bne.n	8005886 <radio_irq_handler+0x72>
                now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 800586a:	4b51      	ldr	r3, [pc, #324]	; (80059b0 <radio_irq_handler+0x19c>)
 800586c:	89db      	ldrh	r3, [r3, #14]
 800586e:	4618      	mov	r0, r3
 8005870:	f7fb fe19 	bl	80014a6 <getSf>
 8005874:	4603      	mov	r3, r0
 8005876:	461a      	mov	r2, r3
 8005878:	4b4e      	ldr	r3, [pc, #312]	; (80059b4 <radio_irq_handler+0x1a0>)
 800587a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800587e:	461a      	mov	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
            }
            LMIC.rxtime = now;
 8005886:	4a4a      	ldr	r2, [pc, #296]	; (80059b0 <radio_irq_handler+0x19c>)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 800588c:	201d      	movs	r0, #29
 800588e:	f7ff fb68 	bl	8004f62 <readReg>
 8005892:	4603      	mov	r3, r0
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <radio_irq_handler+0x94>
 800589c:	2022      	movs	r0, #34	; 0x22
 800589e:	f7ff fb60 	bl	8004f62 <readReg>
 80058a2:	4603      	mov	r3, r0
 80058a4:	461a      	mov	r2, r3
 80058a6:	e004      	b.n	80058b2 <radio_irq_handler+0x9e>
 80058a8:	2013      	movs	r0, #19
 80058aa:	f7ff fb5a 	bl	8004f62 <readReg>
 80058ae:	4603      	mov	r3, r0
 80058b0:	461a      	mov	r2, r3
 80058b2:	4b3f      	ldr	r3, [pc, #252]	; (80059b0 <radio_irq_handler+0x19c>)
 80058b4:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr)); 
 80058b8:	2010      	movs	r0, #16
 80058ba:	f7ff fb52 	bl	8004f62 <readReg>
 80058be:	4603      	mov	r3, r0
 80058c0:	4619      	mov	r1, r3
 80058c2:	200d      	movs	r0, #13
 80058c4:	f7ff fb30 	bl	8004f28 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80058c8:	4b39      	ldr	r3, [pc, #228]	; (80059b0 <radio_irq_handler+0x19c>)
 80058ca:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80058ce:	461a      	mov	r2, r3
 80058d0:	4939      	ldr	r1, [pc, #228]	; (80059b8 <radio_irq_handler+0x1a4>)
 80058d2:	2000      	movs	r0, #0
 80058d4:	f7ff fb8b 	bl	8004fee <readBuf>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 80058d8:	2019      	movs	r0, #25
 80058da:	f7ff fb42 	bl	8004f62 <readReg>
 80058de:	4603      	mov	r3, r0
 80058e0:	b25a      	sxtb	r2, r3
 80058e2:	4b33      	ldr	r3, [pc, #204]	; (80059b0 <radio_irq_handler+0x19c>)
 80058e4:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 80058e6:	201a      	movs	r0, #26
 80058e8:	f7ff fb3b 	bl	8004f62 <readReg>
 80058ec:	4603      	mov	r3, r0
 80058ee:	3b3d      	subs	r3, #61	; 0x3d
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	b25a      	sxtb	r2, r3
 80058f4:	4b2e      	ldr	r3, [pc, #184]	; (80059b0 <radio_irq_handler+0x19c>)
 80058f6:	731a      	strb	r2, [r3, #12]
 80058f8:	e007      	b.n	800590a <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
 80058fa:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	da03      	bge.n	800590a <radio_irq_handler+0xf6>
            // indicate timeout
            LMIC.dataLen = 0;
 8005902:	4b2b      	ldr	r3, [pc, #172]	; (80059b0 <radio_irq_handler+0x19c>)
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
 800590a:	21ff      	movs	r1, #255	; 0xff
 800590c:	2011      	movs	r0, #17
 800590e:	f7ff fb0b 	bl	8004f28 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
 8005912:	21ff      	movs	r1, #255	; 0xff
 8005914:	2012      	movs	r0, #18
 8005916:	f7ff fb07 	bl	8004f28 <writeReg>
 800591a:	e03c      	b.n	8005996 <radio_irq_handler+0x182>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
 800591c:	203e      	movs	r0, #62	; 0x3e
 800591e:	f7ff fb20 	bl	8004f62 <readReg>
 8005922:	4603      	mov	r3, r0
 8005924:	72fb      	strb	r3, [r7, #11]
        u1_t flags2 = readReg(FSKRegIrqFlags2);
 8005926:	203f      	movs	r0, #63	; 0x3f
 8005928:	f7ff fb1b 	bl	8004f62 <readReg>
 800592c:	4603      	mov	r3, r0
 800592e:	72bb      	strb	r3, [r7, #10]
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
 8005930:	7abb      	ldrb	r3, [r7, #10]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <radio_irq_handler+0x12e>
            // save exact tx time
            LMIC.txend = now;
 800593a:	4a1d      	ldr	r2, [pc, #116]	; (80059b0 <radio_irq_handler+0x19c>)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	e029      	b.n	8005996 <radio_irq_handler+0x182>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
 8005942:	7abb      	ldrb	r3, [r7, #10]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d019      	beq.n	8005980 <radio_irq_handler+0x16c>
            // save exact rx time
            LMIC.rxtime = now;
 800594c:	4a18      	ldr	r2, [pc, #96]	; (80059b0 <radio_irq_handler+0x19c>)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
 8005952:	2032      	movs	r0, #50	; 0x32
 8005954:	f7ff fb05 	bl	8004f62 <readReg>
 8005958:	4603      	mov	r3, r0
 800595a:	461a      	mov	r2, r3
 800595c:	4b14      	ldr	r3, [pc, #80]	; (80059b0 <radio_irq_handler+0x19c>)
 800595e:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005962:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <radio_irq_handler+0x19c>)
 8005964:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005968:	461a      	mov	r2, r3
 800596a:	4913      	ldr	r1, [pc, #76]	; (80059b8 <radio_irq_handler+0x1a4>)
 800596c:	2000      	movs	r0, #0
 800596e:	f7ff fb3e 	bl	8004fee <readBuf>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
 8005972:	4b0f      	ldr	r3, [pc, #60]	; (80059b0 <radio_irq_handler+0x19c>)
 8005974:	2200      	movs	r2, #0
 8005976:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = 0; // determine rssi
 8005978:	4b0d      	ldr	r3, [pc, #52]	; (80059b0 <radio_irq_handler+0x19c>)
 800597a:	2200      	movs	r2, #0
 800597c:	731a      	strb	r2, [r3, #12]
 800597e:	e00a      	b.n	8005996 <radio_irq_handler+0x182>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
 8005980:	7afb      	ldrb	r3, [r7, #11]
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b00      	cmp	r3, #0
 8005988:	d004      	beq.n	8005994 <radio_irq_handler+0x180>
            // indicate timeout
            LMIC.dataLen = 0;
 800598a:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <radio_irq_handler+0x19c>)
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8005992:	e000      	b.n	8005996 <radio_irq_handler+0x182>
        } else {
            while(1);
 8005994:	e7fe      	b.n	8005994 <radio_irq_handler+0x180>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
 8005996:	2000      	movs	r0, #0
 8005998:	f7ff fb54 	bl	8005044 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 800599c:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <radio_irq_handler+0x19c>)
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	4619      	mov	r1, r3
 80059a2:	4806      	ldr	r0, [pc, #24]	; (80059bc <radio_irq_handler+0x1a8>)
 80059a4:	f7ff fa2e 	bl	8004e04 <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 80059a8:	bf00      	nop
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20000280 	.word	0x20000280
 80059b4:	0800c758 	.word	0x0800c758
 80059b8:	200003c8 	.word	0x200003c8
 80059bc:	20000294 	.word	0x20000294

080059c0 <os_radio>:

void os_radio (u1_t mode) {
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	4603      	mov	r3, r0
 80059c8:	71fb      	strb	r3, [r7, #7]
    hal_disableIRQs();
 80059ca:	f7fb fd23 	bl	8001414 <hal_disableIRQs>
    switch (mode) {
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	d81a      	bhi.n	8005a0a <os_radio+0x4a>
 80059d4:	a201      	add	r2, pc, #4	; (adr r2, 80059dc <os_radio+0x1c>)
 80059d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059da:	bf00      	nop
 80059dc:	080059ed 	.word	0x080059ed
 80059e0:	080059f5 	.word	0x080059f5
 80059e4:	080059fb 	.word	0x080059fb
 80059e8:	08005a03 	.word	0x08005a03
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
 80059ec:	2000      	movs	r0, #0
 80059ee:	f7ff fb29 	bl	8005044 <opmode>
        break;
 80059f2:	e00a      	b.n	8005a0a <os_radio+0x4a>

      case RADIO_TX:
        // transmit frame now
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 80059f4:	f7ff fd44 	bl	8005480 <starttx>
        break;
 80059f8:	e007      	b.n	8005a0a <os_radio+0x4a>
      
      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 80059fa:	2000      	movs	r0, #0
 80059fc:	f7ff fe4a 	bl	8005694 <startrx>
        break;
 8005a00:	e003      	b.n	8005a0a <os_radio+0x4a>

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
 8005a02:	2001      	movs	r0, #1
 8005a04:	f7ff fe46 	bl	8005694 <startrx>
        break;
 8005a08:	bf00      	nop
    }
    hal_enableIRQs();
 8005a0a:	f7fb fd13 	bl	8001434 <hal_enableIRQs>
}
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop

08005a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a1e:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <HAL_MspInit+0x44>)
 8005a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a22:	4a0e      	ldr	r2, [pc, #56]	; (8005a5c <HAL_MspInit+0x44>)
 8005a24:	f043 0301 	orr.w	r3, r3, #1
 8005a28:	6613      	str	r3, [r2, #96]	; 0x60
 8005a2a:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <HAL_MspInit+0x44>)
 8005a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	607b      	str	r3, [r7, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a36:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <HAL_MspInit+0x44>)
 8005a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3a:	4a08      	ldr	r2, [pc, #32]	; (8005a5c <HAL_MspInit+0x44>)
 8005a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a40:	6593      	str	r3, [r2, #88]	; 0x58
 8005a42:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <HAL_MspInit+0x44>)
 8005a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	40021000 	.word	0x40021000

08005a60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	; 0x28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a68:	f107 0314 	add.w	r3, r7, #20
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	605a      	str	r2, [r3, #4]
 8005a72:	609a      	str	r2, [r3, #8]
 8005a74:	60da      	str	r2, [r3, #12]
 8005a76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a17      	ldr	r2, [pc, #92]	; (8005adc <HAL_SPI_MspInit+0x7c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d128      	bne.n	8005ad4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a82:	4b17      	ldr	r3, [pc, #92]	; (8005ae0 <HAL_SPI_MspInit+0x80>)
 8005a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a86:	4a16      	ldr	r2, [pc, #88]	; (8005ae0 <HAL_SPI_MspInit+0x80>)
 8005a88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a8c:	6613      	str	r3, [r2, #96]	; 0x60
 8005a8e:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <HAL_SPI_MspInit+0x80>)
 8005a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a9a:	4b11      	ldr	r3, [pc, #68]	; (8005ae0 <HAL_SPI_MspInit+0x80>)
 8005a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9e:	4a10      	ldr	r2, [pc, #64]	; (8005ae0 <HAL_SPI_MspInit+0x80>)
 8005aa0:	f043 0301 	orr.w	r3, r3, #1
 8005aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005aa6:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <HAL_SPI_MspInit+0x80>)
 8005aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005ab2:	23e0      	movs	r3, #224	; 0xe0
 8005ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aba:	2300      	movs	r3, #0
 8005abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005ac2:	2305      	movs	r3, #5
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ac6:	f107 0314 	add.w	r3, r7, #20
 8005aca:	4619      	mov	r1, r3
 8005acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ad0:	f000 fad4 	bl	800607c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005ad4:	bf00      	nop
 8005ad6:	3728      	adds	r7, #40	; 0x28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40013000 	.word	0x40013000
 8005ae0:	40021000 	.word	0x40021000

08005ae4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a0d      	ldr	r2, [pc, #52]	; (8005b28 <HAL_TIM_OC_MspInit+0x44>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d113      	bne.n	8005b1e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005af6:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <HAL_TIM_OC_MspInit+0x48>)
 8005af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afa:	4a0c      	ldr	r2, [pc, #48]	; (8005b2c <HAL_TIM_OC_MspInit+0x48>)
 8005afc:	f043 0304 	orr.w	r3, r3, #4
 8005b00:	6593      	str	r3, [r2, #88]	; 0x58
 8005b02:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <HAL_TIM_OC_MspInit+0x48>)
 8005b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2100      	movs	r1, #0
 8005b12:	201e      	movs	r0, #30
 8005b14:	f000 fa62 	bl	8005fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005b18:	201e      	movs	r0, #30
 8005b1a:	f000 fa8b 	bl	8006034 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005b1e:	bf00      	nop
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40000800 	.word	0x40000800
 8005b2c:	40021000 	.word	0x40021000

08005b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08a      	sub	sp, #40	; 0x28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b38:	f107 0314 	add.w	r3, r7, #20
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	605a      	str	r2, [r3, #4]
 8005b42:	609a      	str	r2, [r3, #8]
 8005b44:	60da      	str	r2, [r3, #12]
 8005b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a17      	ldr	r2, [pc, #92]	; (8005bac <HAL_UART_MspInit+0x7c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d128      	bne.n	8005ba4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b52:	4b17      	ldr	r3, [pc, #92]	; (8005bb0 <HAL_UART_MspInit+0x80>)
 8005b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b56:	4a16      	ldr	r2, [pc, #88]	; (8005bb0 <HAL_UART_MspInit+0x80>)
 8005b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8005b5e:	4b14      	ldr	r3, [pc, #80]	; (8005bb0 <HAL_UART_MspInit+0x80>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b66:	613b      	str	r3, [r7, #16]
 8005b68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b6a:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <HAL_UART_MspInit+0x80>)
 8005b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b6e:	4a10      	ldr	r2, [pc, #64]	; (8005bb0 <HAL_UART_MspInit+0x80>)
 8005b70:	f043 0301 	orr.w	r3, r3, #1
 8005b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b76:	4b0e      	ldr	r3, [pc, #56]	; (8005bb0 <HAL_UART_MspInit+0x80>)
 8005b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005b82:	230c      	movs	r3, #12
 8005b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b86:	2302      	movs	r3, #2
 8005b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005b92:	2307      	movs	r3, #7
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b96:	f107 0314 	add.w	r3, r7, #20
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ba0:	f000 fa6c 	bl	800607c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005ba4:	bf00      	nop
 8005ba6:	3728      	adds	r7, #40	; 0x28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40004400 	.word	0x40004400
 8005bb0:	40021000 	.word	0x40021000

08005bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005bb8:	bf00      	nop
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bc6:	e7fe      	b.n	8005bc6 <HardFault_Handler+0x4>

08005bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005bcc:	e7fe      	b.n	8005bcc <MemManage_Handler+0x4>

08005bce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005bd2:	e7fe      	b.n	8005bd2 <BusFault_Handler+0x4>

08005bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005bd8:	e7fe      	b.n	8005bd8 <UsageFault_Handler+0x4>

08005bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005bde:	bf00      	nop
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005bec:	bf00      	nop
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005bfa:	bf00      	nop
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c08:	f000 f8da 	bl	8005dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c0c:	bf00      	nop
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005c14:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005c18:	f000 fcee 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005c1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005c20:	f000 fcea 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005c24:	bf00      	nop
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005c2c:	4802      	ldr	r0, [pc, #8]	; (8005c38 <TIM4_IRQHandler+0x10>)
 8005c2e:	f003 fadb 	bl	80091e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005c32:	bf00      	nop
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	2000015c 	.word	0x2000015c

08005c3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005c40:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005c44:	f000 fcd8 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005c48:	bf00      	nop
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c50:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <SystemInit+0x64>)
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c56:	4a16      	ldr	r2, [pc, #88]	; (8005cb0 <SystemInit+0x64>)
 8005c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005c60:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <SystemInit+0x68>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a13      	ldr	r2, [pc, #76]	; (8005cb4 <SystemInit+0x68>)
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005c6c:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <SystemInit+0x68>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005c72:	4b10      	ldr	r3, [pc, #64]	; (8005cb4 <SystemInit+0x68>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a0f      	ldr	r2, [pc, #60]	; (8005cb4 <SystemInit+0x68>)
 8005c78:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005c7c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005c80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005c82:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <SystemInit+0x68>)
 8005c84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c88:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005c8a:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <SystemInit+0x68>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a09      	ldr	r2, [pc, #36]	; (8005cb4 <SystemInit+0x68>)
 8005c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005c96:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <SystemInit+0x68>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c9c:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <SystemInit+0x64>)
 8005c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ca2:	609a      	str	r2, [r3, #8]
#endif
}
 8005ca4:	bf00      	nop
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	e000ed00 	.word	0xe000ed00
 8005cb4:	40021000 	.word	0x40021000

08005cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005cf0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005cbc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005cbe:	e003      	b.n	8005cc8 <LoopCopyDataInit>

08005cc0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005cc2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005cc4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005cc6:	3104      	adds	r1, #4

08005cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005cc8:	480b      	ldr	r0, [pc, #44]	; (8005cf8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005cca:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <LoopForever+0xe>)
	adds	r2, r0, r1
 8005ccc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005cce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005cd0:	d3f6      	bcc.n	8005cc0 <CopyDataInit>
	ldr	r2, =_sbss
 8005cd2:	4a0b      	ldr	r2, [pc, #44]	; (8005d00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005cd4:	e002      	b.n	8005cdc <LoopFillZerobss>

08005cd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005cd6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005cd8:	f842 3b04 	str.w	r3, [r2], #4

08005cdc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005cdc:	4b09      	ldr	r3, [pc, #36]	; (8005d04 <LoopForever+0x16>)
	cmp	r2, r3
 8005cde:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005ce0:	d3f9      	bcc.n	8005cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005ce2:	f7ff ffb3 	bl	8005c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ce6:	f005 f9c1 	bl	800b06c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005cea:	f7fe fe29 	bl	8004940 <main>

08005cee <LoopForever>:

LoopForever:
    b LoopForever
 8005cee:	e7fe      	b.n	8005cee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005cf0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005cf4:	0800c7c0 	.word	0x0800c7c0
	ldr	r0, =_sdata
 8005cf8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005cfc:	20000054 	.word	0x20000054
	ldr	r2, =_sbss
 8005d00:	20000054 	.word	0x20000054
	ldr	r3, = _ebss
 8005d04:	20000430 	.word	0x20000430

08005d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005d08:	e7fe      	b.n	8005d08 <ADC1_2_IRQHandler>
	...

08005d0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d16:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <HAL_Init+0x3c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a0b      	ldr	r2, [pc, #44]	; (8005d48 <HAL_Init+0x3c>)
 8005d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d22:	2003      	movs	r0, #3
 8005d24:	f000 f93a 	bl	8005f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d28:	2000      	movs	r0, #0
 8005d2a:	f000 f80f 	bl	8005d4c <HAL_InitTick>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	71fb      	strb	r3, [r7, #7]
 8005d38:	e001      	b.n	8005d3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005d3a:	f7ff fe6d 	bl	8005a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005d3e:	79fb      	ldrb	r3, [r7, #7]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	40022000 	.word	0x40022000

08005d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005d58:	4b16      	ldr	r3, [pc, #88]	; (8005db4 <HAL_InitTick+0x68>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d022      	beq.n	8005da6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005d60:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <HAL_InitTick+0x6c>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	4b13      	ldr	r3, [pc, #76]	; (8005db4 <HAL_InitTick+0x68>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 f975 	bl	8006064 <HAL_SYSTICK_Config>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10f      	bne.n	8005da0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b0f      	cmp	r3, #15
 8005d84:	d809      	bhi.n	8005d9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d86:	2200      	movs	r2, #0
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8e:	f000 f925 	bl	8005fdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d92:	4a0a      	ldr	r2, [pc, #40]	; (8005dbc <HAL_InitTick+0x70>)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	e007      	b.n	8005daa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	73fb      	strb	r3, [r7, #15]
 8005d9e:	e004      	b.n	8005daa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	73fb      	strb	r3, [r7, #15]
 8005da4:	e001      	b.n	8005daa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	20000050 	.word	0x20000050
 8005db8:	20000048 	.word	0x20000048
 8005dbc:	2000004c 	.word	0x2000004c

08005dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005dc4:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <HAL_IncTick+0x1c>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <HAL_IncTick+0x20>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4413      	add	r3, r2
 8005dce:	4a03      	ldr	r2, [pc, #12]	; (8005ddc <HAL_IncTick+0x1c>)
 8005dd0:	6013      	str	r3, [r2, #0]
}
 8005dd2:	bf00      	nop
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	2000042c 	.word	0x2000042c
 8005de0:	20000050 	.word	0x20000050

08005de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  return uwTick;
 8005de8:	4b03      	ldr	r3, [pc, #12]	; (8005df8 <HAL_GetTick+0x14>)
 8005dea:	681b      	ldr	r3, [r3, #0]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	2000042c 	.word	0x2000042c

08005dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e0c:	4b0c      	ldr	r3, [pc, #48]	; (8005e40 <__NVIC_SetPriorityGrouping+0x44>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e2e:	4a04      	ldr	r2, [pc, #16]	; (8005e40 <__NVIC_SetPriorityGrouping+0x44>)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	60d3      	str	r3, [r2, #12]
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	e000ed00 	.word	0xe000ed00

08005e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e48:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <__NVIC_GetPriorityGrouping+0x18>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	0a1b      	lsrs	r3, r3, #8
 8005e4e:	f003 0307 	and.w	r3, r3, #7
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	e000ed00 	.word	0xe000ed00

08005e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	db0b      	blt.n	8005e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e72:	79fb      	ldrb	r3, [r7, #7]
 8005e74:	f003 021f 	and.w	r2, r3, #31
 8005e78:	4907      	ldr	r1, [pc, #28]	; (8005e98 <__NVIC_EnableIRQ+0x38>)
 8005e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	2001      	movs	r0, #1
 8005e82:	fa00 f202 	lsl.w	r2, r0, r2
 8005e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	e000e100 	.word	0xe000e100

08005e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	6039      	str	r1, [r7, #0]
 8005ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	db0a      	blt.n	8005ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	490c      	ldr	r1, [pc, #48]	; (8005ee8 <__NVIC_SetPriority+0x4c>)
 8005eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eba:	0112      	lsls	r2, r2, #4
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ec4:	e00a      	b.n	8005edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	4908      	ldr	r1, [pc, #32]	; (8005eec <__NVIC_SetPriority+0x50>)
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	3b04      	subs	r3, #4
 8005ed4:	0112      	lsls	r2, r2, #4
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	440b      	add	r3, r1
 8005eda:	761a      	strb	r2, [r3, #24]
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	e000e100 	.word	0xe000e100
 8005eec:	e000ed00 	.word	0xe000ed00

08005ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b089      	sub	sp, #36	; 0x24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f1c3 0307 	rsb	r3, r3, #7
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	bf28      	it	cs
 8005f0e:	2304      	movcs	r3, #4
 8005f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	3304      	adds	r3, #4
 8005f16:	2b06      	cmp	r3, #6
 8005f18:	d902      	bls.n	8005f20 <NVIC_EncodePriority+0x30>
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	3b03      	subs	r3, #3
 8005f1e:	e000      	b.n	8005f22 <NVIC_EncodePriority+0x32>
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f24:	f04f 32ff 	mov.w	r2, #4294967295
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	43da      	mvns	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	401a      	ands	r2, r3
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f38:	f04f 31ff 	mov.w	r1, #4294967295
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f42:	43d9      	mvns	r1, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f48:	4313      	orrs	r3, r2
         );
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3724      	adds	r7, #36	; 0x24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
	...

08005f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f68:	d301      	bcc.n	8005f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e00f      	b.n	8005f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f6e:	4a0a      	ldr	r2, [pc, #40]	; (8005f98 <SysTick_Config+0x40>)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f76:	210f      	movs	r1, #15
 8005f78:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7c:	f7ff ff8e 	bl	8005e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f80:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <SysTick_Config+0x40>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f86:	4b04      	ldr	r3, [pc, #16]	; (8005f98 <SysTick_Config+0x40>)
 8005f88:	2207      	movs	r2, #7
 8005f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	e000e010 	.word	0xe000e010

08005f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b07      	cmp	r3, #7
 8005fa8:	d00f      	beq.n	8005fca <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b06      	cmp	r3, #6
 8005fae:	d00c      	beq.n	8005fca <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b05      	cmp	r3, #5
 8005fb4:	d009      	beq.n	8005fca <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d006      	beq.n	8005fca <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d003      	beq.n	8005fca <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005fc2:	21a7      	movs	r1, #167	; 0xa7
 8005fc4:	4804      	ldr	r0, [pc, #16]	; (8005fd8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8005fc6:	f7fe febc 	bl	8004d42 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff ff16 	bl	8005dfc <__NVIC_SetPriorityGrouping>
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	0800b36c 	.word	0x0800b36c

08005fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b0f      	cmp	r3, #15
 8005ff2:	d903      	bls.n	8005ffc <HAL_NVIC_SetPriority+0x20>
 8005ff4:	21bf      	movs	r1, #191	; 0xbf
 8005ff6:	480e      	ldr	r0, [pc, #56]	; (8006030 <HAL_NVIC_SetPriority+0x54>)
 8005ff8:	f7fe fea3 	bl	8004d42 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b0f      	cmp	r3, #15
 8006000:	d903      	bls.n	800600a <HAL_NVIC_SetPriority+0x2e>
 8006002:	21c0      	movs	r1, #192	; 0xc0
 8006004:	480a      	ldr	r0, [pc, #40]	; (8006030 <HAL_NVIC_SetPriority+0x54>)
 8006006:	f7fe fe9c 	bl	8004d42 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800600a:	f7ff ff1b 	bl	8005e44 <__NVIC_GetPriorityGrouping>
 800600e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	6978      	ldr	r0, [r7, #20]
 8006016:	f7ff ff6b 	bl	8005ef0 <NVIC_EncodePriority>
 800601a:	4602      	mov	r2, r0
 800601c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006020:	4611      	mov	r1, r2
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff ff3a 	bl	8005e9c <__NVIC_SetPriority>
}
 8006028:	bf00      	nop
 800602a:	3718      	adds	r7, #24
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	0800b36c 	.word	0x0800b36c

08006034 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	4603      	mov	r3, r0
 800603c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800603e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006042:	2b00      	cmp	r3, #0
 8006044:	da03      	bge.n	800604e <HAL_NVIC_EnableIRQ+0x1a>
 8006046:	21d3      	movs	r1, #211	; 0xd3
 8006048:	4805      	ldr	r0, [pc, #20]	; (8006060 <HAL_NVIC_EnableIRQ+0x2c>)
 800604a:	f7fe fe7a 	bl	8004d42 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800604e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff ff04 	bl	8005e60 <__NVIC_EnableIRQ>
}
 8006058:	bf00      	nop
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	0800b36c 	.word	0x0800b36c

08006064 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff ff73 	bl	8005f58 <SysTick_Config>
 8006072:	4603      	mov	r3, r0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006090:	d01f      	beq.n	80060d2 <HAL_GPIO_Init+0x56>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a3f      	ldr	r2, [pc, #252]	; (8006194 <HAL_GPIO_Init+0x118>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d01b      	beq.n	80060d2 <HAL_GPIO_Init+0x56>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a3e      	ldr	r2, [pc, #248]	; (8006198 <HAL_GPIO_Init+0x11c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d017      	beq.n	80060d2 <HAL_GPIO_Init+0x56>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a3d      	ldr	r2, [pc, #244]	; (800619c <HAL_GPIO_Init+0x120>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d013      	beq.n	80060d2 <HAL_GPIO_Init+0x56>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a3c      	ldr	r2, [pc, #240]	; (80061a0 <HAL_GPIO_Init+0x124>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00f      	beq.n	80060d2 <HAL_GPIO_Init+0x56>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a3b      	ldr	r2, [pc, #236]	; (80061a4 <HAL_GPIO_Init+0x128>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00b      	beq.n	80060d2 <HAL_GPIO_Init+0x56>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a3a      	ldr	r2, [pc, #232]	; (80061a8 <HAL_GPIO_Init+0x12c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d007      	beq.n	80060d2 <HAL_GPIO_Init+0x56>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a39      	ldr	r2, [pc, #228]	; (80061ac <HAL_GPIO_Init+0x130>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d003      	beq.n	80060d2 <HAL_GPIO_Init+0x56>
 80060ca:	21b3      	movs	r1, #179	; 0xb3
 80060cc:	4838      	ldr	r0, [pc, #224]	; (80061b0 <HAL_GPIO_Init+0x134>)
 80060ce:	f7fe fe38 	bl	8004d42 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <HAL_GPIO_Init+0x6c>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	0c1b      	lsrs	r3, r3, #16
 80060e2:	041b      	lsls	r3, r3, #16
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <HAL_GPIO_Init+0x74>
 80060e8:	21b4      	movs	r1, #180	; 0xb4
 80060ea:	4831      	ldr	r0, [pc, #196]	; (80061b0 <HAL_GPIO_Init+0x134>)
 80060ec:	f7fe fe29 	bl	8004d42 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d039      	beq.n	800616c <HAL_GPIO_Init+0xf0>
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d035      	beq.n	800616c <HAL_GPIO_Init+0xf0>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2b11      	cmp	r3, #17
 8006106:	d031      	beq.n	800616c <HAL_GPIO_Init+0xf0>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	2b02      	cmp	r3, #2
 800610e:	d02d      	beq.n	800616c <HAL_GPIO_Init+0xf0>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2b12      	cmp	r3, #18
 8006116:	d029      	beq.n	800616c <HAL_GPIO_Init+0xf0>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	4a25      	ldr	r2, [pc, #148]	; (80061b4 <HAL_GPIO_Init+0x138>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d024      	beq.n	800616c <HAL_GPIO_Init+0xf0>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	4a24      	ldr	r2, [pc, #144]	; (80061b8 <HAL_GPIO_Init+0x13c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d01f      	beq.n	800616c <HAL_GPIO_Init+0xf0>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	4a22      	ldr	r2, [pc, #136]	; (80061bc <HAL_GPIO_Init+0x140>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d01a      	beq.n	800616c <HAL_GPIO_Init+0xf0>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	4a21      	ldr	r2, [pc, #132]	; (80061c0 <HAL_GPIO_Init+0x144>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d015      	beq.n	800616c <HAL_GPIO_Init+0xf0>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	4a1f      	ldr	r2, [pc, #124]	; (80061c4 <HAL_GPIO_Init+0x148>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d010      	beq.n	800616c <HAL_GPIO_Init+0xf0>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	4a1e      	ldr	r2, [pc, #120]	; (80061c8 <HAL_GPIO_Init+0x14c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00b      	beq.n	800616c <HAL_GPIO_Init+0xf0>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	2b03      	cmp	r3, #3
 800615a:	d007      	beq.n	800616c <HAL_GPIO_Init+0xf0>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2b0b      	cmp	r3, #11
 8006162:	d003      	beq.n	800616c <HAL_GPIO_Init+0xf0>
 8006164:	21b5      	movs	r1, #181	; 0xb5
 8006166:	4812      	ldr	r0, [pc, #72]	; (80061b0 <HAL_GPIO_Init+0x134>)
 8006168:	f7fe fdeb 	bl	8004d42 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8200 	beq.w	8006576 <HAL_GPIO_Init+0x4fa>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	2b01      	cmp	r3, #1
 800617c:	f000 81fb 	beq.w	8006576 <HAL_GPIO_Init+0x4fa>
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	2b02      	cmp	r3, #2
 8006186:	f000 81f6 	beq.w	8006576 <HAL_GPIO_Init+0x4fa>
 800618a:	21b6      	movs	r1, #182	; 0xb6
 800618c:	4808      	ldr	r0, [pc, #32]	; (80061b0 <HAL_GPIO_Init+0x134>)
 800618e:	f7fe fdd8 	bl	8004d42 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006192:	e1f0      	b.n	8006576 <HAL_GPIO_Init+0x4fa>
 8006194:	48000400 	.word	0x48000400
 8006198:	48000800 	.word	0x48000800
 800619c:	48000c00 	.word	0x48000c00
 80061a0:	48001000 	.word	0x48001000
 80061a4:	48001400 	.word	0x48001400
 80061a8:	48001800 	.word	0x48001800
 80061ac:	48001c00 	.word	0x48001c00
 80061b0:	0800b3a8 	.word	0x0800b3a8
 80061b4:	10110000 	.word	0x10110000
 80061b8:	10210000 	.word	0x10210000
 80061bc:	10310000 	.word	0x10310000
 80061c0:	10120000 	.word	0x10120000
 80061c4:	10220000 	.word	0x10220000
 80061c8:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	2101      	movs	r1, #1
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	fa01 f303 	lsl.w	r3, r1, r3
 80061d8:	4013      	ands	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 81c6 	beq.w	8006570 <HAL_GPIO_Init+0x4f4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d003      	beq.n	80061f4 <HAL_GPIO_Init+0x178>
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b12      	cmp	r3, #18
 80061f2:	d14f      	bne.n	8006294 <HAL_GPIO_Init+0x218>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80061fa:	d01f      	beq.n	800623c <HAL_GPIO_Init+0x1c0>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4aa0      	ldr	r2, [pc, #640]	; (8006480 <HAL_GPIO_Init+0x404>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d01b      	beq.n	800623c <HAL_GPIO_Init+0x1c0>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a9f      	ldr	r2, [pc, #636]	; (8006484 <HAL_GPIO_Init+0x408>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d017      	beq.n	800623c <HAL_GPIO_Init+0x1c0>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a9e      	ldr	r2, [pc, #632]	; (8006488 <HAL_GPIO_Init+0x40c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d013      	beq.n	800623c <HAL_GPIO_Init+0x1c0>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a9d      	ldr	r2, [pc, #628]	; (800648c <HAL_GPIO_Init+0x410>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d00f      	beq.n	800623c <HAL_GPIO_Init+0x1c0>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a9c      	ldr	r2, [pc, #624]	; (8006490 <HAL_GPIO_Init+0x414>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d00b      	beq.n	800623c <HAL_GPIO_Init+0x1c0>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a9b      	ldr	r2, [pc, #620]	; (8006494 <HAL_GPIO_Init+0x418>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d007      	beq.n	800623c <HAL_GPIO_Init+0x1c0>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a9a      	ldr	r2, [pc, #616]	; (8006498 <HAL_GPIO_Init+0x41c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d003      	beq.n	800623c <HAL_GPIO_Init+0x1c0>
 8006234:	21c5      	movs	r1, #197	; 0xc5
 8006236:	4899      	ldr	r0, [pc, #612]	; (800649c <HAL_GPIO_Init+0x420>)
 8006238:	f7fe fd83 	bl	8004d42 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b0f      	cmp	r3, #15
 8006242:	d903      	bls.n	800624c <HAL_GPIO_Init+0x1d0>
 8006244:	21c6      	movs	r1, #198	; 0xc6
 8006246:	4895      	ldr	r0, [pc, #596]	; (800649c <HAL_GPIO_Init+0x420>)
 8006248:	f7fe fd7b 	bl	8004d42 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	08da      	lsrs	r2, r3, #3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3208      	adds	r2, #8
 8006254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006258:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	220f      	movs	r2, #15
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	43db      	mvns	r3, r3
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4013      	ands	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4313      	orrs	r3, r2
 8006284:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	08da      	lsrs	r2, r3, #3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3208      	adds	r2, #8
 800628e:	6939      	ldr	r1, [r7, #16]
 8006290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	2203      	movs	r2, #3
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	43db      	mvns	r3, r3
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4013      	ands	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f003 0203 	and.w	r2, r3, #3
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	fa02 f303 	lsl.w	r3, r2, r3
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d00b      	beq.n	80062e8 <HAL_GPIO_Init+0x26c>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d007      	beq.n	80062e8 <HAL_GPIO_Init+0x26c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062dc:	2b11      	cmp	r3, #17
 80062de:	d003      	beq.n	80062e8 <HAL_GPIO_Init+0x26c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2b12      	cmp	r3, #18
 80062e6:	d144      	bne.n	8006372 <HAL_GPIO_Init+0x2f6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00f      	beq.n	8006310 <HAL_GPIO_Init+0x294>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d00b      	beq.n	8006310 <HAL_GPIO_Init+0x294>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d007      	beq.n	8006310 <HAL_GPIO_Init+0x294>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b03      	cmp	r3, #3
 8006306:	d003      	beq.n	8006310 <HAL_GPIO_Init+0x294>
 8006308:	21da      	movs	r1, #218	; 0xda
 800630a:	4864      	ldr	r0, [pc, #400]	; (800649c <HAL_GPIO_Init+0x420>)
 800630c:	f7fe fd19 	bl	8004d42 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	2203      	movs	r2, #3
 800631c:	fa02 f303 	lsl.w	r3, r2, r3
 8006320:	43db      	mvns	r3, r3
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4013      	ands	r3, r2
 8006326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	005b      	lsls	r3, r3, #1
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006346:	2201      	movs	r2, #1
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	fa02 f303 	lsl.w	r3, r2, r3
 800634e:	43db      	mvns	r3, r3
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4013      	ands	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	091b      	lsrs	r3, r3, #4
 800635c:	f003 0201 	and.w	r2, r3, #1
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	2b03      	cmp	r3, #3
 800637c:	d118      	bne.n	80063b0 <HAL_GPIO_Init+0x334>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006384:	2201      	movs	r2, #1
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	fa02 f303 	lsl.w	r3, r2, r3
 800638c:	43db      	mvns	r3, r3
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	4013      	ands	r3, r2
 8006392:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	08db      	lsrs	r3, r3, #3
 800639a:	f003 0201 	and.w	r2, r3, #1
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	2203      	movs	r2, #3
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	43db      	mvns	r3, r3
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4013      	ands	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 80c1 	beq.w	8006570 <HAL_GPIO_Init+0x4f4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063ee:	4b2c      	ldr	r3, [pc, #176]	; (80064a0 <HAL_GPIO_Init+0x424>)
 80063f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f2:	4a2b      	ldr	r2, [pc, #172]	; (80064a0 <HAL_GPIO_Init+0x424>)
 80063f4:	f043 0301 	orr.w	r3, r3, #1
 80063f8:	6613      	str	r3, [r2, #96]	; 0x60
 80063fa:	4b29      	ldr	r3, [pc, #164]	; (80064a0 <HAL_GPIO_Init+0x424>)
 80063fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	60bb      	str	r3, [r7, #8]
 8006404:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006406:	4a27      	ldr	r2, [pc, #156]	; (80064a4 <HAL_GPIO_Init+0x428>)
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	089b      	lsrs	r3, r3, #2
 800640c:	3302      	adds	r3, #2
 800640e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006412:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	220f      	movs	r2, #15
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	43db      	mvns	r3, r3
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4013      	ands	r3, r2
 8006428:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006430:	d03a      	beq.n	80064a8 <HAL_GPIO_Init+0x42c>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a12      	ldr	r2, [pc, #72]	; (8006480 <HAL_GPIO_Init+0x404>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d01f      	beq.n	800647a <HAL_GPIO_Init+0x3fe>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a11      	ldr	r2, [pc, #68]	; (8006484 <HAL_GPIO_Init+0x408>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d019      	beq.n	8006476 <HAL_GPIO_Init+0x3fa>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a10      	ldr	r2, [pc, #64]	; (8006488 <HAL_GPIO_Init+0x40c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d013      	beq.n	8006472 <HAL_GPIO_Init+0x3f6>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a0f      	ldr	r2, [pc, #60]	; (800648c <HAL_GPIO_Init+0x410>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d00d      	beq.n	800646e <HAL_GPIO_Init+0x3f2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a0e      	ldr	r2, [pc, #56]	; (8006490 <HAL_GPIO_Init+0x414>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d007      	beq.n	800646a <HAL_GPIO_Init+0x3ee>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a0d      	ldr	r2, [pc, #52]	; (8006494 <HAL_GPIO_Init+0x418>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d101      	bne.n	8006466 <HAL_GPIO_Init+0x3ea>
 8006462:	2306      	movs	r3, #6
 8006464:	e021      	b.n	80064aa <HAL_GPIO_Init+0x42e>
 8006466:	2307      	movs	r3, #7
 8006468:	e01f      	b.n	80064aa <HAL_GPIO_Init+0x42e>
 800646a:	2305      	movs	r3, #5
 800646c:	e01d      	b.n	80064aa <HAL_GPIO_Init+0x42e>
 800646e:	2304      	movs	r3, #4
 8006470:	e01b      	b.n	80064aa <HAL_GPIO_Init+0x42e>
 8006472:	2303      	movs	r3, #3
 8006474:	e019      	b.n	80064aa <HAL_GPIO_Init+0x42e>
 8006476:	2302      	movs	r3, #2
 8006478:	e017      	b.n	80064aa <HAL_GPIO_Init+0x42e>
 800647a:	2301      	movs	r3, #1
 800647c:	e015      	b.n	80064aa <HAL_GPIO_Init+0x42e>
 800647e:	bf00      	nop
 8006480:	48000400 	.word	0x48000400
 8006484:	48000800 	.word	0x48000800
 8006488:	48000c00 	.word	0x48000c00
 800648c:	48001000 	.word	0x48001000
 8006490:	48001400 	.word	0x48001400
 8006494:	48001800 	.word	0x48001800
 8006498:	48001c00 	.word	0x48001c00
 800649c:	0800b3a8 	.word	0x0800b3a8
 80064a0:	40021000 	.word	0x40021000
 80064a4:	40010000 	.word	0x40010000
 80064a8:	2300      	movs	r3, #0
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	f002 0203 	and.w	r2, r2, #3
 80064b0:	0092      	lsls	r2, r2, #2
 80064b2:	4093      	lsls	r3, r2
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80064ba:	4935      	ldr	r1, [pc, #212]	; (8006590 <HAL_GPIO_Init+0x514>)
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	089b      	lsrs	r3, r3, #2
 80064c0:	3302      	adds	r3, #2
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80064c8:	4b32      	ldr	r3, [pc, #200]	; (8006594 <HAL_GPIO_Init+0x518>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	43db      	mvns	r3, r3
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	4013      	ands	r3, r2
 80064d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <HAL_GPIO_Init+0x470>
        {
          temp |= iocurrent;
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80064ec:	4a29      	ldr	r2, [pc, #164]	; (8006594 <HAL_GPIO_Init+0x518>)
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80064f2:	4b28      	ldr	r3, [pc, #160]	; (8006594 <HAL_GPIO_Init+0x518>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	43db      	mvns	r3, r3
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	4013      	ands	r3, r2
 8006500:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_GPIO_Init+0x49a>
        {
          temp |= iocurrent;
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006516:	4a1f      	ldr	r2, [pc, #124]	; (8006594 <HAL_GPIO_Init+0x518>)
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800651c:	4b1d      	ldr	r3, [pc, #116]	; (8006594 <HAL_GPIO_Init+0x518>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	43db      	mvns	r3, r3
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4013      	ands	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_GPIO_Init+0x4c4>
        {
          temp |= iocurrent;
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4313      	orrs	r3, r2
 800653e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006540:	4a14      	ldr	r2, [pc, #80]	; (8006594 <HAL_GPIO_Init+0x518>)
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006546:	4b13      	ldr	r3, [pc, #76]	; (8006594 <HAL_GPIO_Init+0x518>)
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	43db      	mvns	r3, r3
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4013      	ands	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_GPIO_Init+0x4ee>
        {
          temp |= iocurrent;
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4313      	orrs	r3, r2
 8006568:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800656a:	4a0a      	ldr	r2, [pc, #40]	; (8006594 <HAL_GPIO_Init+0x518>)
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	3301      	adds	r3, #1
 8006574:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	fa22 f303 	lsr.w	r3, r2, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	f47f ae23 	bne.w	80061cc <HAL_GPIO_Init+0x150>
  }
}
 8006586:	bf00      	nop
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	40010000 	.word	0x40010000
 8006594:	40010400 	.word	0x40010400

08006598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	807b      	strh	r3, [r7, #2]
 80065a4:	4613      	mov	r3, r2
 80065a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80065a8:	887b      	ldrh	r3, [r7, #2]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d004      	beq.n	80065b8 <HAL_GPIO_WritePin+0x20>
 80065ae:	887b      	ldrh	r3, [r7, #2]
 80065b0:	0c1b      	lsrs	r3, r3, #16
 80065b2:	041b      	lsls	r3, r3, #16
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d004      	beq.n	80065c2 <HAL_GPIO_WritePin+0x2a>
 80065b8:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 80065bc:	480d      	ldr	r0, [pc, #52]	; (80065f4 <HAL_GPIO_WritePin+0x5c>)
 80065be:	f7fe fbc0 	bl	8004d42 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80065c2:	787b      	ldrb	r3, [r7, #1]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d007      	beq.n	80065d8 <HAL_GPIO_WritePin+0x40>
 80065c8:	787b      	ldrb	r3, [r7, #1]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d004      	beq.n	80065d8 <HAL_GPIO_WritePin+0x40>
 80065ce:	f240 11b3 	movw	r1, #435	; 0x1b3
 80065d2:	4808      	ldr	r0, [pc, #32]	; (80065f4 <HAL_GPIO_WritePin+0x5c>)
 80065d4:	f7fe fbb5 	bl	8004d42 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80065d8:	787b      	ldrb	r3, [r7, #1]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80065de:	887a      	ldrh	r2, [r7, #2]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80065e4:	e002      	b.n	80065ec <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80065e6:	887a      	ldrh	r2, [r7, #2]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	0800b3a8 	.word	0x0800b3a8

080065f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	4603      	mov	r3, r0
 8006600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006602:	4b08      	ldr	r3, [pc, #32]	; (8006624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006604:	695a      	ldr	r2, [r3, #20]
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	4013      	ands	r3, r2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d006      	beq.n	800661c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800660e:	4a05      	ldr	r2, [pc, #20]	; (8006624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006610:	88fb      	ldrh	r3, [r7, #6]
 8006612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006614:	88fb      	ldrh	r3, [r7, #6]
 8006616:	4618      	mov	r0, r3
 8006618:	f7fa fdfc 	bl	8001214 <HAL_GPIO_EXTI_Callback>
  }
}
 800661c:	bf00      	nop
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40010400 	.word	0x40010400

08006628 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800662c:	4b04      	ldr	r3, [pc, #16]	; (8006640 <HAL_PWREx_GetVoltageRange+0x18>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006634:	4618      	mov	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40007000 	.word	0x40007000

08006644 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006652:	d007      	beq.n	8006664 <HAL_PWREx_ControlVoltageScaling+0x20>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800665a:	d003      	beq.n	8006664 <HAL_PWREx_ControlVoltageScaling+0x20>
 800665c:	21a8      	movs	r1, #168	; 0xa8
 800665e:	4826      	ldr	r0, [pc, #152]	; (80066f8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006660:	f7fe fb6f 	bl	8004d42 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800666a:	d130      	bne.n	80066ce <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800666c:	4b23      	ldr	r3, [pc, #140]	; (80066fc <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006678:	d038      	beq.n	80066ec <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800667a:	4b20      	ldr	r3, [pc, #128]	; (80066fc <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006682:	4a1e      	ldr	r2, [pc, #120]	; (80066fc <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006684:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006688:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800668a:	4b1d      	ldr	r3, [pc, #116]	; (8006700 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2232      	movs	r2, #50	; 0x32
 8006690:	fb02 f303 	mul.w	r3, r2, r3
 8006694:	4a1b      	ldr	r2, [pc, #108]	; (8006704 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8006696:	fba2 2303 	umull	r2, r3, r2, r3
 800669a:	0c9b      	lsrs	r3, r3, #18
 800669c:	3301      	adds	r3, #1
 800669e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066a0:	e002      	b.n	80066a8 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066a8:	4b14      	ldr	r3, [pc, #80]	; (80066fc <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b4:	d102      	bne.n	80066bc <HAL_PWREx_ControlVoltageScaling+0x78>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1f2      	bne.n	80066a2 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066bc:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066c8:	d110      	bne.n	80066ec <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e00f      	b.n	80066ee <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80066ce:	4b0b      	ldr	r3, [pc, #44]	; (80066fc <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066da:	d007      	beq.n	80066ec <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80066dc:	4b07      	ldr	r3, [pc, #28]	; (80066fc <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066e4:	4a05      	ldr	r2, [pc, #20]	; (80066fc <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80066e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	0800b3e4 	.word	0x0800b3e4
 80066fc:	40007000 	.word	0x40007000
 8006700:	20000048 	.word	0x20000048
 8006704:	431bde83 	.word	0x431bde83

08006708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d102      	bne.n	800671c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f000 bcdc 	b.w	80070d4 <HAL_RCC_OscConfig+0x9cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d022      	beq.n	800676a <HAL_RCC_OscConfig+0x62>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d11c      	bne.n	800676a <HAL_RCC_OscConfig+0x62>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d116      	bne.n	800676a <HAL_RCC_OscConfig+0x62>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0310 	and.w	r3, r3, #16
 8006744:	2b00      	cmp	r3, #0
 8006746:	d110      	bne.n	800676a <HAL_RCC_OscConfig+0x62>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10a      	bne.n	800676a <HAL_RCC_OscConfig+0x62>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d104      	bne.n	800676a <HAL_RCC_OscConfig+0x62>
 8006760:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8006764:	48a0      	ldr	r0, [pc, #640]	; (80069e8 <HAL_RCC_OscConfig+0x2e0>)
 8006766:	f7fe faec 	bl	8004d42 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800676a:	4ba0      	ldr	r3, [pc, #640]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 030c 	and.w	r3, r3, #12
 8006772:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006774:	4b9d      	ldr	r3, [pc, #628]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f003 0303 	and.w	r3, r3, #3
 800677c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0310 	and.w	r3, r3, #16
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 8139 	beq.w	80069fe <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d008      	beq.n	80067a6 <HAL_RCC_OscConfig+0x9e>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d004      	beq.n	80067a6 <HAL_RCC_OscConfig+0x9e>
 800679c:	f240 11a7 	movw	r1, #423	; 0x1a7
 80067a0:	4891      	ldr	r0, [pc, #580]	; (80069e8 <HAL_RCC_OscConfig+0x2e0>)
 80067a2:	f7fe face 	bl	8004d42 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	2bff      	cmp	r3, #255	; 0xff
 80067ac:	d904      	bls.n	80067b8 <HAL_RCC_OscConfig+0xb0>
 80067ae:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 80067b2:	488d      	ldr	r0, [pc, #564]	; (80069e8 <HAL_RCC_OscConfig+0x2e0>)
 80067b4:	f7fe fac5 	bl	8004d42 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d030      	beq.n	8006822 <HAL_RCC_OscConfig+0x11a>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	2b10      	cmp	r3, #16
 80067c6:	d02c      	beq.n	8006822 <HAL_RCC_OscConfig+0x11a>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d028      	beq.n	8006822 <HAL_RCC_OscConfig+0x11a>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	2b30      	cmp	r3, #48	; 0x30
 80067d6:	d024      	beq.n	8006822 <HAL_RCC_OscConfig+0x11a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	2b40      	cmp	r3, #64	; 0x40
 80067de:	d020      	beq.n	8006822 <HAL_RCC_OscConfig+0x11a>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	2b50      	cmp	r3, #80	; 0x50
 80067e6:	d01c      	beq.n	8006822 <HAL_RCC_OscConfig+0x11a>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	2b60      	cmp	r3, #96	; 0x60
 80067ee:	d018      	beq.n	8006822 <HAL_RCC_OscConfig+0x11a>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	2b70      	cmp	r3, #112	; 0x70
 80067f6:	d014      	beq.n	8006822 <HAL_RCC_OscConfig+0x11a>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	2b80      	cmp	r3, #128	; 0x80
 80067fe:	d010      	beq.n	8006822 <HAL_RCC_OscConfig+0x11a>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	2b90      	cmp	r3, #144	; 0x90
 8006806:	d00c      	beq.n	8006822 <HAL_RCC_OscConfig+0x11a>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	2ba0      	cmp	r3, #160	; 0xa0
 800680e:	d008      	beq.n	8006822 <HAL_RCC_OscConfig+0x11a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	2bb0      	cmp	r3, #176	; 0xb0
 8006816:	d004      	beq.n	8006822 <HAL_RCC_OscConfig+0x11a>
 8006818:	f240 11a9 	movw	r1, #425	; 0x1a9
 800681c:	4872      	ldr	r0, [pc, #456]	; (80069e8 <HAL_RCC_OscConfig+0x2e0>)
 800681e:	f7fe fa90 	bl	8004d42 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d007      	beq.n	8006838 <HAL_RCC_OscConfig+0x130>
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2b0c      	cmp	r3, #12
 800682c:	f040 808a 	bne.w	8006944 <HAL_RCC_OscConfig+0x23c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2b01      	cmp	r3, #1
 8006834:	f040 8086 	bne.w	8006944 <HAL_RCC_OscConfig+0x23c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006838:	4b6c      	ldr	r3, [pc, #432]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d006      	beq.n	8006852 <HAL_RCC_OscConfig+0x14a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d102      	bne.n	8006852 <HAL_RCC_OscConfig+0x14a>
      {
        return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	f000 bc41 	b.w	80070d4 <HAL_RCC_OscConfig+0x9cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1a      	ldr	r2, [r3, #32]
 8006856:	4b65      	ldr	r3, [pc, #404]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d004      	beq.n	800686c <HAL_RCC_OscConfig+0x164>
 8006862:	4b62      	ldr	r3, [pc, #392]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800686a:	e005      	b.n	8006878 <HAL_RCC_OscConfig+0x170>
 800686c:	4b5f      	ldr	r3, [pc, #380]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 800686e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006872:	091b      	lsrs	r3, r3, #4
 8006874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006878:	4293      	cmp	r3, r2
 800687a:	d224      	bcs.n	80068c6 <HAL_RCC_OscConfig+0x1be>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	4618      	mov	r0, r3
 8006882:	f000 fe73 	bl	800756c <RCC_SetFlashLatencyFromMSIRange>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	f000 bc21 	b.w	80070d4 <HAL_RCC_OscConfig+0x9cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006892:	4b56      	ldr	r3, [pc, #344]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a55      	ldr	r2, [pc, #340]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 8006898:	f043 0308 	orr.w	r3, r3, #8
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	4b53      	ldr	r3, [pc, #332]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	4950      	ldr	r1, [pc, #320]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068b0:	4b4e      	ldr	r3, [pc, #312]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	494b      	ldr	r1, [pc, #300]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	604b      	str	r3, [r1, #4]
 80068c4:	e022      	b.n	800690c <HAL_RCC_OscConfig+0x204>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068c6:	4b49      	ldr	r3, [pc, #292]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a48      	ldr	r2, [pc, #288]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 80068cc:	f043 0308 	orr.w	r3, r3, #8
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	4b46      	ldr	r3, [pc, #280]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	4943      	ldr	r1, [pc, #268]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068e4:	4b41      	ldr	r3, [pc, #260]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	493e      	ldr	r1, [pc, #248]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fe35 	bl	800756c <RCC_SetFlashLatencyFromMSIRange>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e3e3      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800690c:	f000 fd6c 	bl	80073e8 <HAL_RCC_GetSysClockFreq>
 8006910:	4601      	mov	r1, r0
 8006912:	4b36      	ldr	r3, [pc, #216]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	091b      	lsrs	r3, r3, #4
 8006918:	f003 030f 	and.w	r3, r3, #15
 800691c:	4a34      	ldr	r2, [pc, #208]	; (80069f0 <HAL_RCC_OscConfig+0x2e8>)
 800691e:	5cd3      	ldrb	r3, [r2, r3]
 8006920:	f003 031f 	and.w	r3, r3, #31
 8006924:	fa21 f303 	lsr.w	r3, r1, r3
 8006928:	4a32      	ldr	r2, [pc, #200]	; (80069f4 <HAL_RCC_OscConfig+0x2ec>)
 800692a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800692c:	4b32      	ldr	r3, [pc, #200]	; (80069f8 <HAL_RCC_OscConfig+0x2f0>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff fa0b 	bl	8005d4c <HAL_InitTick>
 8006936:	4603      	mov	r3, r0
 8006938:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d05d      	beq.n	80069fc <HAL_RCC_OscConfig+0x2f4>
        {
          return status;
 8006940:	7bfb      	ldrb	r3, [r7, #15]
 8006942:	e3c7      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d032      	beq.n	80069b2 <HAL_RCC_OscConfig+0x2aa>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800694c:	4b27      	ldr	r3, [pc, #156]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a26      	ldr	r2, [pc, #152]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 8006952:	f043 0301 	orr.w	r3, r3, #1
 8006956:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006958:	f7ff fa44 	bl	8005de4 <HAL_GetTick>
 800695c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006960:	f7ff fa40 	bl	8005de4 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e3b0      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006972:	4b1e      	ldr	r3, [pc, #120]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d0f0      	beq.n	8006960 <HAL_RCC_OscConfig+0x258>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800697e:	4b1b      	ldr	r3, [pc, #108]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a1a      	ldr	r2, [pc, #104]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 8006984:	f043 0308 	orr.w	r3, r3, #8
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	4b18      	ldr	r3, [pc, #96]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	4915      	ldr	r1, [pc, #84]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 8006998:	4313      	orrs	r3, r2
 800699a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800699c:	4b13      	ldr	r3, [pc, #76]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	021b      	lsls	r3, r3, #8
 80069aa:	4910      	ldr	r1, [pc, #64]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	604b      	str	r3, [r1, #4]
 80069b0:	e025      	b.n	80069fe <HAL_RCC_OscConfig+0x2f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80069b2:	4b0e      	ldr	r3, [pc, #56]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a0d      	ldr	r2, [pc, #52]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 80069b8:	f023 0301 	bic.w	r3, r3, #1
 80069bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80069be:	f7ff fa11 	bl	8005de4 <HAL_GetTick>
 80069c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80069c4:	e008      	b.n	80069d8 <HAL_RCC_OscConfig+0x2d0>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069c6:	f7ff fa0d 	bl	8005de4 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e37d      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80069d8:	4b04      	ldr	r3, [pc, #16]	; (80069ec <HAL_RCC_OscConfig+0x2e4>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1f0      	bne.n	80069c6 <HAL_RCC_OscConfig+0x2be>
 80069e4:	e00b      	b.n	80069fe <HAL_RCC_OscConfig+0x2f6>
 80069e6:	bf00      	nop
 80069e8:	0800b420 	.word	0x0800b420
 80069ec:	40021000 	.word	0x40021000
 80069f0:	0800c768 	.word	0x0800c768
 80069f4:	20000048 	.word	0x20000048
 80069f8:	2000004c 	.word	0x2000004c
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d07e      	beq.n	8006b08 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00e      	beq.n	8006a30 <HAL_RCC_OscConfig+0x328>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a1a:	d009      	beq.n	8006a30 <HAL_RCC_OscConfig+0x328>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a24:	d004      	beq.n	8006a30 <HAL_RCC_OscConfig+0x328>
 8006a26:	f240 2111 	movw	r1, #529	; 0x211
 8006a2a:	489b      	ldr	r0, [pc, #620]	; (8006c98 <HAL_RCC_OscConfig+0x590>)
 8006a2c:	f7fe f989 	bl	8004d42 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	2b08      	cmp	r3, #8
 8006a34:	d005      	beq.n	8006a42 <HAL_RCC_OscConfig+0x33a>
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b0c      	cmp	r3, #12
 8006a3a:	d10e      	bne.n	8006a5a <HAL_RCC_OscConfig+0x352>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d10b      	bne.n	8006a5a <HAL_RCC_OscConfig+0x352>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a42:	4b96      	ldr	r3, [pc, #600]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d05b      	beq.n	8006b06 <HAL_RCC_OscConfig+0x3fe>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d157      	bne.n	8006b06 <HAL_RCC_OscConfig+0x3fe>
      {
        return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e33c      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a62:	d106      	bne.n	8006a72 <HAL_RCC_OscConfig+0x36a>
 8006a64:	4b8d      	ldr	r3, [pc, #564]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a8c      	ldr	r2, [pc, #560]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	e01d      	b.n	8006aae <HAL_RCC_OscConfig+0x3a6>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a7a:	d10c      	bne.n	8006a96 <HAL_RCC_OscConfig+0x38e>
 8006a7c:	4b87      	ldr	r3, [pc, #540]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a86      	ldr	r2, [pc, #536]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006a82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	4b84      	ldr	r3, [pc, #528]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a83      	ldr	r2, [pc, #524]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	e00b      	b.n	8006aae <HAL_RCC_OscConfig+0x3a6>
 8006a96:	4b81      	ldr	r3, [pc, #516]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a80      	ldr	r2, [pc, #512]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	4b7e      	ldr	r3, [pc, #504]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a7d      	ldr	r2, [pc, #500]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d013      	beq.n	8006ade <HAL_RCC_OscConfig+0x3d6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab6:	f7ff f995 	bl	8005de4 <HAL_GetTick>
 8006aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006abc:	e008      	b.n	8006ad0 <HAL_RCC_OscConfig+0x3c8>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006abe:	f7ff f991 	bl	8005de4 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b64      	cmp	r3, #100	; 0x64
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x3c8>
          {
            return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e301      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ad0:	4b72      	ldr	r3, [pc, #456]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0f0      	beq.n	8006abe <HAL_RCC_OscConfig+0x3b6>
 8006adc:	e014      	b.n	8006b08 <HAL_RCC_OscConfig+0x400>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ade:	f7ff f981 	bl	8005de4 <HAL_GetTick>
 8006ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ae4:	e008      	b.n	8006af8 <HAL_RCC_OscConfig+0x3f0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ae6:	f7ff f97d 	bl	8005de4 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b64      	cmp	r3, #100	; 0x64
 8006af2:	d901      	bls.n	8006af8 <HAL_RCC_OscConfig+0x3f0>
          {
            return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e2ed      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006af8:	4b68      	ldr	r3, [pc, #416]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1f0      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x3de>
 8006b04:	e000      	b.n	8006b08 <HAL_RCC_OscConfig+0x400>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d077      	beq.n	8006c04 <HAL_RCC_OscConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d009      	beq.n	8006b30 <HAL_RCC_OscConfig+0x428>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b24:	d004      	beq.n	8006b30 <HAL_RCC_OscConfig+0x428>
 8006b26:	f44f 7111 	mov.w	r1, #580	; 0x244
 8006b2a:	485b      	ldr	r0, [pc, #364]	; (8006c98 <HAL_RCC_OscConfig+0x590>)
 8006b2c:	f7fe f909 	bl	8004d42 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	2b1f      	cmp	r3, #31
 8006b36:	d904      	bls.n	8006b42 <HAL_RCC_OscConfig+0x43a>
 8006b38:	f240 2145 	movw	r1, #581	; 0x245
 8006b3c:	4856      	ldr	r0, [pc, #344]	; (8006c98 <HAL_RCC_OscConfig+0x590>)
 8006b3e:	f7fe f900 	bl	8004d42 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d005      	beq.n	8006b54 <HAL_RCC_OscConfig+0x44c>
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	2b0c      	cmp	r3, #12
 8006b4c:	d119      	bne.n	8006b82 <HAL_RCC_OscConfig+0x47a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d116      	bne.n	8006b82 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b54:	4b51      	ldr	r3, [pc, #324]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d005      	beq.n	8006b6c <HAL_RCC_OscConfig+0x464>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e2b3      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b6c:	4b4b      	ldr	r3, [pc, #300]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	061b      	lsls	r3, r3, #24
 8006b7a:	4948      	ldr	r1, [pc, #288]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b80:	e040      	b.n	8006c04 <HAL_RCC_OscConfig+0x4fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d023      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x4ca>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b8a:	4b44      	ldr	r3, [pc, #272]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a43      	ldr	r2, [pc, #268]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b96:	f7ff f925 	bl	8005de4 <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b9c:	e008      	b.n	8006bb0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b9e:	f7ff f921 	bl	8005de4 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e291      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bb0:	4b3a      	ldr	r3, [pc, #232]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0f0      	beq.n	8006b9e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bbc:	4b37      	ldr	r3, [pc, #220]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	061b      	lsls	r3, r3, #24
 8006bca:	4934      	ldr	r1, [pc, #208]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	604b      	str	r3, [r1, #4]
 8006bd0:	e018      	b.n	8006c04 <HAL_RCC_OscConfig+0x4fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bd2:	4b32      	ldr	r3, [pc, #200]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a31      	ldr	r2, [pc, #196]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bde:	f7ff f901 	bl	8005de4 <HAL_GetTick>
 8006be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006be4:	e008      	b.n	8006bf8 <HAL_RCC_OscConfig+0x4f0>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006be6:	f7ff f8fd 	bl	8005de4 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e26d      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bf8:	4b28      	ldr	r3, [pc, #160]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1f0      	bne.n	8006be6 <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0308 	and.w	r3, r3, #8
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d04e      	beq.n	8006cae <HAL_RCC_OscConfig+0x5a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d008      	beq.n	8006c2a <HAL_RCC_OscConfig+0x522>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d004      	beq.n	8006c2a <HAL_RCC_OscConfig+0x522>
 8006c20:	f240 2185 	movw	r1, #645	; 0x285
 8006c24:	481c      	ldr	r0, [pc, #112]	; (8006c98 <HAL_RCC_OscConfig+0x590>)
 8006c26:	f7fe f88c 	bl	8004d42 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01c      	beq.n	8006c6c <HAL_RCC_OscConfig+0x564>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c32:	4b1a      	ldr	r3, [pc, #104]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c38:	4a18      	ldr	r2, [pc, #96]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006c3a:	f043 0301 	orr.w	r3, r3, #1
 8006c3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c42:	f7ff f8cf 	bl	8005de4 <HAL_GetTick>
 8006c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c48:	e008      	b.n	8006c5c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c4a:	f7ff f8cb 	bl	8005de4 <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d901      	bls.n	8006c5c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e23b      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c5c:	4b0f      	ldr	r3, [pc, #60]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0ef      	beq.n	8006c4a <HAL_RCC_OscConfig+0x542>
 8006c6a:	e020      	b.n	8006cae <HAL_RCC_OscConfig+0x5a6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c6c:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c72:	4a0a      	ldr	r2, [pc, #40]	; (8006c9c <HAL_RCC_OscConfig+0x594>)
 8006c74:	f023 0301 	bic.w	r3, r3, #1
 8006c78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c7c:	f7ff f8b2 	bl	8005de4 <HAL_GetTick>
 8006c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c82:	e00d      	b.n	8006ca0 <HAL_RCC_OscConfig+0x598>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c84:	f7ff f8ae 	bl	8005de4 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d906      	bls.n	8006ca0 <HAL_RCC_OscConfig+0x598>
        {
          return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e21e      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
 8006c96:	bf00      	nop
 8006c98:	0800b420 	.word	0x0800b420
 8006c9c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ca0:	4ba7      	ldr	r3, [pc, #668]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1ea      	bne.n	8006c84 <HAL_RCC_OscConfig+0x57c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0304 	and.w	r3, r3, #4
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 80b2 	beq.w	8006e20 <HAL_RCC_OscConfig+0x718>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00c      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x5da>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d008      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x5da>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	2b05      	cmp	r3, #5
 8006cd6:	d004      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x5da>
 8006cd8:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 8006cdc:	4899      	ldr	r0, [pc, #612]	; (8006f44 <HAL_RCC_OscConfig+0x83c>)
 8006cde:	f7fe f830 	bl	8004d42 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006ce2:	4b97      	ldr	r3, [pc, #604]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10d      	bne.n	8006d0a <HAL_RCC_OscConfig+0x602>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cee:	4b94      	ldr	r3, [pc, #592]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf2:	4a93      	ldr	r2, [pc, #588]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8006cfa:	4b91      	ldr	r3, [pc, #580]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d02:	60bb      	str	r3, [r7, #8]
 8006d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d06:	2301      	movs	r3, #1
 8006d08:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d0a:	4b8f      	ldr	r3, [pc, #572]	; (8006f48 <HAL_RCC_OscConfig+0x840>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d118      	bne.n	8006d48 <HAL_RCC_OscConfig+0x640>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d16:	4b8c      	ldr	r3, [pc, #560]	; (8006f48 <HAL_RCC_OscConfig+0x840>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a8b      	ldr	r2, [pc, #556]	; (8006f48 <HAL_RCC_OscConfig+0x840>)
 8006d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d22:	f7ff f85f 	bl	8005de4 <HAL_GetTick>
 8006d26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d28:	e008      	b.n	8006d3c <HAL_RCC_OscConfig+0x634>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d2a:	f7ff f85b 	bl	8005de4 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d901      	bls.n	8006d3c <HAL_RCC_OscConfig+0x634>
        {
          return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e1cb      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d3c:	4b82      	ldr	r3, [pc, #520]	; (8006f48 <HAL_RCC_OscConfig+0x840>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0f0      	beq.n	8006d2a <HAL_RCC_OscConfig+0x622>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d108      	bne.n	8006d62 <HAL_RCC_OscConfig+0x65a>
 8006d50:	4b7b      	ldr	r3, [pc, #492]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d56:	4a7a      	ldr	r2, [pc, #488]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006d58:	f043 0301 	orr.w	r3, r3, #1
 8006d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d60:	e024      	b.n	8006dac <HAL_RCC_OscConfig+0x6a4>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b05      	cmp	r3, #5
 8006d68:	d110      	bne.n	8006d8c <HAL_RCC_OscConfig+0x684>
 8006d6a:	4b75      	ldr	r3, [pc, #468]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d70:	4a73      	ldr	r2, [pc, #460]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006d72:	f043 0304 	orr.w	r3, r3, #4
 8006d76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d7a:	4b71      	ldr	r3, [pc, #452]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d80:	4a6f      	ldr	r2, [pc, #444]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006d82:	f043 0301 	orr.w	r3, r3, #1
 8006d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d8a:	e00f      	b.n	8006dac <HAL_RCC_OscConfig+0x6a4>
 8006d8c:	4b6c      	ldr	r3, [pc, #432]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d92:	4a6b      	ldr	r2, [pc, #428]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006d94:	f023 0301 	bic.w	r3, r3, #1
 8006d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d9c:	4b68      	ldr	r3, [pc, #416]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da2:	4a67      	ldr	r2, [pc, #412]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006da4:	f023 0304 	bic.w	r3, r3, #4
 8006da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d016      	beq.n	8006de2 <HAL_RCC_OscConfig+0x6da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db4:	f7ff f816 	bl	8005de4 <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dba:	e00a      	b.n	8006dd2 <HAL_RCC_OscConfig+0x6ca>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dbc:	f7ff f812 	bl	8005de4 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e180      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dd2:	4b5b      	ldr	r3, [pc, #364]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0ed      	beq.n	8006dbc <HAL_RCC_OscConfig+0x6b4>
 8006de0:	e015      	b.n	8006e0e <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006de2:	f7fe ffff 	bl	8005de4 <HAL_GetTick>
 8006de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006de8:	e00a      	b.n	8006e00 <HAL_RCC_OscConfig+0x6f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dea:	f7fe fffb 	bl	8005de4 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d901      	bls.n	8006e00 <HAL_RCC_OscConfig+0x6f8>
        {
          return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e169      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e00:	4b4f      	ldr	r3, [pc, #316]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1ed      	bne.n	8006dea <HAL_RCC_OscConfig+0x6e2>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e0e:	7ffb      	ldrb	r3, [r7, #31]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d105      	bne.n	8006e20 <HAL_RCC_OscConfig+0x718>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e14:	4b4a      	ldr	r3, [pc, #296]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e18:	4a49      	ldr	r2, [pc, #292]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00c      	beq.n	8006e42 <HAL_RCC_OscConfig+0x73a>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d008      	beq.n	8006e42 <HAL_RCC_OscConfig+0x73a>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d004      	beq.n	8006e42 <HAL_RCC_OscConfig+0x73a>
 8006e38:	f240 3166 	movw	r1, #870	; 0x366
 8006e3c:	4841      	ldr	r0, [pc, #260]	; (8006f44 <HAL_RCC_OscConfig+0x83c>)
 8006e3e:	f7fd ff80 	bl	8004d42 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f000 8143 	beq.w	80070d2 <HAL_RCC_OscConfig+0x9ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2b0c      	cmp	r3, #12
 8006e50:	f000 80fc 	beq.w	800704c <HAL_RCC_OscConfig+0x944>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	f040 80c9 	bne.w	8006ff0 <HAL_RCC_OscConfig+0x8e8>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d010      	beq.n	8006e88 <HAL_RCC_OscConfig+0x780>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d00c      	beq.n	8006e88 <HAL_RCC_OscConfig+0x780>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d008      	beq.n	8006e88 <HAL_RCC_OscConfig+0x780>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d004      	beq.n	8006e88 <HAL_RCC_OscConfig+0x780>
 8006e7e:	f44f 715c 	mov.w	r1, #880	; 0x370
 8006e82:	4830      	ldr	r0, [pc, #192]	; (8006f44 <HAL_RCC_OscConfig+0x83c>)
 8006e84:	f7fd ff5d 	bl	8004d42 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <HAL_RCC_OscConfig+0x790>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d904      	bls.n	8006ea2 <HAL_RCC_OscConfig+0x79a>
 8006e98:	f240 3171 	movw	r1, #881	; 0x371
 8006e9c:	4829      	ldr	r0, [pc, #164]	; (8006f44 <HAL_RCC_OscConfig+0x83c>)
 8006e9e:	f7fd ff50 	bl	8004d42 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea6:	2b07      	cmp	r3, #7
 8006ea8:	d903      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x7aa>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eae:	2b56      	cmp	r3, #86	; 0x56
 8006eb0:	d904      	bls.n	8006ebc <HAL_RCC_OscConfig+0x7b4>
 8006eb2:	f240 3172 	movw	r1, #882	; 0x372
 8006eb6:	4823      	ldr	r0, [pc, #140]	; (8006f44 <HAL_RCC_OscConfig+0x83c>)
 8006eb8:	f7fd ff43 	bl	8004d42 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	2b07      	cmp	r3, #7
 8006ec2:	d008      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x7ce>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec8:	2b11      	cmp	r3, #17
 8006eca:	d004      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x7ce>
 8006ecc:	f44f 715d 	mov.w	r1, #884	; 0x374
 8006ed0:	481c      	ldr	r0, [pc, #112]	; (8006f44 <HAL_RCC_OscConfig+0x83c>)
 8006ed2:	f7fd ff36 	bl	8004d42 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d010      	beq.n	8006f00 <HAL_RCC_OscConfig+0x7f8>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d00c      	beq.n	8006f00 <HAL_RCC_OscConfig+0x7f8>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eea:	2b06      	cmp	r3, #6
 8006eec:	d008      	beq.n	8006f00 <HAL_RCC_OscConfig+0x7f8>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef2:	2b08      	cmp	r3, #8
 8006ef4:	d004      	beq.n	8006f00 <HAL_RCC_OscConfig+0x7f8>
 8006ef6:	f240 3176 	movw	r1, #886	; 0x376
 8006efa:	4812      	ldr	r0, [pc, #72]	; (8006f44 <HAL_RCC_OscConfig+0x83c>)
 8006efc:	f7fd ff21 	bl	8004d42 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d010      	beq.n	8006f2a <HAL_RCC_OscConfig+0x822>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d00c      	beq.n	8006f2a <HAL_RCC_OscConfig+0x822>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	2b06      	cmp	r3, #6
 8006f16:	d008      	beq.n	8006f2a <HAL_RCC_OscConfig+0x822>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d004      	beq.n	8006f2a <HAL_RCC_OscConfig+0x822>
 8006f20:	f240 3177 	movw	r1, #887	; 0x377
 8006f24:	4807      	ldr	r0, [pc, #28]	; (8006f44 <HAL_RCC_OscConfig+0x83c>)
 8006f26:	f7fd ff0c 	bl	8004d42 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f2a:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a04      	ldr	r2, [pc, #16]	; (8006f40 <HAL_RCC_OscConfig+0x838>)
 8006f30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f36:	f7fe ff55 	bl	8005de4 <HAL_GetTick>
 8006f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f3c:	e00f      	b.n	8006f5e <HAL_RCC_OscConfig+0x856>
 8006f3e:	bf00      	nop
 8006f40:	40021000 	.word	0x40021000
 8006f44:	0800b420 	.word	0x0800b420
 8006f48:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f4c:	f7fe ff4a 	bl	8005de4 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x856>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e0ba      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f5e:	4b5f      	ldr	r3, [pc, #380]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f0      	bne.n	8006f4c <HAL_RCC_OscConfig+0x844>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f6a:	4b5c      	ldr	r3, [pc, #368]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	4b5c      	ldr	r3, [pc, #368]	; (80070e0 <HAL_RCC_OscConfig+0x9d8>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006f7a:	3a01      	subs	r2, #1
 8006f7c:	0112      	lsls	r2, r2, #4
 8006f7e:	4311      	orrs	r1, r2
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f84:	0212      	lsls	r2, r2, #8
 8006f86:	4311      	orrs	r1, r2
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006f8c:	0852      	lsrs	r2, r2, #1
 8006f8e:	3a01      	subs	r2, #1
 8006f90:	0552      	lsls	r2, r2, #21
 8006f92:	4311      	orrs	r1, r2
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006f98:	0852      	lsrs	r2, r2, #1
 8006f9a:	3a01      	subs	r2, #1
 8006f9c:	0652      	lsls	r2, r2, #25
 8006f9e:	4311      	orrs	r1, r2
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006fa4:	0912      	lsrs	r2, r2, #4
 8006fa6:	0452      	lsls	r2, r2, #17
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	494c      	ldr	r1, [pc, #304]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fb0:	4b4a      	ldr	r3, [pc, #296]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a49      	ldr	r2, [pc, #292]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 8006fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006fbc:	4b47      	ldr	r3, [pc, #284]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4a46      	ldr	r2, [pc, #280]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 8006fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc8:	f7fe ff0c 	bl	8005de4 <HAL_GetTick>
 8006fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fce:	e008      	b.n	8006fe2 <HAL_RCC_OscConfig+0x8da>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fd0:	f7fe ff08 	bl	8005de4 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_OscConfig+0x8da>
          {
            return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e078      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fe2:	4b3e      	ldr	r3, [pc, #248]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0f0      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x8c8>
 8006fee:	e070      	b.n	80070d2 <HAL_RCC_OscConfig+0x9ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ff0:	4b3a      	ldr	r3, [pc, #232]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a39      	ldr	r2, [pc, #228]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 8006ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ffa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006ffc:	4b37      	ldr	r3, [pc, #220]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d105      	bne.n	8007014 <HAL_RCC_OscConfig+0x90c>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007008:	4b34      	ldr	r3, [pc, #208]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	4a33      	ldr	r2, [pc, #204]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 800700e:	f023 0303 	bic.w	r3, r3, #3
 8007012:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007014:	4b31      	ldr	r3, [pc, #196]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	4a30      	ldr	r2, [pc, #192]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 800701a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800701e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007022:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007024:	f7fe fede 	bl	8005de4 <HAL_GetTick>
 8007028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0x936>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800702c:	f7fe feda 	bl	8005de4 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b02      	cmp	r3, #2
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0x936>
          {
            return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e04a      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800703e:	4b27      	ldr	r3, [pc, #156]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1f0      	bne.n	800702c <HAL_RCC_OscConfig+0x924>
 800704a:	e042      	b.n	80070d2 <HAL_RCC_OscConfig+0x9ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_RCC_OscConfig+0x950>
      {
        return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e03d      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8007058:	4b20      	ldr	r3, [pc, #128]	; (80070dc <HAL_RCC_OscConfig+0x9d4>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f003 0203 	and.w	r2, r3, #3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	429a      	cmp	r2, r3
 800706a:	d130      	bne.n	80070ce <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007076:	3b01      	subs	r3, #1
 8007078:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800707a:	429a      	cmp	r2, r3
 800707c:	d127      	bne.n	80070ce <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007088:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800708a:	429a      	cmp	r2, r3
 800708c:	d11f      	bne.n	80070ce <HAL_RCC_OscConfig+0x9c6>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007098:	2a07      	cmp	r2, #7
 800709a:	bf14      	ite	ne
 800709c:	2201      	movne	r2, #1
 800709e:	2200      	moveq	r2, #0
 80070a0:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d113      	bne.n	80070ce <HAL_RCC_OscConfig+0x9c6>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b0:	085b      	lsrs	r3, r3, #1
 80070b2:	3b01      	subs	r3, #1
 80070b4:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d109      	bne.n	80070ce <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c4:	085b      	lsrs	r3, r3, #1
 80070c6:	3b01      	subs	r3, #1
 80070c8:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d001      	beq.n	80070d2 <HAL_RCC_OscConfig+0x9ca>
        {
          return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e000      	b.n	80070d4 <HAL_RCC_OscConfig+0x9cc>
        }
      }
    }
  }
  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3720      	adds	r7, #32
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	40021000 	.word	0x40021000
 80070e0:	f99d808c 	.word	0xf99d808c

080070e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e168      	b.n	80073ca <HAL_RCC_ClockConfig+0x2e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_RCC_ClockConfig+0x24>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b0f      	cmp	r3, #15
 8007106:	d904      	bls.n	8007112 <HAL_RCC_ClockConfig+0x2e>
 8007108:	f240 412e 	movw	r1, #1070	; 0x42e
 800710c:	4873      	ldr	r0, [pc, #460]	; (80072dc <HAL_RCC_ClockConfig+0x1f8>)
 800710e:	f7fd fe18 	bl	8004d42 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d010      	beq.n	800713a <HAL_RCC_ClockConfig+0x56>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d00d      	beq.n	800713a <HAL_RCC_ClockConfig+0x56>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b02      	cmp	r3, #2
 8007122:	d00a      	beq.n	800713a <HAL_RCC_ClockConfig+0x56>
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2b03      	cmp	r3, #3
 8007128:	d007      	beq.n	800713a <HAL_RCC_ClockConfig+0x56>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b04      	cmp	r3, #4
 800712e:	d004      	beq.n	800713a <HAL_RCC_ClockConfig+0x56>
 8007130:	f240 412f 	movw	r1, #1071	; 0x42f
 8007134:	4869      	ldr	r0, [pc, #420]	; (80072dc <HAL_RCC_ClockConfig+0x1f8>)
 8007136:	f7fd fe04 	bl	8004d42 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800713a:	4b69      	ldr	r3, [pc, #420]	; (80072e0 <HAL_RCC_ClockConfig+0x1fc>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	429a      	cmp	r2, r3
 8007146:	d910      	bls.n	800716a <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007148:	4b65      	ldr	r3, [pc, #404]	; (80072e0 <HAL_RCC_ClockConfig+0x1fc>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f023 0207 	bic.w	r2, r3, #7
 8007150:	4963      	ldr	r1, [pc, #396]	; (80072e0 <HAL_RCC_ClockConfig+0x1fc>)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	4313      	orrs	r3, r2
 8007156:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007158:	4b61      	ldr	r3, [pc, #388]	; (80072e0 <HAL_RCC_ClockConfig+0x1fc>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0307 	and.w	r3, r3, #7
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d001      	beq.n	800716a <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e12f      	b.n	80073ca <HAL_RCC_ClockConfig+0x2e6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d061      	beq.n	800723a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d010      	beq.n	80071a0 <HAL_RCC_ClockConfig+0xbc>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d00c      	beq.n	80071a0 <HAL_RCC_ClockConfig+0xbc>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d008      	beq.n	80071a0 <HAL_RCC_ClockConfig+0xbc>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	2b03      	cmp	r3, #3
 8007194:	d004      	beq.n	80071a0 <HAL_RCC_ClockConfig+0xbc>
 8007196:	f240 4146 	movw	r1, #1094	; 0x446
 800719a:	4850      	ldr	r0, [pc, #320]	; (80072dc <HAL_RCC_ClockConfig+0x1f8>)
 800719c:	f7fd fdd1 	bl	8004d42 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d107      	bne.n	80071b8 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071a8:	4b4e      	ldr	r3, [pc, #312]	; (80072e4 <HAL_RCC_ClockConfig+0x200>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d121      	bne.n	80071f8 <HAL_RCC_ClockConfig+0x114>
      {
        return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e108      	b.n	80073ca <HAL_RCC_ClockConfig+0x2e6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d107      	bne.n	80071d0 <HAL_RCC_ClockConfig+0xec>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071c0:	4b48      	ldr	r3, [pc, #288]	; (80072e4 <HAL_RCC_ClockConfig+0x200>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d115      	bne.n	80071f8 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e0fc      	b.n	80073ca <HAL_RCC_ClockConfig+0x2e6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d107      	bne.n	80071e8 <HAL_RCC_ClockConfig+0x104>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80071d8:	4b42      	ldr	r3, [pc, #264]	; (80072e4 <HAL_RCC_ClockConfig+0x200>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d109      	bne.n	80071f8 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e0f0      	b.n	80073ca <HAL_RCC_ClockConfig+0x2e6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071e8:	4b3e      	ldr	r3, [pc, #248]	; (80072e4 <HAL_RCC_ClockConfig+0x200>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e0e8      	b.n	80073ca <HAL_RCC_ClockConfig+0x2e6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071f8:	4b3a      	ldr	r3, [pc, #232]	; (80072e4 <HAL_RCC_ClockConfig+0x200>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f023 0203 	bic.w	r2, r3, #3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	4937      	ldr	r1, [pc, #220]	; (80072e4 <HAL_RCC_ClockConfig+0x200>)
 8007206:	4313      	orrs	r3, r2
 8007208:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800720a:	f7fe fdeb 	bl	8005de4 <HAL_GetTick>
 800720e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007210:	e00a      	b.n	8007228 <HAL_RCC_ClockConfig+0x144>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007212:	f7fe fde7 	bl	8005de4 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007220:	4293      	cmp	r3, r2
 8007222:	d901      	bls.n	8007228 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e0d0      	b.n	80073ca <HAL_RCC_ClockConfig+0x2e6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007228:	4b2e      	ldr	r3, [pc, #184]	; (80072e4 <HAL_RCC_ClockConfig+0x200>)
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f003 020c 	and.w	r2, r3, #12
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	429a      	cmp	r2, r3
 8007238:	d1eb      	bne.n	8007212 <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d031      	beq.n	80072aa <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d024      	beq.n	8007298 <HAL_RCC_ClockConfig+0x1b4>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	2b80      	cmp	r3, #128	; 0x80
 8007254:	d020      	beq.n	8007298 <HAL_RCC_ClockConfig+0x1b4>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	2b90      	cmp	r3, #144	; 0x90
 800725c:	d01c      	beq.n	8007298 <HAL_RCC_ClockConfig+0x1b4>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	2ba0      	cmp	r3, #160	; 0xa0
 8007264:	d018      	beq.n	8007298 <HAL_RCC_ClockConfig+0x1b4>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	2bb0      	cmp	r3, #176	; 0xb0
 800726c:	d014      	beq.n	8007298 <HAL_RCC_ClockConfig+0x1b4>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2bc0      	cmp	r3, #192	; 0xc0
 8007274:	d010      	beq.n	8007298 <HAL_RCC_ClockConfig+0x1b4>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	2bd0      	cmp	r3, #208	; 0xd0
 800727c:	d00c      	beq.n	8007298 <HAL_RCC_ClockConfig+0x1b4>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	2be0      	cmp	r3, #224	; 0xe0
 8007284:	d008      	beq.n	8007298 <HAL_RCC_ClockConfig+0x1b4>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	2bf0      	cmp	r3, #240	; 0xf0
 800728c:	d004      	beq.n	8007298 <HAL_RCC_ClockConfig+0x1b4>
 800728e:	f240 41a2 	movw	r1, #1186	; 0x4a2
 8007292:	4812      	ldr	r0, [pc, #72]	; (80072dc <HAL_RCC_ClockConfig+0x1f8>)
 8007294:	f7fd fd55 	bl	8004d42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007298:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <HAL_RCC_ClockConfig+0x200>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	490f      	ldr	r1, [pc, #60]	; (80072e4 <HAL_RCC_ClockConfig+0x200>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072aa:	4b0d      	ldr	r3, [pc, #52]	; (80072e0 <HAL_RCC_ClockConfig+0x1fc>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0307 	and.w	r3, r3, #7
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d217      	bcs.n	80072e8 <HAL_RCC_ClockConfig+0x204>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072b8:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <HAL_RCC_ClockConfig+0x1fc>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f023 0207 	bic.w	r2, r3, #7
 80072c0:	4907      	ldr	r1, [pc, #28]	; (80072e0 <HAL_RCC_ClockConfig+0x1fc>)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072c8:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <HAL_RCC_ClockConfig+0x1fc>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d008      	beq.n	80072e8 <HAL_RCC_ClockConfig+0x204>
    {
      return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e077      	b.n	80073ca <HAL_RCC_ClockConfig+0x2e6>
 80072da:	bf00      	nop
 80072dc:	0800b420 	.word	0x0800b420
 80072e0:	40022000 	.word	0x40022000
 80072e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0304 	and.w	r3, r3, #4
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d025      	beq.n	8007340 <HAL_RCC_ClockConfig+0x25c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d018      	beq.n	800732e <HAL_RCC_ClockConfig+0x24a>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007304:	d013      	beq.n	800732e <HAL_RCC_ClockConfig+0x24a>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800730e:	d00e      	beq.n	800732e <HAL_RCC_ClockConfig+0x24a>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007318:	d009      	beq.n	800732e <HAL_RCC_ClockConfig+0x24a>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007322:	d004      	beq.n	800732e <HAL_RCC_ClockConfig+0x24a>
 8007324:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8007328:	482a      	ldr	r0, [pc, #168]	; (80073d4 <HAL_RCC_ClockConfig+0x2f0>)
 800732a:	f7fd fd0a 	bl	8004d42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800732e:	4b2a      	ldr	r3, [pc, #168]	; (80073d8 <HAL_RCC_ClockConfig+0x2f4>)
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	4927      	ldr	r1, [pc, #156]	; (80073d8 <HAL_RCC_ClockConfig+0x2f4>)
 800733c:	4313      	orrs	r3, r2
 800733e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0308 	and.w	r3, r3, #8
 8007348:	2b00      	cmp	r3, #0
 800734a:	d026      	beq.n	800739a <HAL_RCC_ClockConfig+0x2b6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d018      	beq.n	8007386 <HAL_RCC_ClockConfig+0x2a2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800735c:	d013      	beq.n	8007386 <HAL_RCC_ClockConfig+0x2a2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007366:	d00e      	beq.n	8007386 <HAL_RCC_ClockConfig+0x2a2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007370:	d009      	beq.n	8007386 <HAL_RCC_ClockConfig+0x2a2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800737a:	d004      	beq.n	8007386 <HAL_RCC_ClockConfig+0x2a2>
 800737c:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 8007380:	4814      	ldr	r0, [pc, #80]	; (80073d4 <HAL_RCC_ClockConfig+0x2f0>)
 8007382:	f7fd fcde 	bl	8004d42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007386:	4b14      	ldr	r3, [pc, #80]	; (80073d8 <HAL_RCC_ClockConfig+0x2f4>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	4910      	ldr	r1, [pc, #64]	; (80073d8 <HAL_RCC_ClockConfig+0x2f4>)
 8007396:	4313      	orrs	r3, r2
 8007398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800739a:	f000 f825 	bl	80073e8 <HAL_RCC_GetSysClockFreq>
 800739e:	4601      	mov	r1, r0
 80073a0:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <HAL_RCC_ClockConfig+0x2f4>)
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	091b      	lsrs	r3, r3, #4
 80073a6:	f003 030f 	and.w	r3, r3, #15
 80073aa:	4a0c      	ldr	r2, [pc, #48]	; (80073dc <HAL_RCC_ClockConfig+0x2f8>)
 80073ac:	5cd3      	ldrb	r3, [r2, r3]
 80073ae:	f003 031f 	and.w	r3, r3, #31
 80073b2:	fa21 f303 	lsr.w	r3, r1, r3
 80073b6:	4a0a      	ldr	r2, [pc, #40]	; (80073e0 <HAL_RCC_ClockConfig+0x2fc>)
 80073b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80073ba:	4b0a      	ldr	r3, [pc, #40]	; (80073e4 <HAL_RCC_ClockConfig+0x300>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe fcc4 	bl	8005d4c <HAL_InitTick>
 80073c4:	4603      	mov	r3, r0
 80073c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80073c8:	7afb      	ldrb	r3, [r7, #11]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	0800b420 	.word	0x0800b420
 80073d8:	40021000 	.word	0x40021000
 80073dc:	0800c768 	.word	0x0800c768
 80073e0:	20000048 	.word	0x20000048
 80073e4:	2000004c 	.word	0x2000004c

080073e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b089      	sub	sp, #36	; 0x24
 80073ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	61fb      	str	r3, [r7, #28]
 80073f2:	2300      	movs	r3, #0
 80073f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073f6:	4b3d      	ldr	r3, [pc, #244]	; (80074ec <HAL_RCC_GetSysClockFreq+0x104>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f003 030c 	and.w	r3, r3, #12
 80073fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007400:	4b3a      	ldr	r3, [pc, #232]	; (80074ec <HAL_RCC_GetSysClockFreq+0x104>)
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d005      	beq.n	800741c <HAL_RCC_GetSysClockFreq+0x34>
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	2b0c      	cmp	r3, #12
 8007414:	d121      	bne.n	800745a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d11e      	bne.n	800745a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800741c:	4b33      	ldr	r3, [pc, #204]	; (80074ec <HAL_RCC_GetSysClockFreq+0x104>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0308 	and.w	r3, r3, #8
 8007424:	2b00      	cmp	r3, #0
 8007426:	d107      	bne.n	8007438 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007428:	4b30      	ldr	r3, [pc, #192]	; (80074ec <HAL_RCC_GetSysClockFreq+0x104>)
 800742a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800742e:	0a1b      	lsrs	r3, r3, #8
 8007430:	f003 030f 	and.w	r3, r3, #15
 8007434:	61fb      	str	r3, [r7, #28]
 8007436:	e005      	b.n	8007444 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007438:	4b2c      	ldr	r3, [pc, #176]	; (80074ec <HAL_RCC_GetSysClockFreq+0x104>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	091b      	lsrs	r3, r3, #4
 800743e:	f003 030f 	and.w	r3, r3, #15
 8007442:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007444:	4a2a      	ldr	r2, [pc, #168]	; (80074f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800744c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10d      	bne.n	8007470 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007458:	e00a      	b.n	8007470 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	2b04      	cmp	r3, #4
 800745e:	d102      	bne.n	8007466 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007460:	4b24      	ldr	r3, [pc, #144]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007462:	61bb      	str	r3, [r7, #24]
 8007464:	e004      	b.n	8007470 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	2b08      	cmp	r3, #8
 800746a:	d101      	bne.n	8007470 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800746c:	4b22      	ldr	r3, [pc, #136]	; (80074f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800746e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	2b0c      	cmp	r3, #12
 8007474:	d133      	bne.n	80074de <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007476:	4b1d      	ldr	r3, [pc, #116]	; (80074ec <HAL_RCC_GetSysClockFreq+0x104>)
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f003 0303 	and.w	r3, r3, #3
 800747e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b02      	cmp	r3, #2
 8007484:	d002      	beq.n	800748c <HAL_RCC_GetSysClockFreq+0xa4>
 8007486:	2b03      	cmp	r3, #3
 8007488:	d003      	beq.n	8007492 <HAL_RCC_GetSysClockFreq+0xaa>
 800748a:	e005      	b.n	8007498 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800748c:	4b19      	ldr	r3, [pc, #100]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800748e:	617b      	str	r3, [r7, #20]
      break;
 8007490:	e005      	b.n	800749e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007492:	4b19      	ldr	r3, [pc, #100]	; (80074f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007494:	617b      	str	r3, [r7, #20]
      break;
 8007496:	e002      	b.n	800749e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	617b      	str	r3, [r7, #20]
      break;
 800749c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800749e:	4b13      	ldr	r3, [pc, #76]	; (80074ec <HAL_RCC_GetSysClockFreq+0x104>)
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	091b      	lsrs	r3, r3, #4
 80074a4:	f003 0307 	and.w	r3, r3, #7
 80074a8:	3301      	adds	r3, #1
 80074aa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80074ac:	4b0f      	ldr	r3, [pc, #60]	; (80074ec <HAL_RCC_GetSysClockFreq+0x104>)
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	0a1b      	lsrs	r3, r3, #8
 80074b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	fb02 f203 	mul.w	r2, r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80074c4:	4b09      	ldr	r3, [pc, #36]	; (80074ec <HAL_RCC_GetSysClockFreq+0x104>)
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	0e5b      	lsrs	r3, r3, #25
 80074ca:	f003 0303 	and.w	r3, r3, #3
 80074ce:	3301      	adds	r3, #1
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074dc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80074de:	69bb      	ldr	r3, [r7, #24]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3724      	adds	r7, #36	; 0x24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	40021000 	.word	0x40021000
 80074f0:	0800c780 	.word	0x0800c780
 80074f4:	00f42400 	.word	0x00f42400
 80074f8:	007a1200 	.word	0x007a1200

080074fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007500:	4b03      	ldr	r3, [pc, #12]	; (8007510 <HAL_RCC_GetHCLKFreq+0x14>)
 8007502:	681b      	ldr	r3, [r3, #0]
}
 8007504:	4618      	mov	r0, r3
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	20000048 	.word	0x20000048

08007514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007518:	f7ff fff0 	bl	80074fc <HAL_RCC_GetHCLKFreq>
 800751c:	4601      	mov	r1, r0
 800751e:	4b06      	ldr	r3, [pc, #24]	; (8007538 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	0a1b      	lsrs	r3, r3, #8
 8007524:	f003 0307 	and.w	r3, r3, #7
 8007528:	4a04      	ldr	r2, [pc, #16]	; (800753c <HAL_RCC_GetPCLK1Freq+0x28>)
 800752a:	5cd3      	ldrb	r3, [r2, r3]
 800752c:	f003 031f 	and.w	r3, r3, #31
 8007530:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007534:	4618      	mov	r0, r3
 8007536:	bd80      	pop	{r7, pc}
 8007538:	40021000 	.word	0x40021000
 800753c:	0800c778 	.word	0x0800c778

08007540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007544:	f7ff ffda 	bl	80074fc <HAL_RCC_GetHCLKFreq>
 8007548:	4601      	mov	r1, r0
 800754a:	4b06      	ldr	r3, [pc, #24]	; (8007564 <HAL_RCC_GetPCLK2Freq+0x24>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	0adb      	lsrs	r3, r3, #11
 8007550:	f003 0307 	and.w	r3, r3, #7
 8007554:	4a04      	ldr	r2, [pc, #16]	; (8007568 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007556:	5cd3      	ldrb	r3, [r2, r3]
 8007558:	f003 031f 	and.w	r3, r3, #31
 800755c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007560:	4618      	mov	r0, r3
 8007562:	bd80      	pop	{r7, pc}
 8007564:	40021000 	.word	0x40021000
 8007568:	0800c778 	.word	0x0800c778

0800756c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007574:	2300      	movs	r3, #0
 8007576:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007578:	4b2a      	ldr	r3, [pc, #168]	; (8007624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800757a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d003      	beq.n	800758c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007584:	f7ff f850 	bl	8006628 <HAL_PWREx_GetVoltageRange>
 8007588:	6178      	str	r0, [r7, #20]
 800758a:	e014      	b.n	80075b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800758c:	4b25      	ldr	r3, [pc, #148]	; (8007624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800758e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007590:	4a24      	ldr	r2, [pc, #144]	; (8007624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007596:	6593      	str	r3, [r2, #88]	; 0x58
 8007598:	4b22      	ldr	r3, [pc, #136]	; (8007624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800759a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800759c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80075a4:	f7ff f840 	bl	8006628 <HAL_PWREx_GetVoltageRange>
 80075a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80075aa:	4b1e      	ldr	r3, [pc, #120]	; (8007624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ae:	4a1d      	ldr	r2, [pc, #116]	; (8007624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075bc:	d10b      	bne.n	80075d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b80      	cmp	r3, #128	; 0x80
 80075c2:	d919      	bls.n	80075f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2ba0      	cmp	r3, #160	; 0xa0
 80075c8:	d902      	bls.n	80075d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80075ca:	2302      	movs	r3, #2
 80075cc:	613b      	str	r3, [r7, #16]
 80075ce:	e013      	b.n	80075f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80075d0:	2301      	movs	r3, #1
 80075d2:	613b      	str	r3, [r7, #16]
 80075d4:	e010      	b.n	80075f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b80      	cmp	r3, #128	; 0x80
 80075da:	d902      	bls.n	80075e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80075dc:	2303      	movs	r3, #3
 80075de:	613b      	str	r3, [r7, #16]
 80075e0:	e00a      	b.n	80075f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b80      	cmp	r3, #128	; 0x80
 80075e6:	d102      	bne.n	80075ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80075e8:	2302      	movs	r3, #2
 80075ea:	613b      	str	r3, [r7, #16]
 80075ec:	e004      	b.n	80075f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b70      	cmp	r3, #112	; 0x70
 80075f2:	d101      	bne.n	80075f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80075f4:	2301      	movs	r3, #1
 80075f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80075f8:	4b0b      	ldr	r3, [pc, #44]	; (8007628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f023 0207 	bic.w	r2, r3, #7
 8007600:	4909      	ldr	r1, [pc, #36]	; (8007628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	4313      	orrs	r3, r2
 8007606:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007608:	4b07      	ldr	r3, [pc, #28]	; (8007628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	429a      	cmp	r2, r3
 8007614:	d001      	beq.n	800761a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e000      	b.n	800761c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40021000 	.word	0x40021000
 8007628:	40022000 	.word	0x40022000

0800762c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007634:	2300      	movs	r3, #0
 8007636:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007638:	2300      	movs	r3, #0
 800763a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d175      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d16f      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b00      	cmp	r3, #0
 800765e:	d169      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0308 	and.w	r3, r3, #8
 8007668:	2b00      	cmp	r3, #0
 800766a:	d163      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b00      	cmp	r3, #0
 8007676:	d15d      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b00      	cmp	r3, #0
 8007682:	d157      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768c:	2b00      	cmp	r3, #0
 800768e:	d151      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007698:	2b00      	cmp	r3, #0
 800769a:	d14b      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d145      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d13f      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d139      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d133      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d12d      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d127      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d121      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d11b      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d115      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10f      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d109      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d103      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800772c:	21cb      	movs	r1, #203	; 0xcb
 800772e:	48ab      	ldr	r0, [pc, #684]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8007730:	f7fd fb07 	bl	8004d42 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800773c:	2b00      	cmp	r3, #0
 800773e:	d056      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007744:	2b00      	cmp	r3, #0
 8007746:	d012      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800774c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007750:	d00d      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007756:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800775a:	d008      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x142>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007760:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007764:	d003      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007766:	21d3      	movs	r1, #211	; 0xd3
 8007768:	489c      	ldr	r0, [pc, #624]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 800776a:	f7fd faea 	bl	8004d42 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007776:	d01c      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800777c:	d802      	bhi.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00e      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8007782:	e01f      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007784:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007788:	d003      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800778a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800778e:	d01c      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8007790:	e018      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007792:	4b93      	ldr	r3, [pc, #588]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	4a92      	ldr	r2, [pc, #584]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800779c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800779e:	e015      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	3304      	adds	r3, #4
 80077a4:	2100      	movs	r1, #0
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fc64 	bl	8008074 <RCCEx_PLLSAI1_Config>
 80077ac:	4603      	mov	r3, r0
 80077ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80077b0:	e00c      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3320      	adds	r3, #32
 80077b6:	2100      	movs	r1, #0
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 fdd7 	bl	800836c <RCCEx_PLLSAI2_Config>
 80077be:	4603      	mov	r3, r0
 80077c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80077c2:	e003      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	74fb      	strb	r3, [r7, #19]
      break;
 80077c8:	e000      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      break;
 80077ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077cc:	7cfb      	ldrb	r3, [r7, #19]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10b      	bne.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80077d2:	4b83      	ldr	r3, [pc, #524]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80077d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077e0:	497f      	ldr	r1, [pc, #508]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80077e8:	e001      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ea:	7cfb      	ldrb	r3, [r7, #19]
 80077ec:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d057      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d013      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007806:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800780a:	d00e      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007814:	d009      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800781a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800781e:	d004      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007820:	f240 1111 	movw	r1, #273	; 0x111
 8007824:	486d      	ldr	r0, [pc, #436]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8007826:	f7fd fa8c 	bl	8004d42 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800782e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007832:	d01c      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007838:	d802      	bhi.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x214>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00e      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800783e:	e01f      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007844:	d003      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8007846:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800784a:	d01c      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800784c:	e018      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800784e:	4b64      	ldr	r3, [pc, #400]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	4a63      	ldr	r2, [pc, #396]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007858:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800785a:	e015      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x25c>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	3304      	adds	r3, #4
 8007860:	2100      	movs	r1, #0
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fc06 	bl	8008074 <RCCEx_PLLSAI1_Config>
 8007868:	4603      	mov	r3, r0
 800786a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800786c:	e00c      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x25c>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	3320      	adds	r3, #32
 8007872:	2100      	movs	r1, #0
 8007874:	4618      	mov	r0, r3
 8007876:	f000 fd79 	bl	800836c <RCCEx_PLLSAI2_Config>
 800787a:	4603      	mov	r3, r0
 800787c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800787e:	e003      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x25c>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	74fb      	strb	r3, [r7, #19]
      break;
 8007884:	e000      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      break;
 8007886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007888:	7cfb      	ldrb	r3, [r7, #19]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10b      	bne.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800788e:	4b54      	ldr	r3, [pc, #336]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007894:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800789c:	4950      	ldr	r1, [pc, #320]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80078a4:	e001      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a6:	7cfb      	ldrb	r3, [r7, #19]
 80078a8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 80bf 	beq.w	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078b8:	2300      	movs	r3, #0
 80078ba:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d016      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078d0:	d010      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078dc:	d00a      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078e8:	d004      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80078ea:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80078ee:	483b      	ldr	r0, [pc, #236]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 80078f0:	f7fd fa27 	bl	8004d42 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80078f4:	4b3a      	ldr	r3, [pc, #232]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80078f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007900:	2301      	movs	r3, #1
 8007902:	e000      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007904:	2300      	movs	r3, #0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00d      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800790a:	4b35      	ldr	r3, [pc, #212]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 800790c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800790e:	4a34      	ldr	r2, [pc, #208]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007914:	6593      	str	r3, [r2, #88]	; 0x58
 8007916:	4b32      	ldr	r3, [pc, #200]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800791e:	60bb      	str	r3, [r7, #8]
 8007920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007922:	2301      	movs	r3, #1
 8007924:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007926:	4b2f      	ldr	r3, [pc, #188]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a2e      	ldr	r2, [pc, #184]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 800792c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007930:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007932:	f7fe fa57 	bl	8005de4 <HAL_GetTick>
 8007936:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007938:	e009      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x322>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800793a:	f7fe fa53 	bl	8005de4 <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	2b02      	cmp	r3, #2
 8007946:	d902      	bls.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x322>
      {
        ret = HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	74fb      	strb	r3, [r7, #19]
        break;
 800794c:	e005      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x32e>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800794e:	4b25      	ldr	r3, [pc, #148]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0ef      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x30e>
      }
    }

    if(ret == HAL_OK)
 800795a:	7cfb      	ldrb	r3, [r7, #19]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d15f      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007960:	4b1f      	ldr	r3, [pc, #124]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800796a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d01f      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	429a      	cmp	r2, r3
 800797c:	d019      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800797e:	4b18      	ldr	r3, [pc, #96]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007988:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800798a:	4b15      	ldr	r3, [pc, #84]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 800798c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007990:	4a13      	ldr	r2, [pc, #76]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800799a:	4b11      	ldr	r3, [pc, #68]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 800799c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a0:	4a0f      	ldr	r2, [pc, #60]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80079a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80079aa:	4a0d      	ldr	r2, [pc, #52]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01c      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079bc:	f7fe fa12 	bl	8005de4 <HAL_GetTick>
 80079c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079c2:	e011      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079c4:	f7fe fa0e 	bl	8005de4 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d908      	bls.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
          {
            ret = HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	74fb      	strb	r3, [r7, #19]
            break;
 80079da:	e00c      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80079dc:	0800b458 	.word	0x0800b458
 80079e0:	40021000 	.word	0x40021000
 80079e4:	40007000 	.word	0x40007000
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079e8:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80079ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0e6      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
          }
        }
      }

      if(ret == HAL_OK)
 80079f6:	7cfb      	ldrb	r3, [r7, #19]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10c      	bne.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079fc:	4b07      	ldr	r3, [pc, #28]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80079fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a0c:	4903      	ldr	r1, [pc, #12]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007a14:	e006      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a16:	7cfb      	ldrb	r3, [r7, #19]
 8007a18:	74bb      	strb	r3, [r7, #18]
 8007a1a:	e003      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007a1c:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a20:	7cfb      	ldrb	r3, [r7, #19]
 8007a22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a24:	7c7b      	ldrb	r3, [r7, #17]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d105      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a2a:	4ba1      	ldr	r3, [pc, #644]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2e:	4aa0      	ldr	r2, [pc, #640]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d01f      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d010      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d00c      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d008      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d004      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007a62:	f240 119b 	movw	r1, #411	; 0x19b
 8007a66:	4893      	ldr	r0, [pc, #588]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8007a68:	f7fd f96b 	bl	8004d42 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a6c:	4b90      	ldr	r3, [pc, #576]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a72:	f023 0203 	bic.w	r2, r3, #3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	498d      	ldr	r1, [pc, #564]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0302 	and.w	r3, r3, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d01f      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d010      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	d00c      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa2:	2b0c      	cmp	r3, #12
 8007aa4:	d008      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	d004      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007aae:	f240 11a5 	movw	r1, #421	; 0x1a5
 8007ab2:	4880      	ldr	r0, [pc, #512]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8007ab4:	f7fd f945 	bl	8004d42 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ab8:	4b7d      	ldr	r3, [pc, #500]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007abe:	f023 020c 	bic.w	r2, r3, #12
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac6:	497a      	ldr	r1, [pc, #488]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0304 	and.w	r3, r3, #4
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d01f      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d010      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	2b10      	cmp	r3, #16
 8007ae8:	d00c      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aee:	2b30      	cmp	r3, #48	; 0x30
 8007af0:	d008      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	d004      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007afa:	f240 11b1 	movw	r1, #433	; 0x1b1
 8007afe:	486d      	ldr	r0, [pc, #436]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8007b00:	f7fd f91f 	bl	8004d42 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b04:	4b6a      	ldr	r3, [pc, #424]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b12:	4967      	ldr	r1, [pc, #412]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0308 	and.w	r3, r3, #8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d01f      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x53a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d010      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b32:	2b40      	cmp	r3, #64	; 0x40
 8007b34:	d00c      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b3a:	2bc0      	cmp	r3, #192	; 0xc0
 8007b3c:	d008      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b42:	2b80      	cmp	r3, #128	; 0x80
 8007b44:	d004      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007b46:	f240 11bf 	movw	r1, #447	; 0x1bf
 8007b4a:	485a      	ldr	r0, [pc, #360]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8007b4c:	f7fd f8f9 	bl	8004d42 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b50:	4b57      	ldr	r3, [pc, #348]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5e:	4954      	ldr	r1, [pc, #336]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0310 	and.w	r3, r3, #16
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d022      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d013      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b82:	d00e      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b8c:	d009      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b96:	d004      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8007b98:	f240 11cd 	movw	r1, #461	; 0x1cd
 8007b9c:	4845      	ldr	r0, [pc, #276]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8007b9e:	f7fd f8d0 	bl	8004d42 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007ba2:	4b43      	ldr	r3, [pc, #268]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bb0:	493f      	ldr	r1, [pc, #252]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0320 	and.w	r3, r3, #32
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d022      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x5de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d013      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bd4:	d00e      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bde:	d009      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007be8:	d004      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007bea:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007bee:	4831      	ldr	r0, [pc, #196]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8007bf0:	f7fd f8a7 	bl	8004d42 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bf4:	4b2e      	ldr	r3, [pc, #184]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c02:	492b      	ldr	r1, [pc, #172]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d022      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x630>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d013      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c26:	d00e      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c30:	d009      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c36:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007c3a:	d004      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8007c3c:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8007c40:	481c      	ldr	r0, [pc, #112]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8007c42:	f7fd f87e 	bl	8004d42 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c46:	4b1a      	ldr	r3, [pc, #104]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c54:	4916      	ldr	r1, [pc, #88]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d027      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d013      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c78:	d00e      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c82:	d009      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c8c:	d004      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007c8e:	f240 11e9 	movw	r1, #489	; 0x1e9
 8007c92:	4808      	ldr	r0, [pc, #32]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8007c94:	f7fd f855 	bl	8004d42 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c98:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ca6:	4902      	ldr	r1, [pc, #8]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007cae:	e003      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8007cb0:	40021000 	.word	0x40021000
 8007cb4:	0800b458 	.word	0x0800b458
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01d      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00e      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cd4:	d009      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cde:	d004      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8007ce0:	f240 11f1 	movw	r1, #497	; 0x1f1
 8007ce4:	488c      	ldr	r0, [pc, #560]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ce6:	f7fd f82c 	bl	8004d42 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007cea:	4b8c      	ldr	r3, [pc, #560]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf8:	4988      	ldr	r1, [pc, #544]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d01d      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x71c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00e      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x706>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d1c:	d009      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x706>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d26:	d004      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x706>
 8007d28:	f240 11fd 	movw	r1, #509	; 0x1fd
 8007d2c:	487a      	ldr	r0, [pc, #488]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d2e:	f7fd f808 	bl	8004d42 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d32:	4b7a      	ldr	r3, [pc, #488]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d40:	4976      	ldr	r1, [pc, #472]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d01d      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x764>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00e      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d64:	d009      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d6e:	d004      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8007d70:	f240 2109 	movw	r1, #521	; 0x209
 8007d74:	4868      	ldr	r0, [pc, #416]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d76:	f7fc ffe4 	bl	8004d42 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d7a:	4b68      	ldr	r3, [pc, #416]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d88:	4964      	ldr	r1, [pc, #400]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d040      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d013      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007da8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007dac:	d00e      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007db2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007db6:	d009      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dbc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007dc0:	d004      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 8007dc2:	f240 2122 	movw	r1, #546	; 0x222
 8007dc6:	4854      	ldr	r0, [pc, #336]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007dc8:	f7fc ffbb 	bl	8004d42 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dcc:	4b53      	ldr	r3, [pc, #332]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dda:	4950      	ldr	r1, [pc, #320]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dea:	d106      	bne.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dec:	4b4b      	ldr	r3, [pc, #300]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	4a4a      	ldr	r2, [pc, #296]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007df6:	60d3      	str	r3, [r2, #12]
 8007df8:	e011      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e02:	d10c      	bne.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3304      	adds	r3, #4
 8007e08:	2101      	movs	r1, #1
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 f932 	bl	8008074 <RCCEx_PLLSAI1_Config>
 8007e10:	4603      	mov	r3, r0
 8007e12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007e14:	7cfb      	ldrb	r3, [r7, #19]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
        {
          /* set overall return value */
          status = ret;
 8007e1a:	7cfb      	ldrb	r3, [r7, #19]
 8007e1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d040      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x880>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d013      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e3a:	d00e      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e44:	d009      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007e4e:	d004      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8007e50:	f240 2143 	movw	r1, #579	; 0x243
 8007e54:	4830      	ldr	r0, [pc, #192]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007e56:	f7fc ff74 	bl	8004d42 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e5a:	4b30      	ldr	r3, [pc, #192]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e68:	492c      	ldr	r1, [pc, #176]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e78:	d106      	bne.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e7a:	4b28      	ldr	r3, [pc, #160]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	4a27      	ldr	r2, [pc, #156]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007e80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e84:	60d3      	str	r3, [r2, #12]
 8007e86:	e011      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x880>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e90:	d10c      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x880>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	3304      	adds	r3, #4
 8007e96:	2101      	movs	r1, #1
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 f8eb 	bl	8008074 <RCCEx_PLLSAI1_Config>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ea2:	7cfb      	ldrb	r3, [r7, #19]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x880>
      {
        /* set overall return value */
        status = ret;
 8007ea8:	7cfb      	ldrb	r3, [r7, #19]
 8007eaa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d045      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x918>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d013      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ec4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ec8:	d00e      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ece:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ed2:	d009      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ed8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007edc:	d004      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007ede:	f44f 711a 	mov.w	r1, #616	; 0x268
 8007ee2:	480d      	ldr	r0, [pc, #52]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ee4:	f7fc ff2d 	bl	8004d42 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ee8:	4b0c      	ldr	r3, [pc, #48]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef6:	4909      	ldr	r1, [pc, #36]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f06:	d10b      	bne.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f08:	4b04      	ldr	r3, [pc, #16]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	4a03      	ldr	r2, [pc, #12]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f12:	60d3      	str	r3, [r2, #12]
 8007f14:	e016      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x918>
 8007f16:	bf00      	nop
 8007f18:	0800b458 	.word	0x0800b458
 8007f1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f28:	d10c      	bne.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x918>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	2101      	movs	r1, #1
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 f89f 	bl	8008074 <RCCEx_PLLSAI1_Config>
 8007f36:	4603      	mov	r3, r0
 8007f38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f3a:	7cfb      	ldrb	r3, [r7, #19]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x918>
      {
        /* set overall return value */
        status = ret;
 8007f40:	7cfb      	ldrb	r3, [r7, #19]
 8007f42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d047      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d013      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x954>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f60:	d00e      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x954>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f6a:	d009      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x954>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f74:	d004      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x954>
 8007f76:	f44f 7122 	mov.w	r1, #648	; 0x288
 8007f7a:	483c      	ldr	r0, [pc, #240]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8007f7c:	f7fc fee1 	bl	8004d42 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f80:	4b3b      	ldr	r3, [pc, #236]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8007f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f8e:	4938      	ldr	r1, [pc, #224]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f9e:	d10d      	bne.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	2102      	movs	r1, #2
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 f864 	bl	8008074 <RCCEx_PLLSAI1_Config>
 8007fac:	4603      	mov	r3, r0
 8007fae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007fb0:	7cfb      	ldrb	r3, [r7, #19]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d014      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
      {
        /* set overall return value */
        status = ret;
 8007fb6:	7cfb      	ldrb	r3, [r7, #19]
 8007fb8:	74bb      	strb	r3, [r7, #18]
 8007fba:	e011      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fc4:	d10c      	bne.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3320      	adds	r3, #32
 8007fca:	2102      	movs	r1, #2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 f9cd 	bl	800836c <RCCEx_PLLSAI2_Config>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007fd6:	7cfb      	ldrb	r3, [r7, #19]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
      {
        /* set overall return value */
        status = ret;
 8007fdc:	7cfb      	ldrb	r3, [r7, #19]
 8007fde:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d018      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d009      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ffc:	d004      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8007ffe:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8008002:	481a      	ldr	r0, [pc, #104]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8008004:	f7fc fe9d 	bl	8004d42 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008008:	4b19      	ldr	r3, [pc, #100]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 800800a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008016:	4916      	ldr	r1, [pc, #88]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8008018:	4313      	orrs	r3, r2
 800801a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d01b      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00a      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800803a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800803e:	d004      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8008040:	f240 21c2 	movw	r1, #706	; 0x2c2
 8008044:	4809      	ldr	r0, [pc, #36]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8008046:	f7fc fe7c 	bl	8004d42 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800804a:	4b09      	ldr	r3, [pc, #36]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 800804c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008050:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800805a:	4905      	ldr	r1, [pc, #20]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 800805c:	4313      	orrs	r3, r2
 800805e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008062:	7cbb      	ldrb	r3, [r7, #18]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	0800b458 	.word	0x0800b458
 8008070:	40021000 	.word	0x40021000

08008074 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d010      	beq.n	80080ac <RCCEx_PLLSAI1_Config+0x38>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d00c      	beq.n	80080ac <RCCEx_PLLSAI1_Config+0x38>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b02      	cmp	r3, #2
 8008098:	d008      	beq.n	80080ac <RCCEx_PLLSAI1_Config+0x38>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d004      	beq.n	80080ac <RCCEx_PLLSAI1_Config+0x38>
 80080a2:	f640 314f 	movw	r1, #2895	; 0xb4f
 80080a6:	48a3      	ldr	r0, [pc, #652]	; (8008334 <RCCEx_PLLSAI1_Config+0x2c0>)
 80080a8:	f7fc fe4b 	bl	8004d42 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <RCCEx_PLLSAI1_Config+0x48>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	2b08      	cmp	r3, #8
 80080ba:	d904      	bls.n	80080c6 <RCCEx_PLLSAI1_Config+0x52>
 80080bc:	f44f 6135 	mov.w	r1, #2896	; 0xb50
 80080c0:	489c      	ldr	r0, [pc, #624]	; (8008334 <RCCEx_PLLSAI1_Config+0x2c0>)
 80080c2:	f7fc fe3e 	bl	8004d42 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	2b07      	cmp	r3, #7
 80080cc:	d903      	bls.n	80080d6 <RCCEx_PLLSAI1_Config+0x62>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	2b56      	cmp	r3, #86	; 0x56
 80080d4:	d904      	bls.n	80080e0 <RCCEx_PLLSAI1_Config+0x6c>
 80080d6:	f640 3151 	movw	r1, #2897	; 0xb51
 80080da:	4896      	ldr	r0, [pc, #600]	; (8008334 <RCCEx_PLLSAI1_Config+0x2c0>)
 80080dc:	f7fc fe31 	bl	8004d42 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10b      	bne.n	8008104 <RCCEx_PLLSAI1_Config+0x90>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d105      	bne.n	8008104 <RCCEx_PLLSAI1_Config+0x90>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d007      	beq.n	8008114 <RCCEx_PLLSAI1_Config+0xa0>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800810c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d004      	beq.n	800811e <RCCEx_PLLSAI1_Config+0xaa>
 8008114:	f640 3152 	movw	r1, #2898	; 0xb52
 8008118:	4886      	ldr	r0, [pc, #536]	; (8008334 <RCCEx_PLLSAI1_Config+0x2c0>)
 800811a:	f7fc fe12 	bl	8004d42 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800811e:	4b86      	ldr	r3, [pc, #536]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f003 0303 	and.w	r3, r3, #3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d018      	beq.n	800815c <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800812a:	4b83      	ldr	r3, [pc, #524]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f003 0203 	and.w	r2, r3, #3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	429a      	cmp	r2, r3
 8008138:	d10d      	bne.n	8008156 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
       ||
 800813e:	2b00      	cmp	r3, #0
 8008140:	d009      	beq.n	8008156 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008142:	4b7d      	ldr	r3, [pc, #500]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	091b      	lsrs	r3, r3, #4
 8008148:	f003 0307 	and.w	r3, r3, #7
 800814c:	1c5a      	adds	r2, r3, #1
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
       ||
 8008152:	429a      	cmp	r2, r3
 8008154:	d044      	beq.n	80081e0 <RCCEx_PLLSAI1_Config+0x16c>
#endif
      )
    {
      status = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	73fb      	strb	r3, [r7, #15]
 800815a:	e041      	b.n	80081e0 <RCCEx_PLLSAI1_Config+0x16c>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b02      	cmp	r3, #2
 8008162:	d00c      	beq.n	800817e <RCCEx_PLLSAI1_Config+0x10a>
 8008164:	2b03      	cmp	r3, #3
 8008166:	d013      	beq.n	8008190 <RCCEx_PLLSAI1_Config+0x11c>
 8008168:	2b01      	cmp	r3, #1
 800816a:	d120      	bne.n	80081ae <RCCEx_PLLSAI1_Config+0x13a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800816c:	4b72      	ldr	r3, [pc, #456]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d11d      	bne.n	80081b4 <RCCEx_PLLSAI1_Config+0x140>
      {
        status = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800817c:	e01a      	b.n	80081b4 <RCCEx_PLLSAI1_Config+0x140>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800817e:	4b6e      	ldr	r3, [pc, #440]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008186:	2b00      	cmp	r3, #0
 8008188:	d116      	bne.n	80081b8 <RCCEx_PLLSAI1_Config+0x144>
      {
        status = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800818e:	e013      	b.n	80081b8 <RCCEx_PLLSAI1_Config+0x144>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008190:	4b69      	ldr	r3, [pc, #420]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10f      	bne.n	80081bc <RCCEx_PLLSAI1_Config+0x148>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800819c:	4b66      	ldr	r3, [pc, #408]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d109      	bne.n	80081bc <RCCEx_PLLSAI1_Config+0x148>
        {
          status = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081ac:	e006      	b.n	80081bc <RCCEx_PLLSAI1_Config+0x148>
    default:
      status = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	73fb      	strb	r3, [r7, #15]
      break;
 80081b2:	e004      	b.n	80081be <RCCEx_PLLSAI1_Config+0x14a>
      break;
 80081b4:	bf00      	nop
 80081b6:	e002      	b.n	80081be <RCCEx_PLLSAI1_Config+0x14a>
      break;
 80081b8:	bf00      	nop
 80081ba:	e000      	b.n	80081be <RCCEx_PLLSAI1_Config+0x14a>
      break;
 80081bc:	bf00      	nop
    }

    if(status == HAL_OK)
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10d      	bne.n	80081e0 <RCCEx_PLLSAI1_Config+0x16c>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80081c4:	4b5c      	ldr	r3, [pc, #368]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6819      	ldr	r1, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	3b01      	subs	r3, #1
 80081d6:	011b      	lsls	r3, r3, #4
 80081d8:	430b      	orrs	r3, r1
 80081da:	4957      	ldr	r1, [pc, #348]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f040 80ba 	bne.w	800835c <RCCEx_PLLSAI1_Config+0x2e8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80081e8:	4b53      	ldr	r3, [pc, #332]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a52      	ldr	r2, [pc, #328]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 80081ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081f4:	f7fd fdf6 	bl	8005de4 <HAL_GetTick>
 80081f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80081fa:	e009      	b.n	8008210 <RCCEx_PLLSAI1_Config+0x19c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081fc:	f7fd fdf2 	bl	8005de4 <HAL_GetTick>
 8008200:	4602      	mov	r2, r0
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	2b02      	cmp	r3, #2
 8008208:	d902      	bls.n	8008210 <RCCEx_PLLSAI1_Config+0x19c>
      {
        status = HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	73fb      	strb	r3, [r7, #15]
        break;
 800820e:	e005      	b.n	800821c <RCCEx_PLLSAI1_Config+0x1a8>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008210:	4b49      	ldr	r3, [pc, #292]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1ef      	bne.n	80081fc <RCCEx_PLLSAI1_Config+0x188>
      }
    }

    if(status == HAL_OK)
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	2b00      	cmp	r3, #0
 8008220:	f040 809c 	bne.w	800835c <RCCEx_PLLSAI1_Config+0x2e8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d11e      	bne.n	8008268 <RCCEx_PLLSAI1_Config+0x1f4>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	2b07      	cmp	r3, #7
 8008230:	d008      	beq.n	8008244 <RCCEx_PLLSAI1_Config+0x1d0>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	2b11      	cmp	r3, #17
 8008238:	d004      	beq.n	8008244 <RCCEx_PLLSAI1_Config+0x1d0>
 800823a:	f640 31a5 	movw	r1, #2981	; 0xba5
 800823e:	483d      	ldr	r0, [pc, #244]	; (8008334 <RCCEx_PLLSAI1_Config+0x2c0>)
 8008240:	f7fc fd7f 	bl	8004d42 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008244:	4b3c      	ldr	r3, [pc, #240]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800824c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6892      	ldr	r2, [r2, #8]
 8008254:	0211      	lsls	r1, r2, #8
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	68d2      	ldr	r2, [r2, #12]
 800825a:	0912      	lsrs	r2, r2, #4
 800825c:	0452      	lsls	r2, r2, #17
 800825e:	430a      	orrs	r2, r1
 8008260:	4935      	ldr	r1, [pc, #212]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 8008262:	4313      	orrs	r3, r2
 8008264:	610b      	str	r3, [r1, #16]
 8008266:	e051      	b.n	800830c <RCCEx_PLLSAI1_Config+0x298>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d127      	bne.n	80082be <RCCEx_PLLSAI1_Config+0x24a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	2b02      	cmp	r3, #2
 8008274:	d010      	beq.n	8008298 <RCCEx_PLLSAI1_Config+0x224>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	2b04      	cmp	r3, #4
 800827c:	d00c      	beq.n	8008298 <RCCEx_PLLSAI1_Config+0x224>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	2b06      	cmp	r3, #6
 8008284:	d008      	beq.n	8008298 <RCCEx_PLLSAI1_Config+0x224>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	2b08      	cmp	r3, #8
 800828c:	d004      	beq.n	8008298 <RCCEx_PLLSAI1_Config+0x224>
 800828e:	f640 31c9 	movw	r1, #3017	; 0xbc9
 8008292:	4828      	ldr	r0, [pc, #160]	; (8008334 <RCCEx_PLLSAI1_Config+0x2c0>)
 8008294:	f7fc fd55 	bl	8004d42 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008298:	4b27      	ldr	r3, [pc, #156]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80082a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	6892      	ldr	r2, [r2, #8]
 80082a8:	0211      	lsls	r1, r2, #8
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	6912      	ldr	r2, [r2, #16]
 80082ae:	0852      	lsrs	r2, r2, #1
 80082b0:	3a01      	subs	r2, #1
 80082b2:	0552      	lsls	r2, r2, #21
 80082b4:	430a      	orrs	r2, r1
 80082b6:	4920      	ldr	r1, [pc, #128]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	610b      	str	r3, [r1, #16]
 80082bc:	e026      	b.n	800830c <RCCEx_PLLSAI1_Config+0x298>
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d010      	beq.n	80082e8 <RCCEx_PLLSAI1_Config+0x274>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	2b04      	cmp	r3, #4
 80082cc:	d00c      	beq.n	80082e8 <RCCEx_PLLSAI1_Config+0x274>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	2b06      	cmp	r3, #6
 80082d4:	d008      	beq.n	80082e8 <RCCEx_PLLSAI1_Config+0x274>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	2b08      	cmp	r3, #8
 80082dc:	d004      	beq.n	80082e8 <RCCEx_PLLSAI1_Config+0x274>
 80082de:	f640 31db 	movw	r1, #3035	; 0xbdb
 80082e2:	4814      	ldr	r0, [pc, #80]	; (8008334 <RCCEx_PLLSAI1_Config+0x2c0>)
 80082e4:	f7fc fd2d 	bl	8004d42 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80082e8:	4b13      	ldr	r3, [pc, #76]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80082f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	6892      	ldr	r2, [r2, #8]
 80082f8:	0211      	lsls	r1, r2, #8
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	6952      	ldr	r2, [r2, #20]
 80082fe:	0852      	lsrs	r2, r2, #1
 8008300:	3a01      	subs	r2, #1
 8008302:	0652      	lsls	r2, r2, #25
 8008304:	430a      	orrs	r2, r1
 8008306:	490c      	ldr	r1, [pc, #48]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 8008308:	4313      	orrs	r3, r2
 800830a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800830c:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a09      	ldr	r2, [pc, #36]	; (8008338 <RCCEx_PLLSAI1_Config+0x2c4>)
 8008312:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008316:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008318:	f7fd fd64 	bl	8005de4 <HAL_GetTick>
 800831c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800831e:	e00d      	b.n	800833c <RCCEx_PLLSAI1_Config+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008320:	f7fd fd60 	bl	8005de4 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	2b02      	cmp	r3, #2
 800832c:	d906      	bls.n	800833c <RCCEx_PLLSAI1_Config+0x2c8>
        {
          status = HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	73fb      	strb	r3, [r7, #15]
          break;
 8008332:	e009      	b.n	8008348 <RCCEx_PLLSAI1_Config+0x2d4>
 8008334:	0800b458 	.word	0x0800b458
 8008338:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <RCCEx_PLLSAI1_Config+0x2f4>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d0eb      	beq.n	8008320 <RCCEx_PLLSAI1_Config+0x2ac>
        }
      }

      if(status == HAL_OK)
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d106      	bne.n	800835c <RCCEx_PLLSAI1_Config+0x2e8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800834e:	4b06      	ldr	r3, [pc, #24]	; (8008368 <RCCEx_PLLSAI1_Config+0x2f4>)
 8008350:	691a      	ldr	r2, [r3, #16]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	4904      	ldr	r1, [pc, #16]	; (8008368 <RCCEx_PLLSAI1_Config+0x2f4>)
 8008358:	4313      	orrs	r3, r2
 800835a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800835c:	7bfb      	ldrb	r3, [r7, #15]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	40021000 	.word	0x40021000

0800836c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d010      	beq.n	80083a4 <RCCEx_PLLSAI2_Config+0x38>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d00c      	beq.n	80083a4 <RCCEx_PLLSAI2_Config+0x38>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b02      	cmp	r3, #2
 8008390:	d008      	beq.n	80083a4 <RCCEx_PLLSAI2_Config+0x38>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b03      	cmp	r3, #3
 8008398:	d004      	beq.n	80083a4 <RCCEx_PLLSAI2_Config+0x38>
 800839a:	f640 411c 	movw	r1, #3100	; 0xc1c
 800839e:	4895      	ldr	r0, [pc, #596]	; (80085f4 <RCCEx_PLLSAI2_Config+0x288>)
 80083a0:	f7fc fccf 	bl	8004d42 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d003      	beq.n	80083b4 <RCCEx_PLLSAI2_Config+0x48>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	2b08      	cmp	r3, #8
 80083b2:	d904      	bls.n	80083be <RCCEx_PLLSAI2_Config+0x52>
 80083b4:	f640 411d 	movw	r1, #3101	; 0xc1d
 80083b8:	488e      	ldr	r0, [pc, #568]	; (80085f4 <RCCEx_PLLSAI2_Config+0x288>)
 80083ba:	f7fc fcc2 	bl	8004d42 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	2b07      	cmp	r3, #7
 80083c4:	d903      	bls.n	80083ce <RCCEx_PLLSAI2_Config+0x62>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	2b56      	cmp	r3, #86	; 0x56
 80083cc:	d904      	bls.n	80083d8 <RCCEx_PLLSAI2_Config+0x6c>
 80083ce:	f640 411e 	movw	r1, #3102	; 0xc1e
 80083d2:	4888      	ldr	r0, [pc, #544]	; (80085f4 <RCCEx_PLLSAI2_Config+0x288>)
 80083d4:	f7fc fcb5 	bl	8004d42 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d105      	bne.n	80083f0 <RCCEx_PLLSAI2_Config+0x84>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d007      	beq.n	8008400 <RCCEx_PLLSAI2_Config+0x94>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d004      	beq.n	800840a <RCCEx_PLLSAI2_Config+0x9e>
 8008400:	f640 411f 	movw	r1, #3103	; 0xc1f
 8008404:	487b      	ldr	r0, [pc, #492]	; (80085f4 <RCCEx_PLLSAI2_Config+0x288>)
 8008406:	f7fc fc9c 	bl	8004d42 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800840a:	4b7b      	ldr	r3, [pc, #492]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f003 0303 	and.w	r3, r3, #3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d018      	beq.n	8008448 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008416:	4b78      	ldr	r3, [pc, #480]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f003 0203 	and.w	r2, r3, #3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	429a      	cmp	r2, r3
 8008424:	d10d      	bne.n	8008442 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
       ||
 800842a:	2b00      	cmp	r3, #0
 800842c:	d009      	beq.n	8008442 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800842e:	4b72      	ldr	r3, [pc, #456]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	091b      	lsrs	r3, r3, #4
 8008434:	f003 0307 	and.w	r3, r3, #7
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
       ||
 800843e:	429a      	cmp	r2, r3
 8008440:	d044      	beq.n	80084cc <RCCEx_PLLSAI2_Config+0x160>
#endif
      )
    {
      status = HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	73fb      	strb	r3, [r7, #15]
 8008446:	e041      	b.n	80084cc <RCCEx_PLLSAI2_Config+0x160>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b02      	cmp	r3, #2
 800844e:	d00c      	beq.n	800846a <RCCEx_PLLSAI2_Config+0xfe>
 8008450:	2b03      	cmp	r3, #3
 8008452:	d013      	beq.n	800847c <RCCEx_PLLSAI2_Config+0x110>
 8008454:	2b01      	cmp	r3, #1
 8008456:	d120      	bne.n	800849a <RCCEx_PLLSAI2_Config+0x12e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008458:	4b67      	ldr	r3, [pc, #412]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0302 	and.w	r3, r3, #2
 8008460:	2b00      	cmp	r3, #0
 8008462:	d11d      	bne.n	80084a0 <RCCEx_PLLSAI2_Config+0x134>
      {
        status = HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008468:	e01a      	b.n	80084a0 <RCCEx_PLLSAI2_Config+0x134>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800846a:	4b63      	ldr	r3, [pc, #396]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008472:	2b00      	cmp	r3, #0
 8008474:	d116      	bne.n	80084a4 <RCCEx_PLLSAI2_Config+0x138>
      {
        status = HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800847a:	e013      	b.n	80084a4 <RCCEx_PLLSAI2_Config+0x138>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800847c:	4b5e      	ldr	r3, [pc, #376]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10f      	bne.n	80084a8 <RCCEx_PLLSAI2_Config+0x13c>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008488:	4b5b      	ldr	r3, [pc, #364]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d109      	bne.n	80084a8 <RCCEx_PLLSAI2_Config+0x13c>
        {
          status = HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008498:	e006      	b.n	80084a8 <RCCEx_PLLSAI2_Config+0x13c>
    default:
      status = HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	73fb      	strb	r3, [r7, #15]
      break;
 800849e:	e004      	b.n	80084aa <RCCEx_PLLSAI2_Config+0x13e>
      break;
 80084a0:	bf00      	nop
 80084a2:	e002      	b.n	80084aa <RCCEx_PLLSAI2_Config+0x13e>
      break;
 80084a4:	bf00      	nop
 80084a6:	e000      	b.n	80084aa <RCCEx_PLLSAI2_Config+0x13e>
      break;
 80084a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10d      	bne.n	80084cc <RCCEx_PLLSAI2_Config+0x160>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80084b0:	4b51      	ldr	r3, [pc, #324]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6819      	ldr	r1, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	3b01      	subs	r3, #1
 80084c2:	011b      	lsls	r3, r3, #4
 80084c4:	430b      	orrs	r3, r1
 80084c6:	494c      	ldr	r1, [pc, #304]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f040 808a 	bne.w	80085e8 <RCCEx_PLLSAI2_Config+0x27c>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80084d4:	4b48      	ldr	r3, [pc, #288]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a47      	ldr	r2, [pc, #284]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80084da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084e0:	f7fd fc80 	bl	8005de4 <HAL_GetTick>
 80084e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80084e6:	e009      	b.n	80084fc <RCCEx_PLLSAI2_Config+0x190>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80084e8:	f7fd fc7c 	bl	8005de4 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d902      	bls.n	80084fc <RCCEx_PLLSAI2_Config+0x190>
      {
        status = HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	73fb      	strb	r3, [r7, #15]
        break;
 80084fa:	e005      	b.n	8008508 <RCCEx_PLLSAI2_Config+0x19c>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80084fc:	4b3e      	ldr	r3, [pc, #248]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1ef      	bne.n	80084e8 <RCCEx_PLLSAI2_Config+0x17c>
      }
    }

    if(status == HAL_OK)
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d16c      	bne.n	80085e8 <RCCEx_PLLSAI2_Config+0x27c>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d11e      	bne.n	8008552 <RCCEx_PLLSAI2_Config+0x1e6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	2b07      	cmp	r3, #7
 800851a:	d008      	beq.n	800852e <RCCEx_PLLSAI2_Config+0x1c2>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	2b11      	cmp	r3, #17
 8008522:	d004      	beq.n	800852e <RCCEx_PLLSAI2_Config+0x1c2>
 8008524:	f640 4172 	movw	r1, #3186	; 0xc72
 8008528:	4832      	ldr	r0, [pc, #200]	; (80085f4 <RCCEx_PLLSAI2_Config+0x288>)
 800852a:	f7fc fc0a 	bl	8004d42 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800852e:	4b32      	ldr	r3, [pc, #200]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	6892      	ldr	r2, [r2, #8]
 800853e:	0211      	lsls	r1, r2, #8
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	68d2      	ldr	r2, [r2, #12]
 8008544:	0912      	lsrs	r2, r2, #4
 8008546:	0452      	lsls	r2, r2, #17
 8008548:	430a      	orrs	r2, r1
 800854a:	492b      	ldr	r1, [pc, #172]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800854c:	4313      	orrs	r3, r2
 800854e:	614b      	str	r3, [r1, #20]
 8008550:	e026      	b.n	80085a0 <RCCEx_PLLSAI2_Config+0x234>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	2b02      	cmp	r3, #2
 8008558:	d010      	beq.n	800857c <RCCEx_PLLSAI2_Config+0x210>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	2b04      	cmp	r3, #4
 8008560:	d00c      	beq.n	800857c <RCCEx_PLLSAI2_Config+0x210>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	2b06      	cmp	r3, #6
 8008568:	d008      	beq.n	800857c <RCCEx_PLLSAI2_Config+0x210>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	2b08      	cmp	r3, #8
 8008570:	d004      	beq.n	800857c <RCCEx_PLLSAI2_Config+0x210>
 8008572:	f640 41aa 	movw	r1, #3242	; 0xcaa
 8008576:	481f      	ldr	r0, [pc, #124]	; (80085f4 <RCCEx_PLLSAI2_Config+0x288>)
 8008578:	f7fc fbe3 	bl	8004d42 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800857c:	4b1e      	ldr	r3, [pc, #120]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008584:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	6892      	ldr	r2, [r2, #8]
 800858c:	0211      	lsls	r1, r2, #8
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	6912      	ldr	r2, [r2, #16]
 8008592:	0852      	lsrs	r2, r2, #1
 8008594:	3a01      	subs	r2, #1
 8008596:	0652      	lsls	r2, r2, #25
 8008598:	430a      	orrs	r2, r1
 800859a:	4917      	ldr	r1, [pc, #92]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 800859c:	4313      	orrs	r3, r2
 800859e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80085a0:	4b15      	ldr	r3, [pc, #84]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a14      	ldr	r2, [pc, #80]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80085a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ac:	f7fd fc1a 	bl	8005de4 <HAL_GetTick>
 80085b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80085b2:	e009      	b.n	80085c8 <RCCEx_PLLSAI2_Config+0x25c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80085b4:	f7fd fc16 	bl	8005de4 <HAL_GetTick>
 80085b8:	4602      	mov	r2, r0
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d902      	bls.n	80085c8 <RCCEx_PLLSAI2_Config+0x25c>
        {
          status = HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	73fb      	strb	r3, [r7, #15]
          break;
 80085c6:	e005      	b.n	80085d4 <RCCEx_PLLSAI2_Config+0x268>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80085c8:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d0ef      	beq.n	80085b4 <RCCEx_PLLSAI2_Config+0x248>
        }
      }

      if(status == HAL_OK)
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d106      	bne.n	80085e8 <RCCEx_PLLSAI2_Config+0x27c>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80085da:	4b07      	ldr	r3, [pc, #28]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80085dc:	695a      	ldr	r2, [r3, #20]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	4905      	ldr	r1, [pc, #20]	; (80085f8 <RCCEx_PLLSAI2_Config+0x28c>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	0800b458 	.word	0x0800b458
 80085f8:	40021000 	.word	0x40021000

080085fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e17c      	b.n	8008908 <HAL_SPI_Init+0x30c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a9b      	ldr	r2, [pc, #620]	; (8008880 <HAL_SPI_Init+0x284>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d00e      	beq.n	8008636 <HAL_SPI_Init+0x3a>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a99      	ldr	r2, [pc, #612]	; (8008884 <HAL_SPI_Init+0x288>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d009      	beq.n	8008636 <HAL_SPI_Init+0x3a>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a98      	ldr	r2, [pc, #608]	; (8008888 <HAL_SPI_Init+0x28c>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d004      	beq.n	8008636 <HAL_SPI_Init+0x3a>
 800862c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8008630:	4896      	ldr	r0, [pc, #600]	; (800888c <HAL_SPI_Init+0x290>)
 8008632:	f7fc fb86 	bl	8004d42 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d009      	beq.n	8008652 <HAL_SPI_Init+0x56>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008646:	d004      	beq.n	8008652 <HAL_SPI_Init+0x56>
 8008648:	f240 1145 	movw	r1, #325	; 0x145
 800864c:	488f      	ldr	r0, [pc, #572]	; (800888c <HAL_SPI_Init+0x290>)
 800864e:	f7fc fb78 	bl	8004d42 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00e      	beq.n	8008678 <HAL_SPI_Init+0x7c>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008662:	d009      	beq.n	8008678 <HAL_SPI_Init+0x7c>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800866c:	d004      	beq.n	8008678 <HAL_SPI_Init+0x7c>
 800866e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8008672:	4886      	ldr	r0, [pc, #536]	; (800888c <HAL_SPI_Init+0x290>)
 8008674:	f7fc fb65 	bl	8004d42 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008680:	d040      	beq.n	8008704 <HAL_SPI_Init+0x108>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800868a:	d03b      	beq.n	8008704 <HAL_SPI_Init+0x108>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8008694:	d036      	beq.n	8008704 <HAL_SPI_Init+0x108>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800869e:	d031      	beq.n	8008704 <HAL_SPI_Init+0x108>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 80086a8:	d02c      	beq.n	8008704 <HAL_SPI_Init+0x108>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80086b2:	d027      	beq.n	8008704 <HAL_SPI_Init+0x108>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80086bc:	d022      	beq.n	8008704 <HAL_SPI_Init+0x108>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086c6:	d01d      	beq.n	8008704 <HAL_SPI_Init+0x108>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80086d0:	d018      	beq.n	8008704 <HAL_SPI_Init+0x108>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80086da:	d013      	beq.n	8008704 <HAL_SPI_Init+0x108>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80086e4:	d00e      	beq.n	8008704 <HAL_SPI_Init+0x108>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086ee:	d009      	beq.n	8008704 <HAL_SPI_Init+0x108>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086f8:	d004      	beq.n	8008704 <HAL_SPI_Init+0x108>
 80086fa:	f240 1147 	movw	r1, #327	; 0x147
 80086fe:	4863      	ldr	r0, [pc, #396]	; (800888c <HAL_SPI_Init+0x290>)
 8008700:	f7fc fb1f 	bl	8004d42 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800870c:	d00d      	beq.n	800872a <HAL_SPI_Init+0x12e>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d009      	beq.n	800872a <HAL_SPI_Init+0x12e>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800871e:	d004      	beq.n	800872a <HAL_SPI_Init+0x12e>
 8008720:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008724:	4859      	ldr	r0, [pc, #356]	; (800888c <HAL_SPI_Init+0x290>)
 8008726:	f7fc fb0c 	bl	8004d42 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872e:	2b08      	cmp	r3, #8
 8008730:	d008      	beq.n	8008744 <HAL_SPI_Init+0x148>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008736:	2b00      	cmp	r3, #0
 8008738:	d004      	beq.n	8008744 <HAL_SPI_Init+0x148>
 800873a:	f240 1149 	movw	r1, #329	; 0x149
 800873e:	4853      	ldr	r0, [pc, #332]	; (800888c <HAL_SPI_Init+0x290>)
 8008740:	f7fc faff 	bl	8004d42 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d020      	beq.n	800878e <HAL_SPI_Init+0x192>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	2b08      	cmp	r3, #8
 8008752:	d01c      	beq.n	800878e <HAL_SPI_Init+0x192>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	2b10      	cmp	r3, #16
 800875a:	d018      	beq.n	800878e <HAL_SPI_Init+0x192>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	2b18      	cmp	r3, #24
 8008762:	d014      	beq.n	800878e <HAL_SPI_Init+0x192>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	2b20      	cmp	r3, #32
 800876a:	d010      	beq.n	800878e <HAL_SPI_Init+0x192>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	2b28      	cmp	r3, #40	; 0x28
 8008772:	d00c      	beq.n	800878e <HAL_SPI_Init+0x192>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	2b30      	cmp	r3, #48	; 0x30
 800877a:	d008      	beq.n	800878e <HAL_SPI_Init+0x192>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	2b38      	cmp	r3, #56	; 0x38
 8008782:	d004      	beq.n	800878e <HAL_SPI_Init+0x192>
 8008784:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008788:	4840      	ldr	r0, [pc, #256]	; (800888c <HAL_SPI_Init+0x290>)
 800878a:	f7fc fada 	bl	8004d42 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d008      	beq.n	80087a8 <HAL_SPI_Init+0x1ac>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	2b80      	cmp	r3, #128	; 0x80
 800879c:	d004      	beq.n	80087a8 <HAL_SPI_Init+0x1ac>
 800879e:	f240 114b 	movw	r1, #331	; 0x14b
 80087a2:	483a      	ldr	r0, [pc, #232]	; (800888c <HAL_SPI_Init+0x290>)
 80087a4:	f7fc facd 	bl	8004d42 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d008      	beq.n	80087c2 <HAL_SPI_Init+0x1c6>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	2b10      	cmp	r3, #16
 80087b6:	d004      	beq.n	80087c2 <HAL_SPI_Init+0x1c6>
 80087b8:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80087bc:	4833      	ldr	r0, [pc, #204]	; (800888c <HAL_SPI_Init+0x290>)
 80087be:	f7fc fac0 	bl	8004d42 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d119      	bne.n	80087fe <HAL_SPI_Init+0x202>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d008      	beq.n	80087e4 <HAL_SPI_Init+0x1e8>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d004      	beq.n	80087e4 <HAL_SPI_Init+0x1e8>
 80087da:	f240 114f 	movw	r1, #335	; 0x14f
 80087de:	482b      	ldr	r0, [pc, #172]	; (800888c <HAL_SPI_Init+0x290>)
 80087e0:	f7fc faaf 	bl	8004d42 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	695b      	ldr	r3, [r3, #20]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d008      	beq.n	80087fe <HAL_SPI_Init+0x202>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d004      	beq.n	80087fe <HAL_SPI_Init+0x202>
 80087f4:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80087f8:	4824      	ldr	r0, [pc, #144]	; (800888c <HAL_SPI_Init+0x290>)
 80087fa:	f7fc faa2 	bl	8004d42 <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b00      	cmp	r3, #0
 800880e:	d106      	bne.n	800881e <HAL_SPI_Init+0x222>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7fd f921 	bl	8005a60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2202      	movs	r2, #2
 8008822:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008834:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800883e:	d902      	bls.n	8008846 <HAL_SPI_Init+0x24a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008840:	2300      	movs	r3, #0
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	e002      	b.n	800884c <HAL_SPI_Init+0x250>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800884a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008854:	d007      	beq.n	8008866 <HAL_SPI_Init+0x26a>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800885e:	d002      	beq.n	8008866 <HAL_SPI_Init+0x26a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	2b00      	cmp	r3, #0
 800886c:	d113      	bne.n	8008896 <HAL_SPI_Init+0x29a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008876:	d90b      	bls.n	8008890 <HAL_SPI_Init+0x294>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2202      	movs	r2, #2
 800887c:	631a      	str	r2, [r3, #48]	; 0x30
 800887e:	e00a      	b.n	8008896 <HAL_SPI_Init+0x29a>
 8008880:	40013000 	.word	0x40013000
 8008884:	40003800 	.word	0x40003800
 8008888:	40003c00 	.word	0x40003c00
 800888c:	0800b494 	.word	0x0800b494
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	431a      	orrs	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	431a      	orrs	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	431a      	orrs	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088b4:	431a      	orrs	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	431a      	orrs	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a1b      	ldr	r3, [r3, #32]
 80088c0:	ea42 0103 	orr.w	r1, r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	0c1b      	lsrs	r3, r3, #16
 80088d6:	f003 0204 	and.w	r2, r3, #4
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	431a      	orrs	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e4:	431a      	orrs	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	ea42 0103 	orr.w	r1, r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	430a      	orrs	r2, r1
 80088f6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b08a      	sub	sp, #40	; 0x28
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
 800891c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800891e:	2301      	movs	r3, #1
 8008920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d004      	beq.n	800893a <HAL_SPI_TransmitReceive+0x2a>
 8008930:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8008934:	4895      	ldr	r0, [pc, #596]	; (8008b8c <HAL_SPI_TransmitReceive+0x27c>)
 8008936:	f7fc fa04 	bl	8004d42 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008940:	2b01      	cmp	r3, #1
 8008942:	d101      	bne.n	8008948 <HAL_SPI_TransmitReceive+0x38>
 8008944:	2302      	movs	r3, #2
 8008946:	e1fd      	b.n	8008d44 <HAL_SPI_TransmitReceive+0x434>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008950:	f7fd fa48 	bl	8005de4 <HAL_GetTick>
 8008954:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800895c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008964:	887b      	ldrh	r3, [r7, #2]
 8008966:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008968:	887b      	ldrh	r3, [r7, #2]
 800896a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800896c:	7efb      	ldrb	r3, [r7, #27]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d00e      	beq.n	8008990 <HAL_SPI_TransmitReceive+0x80>
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008978:	d106      	bne.n	8008988 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d102      	bne.n	8008988 <HAL_SPI_TransmitReceive+0x78>
 8008982:	7efb      	ldrb	r3, [r7, #27]
 8008984:	2b04      	cmp	r3, #4
 8008986:	d003      	beq.n	8008990 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8008988:	2302      	movs	r3, #2
 800898a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800898e:	e1cf      	b.n	8008d30 <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d005      	beq.n	80089a2 <HAL_SPI_TransmitReceive+0x92>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <HAL_SPI_TransmitReceive+0x92>
 800899c:	887b      	ldrh	r3, [r7, #2]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d103      	bne.n	80089aa <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80089a8:	e1c2      	b.n	8008d30 <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b04      	cmp	r3, #4
 80089b4:	d003      	beq.n	80089be <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2205      	movs	r2, #5
 80089ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	887a      	ldrh	r2, [r7, #2]
 80089ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	887a      	ldrh	r2, [r7, #2]
 80089d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	887a      	ldrh	r2, [r7, #2]
 80089e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	887a      	ldrh	r2, [r7, #2]
 80089ea:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a00:	d802      	bhi.n	8008a08 <HAL_SPI_TransmitReceive+0xf8>
 8008a02:	8a3b      	ldrh	r3, [r7, #16]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d908      	bls.n	8008a1a <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a16:	605a      	str	r2, [r3, #4]
 8008a18:	e007      	b.n	8008a2a <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	685a      	ldr	r2, [r3, #4]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a28:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a34:	2b40      	cmp	r3, #64	; 0x40
 8008a36:	d007      	beq.n	8008a48 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a50:	d97c      	bls.n	8008b4c <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <HAL_SPI_TransmitReceive+0x150>
 8008a5a:	8a7b      	ldrh	r3, [r7, #18]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d169      	bne.n	8008b34 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a64:	881a      	ldrh	r2, [r3, #0]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a70:	1c9a      	adds	r2, r3, #2
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a84:	e056      	b.n	8008b34 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f003 0302 	and.w	r3, r3, #2
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d11b      	bne.n	8008acc <HAL_SPI_TransmitReceive+0x1bc>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d016      	beq.n	8008acc <HAL_SPI_TransmitReceive+0x1bc>
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d113      	bne.n	8008acc <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa8:	881a      	ldrh	r2, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab4:	1c9a      	adds	r2, r3, #2
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d11c      	bne.n	8008b14 <HAL_SPI_TransmitReceive+0x204>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d016      	beq.n	8008b14 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68da      	ldr	r2, [r3, #12]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af0:	b292      	uxth	r2, r2
 8008af2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af8:	1c9a      	adds	r2, r3, #2
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	3b01      	subs	r3, #1
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b10:	2301      	movs	r3, #1
 8008b12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008b14:	f7fd f966 	bl	8005de4 <HAL_GetTick>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d807      	bhi.n	8008b34 <HAL_SPI_TransmitReceive+0x224>
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2a:	d003      	beq.n	8008b34 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008b32:	e0fd      	b.n	8008d30 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1a3      	bne.n	8008a86 <HAL_SPI_TransmitReceive+0x176>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d19d      	bne.n	8008a86 <HAL_SPI_TransmitReceive+0x176>
 8008b4a:	e0e1      	b.n	8008d10 <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d003      	beq.n	8008b5c <HAL_SPI_TransmitReceive+0x24c>
 8008b54:	8a7b      	ldrh	r3, [r7, #18]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	f040 80cd 	bne.w	8008cf6 <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d914      	bls.n	8008b90 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6a:	881a      	ldrh	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b76:	1c9a      	adds	r2, r3, #2
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	3b02      	subs	r3, #2
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b8a:	e0b4      	b.n	8008cf6 <HAL_SPI_TransmitReceive+0x3e6>
 8008b8c:	0800b494 	.word	0x0800b494
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	330c      	adds	r3, #12
 8008b9a:	7812      	ldrb	r2, [r2, #0]
 8008b9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba2:	1c5a      	adds	r2, r3, #1
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bb6:	e09e      	b.n	8008cf6 <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d134      	bne.n	8008c30 <HAL_SPI_TransmitReceive+0x320>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d02f      	beq.n	8008c30 <HAL_SPI_TransmitReceive+0x320>
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d12c      	bne.n	8008c30 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d912      	bls.n	8008c06 <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be4:	881a      	ldrh	r2, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf0:	1c9a      	adds	r2, r3, #2
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	3b02      	subs	r3, #2
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c04:	e012      	b.n	8008c2c <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	330c      	adds	r3, #12
 8008c10:	7812      	ldrb	r2, [r2, #0]
 8008c12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	3b01      	subs	r3, #1
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d148      	bne.n	8008cd0 <HAL_SPI_TransmitReceive+0x3c0>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d042      	beq.n	8008cd0 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d923      	bls.n	8008c9e <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c60:	b292      	uxth	r2, r2
 8008c62:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c68:	1c9a      	adds	r2, r3, #2
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	3b02      	subs	r3, #2
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d81f      	bhi.n	8008ccc <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c9a:	605a      	str	r2, [r3, #4]
 8008c9c:	e016      	b.n	8008ccc <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f103 020c 	add.w	r2, r3, #12
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008caa:	7812      	ldrb	r2, [r2, #0]
 8008cac:	b2d2      	uxtb	r2, r2
 8008cae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb4:	1c5a      	adds	r2, r3, #1
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008cd0:	f7fd f888 	bl	8005de4 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d803      	bhi.n	8008ce8 <HAL_SPI_TransmitReceive+0x3d8>
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce6:	d102      	bne.n	8008cee <HAL_SPI_TransmitReceive+0x3de>
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d103      	bne.n	8008cf6 <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008cf4:	e01c      	b.n	8008d30 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f47f af5b 	bne.w	8008bb8 <HAL_SPI_TransmitReceive+0x2a8>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f47f af54 	bne.w	8008bb8 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d10:	69fa      	ldr	r2, [r7, #28]
 8008d12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 f8f0 	bl	8008efa <SPI_EndRxTxTransaction>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d006      	beq.n	8008d2e <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	661a      	str	r2, [r3, #96]	; 0x60
 8008d2c:	e000      	b.n	8008d30 <HAL_SPI_TransmitReceive+0x420>
  }

error :
 8008d2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008d40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3728      	adds	r7, #40	; 0x28
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	603b      	str	r3, [r7, #0]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d5c:	e04c      	b.n	8008df8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d64:	d048      	beq.n	8008df8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008d66:	f7fd f83d 	bl	8005de4 <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d902      	bls.n	8008d7c <SPI_WaitFlagStateUntilTimeout+0x30>
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d13d      	bne.n	8008df8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d94:	d111      	bne.n	8008dba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d9e:	d004      	beq.n	8008daa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008da8:	d107      	bne.n	8008dba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008db8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dc2:	d10f      	bne.n	8008de4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008de2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e00f      	b.n	8008e18 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	4013      	ands	r3, r2
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	bf0c      	ite	eq
 8008e08:	2301      	moveq	r3, #1
 8008e0a:	2300      	movne	r3, #0
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	461a      	mov	r2, r3
 8008e10:	79fb      	ldrb	r3, [r7, #7]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d1a3      	bne.n	8008d5e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
 8008e2c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8008e2e:	e057      	b.n	8008ee0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008e36:	d106      	bne.n	8008e46 <SPI_WaitFifoStateUntilTimeout+0x26>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d103      	bne.n	8008e46 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	330c      	adds	r3, #12
 8008e44:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4c:	d048      	beq.n	8008ee0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008e4e:	f7fc ffc9 	bl	8005de4 <HAL_GetTick>
 8008e52:	4602      	mov	r2, r0
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	683a      	ldr	r2, [r7, #0]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d902      	bls.n	8008e64 <SPI_WaitFifoStateUntilTimeout+0x44>
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d13d      	bne.n	8008ee0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e7c:	d111      	bne.n	8008ea2 <SPI_WaitFifoStateUntilTimeout+0x82>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e86:	d004      	beq.n	8008e92 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e90:	d107      	bne.n	8008ea2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ea0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eaa:	d10f      	bne.n	8008ecc <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e008      	b.n	8008ef2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689a      	ldr	r2, [r3, #8]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	4013      	ands	r3, r2
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d19f      	bne.n	8008e30 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b086      	sub	sp, #24
 8008efe:	af02      	add	r7, sp, #8
 8008f00:	60f8      	str	r0, [r7, #12]
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f7ff ff84 	bl	8008e20 <SPI_WaitFifoStateUntilTimeout>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d007      	beq.n	8008f2e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f22:	f043 0220 	orr.w	r2, r3, #32
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e027      	b.n	8008f7e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2200      	movs	r2, #0
 8008f36:	2180      	movs	r1, #128	; 0x80
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f7ff ff07 	bl	8008d4c <SPI_WaitFlagStateUntilTimeout>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d007      	beq.n	8008f54 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f48:	f043 0220 	orr.w	r2, r3, #32
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e014      	b.n	8008f7e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f7ff ff5d 	bl	8008e20 <SPI_WaitFifoStateUntilTimeout>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d007      	beq.n	8008f7c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f70:	f043 0220 	orr.w	r2, r3, #32
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e000      	b.n	8008f7e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
	...

08008f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a2d      	ldr	r2, [pc, #180]	; (800904c <HAL_TIM_Base_Start_IT+0xc4>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d036      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x80>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fa2:	d031      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x80>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a29      	ldr	r2, [pc, #164]	; (8009050 <HAL_TIM_Base_Start_IT+0xc8>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d02c      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x80>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a28      	ldr	r2, [pc, #160]	; (8009054 <HAL_TIM_Base_Start_IT+0xcc>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d027      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x80>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a26      	ldr	r2, [pc, #152]	; (8009058 <HAL_TIM_Base_Start_IT+0xd0>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d022      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x80>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a25      	ldr	r2, [pc, #148]	; (800905c <HAL_TIM_Base_Start_IT+0xd4>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d01d      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x80>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a23      	ldr	r2, [pc, #140]	; (8009060 <HAL_TIM_Base_Start_IT+0xd8>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d018      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x80>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a22      	ldr	r2, [pc, #136]	; (8009064 <HAL_TIM_Base_Start_IT+0xdc>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d013      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x80>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a20      	ldr	r2, [pc, #128]	; (8009068 <HAL_TIM_Base_Start_IT+0xe0>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d00e      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x80>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a1f      	ldr	r2, [pc, #124]	; (800906c <HAL_TIM_Base_Start_IT+0xe4>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d009      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x80>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a1d      	ldr	r2, [pc, #116]	; (8009070 <HAL_TIM_Base_Start_IT+0xe8>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d004      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x80>
 8008ffe:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8009002:	481c      	ldr	r0, [pc, #112]	; (8009074 <HAL_TIM_Base_Start_IT+0xec>)
 8009004:	f7fb fe9d 	bl	8004d42 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68da      	ldr	r2, [r3, #12]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0201 	orr.w	r2, r2, #1
 8009016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689a      	ldr	r2, [r3, #8]
 800901e:	4b16      	ldr	r3, [pc, #88]	; (8009078 <HAL_TIM_Base_Start_IT+0xf0>)
 8009020:	4013      	ands	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b06      	cmp	r3, #6
 8009028:	d00b      	beq.n	8009042 <HAL_TIM_Base_Start_IT+0xba>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009030:	d007      	beq.n	8009042 <HAL_TIM_Base_Start_IT+0xba>
  {
    __HAL_TIM_ENABLE(htim);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f042 0201 	orr.w	r2, r2, #1
 8009040:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	40012c00 	.word	0x40012c00
 8009050:	40000400 	.word	0x40000400
 8009054:	40000800 	.word	0x40000800
 8009058:	40000c00 	.word	0x40000c00
 800905c:	40001000 	.word	0x40001000
 8009060:	40001400 	.word	0x40001400
 8009064:	40013400 	.word	0x40013400
 8009068:	40014000 	.word	0x40014000
 800906c:	40014400 	.word	0x40014400
 8009070:	40014800 	.word	0x40014800
 8009074:	0800b4cc 	.word	0x0800b4cc
 8009078:	00010007 	.word	0x00010007

0800907c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d101      	bne.n	800908e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e092      	b.n	80091b4 <HAL_TIM_OC_Init+0x138>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a4a      	ldr	r2, [pc, #296]	; (80091bc <HAL_TIM_OC_Init+0x140>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d036      	beq.n	8009106 <HAL_TIM_OC_Init+0x8a>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090a0:	d031      	beq.n	8009106 <HAL_TIM_OC_Init+0x8a>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a46      	ldr	r2, [pc, #280]	; (80091c0 <HAL_TIM_OC_Init+0x144>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d02c      	beq.n	8009106 <HAL_TIM_OC_Init+0x8a>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a44      	ldr	r2, [pc, #272]	; (80091c4 <HAL_TIM_OC_Init+0x148>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d027      	beq.n	8009106 <HAL_TIM_OC_Init+0x8a>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a43      	ldr	r2, [pc, #268]	; (80091c8 <HAL_TIM_OC_Init+0x14c>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d022      	beq.n	8009106 <HAL_TIM_OC_Init+0x8a>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a41      	ldr	r2, [pc, #260]	; (80091cc <HAL_TIM_OC_Init+0x150>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d01d      	beq.n	8009106 <HAL_TIM_OC_Init+0x8a>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a40      	ldr	r2, [pc, #256]	; (80091d0 <HAL_TIM_OC_Init+0x154>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d018      	beq.n	8009106 <HAL_TIM_OC_Init+0x8a>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a3e      	ldr	r2, [pc, #248]	; (80091d4 <HAL_TIM_OC_Init+0x158>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d013      	beq.n	8009106 <HAL_TIM_OC_Init+0x8a>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a3d      	ldr	r2, [pc, #244]	; (80091d8 <HAL_TIM_OC_Init+0x15c>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d00e      	beq.n	8009106 <HAL_TIM_OC_Init+0x8a>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a3b      	ldr	r2, [pc, #236]	; (80091dc <HAL_TIM_OC_Init+0x160>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d009      	beq.n	8009106 <HAL_TIM_OC_Init+0x8a>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a3a      	ldr	r2, [pc, #232]	; (80091e0 <HAL_TIM_OC_Init+0x164>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d004      	beq.n	8009106 <HAL_TIM_OC_Init+0x8a>
 80090fc:	f240 2161 	movw	r1, #609	; 0x261
 8009100:	4838      	ldr	r0, [pc, #224]	; (80091e4 <HAL_TIM_OC_Init+0x168>)
 8009102:	f7fb fe1e 	bl	8004d42 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d014      	beq.n	8009138 <HAL_TIM_OC_Init+0xbc>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	2b10      	cmp	r3, #16
 8009114:	d010      	beq.n	8009138 <HAL_TIM_OC_Init+0xbc>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	2b20      	cmp	r3, #32
 800911c:	d00c      	beq.n	8009138 <HAL_TIM_OC_Init+0xbc>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	2b40      	cmp	r3, #64	; 0x40
 8009124:	d008      	beq.n	8009138 <HAL_TIM_OC_Init+0xbc>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	2b60      	cmp	r3, #96	; 0x60
 800912c:	d004      	beq.n	8009138 <HAL_TIM_OC_Init+0xbc>
 800912e:	f240 2162 	movw	r1, #610	; 0x262
 8009132:	482c      	ldr	r0, [pc, #176]	; (80091e4 <HAL_TIM_OC_Init+0x168>)
 8009134:	f7fb fe05 	bl	8004d42 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00e      	beq.n	800915e <HAL_TIM_OC_Init+0xe2>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009148:	d009      	beq.n	800915e <HAL_TIM_OC_Init+0xe2>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009152:	d004      	beq.n	800915e <HAL_TIM_OC_Init+0xe2>
 8009154:	f240 2163 	movw	r1, #611	; 0x263
 8009158:	4822      	ldr	r0, [pc, #136]	; (80091e4 <HAL_TIM_OC_Init+0x168>)
 800915a:	f7fb fdf2 	bl	8004d42 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d008      	beq.n	8009178 <HAL_TIM_OC_Init+0xfc>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	2b80      	cmp	r3, #128	; 0x80
 800916c:	d004      	beq.n	8009178 <HAL_TIM_OC_Init+0xfc>
 800916e:	f44f 7119 	mov.w	r1, #612	; 0x264
 8009172:	481c      	ldr	r0, [pc, #112]	; (80091e4 <HAL_TIM_OC_Init+0x168>)
 8009174:	f7fb fde5 	bl	8004d42 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b00      	cmp	r3, #0
 8009182:	d106      	bne.n	8009192 <HAL_TIM_OC_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7fc fca9 	bl	8005ae4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2202      	movs	r2, #2
 8009196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	3304      	adds	r3, #4
 80091a2:	4619      	mov	r1, r3
 80091a4:	4610      	mov	r0, r2
 80091a6:	f000 fb0b 	bl	80097c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	40012c00 	.word	0x40012c00
 80091c0:	40000400 	.word	0x40000400
 80091c4:	40000800 	.word	0x40000800
 80091c8:	40000c00 	.word	0x40000c00
 80091cc:	40001000 	.word	0x40001000
 80091d0:	40001400 	.word	0x40001400
 80091d4:	40013400 	.word	0x40013400
 80091d8:	40014000 	.word	0x40014000
 80091dc:	40014400 	.word	0x40014400
 80091e0:	40014800 	.word	0x40014800
 80091e4:	0800b4cc 	.word	0x0800b4cc

080091e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d122      	bne.n	8009244 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	f003 0302 	and.w	r3, r3, #2
 8009208:	2b02      	cmp	r3, #2
 800920a:	d11b      	bne.n	8009244 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f06f 0202 	mvn.w	r2, #2
 8009214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2201      	movs	r2, #1
 800921a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	f003 0303 	and.w	r3, r3, #3
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 faaa 	bl	8009784 <HAL_TIM_IC_CaptureCallback>
 8009230:	e005      	b.n	800923e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fa9c 	bl	8009770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 faad 	bl	8009798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	f003 0304 	and.w	r3, r3, #4
 800924e:	2b04      	cmp	r3, #4
 8009250:	d122      	bne.n	8009298 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b04      	cmp	r3, #4
 800925e:	d11b      	bne.n	8009298 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f06f 0204 	mvn.w	r2, #4
 8009268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2202      	movs	r2, #2
 800926e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fa80 	bl	8009784 <HAL_TIM_IC_CaptureCallback>
 8009284:	e005      	b.n	8009292 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fa72 	bl	8009770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fa83 	bl	8009798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	f003 0308 	and.w	r3, r3, #8
 80092a2:	2b08      	cmp	r3, #8
 80092a4:	d122      	bne.n	80092ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	f003 0308 	and.w	r3, r3, #8
 80092b0:	2b08      	cmp	r3, #8
 80092b2:	d11b      	bne.n	80092ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f06f 0208 	mvn.w	r2, #8
 80092bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2204      	movs	r2, #4
 80092c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	f003 0303 	and.w	r3, r3, #3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d003      	beq.n	80092da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fa56 	bl	8009784 <HAL_TIM_IC_CaptureCallback>
 80092d8:	e005      	b.n	80092e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fa48 	bl	8009770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fa59 	bl	8009798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	f003 0310 	and.w	r3, r3, #16
 80092f6:	2b10      	cmp	r3, #16
 80092f8:	d122      	bne.n	8009340 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f003 0310 	and.w	r3, r3, #16
 8009304:	2b10      	cmp	r3, #16
 8009306:	d11b      	bne.n	8009340 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f06f 0210 	mvn.w	r2, #16
 8009310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2208      	movs	r2, #8
 8009316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fa2c 	bl	8009784 <HAL_TIM_IC_CaptureCallback>
 800932c:	e005      	b.n	800933a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fa1e 	bl	8009770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fa2f 	bl	8009798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	2b01      	cmp	r3, #1
 800934c:	d10e      	bne.n	800936c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	2b01      	cmp	r3, #1
 800935a:	d107      	bne.n	800936c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f06f 0201 	mvn.w	r2, #1
 8009364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7f8 f83a 	bl	80013e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009376:	2b80      	cmp	r3, #128	; 0x80
 8009378:	d10e      	bne.n	8009398 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009384:	2b80      	cmp	r3, #128	; 0x80
 8009386:	d107      	bne.n	8009398 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 ff3e 	bl	800a214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093a6:	d10e      	bne.n	80093c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093b2:	2b80      	cmp	r3, #128	; 0x80
 80093b4:	d107      	bne.n	80093c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80093be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 ff31 	bl	800a228 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d0:	2b40      	cmp	r3, #64	; 0x40
 80093d2:	d10e      	bne.n	80093f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093de:	2b40      	cmp	r3, #64	; 0x40
 80093e0:	d107      	bne.n	80093f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f9dd 	bl	80097ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	f003 0320 	and.w	r3, r3, #32
 80093fc:	2b20      	cmp	r3, #32
 80093fe:	d10e      	bne.n	800941e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	f003 0320 	and.w	r3, r3, #32
 800940a:	2b20      	cmp	r3, #32
 800940c:	d107      	bne.n	800941e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f06f 0220 	mvn.w	r2, #32
 8009416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fef1 	bl	800a200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800941e:	bf00      	nop
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d016      	beq.n	8009468 <HAL_TIM_OC_ConfigChannel+0x40>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b04      	cmp	r3, #4
 800943e:	d013      	beq.n	8009468 <HAL_TIM_OC_ConfigChannel+0x40>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b08      	cmp	r3, #8
 8009444:	d010      	beq.n	8009468 <HAL_TIM_OC_ConfigChannel+0x40>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2b0c      	cmp	r3, #12
 800944a:	d00d      	beq.n	8009468 <HAL_TIM_OC_ConfigChannel+0x40>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b10      	cmp	r3, #16
 8009450:	d00a      	beq.n	8009468 <HAL_TIM_OC_ConfigChannel+0x40>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b14      	cmp	r3, #20
 8009456:	d007      	beq.n	8009468 <HAL_TIM_OC_ConfigChannel+0x40>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b3c      	cmp	r3, #60	; 0x3c
 800945c:	d004      	beq.n	8009468 <HAL_TIM_OC_ConfigChannel+0x40>
 800945e:	f640 5155 	movw	r1, #3413	; 0xd55
 8009462:	4899      	ldr	r0, [pc, #612]	; (80096c8 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 8009464:	f7fb fc6d 	bl	8004d42 <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d022      	beq.n	80094b6 <HAL_TIM_OC_ConfigChannel+0x8e>
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b10      	cmp	r3, #16
 8009476:	d01e      	beq.n	80094b6 <HAL_TIM_OC_ConfigChannel+0x8e>
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b20      	cmp	r3, #32
 800947e:	d01a      	beq.n	80094b6 <HAL_TIM_OC_ConfigChannel+0x8e>
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b30      	cmp	r3, #48	; 0x30
 8009486:	d016      	beq.n	80094b6 <HAL_TIM_OC_ConfigChannel+0x8e>
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b50      	cmp	r3, #80	; 0x50
 800948e:	d012      	beq.n	80094b6 <HAL_TIM_OC_ConfigChannel+0x8e>
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b40      	cmp	r3, #64	; 0x40
 8009496:	d00e      	beq.n	80094b6 <HAL_TIM_OC_ConfigChannel+0x8e>
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094a0:	d009      	beq.n	80094b6 <HAL_TIM_OC_ConfigChannel+0x8e>
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a89      	ldr	r2, [pc, #548]	; (80096cc <HAL_TIM_OC_ConfigChannel+0x2a4>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d004      	beq.n	80094b6 <HAL_TIM_OC_ConfigChannel+0x8e>
 80094ac:	f640 5156 	movw	r1, #3414	; 0xd56
 80094b0:	4885      	ldr	r0, [pc, #532]	; (80096c8 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 80094b2:	f7fb fc46 	bl	8004d42 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d008      	beq.n	80094d0 <HAL_TIM_OC_ConfigChannel+0xa8>
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d004      	beq.n	80094d0 <HAL_TIM_OC_ConfigChannel+0xa8>
 80094c6:	f640 5157 	movw	r1, #3415	; 0xd57
 80094ca:	487f      	ldr	r0, [pc, #508]	; (80096c8 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 80094cc:	f7fb fc39 	bl	8004d42 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d101      	bne.n	80094de <HAL_TIM_OC_ConfigChannel+0xb6>
 80094da:	2302      	movs	r3, #2
 80094dc:	e13e      	b.n	800975c <HAL_TIM_OC_ConfigChannel+0x334>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2202      	movs	r2, #2
 80094ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b14      	cmp	r3, #20
 80094f2:	f200 8129 	bhi.w	8009748 <HAL_TIM_OC_ConfigChannel+0x320>
 80094f6:	a201      	add	r2, pc, #4	; (adr r2, 80094fc <HAL_TIM_OC_ConfigChannel+0xd4>)
 80094f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fc:	08009551 	.word	0x08009551
 8009500:	08009749 	.word	0x08009749
 8009504:	08009749 	.word	0x08009749
 8009508:	08009749 	.word	0x08009749
 800950c:	080095c3 	.word	0x080095c3
 8009510:	08009749 	.word	0x08009749
 8009514:	08009749 	.word	0x08009749
 8009518:	08009749 	.word	0x08009749
 800951c:	08009621 	.word	0x08009621
 8009520:	08009749 	.word	0x08009749
 8009524:	08009749 	.word	0x08009749
 8009528:	08009749 	.word	0x08009749
 800952c:	08009675 	.word	0x08009675
 8009530:	08009749 	.word	0x08009749
 8009534:	08009749 	.word	0x08009749
 8009538:	08009749 	.word	0x08009749
 800953c:	080096f1 	.word	0x080096f1
 8009540:	08009749 	.word	0x08009749
 8009544:	08009749 	.word	0x08009749
 8009548:	08009749 	.word	0x08009749
 800954c:	0800971d 	.word	0x0800971d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a5e      	ldr	r2, [pc, #376]	; (80096d0 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d02c      	beq.n	80095b4 <HAL_TIM_OC_ConfigChannel+0x18c>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009562:	d027      	beq.n	80095b4 <HAL_TIM_OC_ConfigChannel+0x18c>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a5a      	ldr	r2, [pc, #360]	; (80096d4 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d022      	beq.n	80095b4 <HAL_TIM_OC_ConfigChannel+0x18c>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a59      	ldr	r2, [pc, #356]	; (80096d8 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d01d      	beq.n	80095b4 <HAL_TIM_OC_ConfigChannel+0x18c>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a57      	ldr	r2, [pc, #348]	; (80096dc <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d018      	beq.n	80095b4 <HAL_TIM_OC_ConfigChannel+0x18c>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a56      	ldr	r2, [pc, #344]	; (80096e0 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d013      	beq.n	80095b4 <HAL_TIM_OC_ConfigChannel+0x18c>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a54      	ldr	r2, [pc, #336]	; (80096e4 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d00e      	beq.n	80095b4 <HAL_TIM_OC_ConfigChannel+0x18c>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a53      	ldr	r2, [pc, #332]	; (80096e8 <HAL_TIM_OC_ConfigChannel+0x2c0>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d009      	beq.n	80095b4 <HAL_TIM_OC_ConfigChannel+0x18c>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a51      	ldr	r2, [pc, #324]	; (80096ec <HAL_TIM_OC_ConfigChannel+0x2c4>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d004      	beq.n	80095b4 <HAL_TIM_OC_ConfigChannel+0x18c>
 80095aa:	f640 5163 	movw	r1, #3427	; 0xd63
 80095ae:	4846      	ldr	r0, [pc, #280]	; (80096c8 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 80095b0:	f7fb fbc7 	bl	8004d42 <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68b9      	ldr	r1, [r7, #8]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 f99a 	bl	80098f4 <TIM_OC1_SetConfig>
      break;
 80095c0:	e0c3      	b.n	800974a <HAL_TIM_OC_ConfigChannel+0x322>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a42      	ldr	r2, [pc, #264]	; (80096d0 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d022      	beq.n	8009612 <HAL_TIM_OC_ConfigChannel+0x1ea>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095d4:	d01d      	beq.n	8009612 <HAL_TIM_OC_ConfigChannel+0x1ea>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a3e      	ldr	r2, [pc, #248]	; (80096d4 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d018      	beq.n	8009612 <HAL_TIM_OC_ConfigChannel+0x1ea>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a3c      	ldr	r2, [pc, #240]	; (80096d8 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d013      	beq.n	8009612 <HAL_TIM_OC_ConfigChannel+0x1ea>
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a3b      	ldr	r2, [pc, #236]	; (80096dc <HAL_TIM_OC_ConfigChannel+0x2b4>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d00e      	beq.n	8009612 <HAL_TIM_OC_ConfigChannel+0x1ea>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a39      	ldr	r2, [pc, #228]	; (80096e0 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d009      	beq.n	8009612 <HAL_TIM_OC_ConfigChannel+0x1ea>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a38      	ldr	r2, [pc, #224]	; (80096e4 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d004      	beq.n	8009612 <HAL_TIM_OC_ConfigChannel+0x1ea>
 8009608:	f640 516d 	movw	r1, #3437	; 0xd6d
 800960c:	482e      	ldr	r0, [pc, #184]	; (80096c8 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 800960e:	f7fb fb98 	bl	8004d42 <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68b9      	ldr	r1, [r7, #8]
 8009618:	4618      	mov	r0, r3
 800961a:	f000 fa25 	bl	8009a68 <TIM_OC2_SetConfig>
      break;
 800961e:	e094      	b.n	800974a <HAL_TIM_OC_ConfigChannel+0x322>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a2a      	ldr	r2, [pc, #168]	; (80096d0 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d01d      	beq.n	8009666 <HAL_TIM_OC_ConfigChannel+0x23e>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009632:	d018      	beq.n	8009666 <HAL_TIM_OC_ConfigChannel+0x23e>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a26      	ldr	r2, [pc, #152]	; (80096d4 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d013      	beq.n	8009666 <HAL_TIM_OC_ConfigChannel+0x23e>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a25      	ldr	r2, [pc, #148]	; (80096d8 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d00e      	beq.n	8009666 <HAL_TIM_OC_ConfigChannel+0x23e>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a23      	ldr	r2, [pc, #140]	; (80096dc <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d009      	beq.n	8009666 <HAL_TIM_OC_ConfigChannel+0x23e>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a22      	ldr	r2, [pc, #136]	; (80096e0 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d004      	beq.n	8009666 <HAL_TIM_OC_ConfigChannel+0x23e>
 800965c:	f640 5177 	movw	r1, #3447	; 0xd77
 8009660:	4819      	ldr	r0, [pc, #100]	; (80096c8 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 8009662:	f7fb fb6e 	bl	8004d42 <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68b9      	ldr	r1, [r7, #8]
 800966c:	4618      	mov	r0, r3
 800966e:	f000 faad 	bl	8009bcc <TIM_OC3_SetConfig>
      break;
 8009672:	e06a      	b.n	800974a <HAL_TIM_OC_ConfigChannel+0x322>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a15      	ldr	r2, [pc, #84]	; (80096d0 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d01d      	beq.n	80096ba <HAL_TIM_OC_ConfigChannel+0x292>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009686:	d018      	beq.n	80096ba <HAL_TIM_OC_ConfigChannel+0x292>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a11      	ldr	r2, [pc, #68]	; (80096d4 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d013      	beq.n	80096ba <HAL_TIM_OC_ConfigChannel+0x292>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a10      	ldr	r2, [pc, #64]	; (80096d8 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d00e      	beq.n	80096ba <HAL_TIM_OC_ConfigChannel+0x292>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a0e      	ldr	r2, [pc, #56]	; (80096dc <HAL_TIM_OC_ConfigChannel+0x2b4>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d009      	beq.n	80096ba <HAL_TIM_OC_ConfigChannel+0x292>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a0d      	ldr	r2, [pc, #52]	; (80096e0 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d004      	beq.n	80096ba <HAL_TIM_OC_ConfigChannel+0x292>
 80096b0:	f640 5181 	movw	r1, #3457	; 0xd81
 80096b4:	4804      	ldr	r0, [pc, #16]	; (80096c8 <HAL_TIM_OC_ConfigChannel+0x2a0>)
 80096b6:	f7fb fb44 	bl	8004d42 <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68b9      	ldr	r1, [r7, #8]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 fb35 	bl	8009d30 <TIM_OC4_SetConfig>
      break;
 80096c6:	e040      	b.n	800974a <HAL_TIM_OC_ConfigChannel+0x322>
 80096c8:	0800b4cc 	.word	0x0800b4cc
 80096cc:	00010010 	.word	0x00010010
 80096d0:	40012c00 	.word	0x40012c00
 80096d4:	40000400 	.word	0x40000400
 80096d8:	40000800 	.word	0x40000800
 80096dc:	40000c00 	.word	0x40000c00
 80096e0:	40013400 	.word	0x40013400
 80096e4:	40014000 	.word	0x40014000
 80096e8:	40014400 	.word	0x40014400
 80096ec:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a1b      	ldr	r2, [pc, #108]	; (8009764 <HAL_TIM_OC_ConfigChannel+0x33c>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d009      	beq.n	800970e <HAL_TIM_OC_ConfigChannel+0x2e6>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a1a      	ldr	r2, [pc, #104]	; (8009768 <HAL_TIM_OC_ConfigChannel+0x340>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d004      	beq.n	800970e <HAL_TIM_OC_ConfigChannel+0x2e6>
 8009704:	f640 518b 	movw	r1, #3467	; 0xd8b
 8009708:	4818      	ldr	r0, [pc, #96]	; (800976c <HAL_TIM_OC_ConfigChannel+0x344>)
 800970a:	f7fb fb1a 	bl	8004d42 <assert_failed>

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68b9      	ldr	r1, [r7, #8]
 8009714:	4618      	mov	r0, r3
 8009716:	f000 fb83 	bl	8009e20 <TIM_OC5_SetConfig>
      break;
 800971a:	e016      	b.n	800974a <HAL_TIM_OC_ConfigChannel+0x322>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a10      	ldr	r2, [pc, #64]	; (8009764 <HAL_TIM_OC_ConfigChannel+0x33c>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d009      	beq.n	800973a <HAL_TIM_OC_ConfigChannel+0x312>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a0f      	ldr	r2, [pc, #60]	; (8009768 <HAL_TIM_OC_ConfigChannel+0x340>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d004      	beq.n	800973a <HAL_TIM_OC_ConfigChannel+0x312>
 8009730:	f640 5195 	movw	r1, #3477	; 0xd95
 8009734:	480d      	ldr	r0, [pc, #52]	; (800976c <HAL_TIM_OC_ConfigChannel+0x344>)
 8009736:	f7fb fb04 	bl	8004d42 <assert_failed>

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68b9      	ldr	r1, [r7, #8]
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fbd1 	bl	8009ee8 <TIM_OC6_SetConfig>
      break;
 8009746:	e000      	b.n	800974a <HAL_TIM_OC_ConfigChannel+0x322>
    }

    default:
      break;
 8009748:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	40012c00 	.word	0x40012c00
 8009768:	40013400 	.word	0x40013400
 800976c:	0800b4cc 	.word	0x0800b4cc

08009770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097a0:	bf00      	nop
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097b4:	bf00      	nop
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a40      	ldr	r2, [pc, #256]	; (80098d4 <TIM_Base_SetConfig+0x114>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d013      	beq.n	8009800 <TIM_Base_SetConfig+0x40>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097de:	d00f      	beq.n	8009800 <TIM_Base_SetConfig+0x40>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a3d      	ldr	r2, [pc, #244]	; (80098d8 <TIM_Base_SetConfig+0x118>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d00b      	beq.n	8009800 <TIM_Base_SetConfig+0x40>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a3c      	ldr	r2, [pc, #240]	; (80098dc <TIM_Base_SetConfig+0x11c>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d007      	beq.n	8009800 <TIM_Base_SetConfig+0x40>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a3b      	ldr	r2, [pc, #236]	; (80098e0 <TIM_Base_SetConfig+0x120>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d003      	beq.n	8009800 <TIM_Base_SetConfig+0x40>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a3a      	ldr	r2, [pc, #232]	; (80098e4 <TIM_Base_SetConfig+0x124>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d108      	bne.n	8009812 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	4313      	orrs	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a2f      	ldr	r2, [pc, #188]	; (80098d4 <TIM_Base_SetConfig+0x114>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d01f      	beq.n	800985a <TIM_Base_SetConfig+0x9a>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009820:	d01b      	beq.n	800985a <TIM_Base_SetConfig+0x9a>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a2c      	ldr	r2, [pc, #176]	; (80098d8 <TIM_Base_SetConfig+0x118>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d017      	beq.n	800985a <TIM_Base_SetConfig+0x9a>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a2b      	ldr	r2, [pc, #172]	; (80098dc <TIM_Base_SetConfig+0x11c>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d013      	beq.n	800985a <TIM_Base_SetConfig+0x9a>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a2a      	ldr	r2, [pc, #168]	; (80098e0 <TIM_Base_SetConfig+0x120>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d00f      	beq.n	800985a <TIM_Base_SetConfig+0x9a>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a29      	ldr	r2, [pc, #164]	; (80098e4 <TIM_Base_SetConfig+0x124>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d00b      	beq.n	800985a <TIM_Base_SetConfig+0x9a>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a28      	ldr	r2, [pc, #160]	; (80098e8 <TIM_Base_SetConfig+0x128>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d007      	beq.n	800985a <TIM_Base_SetConfig+0x9a>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a27      	ldr	r2, [pc, #156]	; (80098ec <TIM_Base_SetConfig+0x12c>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d003      	beq.n	800985a <TIM_Base_SetConfig+0x9a>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a26      	ldr	r2, [pc, #152]	; (80098f0 <TIM_Base_SetConfig+0x130>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d108      	bne.n	800986c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	4313      	orrs	r3, r2
 800986a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	4313      	orrs	r3, r2
 8009878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	689a      	ldr	r2, [r3, #8]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a10      	ldr	r2, [pc, #64]	; (80098d4 <TIM_Base_SetConfig+0x114>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d00f      	beq.n	80098b8 <TIM_Base_SetConfig+0xf8>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a12      	ldr	r2, [pc, #72]	; (80098e4 <TIM_Base_SetConfig+0x124>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d00b      	beq.n	80098b8 <TIM_Base_SetConfig+0xf8>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a11      	ldr	r2, [pc, #68]	; (80098e8 <TIM_Base_SetConfig+0x128>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d007      	beq.n	80098b8 <TIM_Base_SetConfig+0xf8>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a10      	ldr	r2, [pc, #64]	; (80098ec <TIM_Base_SetConfig+0x12c>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d003      	beq.n	80098b8 <TIM_Base_SetConfig+0xf8>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a0f      	ldr	r2, [pc, #60]	; (80098f0 <TIM_Base_SetConfig+0x130>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d103      	bne.n	80098c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	691a      	ldr	r2, [r3, #16]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	615a      	str	r2, [r3, #20]
}
 80098c6:	bf00      	nop
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	40012c00 	.word	0x40012c00
 80098d8:	40000400 	.word	0x40000400
 80098dc:	40000800 	.word	0x40000800
 80098e0:	40000c00 	.word	0x40000c00
 80098e4:	40013400 	.word	0x40013400
 80098e8:	40014000 	.word	0x40014000
 80098ec:	40014400 	.word	0x40014400
 80098f0:	40014800 	.word	0x40014800

080098f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	f023 0201 	bic.w	r2, r3, #1
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a1b      	ldr	r3, [r3, #32]
 800990e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f023 0303 	bic.w	r3, r3, #3
 800992e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	4313      	orrs	r3, r2
 8009938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f023 0302 	bic.w	r3, r3, #2
 8009940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	4313      	orrs	r3, r2
 800994a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a40      	ldr	r2, [pc, #256]	; (8009a50 <TIM_OC1_SetConfig+0x15c>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d00f      	beq.n	8009974 <TIM_OC1_SetConfig+0x80>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a3f      	ldr	r2, [pc, #252]	; (8009a54 <TIM_OC1_SetConfig+0x160>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d00b      	beq.n	8009974 <TIM_OC1_SetConfig+0x80>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a3e      	ldr	r2, [pc, #248]	; (8009a58 <TIM_OC1_SetConfig+0x164>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d007      	beq.n	8009974 <TIM_OC1_SetConfig+0x80>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a3d      	ldr	r2, [pc, #244]	; (8009a5c <TIM_OC1_SetConfig+0x168>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d003      	beq.n	8009974 <TIM_OC1_SetConfig+0x80>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a3c      	ldr	r2, [pc, #240]	; (8009a60 <TIM_OC1_SetConfig+0x16c>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d119      	bne.n	80099a8 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d008      	beq.n	800998e <TIM_OC1_SetConfig+0x9a>
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	2b08      	cmp	r3, #8
 8009982:	d004      	beq.n	800998e <TIM_OC1_SetConfig+0x9a>
 8009984:	f241 718e 	movw	r1, #6030	; 0x178e
 8009988:	4836      	ldr	r0, [pc, #216]	; (8009a64 <TIM_OC1_SetConfig+0x170>)
 800998a:	f7fb f9da 	bl	8004d42 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f023 0308 	bic.w	r3, r3, #8
 8009994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	4313      	orrs	r3, r2
 800999e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	f023 0304 	bic.w	r3, r3, #4
 80099a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a29      	ldr	r2, [pc, #164]	; (8009a50 <TIM_OC1_SetConfig+0x15c>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d00f      	beq.n	80099d0 <TIM_OC1_SetConfig+0xdc>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a28      	ldr	r2, [pc, #160]	; (8009a54 <TIM_OC1_SetConfig+0x160>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d00b      	beq.n	80099d0 <TIM_OC1_SetConfig+0xdc>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a27      	ldr	r2, [pc, #156]	; (8009a58 <TIM_OC1_SetConfig+0x164>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d007      	beq.n	80099d0 <TIM_OC1_SetConfig+0xdc>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a26      	ldr	r2, [pc, #152]	; (8009a5c <TIM_OC1_SetConfig+0x168>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d003      	beq.n	80099d0 <TIM_OC1_SetConfig+0xdc>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a25      	ldr	r2, [pc, #148]	; (8009a60 <TIM_OC1_SetConfig+0x16c>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d12d      	bne.n	8009a2c <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099d8:	d008      	beq.n	80099ec <TIM_OC1_SetConfig+0xf8>
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d004      	beq.n	80099ec <TIM_OC1_SetConfig+0xf8>
 80099e2:	f241 719b 	movw	r1, #6043	; 0x179b
 80099e6:	481f      	ldr	r0, [pc, #124]	; (8009a64 <TIM_OC1_SetConfig+0x170>)
 80099e8:	f7fb f9ab 	bl	8004d42 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	695b      	ldr	r3, [r3, #20]
 80099f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099f4:	d008      	beq.n	8009a08 <TIM_OC1_SetConfig+0x114>
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d004      	beq.n	8009a08 <TIM_OC1_SetConfig+0x114>
 80099fe:	f241 719c 	movw	r1, #6044	; 0x179c
 8009a02:	4818      	ldr	r0, [pc, #96]	; (8009a64 <TIM_OC1_SetConfig+0x170>)
 8009a04:	f7fb f99d 	bl	8004d42 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	695b      	ldr	r3, [r3, #20]
 8009a1c:	693a      	ldr	r2, [r7, #16]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	621a      	str	r2, [r3, #32]
}
 8009a46:	bf00      	nop
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	40012c00 	.word	0x40012c00
 8009a54:	40013400 	.word	0x40013400
 8009a58:	40014000 	.word	0x40014000
 8009a5c:	40014400 	.word	0x40014400
 8009a60:	40014800 	.word	0x40014800
 8009a64:	0800b4cc 	.word	0x0800b4cc

08009a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	f023 0210 	bic.w	r2, r3, #16
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	021b      	lsls	r3, r3, #8
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	f023 0320 	bic.w	r3, r3, #32
 8009ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	011b      	lsls	r3, r3, #4
 8009abe:	697a      	ldr	r2, [r7, #20]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a3b      	ldr	r2, [pc, #236]	; (8009bb4 <TIM_OC2_SetConfig+0x14c>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d003      	beq.n	8009ad4 <TIM_OC2_SetConfig+0x6c>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a3a      	ldr	r2, [pc, #232]	; (8009bb8 <TIM_OC2_SetConfig+0x150>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d11a      	bne.n	8009b0a <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d008      	beq.n	8009aee <TIM_OC2_SetConfig+0x86>
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	2b08      	cmp	r3, #8
 8009ae2:	d004      	beq.n	8009aee <TIM_OC2_SetConfig+0x86>
 8009ae4:	f241 71d9 	movw	r1, #6105	; 0x17d9
 8009ae8:	4834      	ldr	r0, [pc, #208]	; (8009bbc <TIM_OC2_SetConfig+0x154>)
 8009aea:	f7fb f92a 	bl	8004d42 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009af4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	011b      	lsls	r3, r3, #4
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b08:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a29      	ldr	r2, [pc, #164]	; (8009bb4 <TIM_OC2_SetConfig+0x14c>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d00f      	beq.n	8009b32 <TIM_OC2_SetConfig+0xca>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a28      	ldr	r2, [pc, #160]	; (8009bb8 <TIM_OC2_SetConfig+0x150>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d00b      	beq.n	8009b32 <TIM_OC2_SetConfig+0xca>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a28      	ldr	r2, [pc, #160]	; (8009bc0 <TIM_OC2_SetConfig+0x158>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d007      	beq.n	8009b32 <TIM_OC2_SetConfig+0xca>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a27      	ldr	r2, [pc, #156]	; (8009bc4 <TIM_OC2_SetConfig+0x15c>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d003      	beq.n	8009b32 <TIM_OC2_SetConfig+0xca>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a26      	ldr	r2, [pc, #152]	; (8009bc8 <TIM_OC2_SetConfig+0x160>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d12f      	bne.n	8009b92 <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b3a:	d008      	beq.n	8009b4e <TIM_OC2_SetConfig+0xe6>
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d004      	beq.n	8009b4e <TIM_OC2_SetConfig+0xe6>
 8009b44:	f241 71e7 	movw	r1, #6119	; 0x17e7
 8009b48:	481c      	ldr	r0, [pc, #112]	; (8009bbc <TIM_OC2_SetConfig+0x154>)
 8009b4a:	f7fb f8fa 	bl	8004d42 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b56:	d008      	beq.n	8009b6a <TIM_OC2_SetConfig+0x102>
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	695b      	ldr	r3, [r3, #20]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d004      	beq.n	8009b6a <TIM_OC2_SetConfig+0x102>
 8009b60:	f241 71e8 	movw	r1, #6120	; 0x17e8
 8009b64:	4815      	ldr	r0, [pc, #84]	; (8009bbc <TIM_OC2_SetConfig+0x154>)
 8009b66:	f7fb f8ec 	bl	8004d42 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	693a      	ldr	r2, [r7, #16]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	685a      	ldr	r2, [r3, #4]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	697a      	ldr	r2, [r7, #20]
 8009baa:	621a      	str	r2, [r3, #32]
}
 8009bac:	bf00      	nop
 8009bae:	3718      	adds	r7, #24
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	40012c00 	.word	0x40012c00
 8009bb8:	40013400 	.word	0x40013400
 8009bbc:	0800b4cc 	.word	0x0800b4cc
 8009bc0:	40014000 	.word	0x40014000
 8009bc4:	40014400 	.word	0x40014400
 8009bc8:	40014800 	.word	0x40014800

08009bcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b086      	sub	sp, #24
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a1b      	ldr	r3, [r3, #32]
 8009bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a1b      	ldr	r3, [r3, #32]
 8009be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f023 0303 	bic.w	r3, r3, #3
 8009c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	021b      	lsls	r3, r3, #8
 8009c20:	697a      	ldr	r2, [r7, #20]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a3b      	ldr	r2, [pc, #236]	; (8009d18 <TIM_OC3_SetConfig+0x14c>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d003      	beq.n	8009c36 <TIM_OC3_SetConfig+0x6a>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a3a      	ldr	r2, [pc, #232]	; (8009d1c <TIM_OC3_SetConfig+0x150>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d11a      	bne.n	8009c6c <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d008      	beq.n	8009c50 <TIM_OC3_SetConfig+0x84>
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	2b08      	cmp	r3, #8
 8009c44:	d004      	beq.n	8009c50 <TIM_OC3_SetConfig+0x84>
 8009c46:	f641 0124 	movw	r1, #6180	; 0x1824
 8009c4a:	4835      	ldr	r0, [pc, #212]	; (8009d20 <TIM_OC3_SetConfig+0x154>)
 8009c4c:	f7fb f879 	bl	8004d42 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	021b      	lsls	r3, r3, #8
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	4313      	orrs	r3, r2
 8009c62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a2a      	ldr	r2, [pc, #168]	; (8009d18 <TIM_OC3_SetConfig+0x14c>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d00f      	beq.n	8009c94 <TIM_OC3_SetConfig+0xc8>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a29      	ldr	r2, [pc, #164]	; (8009d1c <TIM_OC3_SetConfig+0x150>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d00b      	beq.n	8009c94 <TIM_OC3_SetConfig+0xc8>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a29      	ldr	r2, [pc, #164]	; (8009d24 <TIM_OC3_SetConfig+0x158>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d007      	beq.n	8009c94 <TIM_OC3_SetConfig+0xc8>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a28      	ldr	r2, [pc, #160]	; (8009d28 <TIM_OC3_SetConfig+0x15c>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d003      	beq.n	8009c94 <TIM_OC3_SetConfig+0xc8>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a27      	ldr	r2, [pc, #156]	; (8009d2c <TIM_OC3_SetConfig+0x160>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d12f      	bne.n	8009cf4 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c9c:	d008      	beq.n	8009cb0 <TIM_OC3_SetConfig+0xe4>
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d004      	beq.n	8009cb0 <TIM_OC3_SetConfig+0xe4>
 8009ca6:	f641 0131 	movw	r1, #6193	; 0x1831
 8009caa:	481d      	ldr	r0, [pc, #116]	; (8009d20 <TIM_OC3_SetConfig+0x154>)
 8009cac:	f7fb f849 	bl	8004d42 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	695b      	ldr	r3, [r3, #20]
 8009cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cb8:	d008      	beq.n	8009ccc <TIM_OC3_SetConfig+0x100>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	695b      	ldr	r3, [r3, #20]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d004      	beq.n	8009ccc <TIM_OC3_SetConfig+0x100>
 8009cc2:	f641 0132 	movw	r1, #6194	; 0x1832
 8009cc6:	4816      	ldr	r0, [pc, #88]	; (8009d20 <TIM_OC3_SetConfig+0x154>)
 8009cc8:	f7fb f83b 	bl	8004d42 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	011b      	lsls	r3, r3, #4
 8009ce2:	693a      	ldr	r2, [r7, #16]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	699b      	ldr	r3, [r3, #24]
 8009cec:	011b      	lsls	r3, r3, #4
 8009cee:	693a      	ldr	r2, [r7, #16]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	693a      	ldr	r2, [r7, #16]
 8009cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	685a      	ldr	r2, [r3, #4]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	621a      	str	r2, [r3, #32]
}
 8009d0e:	bf00      	nop
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	40012c00 	.word	0x40012c00
 8009d1c:	40013400 	.word	0x40013400
 8009d20:	0800b4cc 	.word	0x0800b4cc
 8009d24:	40014000 	.word	0x40014000
 8009d28:	40014400 	.word	0x40014400
 8009d2c:	40014800 	.word	0x40014800

08009d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	021b      	lsls	r3, r3, #8
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	031b      	lsls	r3, r3, #12
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a1e      	ldr	r2, [pc, #120]	; (8009e08 <TIM_OC4_SetConfig+0xd8>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d00f      	beq.n	8009db4 <TIM_OC4_SetConfig+0x84>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a1d      	ldr	r2, [pc, #116]	; (8009e0c <TIM_OC4_SetConfig+0xdc>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d00b      	beq.n	8009db4 <TIM_OC4_SetConfig+0x84>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a1c      	ldr	r2, [pc, #112]	; (8009e10 <TIM_OC4_SetConfig+0xe0>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d007      	beq.n	8009db4 <TIM_OC4_SetConfig+0x84>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a1b      	ldr	r2, [pc, #108]	; (8009e14 <TIM_OC4_SetConfig+0xe4>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d003      	beq.n	8009db4 <TIM_OC4_SetConfig+0x84>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a1a      	ldr	r2, [pc, #104]	; (8009e18 <TIM_OC4_SetConfig+0xe8>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d117      	bne.n	8009de4 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	695b      	ldr	r3, [r3, #20]
 8009db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dbc:	d008      	beq.n	8009dd0 <TIM_OC4_SetConfig+0xa0>
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	695b      	ldr	r3, [r3, #20]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d004      	beq.n	8009dd0 <TIM_OC4_SetConfig+0xa0>
 8009dc6:	f641 0170 	movw	r1, #6256	; 0x1870
 8009dca:	4814      	ldr	r0, [pc, #80]	; (8009e1c <TIM_OC4_SetConfig+0xec>)
 8009dcc:	f7fa ffb9 	bl	8004d42 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009dd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	695b      	ldr	r3, [r3, #20]
 8009ddc:	019b      	lsls	r3, r3, #6
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	621a      	str	r2, [r3, #32]
}
 8009dfe:	bf00      	nop
 8009e00:	3718      	adds	r7, #24
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	40012c00 	.word	0x40012c00
 8009e0c:	40013400 	.word	0x40013400
 8009e10:	40014000 	.word	0x40014000
 8009e14:	40014400 	.word	0x40014400
 8009e18:	40014800 	.word	0x40014800
 8009e1c:	0800b4cc 	.word	0x0800b4cc

08009e20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a1b      	ldr	r3, [r3, #32]
 8009e2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a1b      	ldr	r3, [r3, #32]
 8009e3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009e64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	041b      	lsls	r3, r3, #16
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a17      	ldr	r2, [pc, #92]	; (8009ed4 <TIM_OC5_SetConfig+0xb4>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d00f      	beq.n	8009e9a <TIM_OC5_SetConfig+0x7a>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a16      	ldr	r2, [pc, #88]	; (8009ed8 <TIM_OC5_SetConfig+0xb8>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d00b      	beq.n	8009e9a <TIM_OC5_SetConfig+0x7a>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a15      	ldr	r2, [pc, #84]	; (8009edc <TIM_OC5_SetConfig+0xbc>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d007      	beq.n	8009e9a <TIM_OC5_SetConfig+0x7a>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a14      	ldr	r2, [pc, #80]	; (8009ee0 <TIM_OC5_SetConfig+0xc0>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d003      	beq.n	8009e9a <TIM_OC5_SetConfig+0x7a>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a13      	ldr	r2, [pc, #76]	; (8009ee4 <TIM_OC5_SetConfig+0xc4>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d109      	bne.n	8009eae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	021b      	lsls	r3, r3, #8
 8009ea8:	697a      	ldr	r2, [r7, #20]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	621a      	str	r2, [r3, #32]
}
 8009ec8:	bf00      	nop
 8009eca:	371c      	adds	r7, #28
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	40012c00 	.word	0x40012c00
 8009ed8:	40013400 	.word	0x40013400
 8009edc:	40014000 	.word	0x40014000
 8009ee0:	40014400 	.word	0x40014400
 8009ee4:	40014800 	.word	0x40014800

08009ee8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b087      	sub	sp, #28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	021b      	lsls	r3, r3, #8
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	051b      	lsls	r3, r3, #20
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4a18      	ldr	r2, [pc, #96]	; (8009fa0 <TIM_OC6_SetConfig+0xb8>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d00f      	beq.n	8009f64 <TIM_OC6_SetConfig+0x7c>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a17      	ldr	r2, [pc, #92]	; (8009fa4 <TIM_OC6_SetConfig+0xbc>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d00b      	beq.n	8009f64 <TIM_OC6_SetConfig+0x7c>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a16      	ldr	r2, [pc, #88]	; (8009fa8 <TIM_OC6_SetConfig+0xc0>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d007      	beq.n	8009f64 <TIM_OC6_SetConfig+0x7c>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a15      	ldr	r2, [pc, #84]	; (8009fac <TIM_OC6_SetConfig+0xc4>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d003      	beq.n	8009f64 <TIM_OC6_SetConfig+0x7c>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a14      	ldr	r2, [pc, #80]	; (8009fb0 <TIM_OC6_SetConfig+0xc8>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d109      	bne.n	8009f78 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	695b      	ldr	r3, [r3, #20]
 8009f70:	029b      	lsls	r3, r3, #10
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	621a      	str	r2, [r3, #32]
}
 8009f92:	bf00      	nop
 8009f94:	371c      	adds	r7, #28
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	40012c00 	.word	0x40012c00
 8009fa4:	40013400 	.word	0x40013400
 8009fa8:	40014000 	.word	0x40014000
 8009fac:	40014400 	.word	0x40014400
 8009fb0:	40014800 	.word	0x40014800

08009fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a86      	ldr	r2, [pc, #536]	; (800a1dc <HAL_TIMEx_MasterConfigSynchronization+0x228>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d02c      	beq.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd0:	d027      	beq.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a82      	ldr	r2, [pc, #520]	; (800a1e0 <HAL_TIMEx_MasterConfigSynchronization+0x22c>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d022      	beq.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a80      	ldr	r2, [pc, #512]	; (800a1e4 <HAL_TIMEx_MasterConfigSynchronization+0x230>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d01d      	beq.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a7f      	ldr	r2, [pc, #508]	; (800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0x234>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d018      	beq.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a7d      	ldr	r2, [pc, #500]	; (800a1ec <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d013      	beq.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a7c      	ldr	r2, [pc, #496]	; (800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0x23c>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d00e      	beq.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a7a      	ldr	r2, [pc, #488]	; (800a1f4 <HAL_TIMEx_MasterConfigSynchronization+0x240>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d009      	beq.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a79      	ldr	r2, [pc, #484]	; (800a1f8 <HAL_TIMEx_MasterConfigSynchronization+0x244>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d004      	beq.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a018:	f240 6167 	movw	r1, #1639	; 0x667
 800a01c:	4877      	ldr	r0, [pc, #476]	; (800a1fc <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 800a01e:	f7fa fe90 	bl	8004d42 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d020      	beq.n	800a06c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2b10      	cmp	r3, #16
 800a030:	d01c      	beq.n	800a06c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b20      	cmp	r3, #32
 800a038:	d018      	beq.n	800a06c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2b30      	cmp	r3, #48	; 0x30
 800a040:	d014      	beq.n	800a06c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b40      	cmp	r3, #64	; 0x40
 800a048:	d010      	beq.n	800a06c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b50      	cmp	r3, #80	; 0x50
 800a050:	d00c      	beq.n	800a06c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b60      	cmp	r3, #96	; 0x60
 800a058:	d008      	beq.n	800a06c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b70      	cmp	r3, #112	; 0x70
 800a060:	d004      	beq.n	800a06c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a062:	f44f 61cd 	mov.w	r1, #1640	; 0x668
 800a066:	4865      	ldr	r0, [pc, #404]	; (800a1fc <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 800a068:	f7fa fe6b 	bl	8004d42 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	2b80      	cmp	r3, #128	; 0x80
 800a072:	d008      	beq.n	800a086 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d004      	beq.n	800a086 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800a07c:	f240 6169 	movw	r1, #1641	; 0x669
 800a080:	485e      	ldr	r0, [pc, #376]	; (800a1fc <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 800a082:	f7fa fe5e 	bl	8004d42 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d101      	bne.n	800a094 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800a090:	2302      	movs	r3, #2
 800a092:	e09e      	b.n	800a1d2 <HAL_TIMEx_MasterConfigSynchronization+0x21e>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2202      	movs	r2, #2
 800a0a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a48      	ldr	r2, [pc, #288]	; (800a1dc <HAL_TIMEx_MasterConfigSynchronization+0x228>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d004      	beq.n	800a0c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a4c      	ldr	r2, [pc, #304]	; (800a1f4 <HAL_TIMEx_MasterConfigSynchronization+0x240>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d161      	bne.n	800a18c <HAL_TIMEx_MasterConfigSynchronization+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d054      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0d8:	d04f      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0e2:	d04a      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a0ec:	d045      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0f6:	d040      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800a100:	d03b      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a10a:	d036      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a114:	d031      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800a11e:	d02c      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a128:	d027      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 800a132:	d022      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a13c:	d01d      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 800a146:	d018      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a150:	d013      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 800a15a:	d00e      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 800a164:	d009      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800a16e:	d004      	beq.n	800a17a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a170:	f240 617b 	movw	r1, #1659	; 0x67b
 800a174:	4821      	ldr	r0, [pc, #132]	; (800a1fc <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 800a176:	f7fa fde4 	bl	8004d42 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a180:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	4313      	orrs	r3, r2
 800a18a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1a4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	40012c00 	.word	0x40012c00
 800a1e0:	40000400 	.word	0x40000400
 800a1e4:	40000800 	.word	0x40000800
 800a1e8:	40000c00 	.word	0x40000c00
 800a1ec:	40001000 	.word	0x40001000
 800a1f0:	40001400 	.word	0x40001400
 800a1f4:	40013400 	.word	0x40013400
 800a1f8:	40014000 	.word	0x40014000
 800a1fc:	0800b504 	.word	0x0800b504

0800a200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d101      	bne.n	800a24e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e08b      	b.n	800a366 <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d023      	beq.n	800a29e <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a45      	ldr	r2, [pc, #276]	; (800a370 <HAL_UART_Init+0x134>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d041      	beq.n	800a2e4 <HAL_UART_Init+0xa8>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a43      	ldr	r2, [pc, #268]	; (800a374 <HAL_UART_Init+0x138>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d03c      	beq.n	800a2e4 <HAL_UART_Init+0xa8>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a42      	ldr	r2, [pc, #264]	; (800a378 <HAL_UART_Init+0x13c>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d037      	beq.n	800a2e4 <HAL_UART_Init+0xa8>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a40      	ldr	r2, [pc, #256]	; (800a37c <HAL_UART_Init+0x140>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d032      	beq.n	800a2e4 <HAL_UART_Init+0xa8>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a3f      	ldr	r2, [pc, #252]	; (800a380 <HAL_UART_Init+0x144>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d02d      	beq.n	800a2e4 <HAL_UART_Init+0xa8>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a3d      	ldr	r2, [pc, #244]	; (800a384 <HAL_UART_Init+0x148>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d028      	beq.n	800a2e4 <HAL_UART_Init+0xa8>
 800a292:	f240 113f 	movw	r1, #319	; 0x13f
 800a296:	483c      	ldr	r0, [pc, #240]	; (800a388 <HAL_UART_Init+0x14c>)
 800a298:	f7fa fd53 	bl	8004d42 <assert_failed>
 800a29c:	e022      	b.n	800a2e4 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a33      	ldr	r2, [pc, #204]	; (800a370 <HAL_UART_Init+0x134>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d01d      	beq.n	800a2e4 <HAL_UART_Init+0xa8>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a31      	ldr	r2, [pc, #196]	; (800a374 <HAL_UART_Init+0x138>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d018      	beq.n	800a2e4 <HAL_UART_Init+0xa8>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a30      	ldr	r2, [pc, #192]	; (800a378 <HAL_UART_Init+0x13c>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d013      	beq.n	800a2e4 <HAL_UART_Init+0xa8>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a2e      	ldr	r2, [pc, #184]	; (800a37c <HAL_UART_Init+0x140>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d00e      	beq.n	800a2e4 <HAL_UART_Init+0xa8>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a2d      	ldr	r2, [pc, #180]	; (800a380 <HAL_UART_Init+0x144>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d009      	beq.n	800a2e4 <HAL_UART_Init+0xa8>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a2b      	ldr	r2, [pc, #172]	; (800a384 <HAL_UART_Init+0x148>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d004      	beq.n	800a2e4 <HAL_UART_Init+0xa8>
 800a2da:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800a2de:	482a      	ldr	r0, [pc, #168]	; (800a388 <HAL_UART_Init+0x14c>)
 800a2e0:	f7fa fd2f 	bl	8004d42 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d106      	bne.n	800a2fa <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f7fb fc1b 	bl	8005b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2224      	movs	r2, #36	; 0x24
 800a2fe:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f022 0201 	bic.w	r2, r2, #1
 800a30e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f8cf 	bl	800a4b4 <UART_SetConfig>
 800a316:	4603      	mov	r3, r0
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d101      	bne.n	800a320 <HAL_UART_Init+0xe4>
  {
    return HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	e022      	b.n	800a366 <HAL_UART_Init+0x12a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a324:	2b00      	cmp	r3, #0
 800a326:	d002      	beq.n	800a32e <HAL_UART_Init+0xf2>
  {
    UART_AdvFeatureConfig(huart);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fcb3 	bl	800ac94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	685a      	ldr	r2, [r3, #4]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a33c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a34c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f042 0201 	orr.w	r2, r2, #1
 800a35c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fdf6 	bl	800af50 <UART_CheckIdleState>
 800a364:	4603      	mov	r3, r0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	40013800 	.word	0x40013800
 800a374:	40004400 	.word	0x40004400
 800a378:	40004800 	.word	0x40004800
 800a37c:	40004c00 	.word	0x40004c00
 800a380:	40005000 	.word	0x40005000
 800a384:	40008000 	.word	0x40008000
 800a388:	0800b540 	.word	0x0800b540

0800a38c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b08a      	sub	sp, #40	; 0x28
 800a390:	af02      	add	r7, sp, #8
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	603b      	str	r3, [r7, #0]
 800a398:	4613      	mov	r3, r2
 800a39a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3a0:	2b20      	cmp	r3, #32
 800a3a2:	f040 8081 	bne.w	800a4a8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <HAL_UART_Transmit+0x26>
 800a3ac:	88fb      	ldrh	r3, [r7, #6]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d101      	bne.n	800a3b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e079      	b.n	800a4aa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d101      	bne.n	800a3c4 <HAL_UART_Transmit+0x38>
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	e072      	b.n	800a4aa <HAL_UART_Transmit+0x11e>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2221      	movs	r2, #33	; 0x21
 800a3d6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a3d8:	f7fb fd04 	bl	8005de4 <HAL_GetTick>
 800a3dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	88fa      	ldrh	r2, [r7, #6]
 800a3e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	88fa      	ldrh	r2, [r7, #6]
 800a3ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3f6:	d108      	bne.n	800a40a <HAL_UART_Transmit+0x7e>
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d104      	bne.n	800a40a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800a400:	2300      	movs	r3, #0
 800a402:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	61bb      	str	r3, [r7, #24]
 800a408:	e003      	b.n	800a412 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a40e:	2300      	movs	r3, #0
 800a410:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a412:	e02d      	b.n	800a470 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	2200      	movs	r2, #0
 800a41c:	2180      	movs	r1, #128	; 0x80
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f000 fddb 	bl	800afda <UART_WaitOnFlagUntilTimeout>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800a42a:	2303      	movs	r3, #3
 800a42c:	e03d      	b.n	800a4aa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10b      	bne.n	800a44c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	881a      	ldrh	r2, [r3, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a440:	b292      	uxth	r2, r2
 800a442:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	3302      	adds	r3, #2
 800a448:	61bb      	str	r3, [r7, #24]
 800a44a:	e008      	b.n	800a45e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	781a      	ldrb	r2, [r3, #0]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	b292      	uxth	r2, r2
 800a456:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	3301      	adds	r3, #1
 800a45c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a464:	b29b      	uxth	r3, r3
 800a466:	3b01      	subs	r3, #1
 800a468:	b29a      	uxth	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a476:	b29b      	uxth	r3, r3
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1cb      	bne.n	800a414 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	2200      	movs	r2, #0
 800a484:	2140      	movs	r1, #64	; 0x40
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f000 fda7 	bl	800afda <UART_WaitOnFlagUntilTimeout>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d001      	beq.n	800a496 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800a492:	2303      	movs	r3, #3
 800a494:	e009      	b.n	800a4aa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2220      	movs	r2, #32
 800a49a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	e000      	b.n	800a4aa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800a4a8:	2302      	movs	r3, #2
  }
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3720      	adds	r7, #32
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
	...

0800a4b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4b4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a4b8:	b088      	sub	sp, #32
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	4aab      	ldr	r2, [pc, #684]	; (800a77c <UART_SetConfig+0x2c8>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d904      	bls.n	800a4de <UART_SetConfig+0x2a>
 800a4d4:	f640 312d 	movw	r1, #2861	; 0xb2d
 800a4d8:	48a9      	ldr	r0, [pc, #676]	; (800a780 <UART_SetConfig+0x2cc>)
 800a4da:	f7fa fc32 	bl	8004d42 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4e6:	d00d      	beq.n	800a504 <UART_SetConfig+0x50>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d009      	beq.n	800a504 <UART_SetConfig+0x50>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f8:	d004      	beq.n	800a504 <UART_SetConfig+0x50>
 800a4fa:	f640 312e 	movw	r1, #2862	; 0xb2e
 800a4fe:	48a0      	ldr	r0, [pc, #640]	; (800a780 <UART_SetConfig+0x2cc>)
 800a500:	f7fa fc1f 	bl	8004d42 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a9e      	ldr	r2, [pc, #632]	; (800a784 <UART_SetConfig+0x2d0>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d10e      	bne.n	800a52c <UART_SetConfig+0x78>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d030      	beq.n	800a578 <UART_SetConfig+0xc4>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a51e:	d02b      	beq.n	800a578 <UART_SetConfig+0xc4>
 800a520:	f640 3131 	movw	r1, #2865	; 0xb31
 800a524:	4896      	ldr	r0, [pc, #600]	; (800a780 <UART_SetConfig+0x2cc>)
 800a526:	f7fa fc0c 	bl	8004d42 <assert_failed>
 800a52a:	e025      	b.n	800a578 <UART_SetConfig+0xc4>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a534:	d012      	beq.n	800a55c <UART_SetConfig+0xa8>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00e      	beq.n	800a55c <UART_SetConfig+0xa8>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a546:	d009      	beq.n	800a55c <UART_SetConfig+0xa8>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a550:	d004      	beq.n	800a55c <UART_SetConfig+0xa8>
 800a552:	f640 3135 	movw	r1, #2869	; 0xb35
 800a556:	488a      	ldr	r0, [pc, #552]	; (800a780 <UART_SetConfig+0x2cc>)
 800a558:	f7fa fbf3 	bl	8004d42 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a1b      	ldr	r3, [r3, #32]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d009      	beq.n	800a578 <UART_SetConfig+0xc4>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6a1b      	ldr	r3, [r3, #32]
 800a568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a56c:	d004      	beq.n	800a578 <UART_SetConfig+0xc4>
 800a56e:	f640 3136 	movw	r1, #2870	; 0xb36
 800a572:	4883      	ldr	r0, [pc, #524]	; (800a780 <UART_SetConfig+0x2cc>)
 800a574:	f7fa fbe5 	bl	8004d42 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00e      	beq.n	800a59e <UART_SetConfig+0xea>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a588:	d009      	beq.n	800a59e <UART_SetConfig+0xea>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a592:	d004      	beq.n	800a59e <UART_SetConfig+0xea>
 800a594:	f640 3139 	movw	r1, #2873	; 0xb39
 800a598:	4879      	ldr	r0, [pc, #484]	; (800a780 <UART_SetConfig+0x2cc>)
 800a59a:	f7fa fbd2 	bl	8004d42 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	f023 030c 	bic.w	r3, r3, #12
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d103      	bne.n	800a5b2 <UART_SetConfig+0xfe>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	695b      	ldr	r3, [r3, #20]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d104      	bne.n	800a5bc <UART_SetConfig+0x108>
 800a5b2:	f640 313a 	movw	r1, #2874	; 0xb3a
 800a5b6:	4872      	ldr	r0, [pc, #456]	; (800a780 <UART_SetConfig+0x2cc>)
 800a5b8:	f7fa fbc3 	bl	8004d42 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d013      	beq.n	800a5ec <UART_SetConfig+0x138>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5cc:	d00e      	beq.n	800a5ec <UART_SetConfig+0x138>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	699b      	ldr	r3, [r3, #24]
 800a5d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5d6:	d009      	beq.n	800a5ec <UART_SetConfig+0x138>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5e0:	d004      	beq.n	800a5ec <UART_SetConfig+0x138>
 800a5e2:	f640 313b 	movw	r1, #2875	; 0xb3b
 800a5e6:	4866      	ldr	r0, [pc, #408]	; (800a780 <UART_SetConfig+0x2cc>)
 800a5e8:	f7fa fbab 	bl	8004d42 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	69db      	ldr	r3, [r3, #28]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d009      	beq.n	800a608 <UART_SetConfig+0x154>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5fc:	d004      	beq.n	800a608 <UART_SetConfig+0x154>
 800a5fe:	f640 313c 	movw	r1, #2876	; 0xb3c
 800a602:	485f      	ldr	r0, [pc, #380]	; (800a780 <UART_SetConfig+0x2cc>)
 800a604:	f7fa fb9d 	bl	8004d42 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	431a      	orrs	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	431a      	orrs	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	4b58      	ldr	r3, [pc, #352]	; (800a788 <UART_SetConfig+0x2d4>)
 800a628:	4013      	ands	r3, r2
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	6812      	ldr	r2, [r2, #0]
 800a62e:	69f9      	ldr	r1, [r7, #28]
 800a630:	430b      	orrs	r3, r1
 800a632:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	68da      	ldr	r2, [r3, #12]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	430a      	orrs	r2, r1
 800a648:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a4b      	ldr	r2, [pc, #300]	; (800a784 <UART_SetConfig+0x2d0>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d004      	beq.n	800a664 <UART_SetConfig+0x1b0>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	69fa      	ldr	r2, [r7, #28]
 800a660:	4313      	orrs	r3, r2
 800a662:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	69fa      	ldr	r2, [r7, #28]
 800a674:	430a      	orrs	r2, r1
 800a676:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a43      	ldr	r2, [pc, #268]	; (800a78c <UART_SetConfig+0x2d8>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d122      	bne.n	800a6c8 <UART_SetConfig+0x214>
 800a682:	4b43      	ldr	r3, [pc, #268]	; (800a790 <UART_SetConfig+0x2dc>)
 800a684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a688:	f003 0303 	and.w	r3, r3, #3
 800a68c:	2b03      	cmp	r3, #3
 800a68e:	d817      	bhi.n	800a6c0 <UART_SetConfig+0x20c>
 800a690:	a201      	add	r2, pc, #4	; (adr r2, 800a698 <UART_SetConfig+0x1e4>)
 800a692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a696:	bf00      	nop
 800a698:	0800a6a9 	.word	0x0800a6a9
 800a69c:	0800a6b5 	.word	0x0800a6b5
 800a6a0:	0800a6af 	.word	0x0800a6af
 800a6a4:	0800a6bb 	.word	0x0800a6bb
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	76fb      	strb	r3, [r7, #27]
 800a6ac:	e0f9      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	76fb      	strb	r3, [r7, #27]
 800a6b2:	e0f6      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a6b4:	2304      	movs	r3, #4
 800a6b6:	76fb      	strb	r3, [r7, #27]
 800a6b8:	e0f3      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a6ba:	2308      	movs	r3, #8
 800a6bc:	76fb      	strb	r3, [r7, #27]
 800a6be:	e0f0      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a6c0:	2310      	movs	r3, #16
 800a6c2:	76fb      	strb	r3, [r7, #27]
 800a6c4:	bf00      	nop
 800a6c6:	e0ec      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a31      	ldr	r2, [pc, #196]	; (800a794 <UART_SetConfig+0x2e0>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d134      	bne.n	800a73c <UART_SetConfig+0x288>
 800a6d2:	4b2f      	ldr	r3, [pc, #188]	; (800a790 <UART_SetConfig+0x2dc>)
 800a6d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6d8:	f003 030c 	and.w	r3, r3, #12
 800a6dc:	2b0c      	cmp	r3, #12
 800a6de:	d829      	bhi.n	800a734 <UART_SetConfig+0x280>
 800a6e0:	a201      	add	r2, pc, #4	; (adr r2, 800a6e8 <UART_SetConfig+0x234>)
 800a6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e6:	bf00      	nop
 800a6e8:	0800a71d 	.word	0x0800a71d
 800a6ec:	0800a735 	.word	0x0800a735
 800a6f0:	0800a735 	.word	0x0800a735
 800a6f4:	0800a735 	.word	0x0800a735
 800a6f8:	0800a729 	.word	0x0800a729
 800a6fc:	0800a735 	.word	0x0800a735
 800a700:	0800a735 	.word	0x0800a735
 800a704:	0800a735 	.word	0x0800a735
 800a708:	0800a723 	.word	0x0800a723
 800a70c:	0800a735 	.word	0x0800a735
 800a710:	0800a735 	.word	0x0800a735
 800a714:	0800a735 	.word	0x0800a735
 800a718:	0800a72f 	.word	0x0800a72f
 800a71c:	2300      	movs	r3, #0
 800a71e:	76fb      	strb	r3, [r7, #27]
 800a720:	e0bf      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a722:	2302      	movs	r3, #2
 800a724:	76fb      	strb	r3, [r7, #27]
 800a726:	e0bc      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a728:	2304      	movs	r3, #4
 800a72a:	76fb      	strb	r3, [r7, #27]
 800a72c:	e0b9      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a72e:	2308      	movs	r3, #8
 800a730:	76fb      	strb	r3, [r7, #27]
 800a732:	e0b6      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a734:	2310      	movs	r3, #16
 800a736:	76fb      	strb	r3, [r7, #27]
 800a738:	bf00      	nop
 800a73a:	e0b2      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a15      	ldr	r2, [pc, #84]	; (800a798 <UART_SetConfig+0x2e4>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d131      	bne.n	800a7aa <UART_SetConfig+0x2f6>
 800a746:	4b12      	ldr	r3, [pc, #72]	; (800a790 <UART_SetConfig+0x2dc>)
 800a748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a74c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a750:	2b10      	cmp	r3, #16
 800a752:	d00f      	beq.n	800a774 <UART_SetConfig+0x2c0>
 800a754:	2b10      	cmp	r3, #16
 800a756:	d802      	bhi.n	800a75e <UART_SetConfig+0x2aa>
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d005      	beq.n	800a768 <UART_SetConfig+0x2b4>
 800a75c:	e021      	b.n	800a7a2 <UART_SetConfig+0x2ee>
 800a75e:	2b20      	cmp	r3, #32
 800a760:	d005      	beq.n	800a76e <UART_SetConfig+0x2ba>
 800a762:	2b30      	cmp	r3, #48	; 0x30
 800a764:	d01a      	beq.n	800a79c <UART_SetConfig+0x2e8>
 800a766:	e01c      	b.n	800a7a2 <UART_SetConfig+0x2ee>
 800a768:	2300      	movs	r3, #0
 800a76a:	76fb      	strb	r3, [r7, #27]
 800a76c:	e099      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a76e:	2302      	movs	r3, #2
 800a770:	76fb      	strb	r3, [r7, #27]
 800a772:	e096      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a774:	2304      	movs	r3, #4
 800a776:	76fb      	strb	r3, [r7, #27]
 800a778:	e093      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a77a:	bf00      	nop
 800a77c:	00989680 	.word	0x00989680
 800a780:	0800b540 	.word	0x0800b540
 800a784:	40008000 	.word	0x40008000
 800a788:	efff69f3 	.word	0xefff69f3
 800a78c:	40013800 	.word	0x40013800
 800a790:	40021000 	.word	0x40021000
 800a794:	40004400 	.word	0x40004400
 800a798:	40004800 	.word	0x40004800
 800a79c:	2308      	movs	r3, #8
 800a79e:	76fb      	strb	r3, [r7, #27]
 800a7a0:	e07f      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a7a2:	2310      	movs	r3, #16
 800a7a4:	76fb      	strb	r3, [r7, #27]
 800a7a6:	bf00      	nop
 800a7a8:	e07b      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4ab3      	ldr	r2, [pc, #716]	; (800aa7c <UART_SetConfig+0x5c8>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d120      	bne.n	800a7f6 <UART_SetConfig+0x342>
 800a7b4:	4bb2      	ldr	r3, [pc, #712]	; (800aa80 <UART_SetConfig+0x5cc>)
 800a7b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a7be:	2b40      	cmp	r3, #64	; 0x40
 800a7c0:	d00f      	beq.n	800a7e2 <UART_SetConfig+0x32e>
 800a7c2:	2b40      	cmp	r3, #64	; 0x40
 800a7c4:	d802      	bhi.n	800a7cc <UART_SetConfig+0x318>
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d005      	beq.n	800a7d6 <UART_SetConfig+0x322>
 800a7ca:	e010      	b.n	800a7ee <UART_SetConfig+0x33a>
 800a7cc:	2b80      	cmp	r3, #128	; 0x80
 800a7ce:	d005      	beq.n	800a7dc <UART_SetConfig+0x328>
 800a7d0:	2bc0      	cmp	r3, #192	; 0xc0
 800a7d2:	d009      	beq.n	800a7e8 <UART_SetConfig+0x334>
 800a7d4:	e00b      	b.n	800a7ee <UART_SetConfig+0x33a>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	76fb      	strb	r3, [r7, #27]
 800a7da:	e062      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a7dc:	2302      	movs	r3, #2
 800a7de:	76fb      	strb	r3, [r7, #27]
 800a7e0:	e05f      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a7e2:	2304      	movs	r3, #4
 800a7e4:	76fb      	strb	r3, [r7, #27]
 800a7e6:	e05c      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a7e8:	2308      	movs	r3, #8
 800a7ea:	76fb      	strb	r3, [r7, #27]
 800a7ec:	e059      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a7ee:	2310      	movs	r3, #16
 800a7f0:	76fb      	strb	r3, [r7, #27]
 800a7f2:	bf00      	nop
 800a7f4:	e055      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4aa2      	ldr	r2, [pc, #648]	; (800aa84 <UART_SetConfig+0x5d0>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d124      	bne.n	800a84a <UART_SetConfig+0x396>
 800a800:	4b9f      	ldr	r3, [pc, #636]	; (800aa80 <UART_SetConfig+0x5cc>)
 800a802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a80a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a80e:	d012      	beq.n	800a836 <UART_SetConfig+0x382>
 800a810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a814:	d802      	bhi.n	800a81c <UART_SetConfig+0x368>
 800a816:	2b00      	cmp	r3, #0
 800a818:	d007      	beq.n	800a82a <UART_SetConfig+0x376>
 800a81a:	e012      	b.n	800a842 <UART_SetConfig+0x38e>
 800a81c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a820:	d006      	beq.n	800a830 <UART_SetConfig+0x37c>
 800a822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a826:	d009      	beq.n	800a83c <UART_SetConfig+0x388>
 800a828:	e00b      	b.n	800a842 <UART_SetConfig+0x38e>
 800a82a:	2300      	movs	r3, #0
 800a82c:	76fb      	strb	r3, [r7, #27]
 800a82e:	e038      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a830:	2302      	movs	r3, #2
 800a832:	76fb      	strb	r3, [r7, #27]
 800a834:	e035      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a836:	2304      	movs	r3, #4
 800a838:	76fb      	strb	r3, [r7, #27]
 800a83a:	e032      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a83c:	2308      	movs	r3, #8
 800a83e:	76fb      	strb	r3, [r7, #27]
 800a840:	e02f      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a842:	2310      	movs	r3, #16
 800a844:	76fb      	strb	r3, [r7, #27]
 800a846:	bf00      	nop
 800a848:	e02b      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a8e      	ldr	r2, [pc, #568]	; (800aa88 <UART_SetConfig+0x5d4>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d124      	bne.n	800a89e <UART_SetConfig+0x3ea>
 800a854:	4b8a      	ldr	r3, [pc, #552]	; (800aa80 <UART_SetConfig+0x5cc>)
 800a856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a85a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a85e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a862:	d012      	beq.n	800a88a <UART_SetConfig+0x3d6>
 800a864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a868:	d802      	bhi.n	800a870 <UART_SetConfig+0x3bc>
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d007      	beq.n	800a87e <UART_SetConfig+0x3ca>
 800a86e:	e012      	b.n	800a896 <UART_SetConfig+0x3e2>
 800a870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a874:	d006      	beq.n	800a884 <UART_SetConfig+0x3d0>
 800a876:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a87a:	d009      	beq.n	800a890 <UART_SetConfig+0x3dc>
 800a87c:	e00b      	b.n	800a896 <UART_SetConfig+0x3e2>
 800a87e:	2300      	movs	r3, #0
 800a880:	76fb      	strb	r3, [r7, #27]
 800a882:	e00e      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a884:	2302      	movs	r3, #2
 800a886:	76fb      	strb	r3, [r7, #27]
 800a888:	e00b      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a88a:	2304      	movs	r3, #4
 800a88c:	76fb      	strb	r3, [r7, #27]
 800a88e:	e008      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a890:	2308      	movs	r3, #8
 800a892:	76fb      	strb	r3, [r7, #27]
 800a894:	e005      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a896:	2310      	movs	r3, #16
 800a898:	76fb      	strb	r3, [r7, #27]
 800a89a:	bf00      	nop
 800a89c:	e001      	b.n	800a8a2 <UART_SetConfig+0x3ee>
 800a89e:	2310      	movs	r3, #16
 800a8a0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a78      	ldr	r2, [pc, #480]	; (800aa88 <UART_SetConfig+0x5d4>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	f040 80f3 	bne.w	800aa94 <UART_SetConfig+0x5e0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a8ae:	7efb      	ldrb	r3, [r7, #27]
 800a8b0:	2b08      	cmp	r3, #8
 800a8b2:	d824      	bhi.n	800a8fe <UART_SetConfig+0x44a>
 800a8b4:	a201      	add	r2, pc, #4	; (adr r2, 800a8bc <UART_SetConfig+0x408>)
 800a8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ba:	bf00      	nop
 800a8bc:	0800a8e1 	.word	0x0800a8e1
 800a8c0:	0800a8ff 	.word	0x0800a8ff
 800a8c4:	0800a8e9 	.word	0x0800a8e9
 800a8c8:	0800a8ff 	.word	0x0800a8ff
 800a8cc:	0800a8ef 	.word	0x0800a8ef
 800a8d0:	0800a8ff 	.word	0x0800a8ff
 800a8d4:	0800a8ff 	.word	0x0800a8ff
 800a8d8:	0800a8ff 	.word	0x0800a8ff
 800a8dc:	0800a8f7 	.word	0x0800a8f7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800a8e0:	f7fc fe18 	bl	8007514 <HAL_RCC_GetPCLK1Freq>
 800a8e4:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a8e6:	e00d      	b.n	800a904 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800a8e8:	4b68      	ldr	r3, [pc, #416]	; (800aa8c <UART_SetConfig+0x5d8>)
 800a8ea:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a8ec:	e00a      	b.n	800a904 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800a8ee:	f7fc fd7b 	bl	80073e8 <HAL_RCC_GetSysClockFreq>
 800a8f2:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a8f4:	e006      	b.n	800a904 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800a8f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8fa:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a8fc:	e002      	b.n	800a904 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	74fb      	strb	r3, [r7, #19]
        break;
 800a902:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2b00      	cmp	r3, #0
 800a908:	f000 81b7 	beq.w	800ac7a <UART_SetConfig+0x7c6>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	4613      	mov	r3, r2
 800a912:	005b      	lsls	r3, r3, #1
 800a914:	4413      	add	r3, r2
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d305      	bcc.n	800a928 <UART_SetConfig+0x474>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	429a      	cmp	r2, r3
 800a926:	d902      	bls.n	800a92e <UART_SetConfig+0x47a>
      {
        ret = HAL_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	74fb      	strb	r3, [r7, #19]
 800a92c:	e1a5      	b.n	800ac7a <UART_SetConfig+0x7c6>
      }
      else
      {
        switch (clocksource)
 800a92e:	7efb      	ldrb	r3, [r7, #27]
 800a930:	2b08      	cmp	r3, #8
 800a932:	f200 8090 	bhi.w	800aa56 <UART_SetConfig+0x5a2>
 800a936:	a201      	add	r2, pc, #4	; (adr r2, 800a93c <UART_SetConfig+0x488>)
 800a938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93c:	0800a961 	.word	0x0800a961
 800a940:	0800aa57 	.word	0x0800aa57
 800a944:	0800a9ad 	.word	0x0800a9ad
 800a948:	0800aa57 	.word	0x0800aa57
 800a94c:	0800a9e1 	.word	0x0800a9e1
 800a950:	0800aa57 	.word	0x0800aa57
 800a954:	0800aa57 	.word	0x0800aa57
 800a958:	0800aa57 	.word	0x0800aa57
 800a95c:	0800aa2d 	.word	0x0800aa2d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a960:	f7fc fdd8 	bl	8007514 <HAL_RCC_GetPCLK1Freq>
 800a964:	4603      	mov	r3, r0
 800a966:	4619      	mov	r1, r3
 800a968:	f04f 0200 	mov.w	r2, #0
 800a96c:	f04f 0300 	mov.w	r3, #0
 800a970:	f04f 0400 	mov.w	r4, #0
 800a974:	0214      	lsls	r4, r2, #8
 800a976:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a97a:	020b      	lsls	r3, r1, #8
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	6852      	ldr	r2, [r2, #4]
 800a980:	0852      	lsrs	r2, r2, #1
 800a982:	4611      	mov	r1, r2
 800a984:	f04f 0200 	mov.w	r2, #0
 800a988:	eb13 0b01 	adds.w	fp, r3, r1
 800a98c:	eb44 0c02 	adc.w	ip, r4, r2
 800a990:	4658      	mov	r0, fp
 800a992:	4661      	mov	r1, ip
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	f04f 0400 	mov.w	r4, #0
 800a99c:	461a      	mov	r2, r3
 800a99e:	4623      	mov	r3, r4
 800a9a0:	f7f5 fc62 	bl	8000268 <__aeabi_uldivmod>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a9aa:	e057      	b.n	800aa5c <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	085b      	lsrs	r3, r3, #1
 800a9b2:	f04f 0400 	mov.w	r4, #0
 800a9b6:	4936      	ldr	r1, [pc, #216]	; (800aa90 <UART_SetConfig+0x5dc>)
 800a9b8:	f04f 0200 	mov.w	r2, #0
 800a9bc:	eb13 0b01 	adds.w	fp, r3, r1
 800a9c0:	eb44 0c02 	adc.w	ip, r4, r2
 800a9c4:	4658      	mov	r0, fp
 800a9c6:	4661      	mov	r1, ip
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	f04f 0400 	mov.w	r4, #0
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	4623      	mov	r3, r4
 800a9d4:	f7f5 fc48 	bl	8000268 <__aeabi_uldivmod>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	460c      	mov	r4, r1
 800a9dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a9de:	e03d      	b.n	800aa5c <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a9e0:	f7fc fd02 	bl	80073e8 <HAL_RCC_GetSysClockFreq>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	f04f 0200 	mov.w	r2, #0
 800a9ec:	f04f 0300 	mov.w	r3, #0
 800a9f0:	f04f 0400 	mov.w	r4, #0
 800a9f4:	0214      	lsls	r4, r2, #8
 800a9f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a9fa:	020b      	lsls	r3, r1, #8
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	6852      	ldr	r2, [r2, #4]
 800aa00:	0852      	lsrs	r2, r2, #1
 800aa02:	4611      	mov	r1, r2
 800aa04:	f04f 0200 	mov.w	r2, #0
 800aa08:	eb13 0b01 	adds.w	fp, r3, r1
 800aa0c:	eb44 0c02 	adc.w	ip, r4, r2
 800aa10:	4658      	mov	r0, fp
 800aa12:	4661      	mov	r1, ip
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	f04f 0400 	mov.w	r4, #0
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	4623      	mov	r3, r4
 800aa20:	f7f5 fc22 	bl	8000268 <__aeabi_uldivmod>
 800aa24:	4603      	mov	r3, r0
 800aa26:	460c      	mov	r4, r1
 800aa28:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800aa2a:	e017      	b.n	800aa5c <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	085b      	lsrs	r3, r3, #1
 800aa32:	f04f 0400 	mov.w	r4, #0
 800aa36:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800aa3a:	f144 0100 	adc.w	r1, r4, #0
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	f04f 0400 	mov.w	r4, #0
 800aa46:	461a      	mov	r2, r3
 800aa48:	4623      	mov	r3, r4
 800aa4a:	f7f5 fc0d 	bl	8000268 <__aeabi_uldivmod>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	460c      	mov	r4, r1
 800aa52:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800aa54:	e002      	b.n	800aa5c <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	74fb      	strb	r3, [r7, #19]
            break;
 800aa5a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa62:	d308      	bcc.n	800aa76 <UART_SetConfig+0x5c2>
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa6a:	d204      	bcs.n	800aa76 <UART_SetConfig+0x5c2>
        {
          huart->Instance->BRR = usartdiv;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	697a      	ldr	r2, [r7, #20]
 800aa72:	60da      	str	r2, [r3, #12]
 800aa74:	e101      	b.n	800ac7a <UART_SetConfig+0x7c6>
        }
        else
        {
          ret = HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	74fb      	strb	r3, [r7, #19]
 800aa7a:	e0fe      	b.n	800ac7a <UART_SetConfig+0x7c6>
 800aa7c:	40004c00 	.word	0x40004c00
 800aa80:	40021000 	.word	0x40021000
 800aa84:	40005000 	.word	0x40005000
 800aa88:	40008000 	.word	0x40008000
 800aa8c:	00f42400 	.word	0x00f42400
 800aa90:	f4240000 	.word	0xf4240000
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	69db      	ldr	r3, [r3, #28]
 800aa98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa9c:	d17f      	bne.n	800ab9e <UART_SetConfig+0x6ea>
  {
    switch (clocksource)
 800aa9e:	7efb      	ldrb	r3, [r7, #27]
 800aaa0:	2b08      	cmp	r3, #8
 800aaa2:	d85c      	bhi.n	800ab5e <UART_SetConfig+0x6aa>
 800aaa4:	a201      	add	r2, pc, #4	; (adr r2, 800aaac <UART_SetConfig+0x5f8>)
 800aaa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaaa:	bf00      	nop
 800aaac:	0800aad1 	.word	0x0800aad1
 800aab0:	0800aaef 	.word	0x0800aaef
 800aab4:	0800ab0d 	.word	0x0800ab0d
 800aab8:	0800ab5f 	.word	0x0800ab5f
 800aabc:	0800ab29 	.word	0x0800ab29
 800aac0:	0800ab5f 	.word	0x0800ab5f
 800aac4:	0800ab5f 	.word	0x0800ab5f
 800aac8:	0800ab5f 	.word	0x0800ab5f
 800aacc:	0800ab47 	.word	0x0800ab47
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800aad0:	f7fc fd20 	bl	8007514 <HAL_RCC_GetPCLK1Freq>
 800aad4:	4603      	mov	r3, r0
 800aad6:	005a      	lsls	r2, r3, #1
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	085b      	lsrs	r3, r3, #1
 800aade:	441a      	add	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800aaec:	e03a      	b.n	800ab64 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800aaee:	f7fc fd27 	bl	8007540 <HAL_RCC_GetPCLK2Freq>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	005a      	lsls	r2, r3, #1
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	085b      	lsrs	r3, r3, #1
 800aafc:	441a      	add	r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ab0a:	e02b      	b.n	800ab64 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	085b      	lsrs	r3, r3, #1
 800ab12:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800ab16:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	6852      	ldr	r2, [r2, #4]
 800ab1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ab26:	e01d      	b.n	800ab64 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800ab28:	f7fc fc5e 	bl	80073e8 <HAL_RCC_GetSysClockFreq>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	005a      	lsls	r2, r3, #1
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	085b      	lsrs	r3, r3, #1
 800ab36:	441a      	add	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ab44:	e00e      	b.n	800ab64 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	085b      	lsrs	r3, r3, #1
 800ab4c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ab5c:	e002      	b.n	800ab64 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	74fb      	strb	r3, [r7, #19]
        break;
 800ab62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	2b0f      	cmp	r3, #15
 800ab68:	d916      	bls.n	800ab98 <UART_SetConfig+0x6e4>
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab70:	d212      	bcs.n	800ab98 <UART_SetConfig+0x6e4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	f023 030f 	bic.w	r3, r3, #15
 800ab7a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	085b      	lsrs	r3, r3, #1
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	f003 0307 	and.w	r3, r3, #7
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	897b      	ldrh	r3, [r7, #10]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	897a      	ldrh	r2, [r7, #10]
 800ab94:	60da      	str	r2, [r3, #12]
 800ab96:	e070      	b.n	800ac7a <UART_SetConfig+0x7c6>
    }
    else
    {
      ret = HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	74fb      	strb	r3, [r7, #19]
 800ab9c:	e06d      	b.n	800ac7a <UART_SetConfig+0x7c6>
    }
  }
  else
  {
    switch (clocksource)
 800ab9e:	7efb      	ldrb	r3, [r7, #27]
 800aba0:	2b08      	cmp	r3, #8
 800aba2:	d859      	bhi.n	800ac58 <UART_SetConfig+0x7a4>
 800aba4:	a201      	add	r2, pc, #4	; (adr r2, 800abac <UART_SetConfig+0x6f8>)
 800aba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abaa:	bf00      	nop
 800abac:	0800abd1 	.word	0x0800abd1
 800abb0:	0800abed 	.word	0x0800abed
 800abb4:	0800ac09 	.word	0x0800ac09
 800abb8:	0800ac59 	.word	0x0800ac59
 800abbc:	0800ac25 	.word	0x0800ac25
 800abc0:	0800ac59 	.word	0x0800ac59
 800abc4:	0800ac59 	.word	0x0800ac59
 800abc8:	0800ac59 	.word	0x0800ac59
 800abcc:	0800ac41 	.word	0x0800ac41
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800abd0:	f7fc fca0 	bl	8007514 <HAL_RCC_GetPCLK1Freq>
 800abd4:	4602      	mov	r2, r0
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	085b      	lsrs	r3, r3, #1
 800abdc:	441a      	add	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800abea:	e038      	b.n	800ac5e <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800abec:	f7fc fca8 	bl	8007540 <HAL_RCC_GetPCLK2Freq>
 800abf0:	4602      	mov	r2, r0
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	085b      	lsrs	r3, r3, #1
 800abf8:	441a      	add	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ac06:	e02a      	b.n	800ac5e <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	085b      	lsrs	r3, r3, #1
 800ac0e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800ac12:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	6852      	ldr	r2, [r2, #4]
 800ac1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ac22:	e01c      	b.n	800ac5e <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800ac24:	f7fc fbe0 	bl	80073e8 <HAL_RCC_GetSysClockFreq>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	085b      	lsrs	r3, r3, #1
 800ac30:	441a      	add	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ac3e:	e00e      	b.n	800ac5e <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	085b      	lsrs	r3, r3, #1
 800ac46:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ac56:	e002      	b.n	800ac5e <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	74fb      	strb	r3, [r7, #19]
        break;
 800ac5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	2b0f      	cmp	r3, #15
 800ac62:	d908      	bls.n	800ac76 <UART_SetConfig+0x7c2>
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac6a:	d204      	bcs.n	800ac76 <UART_SetConfig+0x7c2>
    {
      huart->Instance->BRR = usartdiv;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	697a      	ldr	r2, [r7, #20]
 800ac72:	60da      	str	r2, [r3, #12]
 800ac74:	e001      	b.n	800ac7a <UART_SetConfig+0x7c6>
    }
    else
    {
      ret = HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ac86:	7cfb      	ldrb	r3, [r7, #19]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3720      	adds	r7, #32
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800ac92:	bf00      	nop

0800ac94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca0:	2bff      	cmp	r3, #255	; 0xff
 800aca2:	d904      	bls.n	800acae <UART_AdvFeatureConfig+0x1a>
 800aca4:	f640 4155 	movw	r1, #3157	; 0xc55
 800aca8:	489b      	ldr	r0, [pc, #620]	; (800af18 <UART_AdvFeatureConfig+0x284>)
 800acaa:	f7fa f84a 	bl	8004d42 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb2:	f003 0301 	and.w	r3, r3, #1
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d018      	beq.n	800acec <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d009      	beq.n	800acd6 <UART_AdvFeatureConfig+0x42>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acca:	d004      	beq.n	800acd6 <UART_AdvFeatureConfig+0x42>
 800accc:	f640 415a 	movw	r1, #3162	; 0xc5a
 800acd0:	4891      	ldr	r0, [pc, #580]	; (800af18 <UART_AdvFeatureConfig+0x284>)
 800acd2:	f7fa f836 	bl	8004d42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	430a      	orrs	r2, r1
 800acea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf0:	f003 0302 	and.w	r3, r3, #2
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d018      	beq.n	800ad2a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d009      	beq.n	800ad14 <UART_AdvFeatureConfig+0x80>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad08:	d004      	beq.n	800ad14 <UART_AdvFeatureConfig+0x80>
 800ad0a:	f640 4161 	movw	r1, #3169	; 0xc61
 800ad0e:	4882      	ldr	r0, [pc, #520]	; (800af18 <UART_AdvFeatureConfig+0x284>)
 800ad10:	f7fa f817 	bl	8004d42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	430a      	orrs	r2, r1
 800ad28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2e:	f003 0304 	and.w	r3, r3, #4
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d018      	beq.n	800ad68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d009      	beq.n	800ad52 <UART_AdvFeatureConfig+0xbe>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad46:	d004      	beq.n	800ad52 <UART_AdvFeatureConfig+0xbe>
 800ad48:	f640 4168 	movw	r1, #3176	; 0xc68
 800ad4c:	4872      	ldr	r0, [pc, #456]	; (800af18 <UART_AdvFeatureConfig+0x284>)
 800ad4e:	f7f9 fff8 	bl	8004d42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	430a      	orrs	r2, r1
 800ad66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6c:	f003 0308 	and.w	r3, r3, #8
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d018      	beq.n	800ada6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d009      	beq.n	800ad90 <UART_AdvFeatureConfig+0xfc>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad84:	d004      	beq.n	800ad90 <UART_AdvFeatureConfig+0xfc>
 800ad86:	f640 416f 	movw	r1, #3183	; 0xc6f
 800ad8a:	4863      	ldr	r0, [pc, #396]	; (800af18 <UART_AdvFeatureConfig+0x284>)
 800ad8c:	f7f9 ffd9 	bl	8004d42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	430a      	orrs	r2, r1
 800ada4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adaa:	f003 0310 	and.w	r3, r3, #16
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d018      	beq.n	800ade4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d009      	beq.n	800adce <UART_AdvFeatureConfig+0x13a>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adc2:	d004      	beq.n	800adce <UART_AdvFeatureConfig+0x13a>
 800adc4:	f640 4176 	movw	r1, #3190	; 0xc76
 800adc8:	4853      	ldr	r0, [pc, #332]	; (800af18 <UART_AdvFeatureConfig+0x284>)
 800adca:	f7f9 ffba 	bl	8004d42 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	430a      	orrs	r2, r1
 800ade2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade8:	f003 0320 	and.w	r3, r3, #32
 800adec:	2b00      	cmp	r3, #0
 800adee:	d018      	beq.n	800ae22 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d009      	beq.n	800ae0c <UART_AdvFeatureConfig+0x178>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae00:	d004      	beq.n	800ae0c <UART_AdvFeatureConfig+0x178>
 800ae02:	f640 417d 	movw	r1, #3197	; 0xc7d
 800ae06:	4844      	ldr	r0, [pc, #272]	; (800af18 <UART_AdvFeatureConfig+0x284>)
 800ae08:	f7f9 ff9b 	bl	8004d42 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	430a      	orrs	r2, r1
 800ae20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d05e      	beq.n	800aeec <UART_AdvFeatureConfig+0x258>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a3a      	ldr	r2, [pc, #232]	; (800af1c <UART_AdvFeatureConfig+0x288>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d018      	beq.n	800ae6a <UART_AdvFeatureConfig+0x1d6>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a38      	ldr	r2, [pc, #224]	; (800af20 <UART_AdvFeatureConfig+0x28c>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d013      	beq.n	800ae6a <UART_AdvFeatureConfig+0x1d6>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a37      	ldr	r2, [pc, #220]	; (800af24 <UART_AdvFeatureConfig+0x290>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d00e      	beq.n	800ae6a <UART_AdvFeatureConfig+0x1d6>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a35      	ldr	r2, [pc, #212]	; (800af28 <UART_AdvFeatureConfig+0x294>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d009      	beq.n	800ae6a <UART_AdvFeatureConfig+0x1d6>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a34      	ldr	r2, [pc, #208]	; (800af2c <UART_AdvFeatureConfig+0x298>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d004      	beq.n	800ae6a <UART_AdvFeatureConfig+0x1d6>
 800ae60:	f640 4184 	movw	r1, #3204	; 0xc84
 800ae64:	482c      	ldr	r0, [pc, #176]	; (800af18 <UART_AdvFeatureConfig+0x284>)
 800ae66:	f7f9 ff6c 	bl	8004d42 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d009      	beq.n	800ae86 <UART_AdvFeatureConfig+0x1f2>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae7a:	d004      	beq.n	800ae86 <UART_AdvFeatureConfig+0x1f2>
 800ae7c:	f640 4185 	movw	r1, #3205	; 0xc85
 800ae80:	4825      	ldr	r0, [pc, #148]	; (800af18 <UART_AdvFeatureConfig+0x284>)
 800ae82:	f7f9 ff5e 	bl	8004d42 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	430a      	orrs	r2, r1
 800ae9a:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aea4:	d122      	bne.n	800aeec <UART_AdvFeatureConfig+0x258>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d013      	beq.n	800aed6 <UART_AdvFeatureConfig+0x242>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aeb6:	d00e      	beq.n	800aed6 <UART_AdvFeatureConfig+0x242>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aec0:	d009      	beq.n	800aed6 <UART_AdvFeatureConfig+0x242>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aec6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aeca:	d004      	beq.n	800aed6 <UART_AdvFeatureConfig+0x242>
 800aecc:	f640 418a 	movw	r1, #3210	; 0xc8a
 800aed0:	4811      	ldr	r0, [pc, #68]	; (800af18 <UART_AdvFeatureConfig+0x284>)
 800aed2:	f7f9 ff36 	bl	8004d42 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	430a      	orrs	r2, r1
 800aeea:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d026      	beq.n	800af46 <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d017      	beq.n	800af30 <UART_AdvFeatureConfig+0x29c>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800af08:	d012      	beq.n	800af30 <UART_AdvFeatureConfig+0x29c>
 800af0a:	f640 4192 	movw	r1, #3218	; 0xc92
 800af0e:	4802      	ldr	r0, [pc, #8]	; (800af18 <UART_AdvFeatureConfig+0x284>)
 800af10:	f7f9 ff17 	bl	8004d42 <assert_failed>
 800af14:	e00c      	b.n	800af30 <UART_AdvFeatureConfig+0x29c>
 800af16:	bf00      	nop
 800af18:	0800b540 	.word	0x0800b540
 800af1c:	40013800 	.word	0x40013800
 800af20:	40004400 	.word	0x40004400
 800af24:	40004800 	.word	0x40004800
 800af28:	40004c00 	.word	0x40004c00
 800af2c:	40005000 	.word	0x40005000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	430a      	orrs	r2, r1
 800af44:	605a      	str	r2, [r3, #4]
  }
}
 800af46:	bf00      	nop
 800af48:	3708      	adds	r7, #8
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop

0800af50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af02      	add	r7, sp, #8
 800af56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800af5e:	f7fa ff41 	bl	8005de4 <HAL_GetTick>
 800af62:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 0308 	and.w	r3, r3, #8
 800af6e:	2b08      	cmp	r3, #8
 800af70:	d10e      	bne.n	800af90 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f82a 	bl	800afda <UART_WaitOnFlagUntilTimeout>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d001      	beq.n	800af90 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e020      	b.n	800afd2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f003 0304 	and.w	r3, r3, #4
 800af9a:	2b04      	cmp	r3, #4
 800af9c:	d10e      	bne.n	800afbc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800afa2:	9300      	str	r3, [sp, #0]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2200      	movs	r2, #0
 800afa8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f814 	bl	800afda <UART_WaitOnFlagUntilTimeout>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d001      	beq.n	800afbc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afb8:	2303      	movs	r3, #3
 800afba:	e00a      	b.n	800afd2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2220      	movs	r2, #32
 800afc0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2220      	movs	r2, #32
 800afc6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b084      	sub	sp, #16
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	60b9      	str	r1, [r7, #8]
 800afe4:	603b      	str	r3, [r7, #0]
 800afe6:	4613      	mov	r3, r2
 800afe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afea:	e02a      	b.n	800b042 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff2:	d026      	beq.n	800b042 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aff4:	f7fa fef6 	bl	8005de4 <HAL_GetTick>
 800aff8:	4602      	mov	r2, r0
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	69ba      	ldr	r2, [r7, #24]
 800b000:	429a      	cmp	r2, r3
 800b002:	d302      	bcc.n	800b00a <UART_WaitOnFlagUntilTimeout+0x30>
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d11b      	bne.n	800b042 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b018:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	689a      	ldr	r2, [r3, #8]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f022 0201 	bic.w	r2, r2, #1
 800b028:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2220      	movs	r2, #32
 800b02e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2220      	movs	r2, #32
 800b034:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b03e:	2303      	movs	r3, #3
 800b040:	e00f      	b.n	800b062 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	69da      	ldr	r2, [r3, #28]
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	4013      	ands	r3, r2
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	429a      	cmp	r2, r3
 800b050:	bf0c      	ite	eq
 800b052:	2301      	moveq	r3, #1
 800b054:	2300      	movne	r3, #0
 800b056:	b2db      	uxtb	r3, r3
 800b058:	461a      	mov	r2, r3
 800b05a:	79fb      	ldrb	r3, [r7, #7]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d0c5      	beq.n	800afec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
	...

0800b06c <__libc_init_array>:
 800b06c:	b570      	push	{r4, r5, r6, lr}
 800b06e:	4e0d      	ldr	r6, [pc, #52]	; (800b0a4 <__libc_init_array+0x38>)
 800b070:	4c0d      	ldr	r4, [pc, #52]	; (800b0a8 <__libc_init_array+0x3c>)
 800b072:	1ba4      	subs	r4, r4, r6
 800b074:	10a4      	asrs	r4, r4, #2
 800b076:	2500      	movs	r5, #0
 800b078:	42a5      	cmp	r5, r4
 800b07a:	d109      	bne.n	800b090 <__libc_init_array+0x24>
 800b07c:	4e0b      	ldr	r6, [pc, #44]	; (800b0ac <__libc_init_array+0x40>)
 800b07e:	4c0c      	ldr	r4, [pc, #48]	; (800b0b0 <__libc_init_array+0x44>)
 800b080:	f000 f82c 	bl	800b0dc <_init>
 800b084:	1ba4      	subs	r4, r4, r6
 800b086:	10a4      	asrs	r4, r4, #2
 800b088:	2500      	movs	r5, #0
 800b08a:	42a5      	cmp	r5, r4
 800b08c:	d105      	bne.n	800b09a <__libc_init_array+0x2e>
 800b08e:	bd70      	pop	{r4, r5, r6, pc}
 800b090:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b094:	4798      	blx	r3
 800b096:	3501      	adds	r5, #1
 800b098:	e7ee      	b.n	800b078 <__libc_init_array+0xc>
 800b09a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b09e:	4798      	blx	r3
 800b0a0:	3501      	adds	r5, #1
 800b0a2:	e7f2      	b.n	800b08a <__libc_init_array+0x1e>
 800b0a4:	0800c7b8 	.word	0x0800c7b8
 800b0a8:	0800c7b8 	.word	0x0800c7b8
 800b0ac:	0800c7b8 	.word	0x0800c7b8
 800b0b0:	0800c7bc 	.word	0x0800c7bc

0800b0b4 <memcpy>:
 800b0b4:	b510      	push	{r4, lr}
 800b0b6:	1e43      	subs	r3, r0, #1
 800b0b8:	440a      	add	r2, r1
 800b0ba:	4291      	cmp	r1, r2
 800b0bc:	d100      	bne.n	800b0c0 <memcpy+0xc>
 800b0be:	bd10      	pop	{r4, pc}
 800b0c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0c8:	e7f7      	b.n	800b0ba <memcpy+0x6>

0800b0ca <memset>:
 800b0ca:	4402      	add	r2, r0
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d100      	bne.n	800b0d4 <memset+0xa>
 800b0d2:	4770      	bx	lr
 800b0d4:	f803 1b01 	strb.w	r1, [r3], #1
 800b0d8:	e7f9      	b.n	800b0ce <memset+0x4>
	...

0800b0dc <_init>:
 800b0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0de:	bf00      	nop
 800b0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0e2:	bc08      	pop	{r3}
 800b0e4:	469e      	mov	lr, r3
 800b0e6:	4770      	bx	lr

0800b0e8 <_fini>:
 800b0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ea:	bf00      	nop
 800b0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ee:	bc08      	pop	{r3}
 800b0f0:	469e      	mov	lr, r3
 800b0f2:	4770      	bx	lr


FW_Feinstaubmessung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b568  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016d4  0800b6f0  0800b6f0  0001b6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdc4  0800cdc4  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdc4  0800cdc4  0001cdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdcc  0800cdcc  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdcc  0800cdcc  0001cdcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdd0  0800cdd0  0001cdd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800cdd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000054  0800ce28  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  0800ce28  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d360  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032b9  00000000  00000000  0003d3e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001640  00000000  00000000  000406a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001500  00000000  00000000  00041ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002875a  00000000  00000000  000431e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013575  00000000  00000000  0006b93a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f67b0  00000000  00000000  0007eeaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017565f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d94  00000000  00000000  001756dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000054 	.word	0x20000054
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b6d8 	.word	0x0800b6d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000058 	.word	0x20000058
 80001c4:	0800b6d8 	.word	0x0800b6d8

080001c8 <__aeabi_ldivmod>:
 80001c8:	b97b      	cbnz	r3, 80001ea <__aeabi_ldivmod+0x22>
 80001ca:	b972      	cbnz	r2, 80001ea <__aeabi_ldivmod+0x22>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bfbe      	ittt	lt
 80001d0:	2000      	movlt	r0, #0
 80001d2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001d6:	e006      	blt.n	80001e6 <__aeabi_ldivmod+0x1e>
 80001d8:	bf08      	it	eq
 80001da:	2800      	cmpeq	r0, #0
 80001dc:	bf1c      	itt	ne
 80001de:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001e2:	f04f 30ff 	movne.w	r0, #4294967295
 80001e6:	f000 b9bd 	b.w	8000564 <__aeabi_idiv0>
 80001ea:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f2:	2900      	cmp	r1, #0
 80001f4:	db09      	blt.n	800020a <__aeabi_ldivmod+0x42>
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db1a      	blt.n	8000230 <__aeabi_ldivmod+0x68>
 80001fa:	f000 f84d 	bl	8000298 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4770      	bx	lr
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	db1b      	blt.n	800024c <__aeabi_ldivmod+0x84>
 8000214:	f000 f840 	bl	8000298 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4240      	negs	r0, r0
 8000224:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000228:	4252      	negs	r2, r2
 800022a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800022e:	4770      	bx	lr
 8000230:	4252      	negs	r2, r2
 8000232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000236:	f000 f82f 	bl	8000298 <__udivmoddi4>
 800023a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000242:	b004      	add	sp, #16
 8000244:	4240      	negs	r0, r0
 8000246:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024a:	4770      	bx	lr
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	f000 f821 	bl	8000298 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4252      	negs	r2, r2
 8000262:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000266:	4770      	bx	lr

08000268 <__aeabi_uldivmod>:
 8000268:	b953      	cbnz	r3, 8000280 <__aeabi_uldivmod+0x18>
 800026a:	b94a      	cbnz	r2, 8000280 <__aeabi_uldivmod+0x18>
 800026c:	2900      	cmp	r1, #0
 800026e:	bf08      	it	eq
 8000270:	2800      	cmpeq	r0, #0
 8000272:	bf1c      	itt	ne
 8000274:	f04f 31ff 	movne.w	r1, #4294967295
 8000278:	f04f 30ff 	movne.w	r0, #4294967295
 800027c:	f000 b972 	b.w	8000564 <__aeabi_idiv0>
 8000280:	f1ad 0c08 	sub.w	ip, sp, #8
 8000284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000294:	b004      	add	sp, #16
 8000296:	4770      	bx	lr

08000298 <__udivmoddi4>:
 8000298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800029c:	9e08      	ldr	r6, [sp, #32]
 800029e:	4604      	mov	r4, r0
 80002a0:	4688      	mov	r8, r1
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d14b      	bne.n	800033e <__udivmoddi4+0xa6>
 80002a6:	428a      	cmp	r2, r1
 80002a8:	4615      	mov	r5, r2
 80002aa:	d967      	bls.n	800037c <__udivmoddi4+0xe4>
 80002ac:	fab2 f282 	clz	r2, r2
 80002b0:	b14a      	cbz	r2, 80002c6 <__udivmoddi4+0x2e>
 80002b2:	f1c2 0720 	rsb	r7, r2, #32
 80002b6:	fa01 f302 	lsl.w	r3, r1, r2
 80002ba:	fa20 f707 	lsr.w	r7, r0, r7
 80002be:	4095      	lsls	r5, r2
 80002c0:	ea47 0803 	orr.w	r8, r7, r3
 80002c4:	4094      	lsls	r4, r2
 80002c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002ca:	0c23      	lsrs	r3, r4, #16
 80002cc:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d0:	fa1f fc85 	uxth.w	ip, r5
 80002d4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002dc:	fb07 f10c 	mul.w	r1, r7, ip
 80002e0:	4299      	cmp	r1, r3
 80002e2:	d909      	bls.n	80002f8 <__udivmoddi4+0x60>
 80002e4:	18eb      	adds	r3, r5, r3
 80002e6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ea:	f080 811b 	bcs.w	8000524 <__udivmoddi4+0x28c>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 8118 	bls.w	8000524 <__udivmoddi4+0x28c>
 80002f4:	3f02      	subs	r7, #2
 80002f6:	442b      	add	r3, r5
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000300:	fb0e 3310 	mls	r3, lr, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 fc0c 	mul.w	ip, r0, ip
 800030c:	45a4      	cmp	ip, r4
 800030e:	d909      	bls.n	8000324 <__udivmoddi4+0x8c>
 8000310:	192c      	adds	r4, r5, r4
 8000312:	f100 33ff 	add.w	r3, r0, #4294967295
 8000316:	f080 8107 	bcs.w	8000528 <__udivmoddi4+0x290>
 800031a:	45a4      	cmp	ip, r4
 800031c:	f240 8104 	bls.w	8000528 <__udivmoddi4+0x290>
 8000320:	3802      	subs	r0, #2
 8000322:	442c      	add	r4, r5
 8000324:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000328:	eba4 040c 	sub.w	r4, r4, ip
 800032c:	2700      	movs	r7, #0
 800032e:	b11e      	cbz	r6, 8000338 <__udivmoddi4+0xa0>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c6 4300 	strd	r4, r3, [r6]
 8000338:	4639      	mov	r1, r7
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xbe>
 8000342:	2e00      	cmp	r6, #0
 8000344:	f000 80eb 	beq.w	800051e <__udivmoddi4+0x286>
 8000348:	2700      	movs	r7, #0
 800034a:	e9c6 0100 	strd	r0, r1, [r6]
 800034e:	4638      	mov	r0, r7
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f783 	clz	r7, r3
 800035a:	2f00      	cmp	r7, #0
 800035c:	d147      	bne.n	80003ee <__udivmoddi4+0x156>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd0>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80fa 	bhi.w	800055c <__udivmoddi4+0x2c4>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4698      	mov	r8, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa0>
 8000376:	e9c6 4800 	strd	r4, r8, [r6]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa0>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xe8>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 808f 	bne.w	80004a8 <__udivmoddi4+0x210>
 800038a:	1b49      	subs	r1, r1, r5
 800038c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000390:	fa1f f885 	uxth.w	r8, r5
 8000394:	2701      	movs	r7, #1
 8000396:	fbb1 fcfe 	udiv	ip, r1, lr
 800039a:	0c23      	lsrs	r3, r4, #16
 800039c:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a4:	fb08 f10c 	mul.w	r1, r8, ip
 80003a8:	4299      	cmp	r1, r3
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x124>
 80003ac:	18eb      	adds	r3, r5, r3
 80003ae:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x122>
 80003b4:	4299      	cmp	r1, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2bc>
 80003ba:	4684      	mov	ip, r0
 80003bc:	1a59      	subs	r1, r3, r1
 80003be:	b2a3      	uxth	r3, r4
 80003c0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c4:	fb0e 1410 	mls	r4, lr, r0, r1
 80003c8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003cc:	fb08 f800 	mul.w	r8, r8, r0
 80003d0:	45a0      	cmp	r8, r4
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x14c>
 80003d4:	192c      	adds	r4, r5, r4
 80003d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x14a>
 80003dc:	45a0      	cmp	r8, r4
 80003de:	f200 80b6 	bhi.w	800054e <__udivmoddi4+0x2b6>
 80003e2:	4618      	mov	r0, r3
 80003e4:	eba4 0408 	sub.w	r4, r4, r8
 80003e8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003ec:	e79f      	b.n	800032e <__udivmoddi4+0x96>
 80003ee:	f1c7 0c20 	rsb	ip, r7, #32
 80003f2:	40bb      	lsls	r3, r7
 80003f4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003f8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003fc:	fa01 f407 	lsl.w	r4, r1, r7
 8000400:	fa20 f50c 	lsr.w	r5, r0, ip
 8000404:	fa21 f30c 	lsr.w	r3, r1, ip
 8000408:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800040c:	4325      	orrs	r5, r4
 800040e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000412:	0c2c      	lsrs	r4, r5, #16
 8000414:	fb08 3319 	mls	r3, r8, r9, r3
 8000418:	fa1f fa8e 	uxth.w	sl, lr
 800041c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000420:	fb09 f40a 	mul.w	r4, r9, sl
 8000424:	429c      	cmp	r4, r3
 8000426:	fa02 f207 	lsl.w	r2, r2, r7
 800042a:	fa00 f107 	lsl.w	r1, r0, r7
 800042e:	d90b      	bls.n	8000448 <__udivmoddi4+0x1b0>
 8000430:	eb1e 0303 	adds.w	r3, lr, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	f080 8087 	bcs.w	800054a <__udivmoddi4+0x2b2>
 800043c:	429c      	cmp	r4, r3
 800043e:	f240 8084 	bls.w	800054a <__udivmoddi4+0x2b2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	4473      	add	r3, lr
 8000448:	1b1b      	subs	r3, r3, r4
 800044a:	b2ad      	uxth	r5, r5
 800044c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000450:	fb08 3310 	mls	r3, r8, r0, r3
 8000454:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000458:	fb00 fa0a 	mul.w	sl, r0, sl
 800045c:	45a2      	cmp	sl, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x1da>
 8000460:	eb1e 0404 	adds.w	r4, lr, r4
 8000464:	f100 33ff 	add.w	r3, r0, #4294967295
 8000468:	d26b      	bcs.n	8000542 <__udivmoddi4+0x2aa>
 800046a:	45a2      	cmp	sl, r4
 800046c:	d969      	bls.n	8000542 <__udivmoddi4+0x2aa>
 800046e:	3802      	subs	r0, #2
 8000470:	4474      	add	r4, lr
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	eba4 040a 	sub.w	r4, r4, sl
 800047e:	454c      	cmp	r4, r9
 8000480:	46c2      	mov	sl, r8
 8000482:	464b      	mov	r3, r9
 8000484:	d354      	bcc.n	8000530 <__udivmoddi4+0x298>
 8000486:	d051      	beq.n	800052c <__udivmoddi4+0x294>
 8000488:	2e00      	cmp	r6, #0
 800048a:	d069      	beq.n	8000560 <__udivmoddi4+0x2c8>
 800048c:	ebb1 050a 	subs.w	r5, r1, sl
 8000490:	eb64 0403 	sbc.w	r4, r4, r3
 8000494:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000498:	40fd      	lsrs	r5, r7
 800049a:	40fc      	lsrs	r4, r7
 800049c:	ea4c 0505 	orr.w	r5, ip, r5
 80004a0:	e9c6 5400 	strd	r5, r4, [r6]
 80004a4:	2700      	movs	r7, #0
 80004a6:	e747      	b.n	8000338 <__udivmoddi4+0xa0>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f703 	lsr.w	r7, r0, r3
 80004b0:	4095      	lsls	r5, r2
 80004b2:	fa01 f002 	lsl.w	r0, r1, r2
 80004b6:	fa21 f303 	lsr.w	r3, r1, r3
 80004ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004be:	4338      	orrs	r0, r7
 80004c0:	0c01      	lsrs	r1, r0, #16
 80004c2:	fbb3 f7fe 	udiv	r7, r3, lr
 80004c6:	fa1f f885 	uxth.w	r8, r5
 80004ca:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d2:	fb07 f308 	mul.w	r3, r7, r8
 80004d6:	428b      	cmp	r3, r1
 80004d8:	fa04 f402 	lsl.w	r4, r4, r2
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x256>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004e4:	d22f      	bcs.n	8000546 <__udivmoddi4+0x2ae>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d92d      	bls.n	8000546 <__udivmoddi4+0x2ae>
 80004ea:	3f02      	subs	r7, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1acb      	subs	r3, r1, r3
 80004f0:	b281      	uxth	r1, r0
 80004f2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fe:	fb00 f308 	mul.w	r3, r0, r8
 8000502:	428b      	cmp	r3, r1
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x27e>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f100 3cff 	add.w	ip, r0, #4294967295
 800050c:	d217      	bcs.n	800053e <__udivmoddi4+0x2a6>
 800050e:	428b      	cmp	r3, r1
 8000510:	d915      	bls.n	800053e <__udivmoddi4+0x2a6>
 8000512:	3802      	subs	r0, #2
 8000514:	4429      	add	r1, r5
 8000516:	1ac9      	subs	r1, r1, r3
 8000518:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800051c:	e73b      	b.n	8000396 <__udivmoddi4+0xfe>
 800051e:	4637      	mov	r7, r6
 8000520:	4630      	mov	r0, r6
 8000522:	e709      	b.n	8000338 <__udivmoddi4+0xa0>
 8000524:	4607      	mov	r7, r0
 8000526:	e6e7      	b.n	80002f8 <__udivmoddi4+0x60>
 8000528:	4618      	mov	r0, r3
 800052a:	e6fb      	b.n	8000324 <__udivmoddi4+0x8c>
 800052c:	4541      	cmp	r1, r8
 800052e:	d2ab      	bcs.n	8000488 <__udivmoddi4+0x1f0>
 8000530:	ebb8 0a02 	subs.w	sl, r8, r2
 8000534:	eb69 020e 	sbc.w	r2, r9, lr
 8000538:	3801      	subs	r0, #1
 800053a:	4613      	mov	r3, r2
 800053c:	e7a4      	b.n	8000488 <__udivmoddi4+0x1f0>
 800053e:	4660      	mov	r0, ip
 8000540:	e7e9      	b.n	8000516 <__udivmoddi4+0x27e>
 8000542:	4618      	mov	r0, r3
 8000544:	e795      	b.n	8000472 <__udivmoddi4+0x1da>
 8000546:	4667      	mov	r7, ip
 8000548:	e7d1      	b.n	80004ee <__udivmoddi4+0x256>
 800054a:	4681      	mov	r9, r0
 800054c:	e77c      	b.n	8000448 <__udivmoddi4+0x1b0>
 800054e:	3802      	subs	r0, #2
 8000550:	442c      	add	r4, r5
 8000552:	e747      	b.n	80003e4 <__udivmoddi4+0x14c>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	442b      	add	r3, r5
 800055a:	e72f      	b.n	80003bc <__udivmoddi4+0x124>
 800055c:	4638      	mov	r0, r7
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xda>
 8000560:	4637      	mov	r7, r6
 8000562:	e6e9      	b.n	8000338 <__udivmoddi4+0xa0>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <aesroundkeys>:
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[11*16/sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	e021      	b.n	80005b8 <aesroundkeys+0x50>
        AESKEY[i] = swapmsbf(AESKEY[i]);
 8000574:	4a37      	ldr	r2, [pc, #220]	; (8000654 <aesroundkeys+0xec>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800057c:	061a      	lsls	r2, r3, #24
 800057e:	4935      	ldr	r1, [pc, #212]	; (8000654 <aesroundkeys+0xec>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000586:	021b      	lsls	r3, r3, #8
 8000588:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800058c:	431a      	orrs	r2, r3
 800058e:	4931      	ldr	r1, [pc, #196]	; (8000654 <aesroundkeys+0xec>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000596:	0a1b      	lsrs	r3, r3, #8
 8000598:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800059c:	431a      	orrs	r2, r3
 800059e:	492d      	ldr	r1, [pc, #180]	; (8000654 <aesroundkeys+0xec>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005a6:	0e1b      	lsrs	r3, r3, #24
 80005a8:	431a      	orrs	r2, r3
 80005aa:	492a      	ldr	r1, [pc, #168]	; (8000654 <aesroundkeys+0xec>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i=0; i<4; i++) {
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	3301      	adds	r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	ddda      	ble.n	8000574 <aesroundkeys+0xc>
    }
    
    b = AESKEY[3];
 80005be:	4b25      	ldr	r3, [pc, #148]	; (8000654 <aesroundkeys+0xec>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	603b      	str	r3, [r7, #0]
    for( ; i<44; i++ ) {
 80005c4:	e03c      	b.n	8000640 <aesroundkeys+0xd8>
        if( i%4==0 ) {
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f003 0303 	and.w	r3, r3, #3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d127      	bne.n	8000620 <aesroundkeys+0xb8>
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = (AES_S[u1(b >> 16)] << 24) ^
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	0c1b      	lsrs	r3, r3, #16
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <aesroundkeys+0xf0>)
 80005da:	5c9b      	ldrb	r3, [r3, r2]
 80005dc:	061a      	lsls	r2, r3, #24
                (AES_S[u1(b >>  8)] << 16) ^
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	4619      	mov	r1, r3
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <aesroundkeys+0xf0>)
 80005e8:	5c5b      	ldrb	r3, [r3, r1]
 80005ea:	041b      	lsls	r3, r3, #16
            b = (AES_S[u1(b >> 16)] << 24) ^
 80005ec:	405a      	eors	r2, r3
                (AES_S[u1(b)      ] <<  8) ^
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <aesroundkeys+0xf0>)
 80005f6:	5c5b      	ldrb	r3, [r3, r1]
 80005f8:	021b      	lsls	r3, r3, #8
                (AES_S[u1(b >>  8)] << 16) ^
 80005fa:	4053      	eors	r3, r2
                (AES_S[   b >> 24 ]      ) ^
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	0e12      	lsrs	r2, r2, #24
 8000600:	4915      	ldr	r1, [pc, #84]	; (8000658 <aesroundkeys+0xf0>)
 8000602:	5c8a      	ldrb	r2, [r1, r2]
                (AES_S[u1(b)      ] <<  8) ^
 8000604:	4053      	eors	r3, r2
 8000606:	461a      	mov	r2, r3
                 AES_RCON[(i-4)/4];
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b04      	subs	r3, #4
 800060c:	2b00      	cmp	r3, #0
 800060e:	da00      	bge.n	8000612 <aesroundkeys+0xaa>
 8000610:	3303      	adds	r3, #3
 8000612:	109b      	asrs	r3, r3, #2
 8000614:	4619      	mov	r1, r3
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <aesroundkeys+0xf4>)
 8000618:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            b = (AES_S[u1(b >> 16)] << 24) ^
 800061c:	4053      	eors	r3, r2
 800061e:	603b      	str	r3, [r7, #0]
        }
        AESKEY[i] = b ^= AESKEY[i-4];
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3b04      	subs	r3, #4
 8000624:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <aesroundkeys+0xec>)
 8000626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	4053      	eors	r3, r2
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4908      	ldr	r1, [pc, #32]	; (8000654 <aesroundkeys+0xec>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	683a      	ldr	r2, [r7, #0]
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( ; i<44; i++ ) {
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3301      	adds	r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b2b      	cmp	r3, #43	; 0x2b
 8000644:	ddbf      	ble.n	80005c6 <aesroundkeys+0x5e>
    }
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	200000a0 	.word	0x200000a0
 8000658:	0800bbb0 	.word	0x0800bbb0
 800065c:	0800bb88 	.word	0x0800bb88

08000660 <os_aes>:

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	; 0x30
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4613      	mov	r3, r2
 800066e:	80bb      	strh	r3, [r7, #4]
        
        aesroundkeys();
 8000670:	f7ff ff7a 	bl	8000568 <aesroundkeys>

        if( mode & AES_MICNOAUX ) {
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f003 0308 	and.w	r3, r3, #8
 800067a:	2b00      	cmp	r3, #0
 800067c:	d010      	beq.n	80006a0 <os_aes+0x40>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 800067e:	4b5a      	ldr	r3, [pc, #360]	; (80007e8 <os_aes+0x188>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	4b58      	ldr	r3, [pc, #352]	; (80007e8 <os_aes+0x188>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	4a57      	ldr	r2, [pc, #348]	; (80007e8 <os_aes+0x188>)
 800068a:	6093      	str	r3, [r2, #8]
 800068c:	4b56      	ldr	r3, [pc, #344]	; (80007e8 <os_aes+0x188>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a55      	ldr	r2, [pc, #340]	; (80007e8 <os_aes+0x188>)
 8000692:	6053      	str	r3, [r2, #4]
 8000694:	4b54      	ldr	r3, [pc, #336]	; (80007e8 <os_aes+0x188>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4a53      	ldr	r2, [pc, #332]	; (80007e8 <os_aes+0x188>)
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	f000 bca3 	b.w	8000fe6 <os_aes+0x986>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
 80006a0:	4b51      	ldr	r3, [pc, #324]	; (80007e8 <os_aes+0x188>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	061a      	lsls	r2, r3, #24
 80006a6:	4b50      	ldr	r3, [pc, #320]	; (80007e8 <os_aes+0x188>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80006b0:	431a      	orrs	r2, r3
 80006b2:	4b4d      	ldr	r3, [pc, #308]	; (80007e8 <os_aes+0x188>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	0a1b      	lsrs	r3, r3, #8
 80006b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80006bc:	431a      	orrs	r2, r3
 80006be:	4b4a      	ldr	r3, [pc, #296]	; (80007e8 <os_aes+0x188>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	0e1b      	lsrs	r3, r3, #24
 80006c4:	4313      	orrs	r3, r2
 80006c6:	4a48      	ldr	r2, [pc, #288]	; (80007e8 <os_aes+0x188>)
 80006c8:	6013      	str	r3, [r2, #0]
            AESAUX[1] = swapmsbf(AESAUX[1]);
 80006ca:	4b47      	ldr	r3, [pc, #284]	; (80007e8 <os_aes+0x188>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	061a      	lsls	r2, r3, #24
 80006d0:	4b45      	ldr	r3, [pc, #276]	; (80007e8 <os_aes+0x188>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80006da:	431a      	orrs	r2, r3
 80006dc:	4b42      	ldr	r3, [pc, #264]	; (80007e8 <os_aes+0x188>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80006e6:	431a      	orrs	r2, r3
 80006e8:	4b3f      	ldr	r3, [pc, #252]	; (80007e8 <os_aes+0x188>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	0e1b      	lsrs	r3, r3, #24
 80006ee:	4313      	orrs	r3, r2
 80006f0:	4a3d      	ldr	r2, [pc, #244]	; (80007e8 <os_aes+0x188>)
 80006f2:	6053      	str	r3, [r2, #4]
            AESAUX[2] = swapmsbf(AESAUX[2]);
 80006f4:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <os_aes+0x188>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	061a      	lsls	r2, r3, #24
 80006fa:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <os_aes+0x188>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000704:	431a      	orrs	r2, r3
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <os_aes+0x188>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	0a1b      	lsrs	r3, r3, #8
 800070c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000710:	431a      	orrs	r2, r3
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <os_aes+0x188>)
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	0e1b      	lsrs	r3, r3, #24
 8000718:	4313      	orrs	r3, r2
 800071a:	4a33      	ldr	r2, [pc, #204]	; (80007e8 <os_aes+0x188>)
 800071c:	6093      	str	r3, [r2, #8]
            AESAUX[3] = swapmsbf(AESAUX[3]);
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <os_aes+0x188>)
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	061a      	lsls	r2, r3, #24
 8000724:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <os_aes+0x188>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800072e:	431a      	orrs	r2, r3
 8000730:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <os_aes+0x188>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800073a:	431a      	orrs	r2, r3
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <os_aes+0x188>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	0e1b      	lsrs	r3, r3, #24
 8000742:	4313      	orrs	r3, r2
 8000744:	4a28      	ldr	r2, [pc, #160]	; (80007e8 <os_aes+0x188>)
 8000746:	60d3      	str	r3, [r2, #12]
        }

        while( (signed char)len > 0 ) {
 8000748:	f000 bc4d 	b.w	8000fe6 <os_aes+0x986>
            u4_t a0, a1, a2, a3;
            u4_t t0, t1, t2, t3;
            u4_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	2b00      	cmp	r3, #0
 8000754:	d109      	bne.n	800076a <os_aes+0x10a>
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f003 0302 	and.w	r3, r3, #2
 800075c:	2b00      	cmp	r3, #0
 800075e:	d011      	beq.n	8000784 <os_aes+0x124>
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f003 0308 	and.w	r3, r3, #8
 8000766:	2b00      	cmp	r3, #0
 8000768:	d10c      	bne.n	8000784 <os_aes+0x124>
                a0 = AESAUX[0];
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <os_aes+0x188>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
                a1 = AESAUX[1];
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <os_aes+0x188>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
                a2 = AESAUX[2];
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <os_aes+0x188>)
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
                a3 = AESAUX[3];
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <os_aes+0x188>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	e062      	b.n	800084a <os_aes+0x1ea>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	2b00      	cmp	r3, #0
 800078c:	d016      	beq.n	80007bc <os_aes+0x15c>
 800078e:	88bb      	ldrh	r3, [r7, #4]
 8000790:	2b10      	cmp	r3, #16
 8000792:	d813      	bhi.n	80007bc <os_aes+0x15c>
                a0 = a1 = a2 = a3 = 0; // load null block
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
 800079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
 80007a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 80007a4:	88bb      	ldrh	r3, [r7, #4]
 80007a6:	2b10      	cmp	r3, #16
 80007a8:	d101      	bne.n	80007ae <os_aes+0x14e>
 80007aa:	2210      	movs	r2, #16
 80007ac:	e000      	b.n	80007b0 <os_aes+0x150>
 80007ae:	2220      	movs	r2, #32
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	e046      	b.n	800084a <os_aes+0x1ea>
            } else
        LOADDATA: { // load data block (partially)
 80007bc:	bf00      	nop
                for(t0=0; t0<16; t0++) {
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
 80007c2:	e026      	b.n	8000812 <os_aes+0x1b2>
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	021a      	lsls	r2, r3, #8
 80007c8:	88bb      	ldrh	r3, [r7, #4]
 80007ca:	69f9      	ldr	r1, [r7, #28]
 80007cc:	4299      	cmp	r1, r3
 80007ce:	d204      	bcs.n	80007da <os_aes+0x17a>
 80007d0:	6839      	ldr	r1, [r7, #0]
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	440b      	add	r3, r1
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	e009      	b.n	80007ee <os_aes+0x18e>
 80007da:	88bb      	ldrh	r3, [r7, #4]
 80007dc:	69f9      	ldr	r1, [r7, #28]
 80007de:	4299      	cmp	r1, r3
 80007e0:	d104      	bne.n	80007ec <os_aes+0x18c>
 80007e2:	2380      	movs	r3, #128	; 0x80
 80007e4:	e003      	b.n	80007ee <os_aes+0x18e>
 80007e6:	bf00      	nop
 80007e8:	20000150 	.word	0x20000150
 80007ec:	2300      	movs	r3, #0
 80007ee:	4313      	orrs	r3, r2
 80007f0:	61bb      	str	r3, [r7, #24]
                    if((t0&3)==3) {
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	f003 0303 	and.w	r3, r3, #3
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d107      	bne.n	800080c <os_aes+0x1ac>
                        a0 = a1;
 80007fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                        a1 = a2;
 8000800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
                        a2 = a3;
 8000804:	6a3b      	ldr	r3, [r7, #32]
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
                        a3 = t1;
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	623b      	str	r3, [r7, #32]
                for(t0=0; t0<16; t0++) {
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	3301      	adds	r3, #1
 8000810:	61fb      	str	r3, [r7, #28]
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d9d5      	bls.n	80007c4 <os_aes+0x164>
                    }
                } 
                if( mode & AES_MIC ) {
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	2b00      	cmp	r3, #0
 8000820:	d013      	beq.n	800084a <os_aes+0x1ea>
                    a0 ^= AESAUX[0];
 8000822:	4ba0      	ldr	r3, [pc, #640]	; (8000aa4 <os_aes+0x444>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000828:	4053      	eors	r3, r2
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    a1 ^= AESAUX[1];
 800082c:	4b9d      	ldr	r3, [pc, #628]	; (8000aa4 <os_aes+0x444>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000832:	4053      	eors	r3, r2
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
                    a2 ^= AESAUX[2];
 8000836:	4b9b      	ldr	r3, [pc, #620]	; (8000aa4 <os_aes+0x444>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	4053      	eors	r3, r2
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
                    a3 ^= AESAUX[3];
 8000840:	4b98      	ldr	r3, [pc, #608]	; (8000aa4 <os_aes+0x444>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	6a3a      	ldr	r2, [r7, #32]
 8000846:	4053      	eors	r3, r2
 8000848:	623b      	str	r3, [r7, #32]
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
 800084a:	4b97      	ldr	r3, [pc, #604]	; (8000aa8 <os_aes+0x448>)
 800084c:	617b      	str	r3, [r7, #20]
            ke = ki + 8*4;
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	3380      	adds	r3, #128	; 0x80
 8000852:	613b      	str	r3, [r7, #16]
            a0 ^= ki[0];
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800085a:	4053      	eors	r3, r2
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
            a1 ^= ki[1];
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	3304      	adds	r3, #4
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000866:	4053      	eors	r3, r2
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
            a2 ^= ki[2];
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	3308      	adds	r3, #8
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000872:	4053      	eors	r3, r2
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
            a3 ^= ki[3];
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	330c      	adds	r3, #12
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	6a3a      	ldr	r2, [r7, #32]
 800087e:	4053      	eors	r3, r2
 8000880:	623b      	str	r3, [r7, #32]
            do {
                AES_key4 (t1,t2,t3,t0,4);
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	691b      	ldr	r3, [r3, #16]
 8000898:	61fb      	str	r3, [r7, #28]
                AES_expr4(t1,t2,t3,t0,a0);
 800089a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800089c:	b2db      	uxtb	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	4b82      	ldr	r3, [pc, #520]	; (8000aac <os_aes+0x44c>)
 80008a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4053      	eors	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ae:	0a1b      	lsrs	r3, r3, #8
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b7e      	ldr	r3, [pc, #504]	; (8000ab0 <os_aes+0x450>)
 80008b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	4053      	eors	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c2:	0c1b      	lsrs	r3, r3, #16
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b7a      	ldr	r3, [pc, #488]	; (8000ab4 <os_aes+0x454>)
 80008ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	4053      	eors	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d6:	0e1b      	lsrs	r3, r3, #24
 80008d8:	4a77      	ldr	r2, [pc, #476]	; (8000ab8 <os_aes+0x458>)
 80008da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008de:	69fa      	ldr	r2, [r7, #28]
 80008e0:	4053      	eors	r3, r2
 80008e2:	61fb      	str	r3, [r7, #28]
                AES_expr4(t2,t3,t0,t1,a1);
 80008e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b70      	ldr	r3, [pc, #448]	; (8000aac <os_aes+0x44c>)
 80008ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	4053      	eors	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b6c      	ldr	r3, [pc, #432]	; (8000ab0 <os_aes+0x450>)
 8000900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	4053      	eors	r3, r2
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090c:	0c1b      	lsrs	r3, r3, #16
 800090e:	b2db      	uxtb	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	4b68      	ldr	r3, [pc, #416]	; (8000ab4 <os_aes+0x454>)
 8000914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000918:	69fa      	ldr	r2, [r7, #28]
 800091a:	4053      	eors	r3, r2
 800091c:	61fb      	str	r3, [r7, #28]
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	0e1b      	lsrs	r3, r3, #24
 8000922:	4a65      	ldr	r2, [pc, #404]	; (8000ab8 <os_aes+0x458>)
 8000924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4053      	eors	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
                AES_expr4(t3,t0,t1,t2,a2);
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	b2db      	uxtb	r3, r3
 8000932:	461a      	mov	r2, r3
 8000934:	4b5d      	ldr	r3, [pc, #372]	; (8000aac <os_aes+0x44c>)
 8000936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	4053      	eors	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	0a1b      	lsrs	r3, r3, #8
 8000944:	b2db      	uxtb	r3, r3
 8000946:	461a      	mov	r2, r3
 8000948:	4b59      	ldr	r3, [pc, #356]	; (8000ab0 <os_aes+0x450>)
 800094a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	4053      	eors	r3, r2
 8000952:	61fb      	str	r3, [r7, #28]
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	0c1b      	lsrs	r3, r3, #16
 8000958:	b2db      	uxtb	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	4b55      	ldr	r3, [pc, #340]	; (8000ab4 <os_aes+0x454>)
 800095e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4053      	eors	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	0e1b      	lsrs	r3, r3, #24
 800096c:	4a52      	ldr	r2, [pc, #328]	; (8000ab8 <os_aes+0x458>)
 800096e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	4053      	eors	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
                AES_expr4(t0,t1,t2,t3,a3);
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	461a      	mov	r2, r3
 800097e:	4b4b      	ldr	r3, [pc, #300]	; (8000aac <os_aes+0x44c>)
 8000980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000984:	69fa      	ldr	r2, [r7, #28]
 8000986:	4053      	eors	r3, r2
 8000988:	61fb      	str	r3, [r7, #28]
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	b2db      	uxtb	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	4b47      	ldr	r3, [pc, #284]	; (8000ab0 <os_aes+0x450>)
 8000994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4053      	eors	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	0c1b      	lsrs	r3, r3, #16
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b43      	ldr	r3, [pc, #268]	; (8000ab4 <os_aes+0x454>)
 80009a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	4053      	eors	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	0e1b      	lsrs	r3, r3, #24
 80009b6:	4a40      	ldr	r2, [pc, #256]	; (8000ab8 <os_aes+0x458>)
 80009b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009bc:	68ba      	ldr	r2, [r7, #8]
 80009be:	4053      	eors	r3, r2
 80009c0:	60bb      	str	r3, [r7, #8]

                AES_key4 (a1,a2,a3,a0,8);
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d2:	623b      	str	r3, [r7, #32]
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	6a1b      	ldr	r3, [r3, #32]
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                AES_expr4(a1,a2,a3,a0,t0);
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	461a      	mov	r2, r3
 80009e0:	4b32      	ldr	r3, [pc, #200]	; (8000aac <os_aes+0x44c>)
 80009e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009e8:	4053      	eors	r3, r2
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	0a1b      	lsrs	r3, r3, #8
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <os_aes+0x450>)
 80009f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009fc:	4053      	eors	r3, r2
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	0c1b      	lsrs	r3, r3, #16
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <os_aes+0x454>)
 8000a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0e:	6a3a      	ldr	r2, [r7, #32]
 8000a10:	4053      	eors	r3, r2
 8000a12:	623b      	str	r3, [r7, #32]
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	0e1b      	lsrs	r3, r3, #24
 8000a18:	4a27      	ldr	r2, [pc, #156]	; (8000ab8 <os_aes+0x458>)
 8000a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a20:	4053      	eors	r3, r2
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
                AES_expr4(a2,a3,a0,a1,t1);
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <os_aes+0x44c>)
 8000a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a32:	4053      	eors	r3, r2
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <os_aes+0x450>)
 8000a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a44:	6a3a      	ldr	r2, [r7, #32]
 8000a46:	4053      	eors	r3, r2
 8000a48:	623b      	str	r3, [r7, #32]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	0c1b      	lsrs	r3, r3, #16
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <os_aes+0x454>)
 8000a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a5a:	4053      	eors	r3, r2
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	0e1b      	lsrs	r3, r3, #24
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <os_aes+0x458>)
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a6a:	4053      	eors	r3, r2
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
                AES_expr4(a3,a0,a1,a2,t2);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <os_aes+0x44c>)
 8000a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a7a:	6a3a      	ldr	r2, [r7, #32]
 8000a7c:	4053      	eors	r3, r2
 8000a7e:	623b      	str	r3, [r7, #32]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <os_aes+0x450>)
 8000a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a90:	4053      	eors	r3, r2
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <os_aes+0x454>)
 8000a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa2:	e00b      	b.n	8000abc <os_aes+0x45c>
 8000aa4:	20000150 	.word	0x20000150
 8000aa8:	200000a0 	.word	0x200000a0
 8000aac:	0800c8b0 	.word	0x0800c8b0
 8000ab0:	0800c4b0 	.word	0x0800c4b0
 8000ab4:	0800c0b0 	.word	0x0800c0b0
 8000ab8:	0800bcb0 	.word	0x0800bcb0
 8000abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000abe:	4053      	eors	r3, r2
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	0e1b      	lsrs	r3, r3, #24
 8000ac6:	4aa2      	ldr	r2, [pc, #648]	; (8000d50 <os_aes+0x6f0>)
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ace:	4053      	eors	r3, r2
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
                AES_expr4(a0,a1,a2,a3,t3);
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b9e      	ldr	r3, [pc, #632]	; (8000d54 <os_aes+0x6f4>)
 8000ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ae0:	4053      	eors	r3, r2
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b9a      	ldr	r3, [pc, #616]	; (8000d58 <os_aes+0x6f8>)
 8000aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000af4:	4053      	eors	r3, r2
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	0c1b      	lsrs	r3, r3, #16
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b96      	ldr	r3, [pc, #600]	; (8000d5c <os_aes+0x6fc>)
 8000b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b08:	4053      	eors	r3, r2
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	0e1b      	lsrs	r3, r3, #24
 8000b10:	4a8f      	ldr	r2, [pc, #572]	; (8000d50 <os_aes+0x6f0>)
 8000b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b16:	6a3a      	ldr	r2, [r7, #32]
 8000b18:	4053      	eors	r3, r2
 8000b1a:	623b      	str	r3, [r7, #32]
            } while( (ki+=8) < ke );
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3320      	adds	r3, #32
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	f4ff aeab 	bcc.w	8000882 <os_aes+0x222>

            AES_key4 (t1,t2,t3,t0,4);
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	69db      	ldr	r3, [r3, #28]
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	61fb      	str	r3, [r7, #28]
            AES_expr4(t1,t2,t3,t0,a0);
 8000b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b82      	ldr	r3, [pc, #520]	; (8000d54 <os_aes+0x6f4>)
 8000b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	4053      	eors	r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
 8000b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b7e      	ldr	r3, [pc, #504]	; (8000d58 <os_aes+0x6f8>)
 8000b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	4053      	eors	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	0c1b      	lsrs	r3, r3, #16
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b7a      	ldr	r3, [pc, #488]	; (8000d5c <os_aes+0x6fc>)
 8000b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	4053      	eors	r3, r2
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b80:	0e1b      	lsrs	r3, r3, #24
 8000b82:	4a73      	ldr	r2, [pc, #460]	; (8000d50 <os_aes+0x6f0>)
 8000b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b88:	69fa      	ldr	r2, [r7, #28]
 8000b8a:	4053      	eors	r3, r2
 8000b8c:	61fb      	str	r3, [r7, #28]
            AES_expr4(t2,t3,t0,t1,a1);
 8000b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b6f      	ldr	r3, [pc, #444]	; (8000d54 <os_aes+0x6f4>)
 8000b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	4053      	eors	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba2:	0a1b      	lsrs	r3, r3, #8
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b6b      	ldr	r3, [pc, #428]	; (8000d58 <os_aes+0x6f8>)
 8000baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	4053      	eors	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb6:	0c1b      	lsrs	r3, r3, #16
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b67      	ldr	r3, [pc, #412]	; (8000d5c <os_aes+0x6fc>)
 8000bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	4053      	eors	r3, r2
 8000bc6:	61fb      	str	r3, [r7, #28]
 8000bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bca:	0e1b      	lsrs	r3, r3, #24
 8000bcc:	4a60      	ldr	r2, [pc, #384]	; (8000d50 <os_aes+0x6f0>)
 8000bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4053      	eors	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
            AES_expr4(t3,t0,t1,t2,a2);
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b5d      	ldr	r3, [pc, #372]	; (8000d54 <os_aes+0x6f4>)
 8000be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	4053      	eors	r3, r2
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b59      	ldr	r3, [pc, #356]	; (8000d58 <os_aes+0x6f8>)
 8000bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf8:	69fa      	ldr	r2, [r7, #28]
 8000bfa:	4053      	eors	r3, r2
 8000bfc:	61fb      	str	r3, [r7, #28]
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	0c1b      	lsrs	r3, r3, #16
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b55      	ldr	r3, [pc, #340]	; (8000d5c <os_aes+0x6fc>)
 8000c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4053      	eors	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	0e1b      	lsrs	r3, r3, #24
 8000c16:	4a4e      	ldr	r2, [pc, #312]	; (8000d50 <os_aes+0x6f0>)
 8000c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	4053      	eors	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
            AES_expr4(t0,t1,t2,t3,a3);
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <os_aes+0x6f4>)
 8000c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	4053      	eors	r3, r2
 8000c32:	61fb      	str	r3, [r7, #28]
 8000c34:	6a3b      	ldr	r3, [r7, #32]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b46      	ldr	r3, [pc, #280]	; (8000d58 <os_aes+0x6f8>)
 8000c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4053      	eors	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
 8000c48:	6a3b      	ldr	r3, [r7, #32]
 8000c4a:	0c1b      	lsrs	r3, r3, #16
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b42      	ldr	r3, [pc, #264]	; (8000d5c <os_aes+0x6fc>)
 8000c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	4053      	eors	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	0e1b      	lsrs	r3, r3, #24
 8000c60:	4a3b      	ldr	r2, [pc, #236]	; (8000d50 <os_aes+0x6f0>)
 8000c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	4053      	eors	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]

            AES_expr(a0,t0,t1,t2,t3,8);
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	6a1b      	ldr	r3, [r3, #32]
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	0e1b      	lsrs	r3, r3, #24
 8000c76:	4a3a      	ldr	r2, [pc, #232]	; (8000d60 <os_aes+0x700>)
 8000c78:	5cd3      	ldrb	r3, [r2, r3]
 8000c7a:	061b      	lsls	r3, r3, #24
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c80:	4053      	eors	r3, r2
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <os_aes+0x700>)
 8000c8e:	5c9b      	ldrb	r3, [r3, r2]
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	461a      	mov	r2, r3
 8000c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c96:	4053      	eors	r3, r2
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <os_aes+0x700>)
 8000ca4:	5c9b      	ldrb	r3, [r3, r2]
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	461a      	mov	r2, r3
 8000caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cac:	4053      	eors	r3, r2
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <os_aes+0x700>)
 8000cb8:	5c9b      	ldrb	r3, [r3, r2]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbe:	4053      	eors	r3, r2
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
            AES_expr(a1,t1,t2,t3,t0,9);
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	0e1b      	lsrs	r3, r3, #24
 8000ccc:	4a24      	ldr	r2, [pc, #144]	; (8000d60 <os_aes+0x700>)
 8000cce:	5cd3      	ldrb	r3, [r2, r3]
 8000cd0:	061b      	lsls	r3, r3, #24
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd6:	4053      	eors	r3, r2
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	0c1b      	lsrs	r3, r3, #16
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <os_aes+0x700>)
 8000ce4:	5c9b      	ldrb	r3, [r3, r2]
 8000ce6:	041b      	lsls	r3, r3, #16
 8000ce8:	461a      	mov	r2, r3
 8000cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cec:	4053      	eors	r3, r2
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	0a1b      	lsrs	r3, r3, #8
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <os_aes+0x700>)
 8000cfa:	5c9b      	ldrb	r3, [r3, r2]
 8000cfc:	021b      	lsls	r3, r3, #8
 8000cfe:	461a      	mov	r2, r3
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	4053      	eors	r3, r2
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <os_aes+0x700>)
 8000d0e:	5c9b      	ldrb	r3, [r3, r2]
 8000d10:	461a      	mov	r2, r3
 8000d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d14:	4053      	eors	r3, r2
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
            AES_expr(a2,t2,t3,t0,t1,10);
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	0e1b      	lsrs	r3, r3, #24
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <os_aes+0x700>)
 8000d24:	5cd3      	ldrb	r3, [r2, r3]
 8000d26:	061b      	lsls	r3, r3, #24
 8000d28:	461a      	mov	r2, r3
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	4053      	eors	r3, r2
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	0c1b      	lsrs	r3, r3, #16
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <os_aes+0x700>)
 8000d3a:	5c9b      	ldrb	r3, [r3, r2]
 8000d3c:	041b      	lsls	r3, r3, #16
 8000d3e:	461a      	mov	r2, r3
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	4053      	eors	r3, r2
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	e009      	b.n	8000d64 <os_aes+0x704>
 8000d50:	0800bcb0 	.word	0x0800bcb0
 8000d54:	0800c8b0 	.word	0x0800c8b0
 8000d58:	0800c4b0 	.word	0x0800c4b0
 8000d5c:	0800c0b0 	.word	0x0800c0b0
 8000d60:	0800bbb0 	.word	0x0800bbb0
 8000d64:	4b66      	ldr	r3, [pc, #408]	; (8000f00 <os_aes+0x8a0>)
 8000d66:	5c9b      	ldrb	r3, [r3, r2]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	4053      	eors	r3, r2
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b61      	ldr	r3, [pc, #388]	; (8000f00 <os_aes+0x8a0>)
 8000d7a:	5c9b      	ldrb	r3, [r3, r2]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	4053      	eors	r3, r2
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
            AES_expr(a3,t3,t0,t1,t2,11);
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d88:	623b      	str	r3, [r7, #32]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	0e1b      	lsrs	r3, r3, #24
 8000d8e:	4a5c      	ldr	r2, [pc, #368]	; (8000f00 <os_aes+0x8a0>)
 8000d90:	5cd3      	ldrb	r3, [r2, r3]
 8000d92:	061b      	lsls	r3, r3, #24
 8000d94:	461a      	mov	r2, r3
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	4053      	eors	r3, r2
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	0c1b      	lsrs	r3, r3, #16
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b56      	ldr	r3, [pc, #344]	; (8000f00 <os_aes+0x8a0>)
 8000da6:	5c9b      	ldrb	r3, [r3, r2]
 8000da8:	041b      	lsls	r3, r3, #16
 8000daa:	461a      	mov	r2, r3
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	4053      	eors	r3, r2
 8000db0:	623b      	str	r3, [r7, #32]
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b51      	ldr	r3, [pc, #324]	; (8000f00 <os_aes+0x8a0>)
 8000dbc:	5c9b      	ldrb	r3, [r3, r2]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	6a3b      	ldr	r3, [r7, #32]
 8000dc4:	4053      	eors	r3, r2
 8000dc6:	623b      	str	r3, [r7, #32]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b4c      	ldr	r3, [pc, #304]	; (8000f00 <os_aes+0x8a0>)
 8000dd0:	5c9b      	ldrb	r3, [r3, r2]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
 8000dd6:	4053      	eors	r3, r2
 8000dd8:	623b      	str	r3, [r7, #32]
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d056      	beq.n	8000e92 <os_aes+0x832>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	111b      	asrs	r3, r3, #4
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d041      	beq.n	8000e78 <os_aes+0x818>
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
 8000df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df6:	0fdb      	lsrs	r3, r3, #31
 8000df8:	61fb      	str	r3, [r7, #28]
                        a0 = (a0 << 1) | (a1 >> 31);
 8000dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfc:	005a      	lsls	r2, r3, #1
 8000dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e00:	0fdb      	lsrs	r3, r3, #31
 8000e02:	4313      	orrs	r3, r2
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
                        a1 = (a1 << 1) | (a2 >> 31);
 8000e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e08:	005a      	lsls	r2, r3, #1
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	0fdb      	lsrs	r3, r3, #31
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
                        a2 = (a2 << 1) | (a3 >> 31);
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	005a      	lsls	r2, r3, #1
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	0fdb      	lsrs	r3, r3, #31
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
                        a3 = (a3 << 1);
 8000e1e:	6a3b      	ldr	r3, [r7, #32]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	623b      	str	r3, [r7, #32]
                        if( t0 ) a3 ^= 0x87;
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <os_aes+0x7d2>
 8000e2a:	6a3b      	ldr	r3, [r7, #32]
 8000e2c:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8000e30:	623b      	str	r3, [r7, #32]
                    } while( --t1 );
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	61bb      	str	r3, [r7, #24]
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1da      	bne.n	8000df4 <os_aes+0x794>

                    AESAUX[0] ^= a0;
 8000e3e:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <os_aes+0x8a4>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e44:	4053      	eors	r3, r2
 8000e46:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <os_aes+0x8a4>)
 8000e48:	6013      	str	r3, [r2, #0]
                    AESAUX[1] ^= a1;
 8000e4a:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <os_aes+0x8a4>)
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e50:	4053      	eors	r3, r2
 8000e52:	4a2c      	ldr	r2, [pc, #176]	; (8000f04 <os_aes+0x8a4>)
 8000e54:	6053      	str	r3, [r2, #4]
                    AESAUX[2] ^= a2;
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <os_aes+0x8a4>)
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	4053      	eors	r3, r2
 8000e5e:	4a29      	ldr	r2, [pc, #164]	; (8000f04 <os_aes+0x8a4>)
 8000e60:	6093      	str	r3, [r2, #8]
                    AESAUX[3] ^= a3;
 8000e62:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <os_aes+0x8a4>)
 8000e64:	68da      	ldr	r2, [r3, #12]
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	4053      	eors	r3, r2
 8000e6a:	4a26      	ldr	r2, [pc, #152]	; (8000f04 <os_aes+0x8a4>)
 8000e6c:	60d3      	str	r3, [r2, #12]
                    mode &= ~AES_MICSUB;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e74:	71fb      	strb	r3, [r7, #7]
                    goto LOADDATA;
 8000e76:	e4a2      	b.n	80007be <os_aes+0x15e>
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
 8000e78:	4a22      	ldr	r2, [pc, #136]	; (8000f04 <os_aes+0x8a4>)
 8000e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7c:	6013      	str	r3, [r2, #0]
                    AESAUX[1] = a1;
 8000e7e:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <os_aes+0x8a4>)
 8000e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e82:	6053      	str	r3, [r2, #4]
                    AESAUX[2] = a2;
 8000e84:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <os_aes+0x8a4>)
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	6093      	str	r3, [r2, #8]
                    AESAUX[3] = a3;
 8000e8a:	4a1e      	ldr	r2, [pc, #120]	; (8000f04 <os_aes+0x8a4>)
 8000e8c:	6a3b      	ldr	r3, [r7, #32]
 8000e8e:	60d3      	str	r3, [r2, #12]
 8000e90:	e095      	b.n	8000fbe <os_aes+0x95e>
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d035      	beq.n	8000f08 <os_aes+0x8a8>
                    t0 = (len > 16) ? 16: len;
 8000e9c:	88bb      	ldrh	r3, [r7, #4]
 8000e9e:	2b10      	cmp	r3, #16
 8000ea0:	bf28      	it	cs
 8000ea2:	2310      	movcs	r3, #16
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	61fb      	str	r3, [r7, #28]
                    for(t1=0; t1<t0; t1++) {
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
 8000eac:	e01d      	b.n	8000eea <os_aes+0x88a>
                        buf[t1] ^= (a0>>24);
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	7819      	ldrb	r1, [r3, #0]
 8000eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb8:	0e1b      	lsrs	r3, r3, #24
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	6838      	ldr	r0, [r7, #0]
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	4403      	add	r3, r0
 8000ec2:	404a      	eors	r2, r1
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	701a      	strb	r2, [r3, #0]
                        a0 <<= 8;
 8000ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if((t1&3)==3) {
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d105      	bne.n	8000ee4 <os_aes+0x884>
                            a0 = a1;
 8000ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
                            a1 = a2;
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
                            a2 = a3;
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
                    for(t1=0; t1<t0; t1++) {
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d3dd      	bcc.n	8000eae <os_aes+0x84e>
                        }
                    }
                    // update counter
                    AESAUX[3]++;
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <os_aes+0x8a4>)
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	4a02      	ldr	r2, [pc, #8]	; (8000f04 <os_aes+0x8a4>)
 8000efa:	60d3      	str	r3, [r2, #12]
 8000efc:	e05f      	b.n	8000fbe <os_aes+0x95e>
 8000efe:	bf00      	nop
 8000f00:	0800bbb0 	.word	0x0800bbb0
 8000f04:	20000150 	.word	0x20000150
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
 8000f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0a:	0e1b      	lsrs	r3, r3, #24
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f14:	0c1a      	lsrs	r2, r3, #16
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	0a1a      	lsrs	r2, r3, #8
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	3302      	adds	r3, #2
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	3303      	adds	r3, #3
 8000f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+4,  a1);
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	0e1a      	lsrs	r2, r3, #24
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	0c1a      	lsrs	r2, r3, #16
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	3305      	adds	r3, #5
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4e:	0a1a      	lsrs	r2, r3, #8
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	3306      	adds	r3, #6
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	701a      	strb	r2, [r3, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	3307      	adds	r3, #7
 8000f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+8,  a2);
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	0e1a      	lsrs	r2, r3, #24
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	3308      	adds	r3, #8
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	0c1a      	lsrs	r2, r3, #16
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	3309      	adds	r3, #9
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	0a1a      	lsrs	r2, r3, #8
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	330a      	adds	r3, #10
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	330b      	adds	r3, #11
 8000f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+12, a3);
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	0e1a      	lsrs	r2, r3, #24
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	330c      	adds	r3, #12
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	0c1a      	lsrs	r2, r3, #16
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	330d      	adds	r3, #13
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	0a1a      	lsrs	r2, r3, #8
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	330e      	adds	r3, #14
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	330f      	adds	r3, #15
 8000fb8:	6a3a      	ldr	r2, [r7, #32]
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	701a      	strb	r2, [r3, #0]
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d004      	beq.n	8000fd2 <os_aes+0x972>
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 0308 	and.w	r3, r3, #8
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d005      	beq.n	8000fde <os_aes+0x97e>
                buf += 16;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	3310      	adds	r3, #16
 8000fd6:	603b      	str	r3, [r7, #0]
                len -= 16;
 8000fd8:	88bb      	ldrh	r3, [r7, #4]
 8000fda:	3b10      	subs	r3, #16
 8000fdc:	80bb      	strh	r3, [r7, #4]
            }
            mode |= AES_MICNOAUX;
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f043 0308 	orr.w	r3, r3, #8
 8000fe4:	71fb      	strb	r3, [r7, #7]
        while( (signed char)len > 0 ) {
 8000fe6:	88bb      	ldrh	r3, [r7, #4]
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f73f abae 	bgt.w	800074c <os_aes+0xec>
        }
        return AESAUX[0];
 8000ff0:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <os_aes+0x99c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3730      	adds	r7, #48	; 0x30
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000150 	.word	0x20000150

08001000 <debug_init>:

/*  ************************************** */
/*    DO NOT CHANGE BELOW THIS LINE        */
/*  ************************************** */

void debug_init () {
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    // configure LED pin as output
    debug_led(0);
 8001004:	2000      	movs	r0, #0
 8001006:	f000 f807 	bl	8001018 <debug_led>

    // configure USART1 (115200/8N1, tx-only)

    // print banner
    debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 800100a:	4802      	ldr	r0, [pc, #8]	; (8001014 <debug_init+0x14>)
 800100c:	f000 f82e 	bl	800106c <debug_str>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	0800b6f0 	.word	0x0800b6f0

08001018 <debug_led>:

void debug_led (int val) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,val);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	461a      	mov	r2, r3
 8001026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <debug_led+0x20>)
 800102c:	f005 fce6 	bl	80069fc <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	48000800 	.word	0x48000800

0800103c <debug_char>:

void debug_char (char c) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  char buffer[] = "";
 8001046:	2300      	movs	r3, #0
 8001048:	733b      	strb	r3, [r7, #12]
  buffer[0]= c;
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	733b      	strb	r3, [r7, #12]
  HAL_UART_Transmit(&myUART,buffer,sizeof(buffer),HAL_MAX_DELAY);
 800104e:	f107 010c 	add.w	r1, r7, #12
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	2201      	movs	r2, #1
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <debug_char+0x2c>)
 800105a:	f009 fbc9 	bl	800a7f0 <HAL_UART_Transmit>
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000284 	.word	0x20000284

0800106c <debug_str>:
    int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
    while(n--)
        debug_char(*p++);
}

void debug_str (const char* str) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    while(*str) {
 8001074:	e006      	b.n	8001084 <debug_str+0x18>
        debug_char(*str++);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ffdc 	bl	800103c <debug_char>
    while(*str) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f4      	bne.n	8001076 <debug_str+0xa>
    }
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <debug_event>:
    while( b-buf < max && p > num );
    // return number of characters written
    return b - buf;
}

void debug_event (int ev) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
        [EV_LINK_DEAD]      = "LINK_DEAD",
        [EV_LINK_ALIVE]     = "LINK_ALIVE",
        [EV_SCAN_FOUND]     = "SCAN_FOUND",
        [EV_TXSTART]        = "EV_TXSTART",
    };
    debug_str((ev < sizeof(evnames)/sizeof(evnames[0])) ? evnames[ev] : "EV_UNKNOWN" );
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b11      	cmp	r3, #17
 80010a0:	d804      	bhi.n	80010ac <debug_event+0x18>
 80010a2:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <debug_event+0x34>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010aa:	e000      	b.n	80010ae <debug_event+0x1a>
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <debug_event+0x38>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ffdc 	bl	800106c <debug_str>
    debug_char('\r');
 80010b4:	200d      	movs	r0, #13
 80010b6:	f7ff ffc1 	bl	800103c <debug_char>
    debug_char('\n');
 80010ba:	200a      	movs	r0, #10
 80010bc:	f7ff ffbe 	bl	800103c <debug_char>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000000 	.word	0x20000000
 80010cc:	0800b734 	.word	0x0800b734

080010d0 <hal_io_init>:
} HAL;

// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (u1_t val) {
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss (u1_t val) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(NSS_GPIO_Port,NSS_Pin,val);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	461a      	mov	r2, r3
 8001102:	2140      	movs	r1, #64	; 0x40
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <hal_pin_nss+0x20>)
 8001106:	f005 fc79 	bl	80069fc <HAL_GPIO_WritePin>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	48000400 	.word	0x48000400

08001118 <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (u1_t val) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
    if(val == 0 || val == 1) { // drive pin
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <hal_pin_rst+0x16>
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d112      	bne.n	8001154 <hal_pin_rst+0x3c>
    	GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <hal_pin_rst+0x5c>)
 8001142:	f005 f9cd 	bl	80064e0 <HAL_GPIO_Init>

    	HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin,val);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	461a      	mov	r2, r3
 800114a:	2180      	movs	r1, #128	; 0x80
 800114c:	4809      	ldr	r0, [pc, #36]	; (8001174 <hal_pin_rst+0x5c>)
 800114e:	f005 fc55 	bl	80069fc <HAL_GPIO_WritePin>
    if(val == 0 || val == 1) { // drive pin
 8001152:	e00b      	b.n	800116c <hal_pin_rst+0x54>

    } else { // keep pin floating
        GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	60bb      	str	r3, [r7, #8]
    	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	4619      	mov	r1, r3
 8001166:	4803      	ldr	r0, [pc, #12]	; (8001174 <hal_pin_rst+0x5c>)
 8001168:	f005 f9ba 	bl	80064e0 <HAL_GPIO_Init>
    }
}
 800116c:	bf00      	nop
 800116e:	3730      	adds	r7, #48	; 0x30
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	48000800 	.word	0x48000800

08001178 <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if(GPIO_Pin_int == DIO0_Pin) {
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001188:	d102      	bne.n	8001190 <HAL_GPIO_EXTI_Callback+0x18>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 800118a:	2000      	movs	r0, #0
 800118c:	f004 fb30 	bl	80057f0 <radio_irq_handler>
	}
	// DIO 1
	if(GPIO_Pin_int == DIO1_Pin) {
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001196:	d102      	bne.n	800119e <HAL_GPIO_EXTI_Callback+0x26>
	    // invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 8001198:	2001      	movs	r0, #1
 800119a:	f004 fb29 	bl	80057f0 <radio_irq_handler>
	}
	// DIO 2
	if(GPIO_Pin_int == DIO2_Pin) {
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011a4:	d102      	bne.n	80011ac <HAL_GPIO_EXTI_Callback+0x34>
	    // invoke radio handler (on IRQ!)
	    radio_irq_handler(2);
 80011a6:	2002      	movs	r0, #2
 80011a8:	f004 fb22 	bl	80057f0 <radio_irq_handler>
	}
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init () {
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi (u1_t out) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] ="";
 80011ce:	2300      	movs	r3, #0
 80011d0:	733b      	strb	r3, [r7, #12]
	char inbuffer[] ="";
 80011d2:	2300      	movs	r3, #0
 80011d4:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI,outbuffer,inbuffer,sizeof(outbuffer),HAL_MAX_DELAY);
 80011da:	f107 0208 	add.w	r2, r7, #8
 80011de:	f107 010c 	add.w	r1, r7, #12
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	4804      	ldr	r0, [pc, #16]	; (80011fc <hal_spi+0x38>)
 80011ec:	f007 fdc2 	bl	8008d74 <HAL_SPI_TransmitReceive>
	return inbuffer[0];
 80011f0:	7a3b      	ldrb	r3, [r7, #8]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000220 	.word	0x20000220

08001200 <hal_time_init>:


// -----------------------------------------------------------------------------
// TIME
static void hal_time_init () {
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <hal_ticks>:

u4_t hal_ticks () {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 8001216:	f000 f8af 	bl	8001378 <hal_disableIRQs>
    u4_t t = HAL.ticks;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <hal_ticks+0x58>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	607b      	str	r3, [r7, #4]
    u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <hal_ticks+0x5c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	807b      	strh	r3, [r7, #2]
    if(__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET){
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <hal_ticks+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b02      	cmp	r3, #2
 8001234:	d10d      	bne.n	8001252 <hal_ticks+0x42>
    	if(__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) !=RESET){
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <hal_ticks+0x5c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b02      	cmp	r3, #2
 8001242:	d106      	bne.n	8001252 <hal_ticks+0x42>
    		cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <hal_ticks+0x5c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	807b      	strh	r3, [r7, #2]
    		t++;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3301      	adds	r3, #1
 8001250:	607b      	str	r3, [r7, #4]
        }
     }
    hal_enableIRQs();
 8001252:	f000 f8a1 	bl	8001398 <hal_enableIRQs>
    return (t<<16)|cnt;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	4313      	orrs	r3, r2
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000070 	.word	0x20000070
 800126c:	20000160 	.word	0x20000160

08001270 <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    u4_t t = hal_ticks();
 8001278:	f7ff ffca 	bl	8001210 <hal_ticks>
 800127c:	60f8      	str	r0, [r7, #12]
    s4_t d = time - t;
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	60bb      	str	r3, [r7, #8]
    if( d<=0 ) return 0;    // in the past
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	dc01      	bgt.n	8001290 <deltaticks+0x20>
 800128c:	2300      	movs	r3, #0
 800128e:	e008      	b.n	80012a2 <deltaticks+0x32>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	141b      	asrs	r3, r3, #16
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <deltaticks+0x2e>
 8001298:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800129c:	e001      	b.n	80012a2 <deltaticks+0x32>
    return (u2_t)d;
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	b29b      	uxth	r3, r3
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <hal_waitUntil>:

void hal_waitUntil (u4_t time) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
    while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
 80012b2:	bf00      	nop
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ffdb 	bl	8001270 <deltaticks>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f9      	bne.n	80012b4 <hal_waitUntil+0xa>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
    u2_t dt;
    myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <hal_checkTimer+0x78>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	691a      	ldr	r2, [r3, #16]
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <hal_checkTimer+0x78>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0202 	bic.w	r2, r2, #2
 80012de:	611a      	str	r2, [r3, #16]
    if((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffc5 	bl	8001270 <deltaticks>
 80012e6:	4603      	mov	r3, r0
 80012e8:	81fb      	strh	r3, [r7, #14]
 80012ea:	89fb      	ldrh	r3, [r7, #14]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d809      	bhi.n	8001304 <hal_checkTimer+0x3c>
    	myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <hal_checkTimer+0x78>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <hal_checkTimer+0x78>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0202 	bic.w	r2, r2, #2
 80012fe:	60da      	str	r2, [r3, #12]
        return 1;
 8001300:	2301      	movs	r3, #1
 8001302:	e018      	b.n	8001336 <hal_checkTimer+0x6e>
    } else { // rewind timer (fully or to exact time))
    	myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <hal_checkTimer+0x78>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800130a:	89fa      	ldrh	r2, [r7, #14]
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <hal_checkTimer+0x78>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	440a      	add	r2, r1
 8001312:	635a      	str	r2, [r3, #52]	; 0x34
    	myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <hal_checkTimer+0x78>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <hal_checkTimer+0x78>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0202 	orr.w	r2, r2, #2
 8001322:	60da      	str	r2, [r3, #12]
    	myTIMER.Instance->CCER |= TIM_CCER_CC1E;   // enable capture/compare uint 2
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <hal_checkTimer+0x78>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6a1a      	ldr	r2, [r3, #32]
 800132a:	4b05      	ldr	r3, [pc, #20]	; (8001340 <hal_checkTimer+0x78>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	621a      	str	r2, [r3, #32]
        return 0;
 8001334:	2300      	movs	r3, #0
    }
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000160 	.word	0x20000160

08001344 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == myTIMER.Instance){
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d104      	bne.n	8001362 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL.ticks++;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	3301      	adds	r3, #1
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001360:	6053      	str	r3, [r2, #4]
    }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000160 	.word	0x20000160
 8001374:	20000070 	.word	0x20000070

08001378 <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs () {
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
	__disable_irq();
	//__set_BASEPRI(1 << 4);
    HAL.irqlevel++;
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <hal_disableIRQs+0x1c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	3301      	adds	r3, #1
 8001384:	4a03      	ldr	r2, [pc, #12]	; (8001394 <hal_disableIRQs+0x1c>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000070 	.word	0x20000070

08001398 <hal_enableIRQs>:

void hal_enableIRQs () {
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
    if(--HAL.irqlevel == 0) {
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <hal_enableIRQs+0x24>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	4a06      	ldr	r2, [pc, #24]	; (80013bc <hal_enableIRQs+0x24>)
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <hal_enableIRQs+0x24>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d100      	bne.n	80013b0 <hal_enableIRQs+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 80013ae:	b662      	cpsie	i
		__enable_irq();
    	//__set_BASEPRI(0);
    }
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000070 	.word	0x20000070

080013c0 <hal_sleep>:

void hal_sleep () {
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
    // suspend execution until IRQ, regardless of the CPSR I-bit
    __WFI();
 80013c4:	bf30      	wfi
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <hal_init>:

// -----------------------------------------------------------------------------

void hal_init () {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
    memset(&HAL, 0x00, sizeof(HAL));
 80013d4:	2208      	movs	r2, #8
 80013d6:	2100      	movs	r1, #0
 80013d8:	4807      	ldr	r0, [pc, #28]	; (80013f8 <hal_init+0x28>)
 80013da:	f00a f974 	bl	800b6c6 <memset>
    hal_disableIRQs();
 80013de:	f7ff ffcb 	bl	8001378 <hal_disableIRQs>
    // configure radio I/O and interrupt handler
    hal_io_init();
 80013e2:	f7ff fe75 	bl	80010d0 <hal_io_init>
    // configure radio SPI
    hal_spi_init();
 80013e6:	f7ff fee5 	bl	80011b4 <hal_spi_init>
    // configure timer and interrupt handler
    hal_time_init();
 80013ea:	f7ff ff09 	bl	8001200 <hal_time_init>
    hal_enableIRQs();
 80013ee:	f7ff ffd3 	bl	8001398 <hal_enableIRQs>
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000070 	.word	0x20000070

080013fc <hal_failed>:

void hal_failed () {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
    // HALT...
    hal_disableIRQs();
 8001400:	f7ff ffba 	bl	8001378 <hal_disableIRQs>
    hal_sleep();
 8001404:	f7ff ffdc 	bl	80013c0 <hal_sleep>
    while(1);
 8001408:	e7fe      	b.n	8001408 <hal_failed+0xc>

0800140a <getSf>:
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	80fb      	strh	r3, [r7, #6]
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <getBw>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	80fb      	strh	r3, [r7, #6]
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	b29b      	uxth	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <getCr>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	80fb      	strh	r3, [r7, #6]
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	b29b      	uxth	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	460a      	mov	r2, r1
 800147c:	80fb      	strh	r3, [r7, #6]
 800147e:	4613      	mov	r3, r2
 8001480:	717b      	strb	r3, [r7, #5]
 8001482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001486:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800148a:	b21a      	sxth	r2, r3
 800148c:	797b      	ldrb	r3, [r7, #5]
 800148e:	015b      	lsls	r3, r3, #5
 8001490:	b21b      	sxth	r3, r3
 8001492:	4313      	orrs	r3, r2
 8001494:	b21b      	sxth	r3, r3
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	09db      	lsrs	r3, r3, #7
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	80fb      	strh	r3, [r7, #6]
 80014d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014d8:	b21a      	sxth	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	01db      	lsls	r3, r3, #7
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	80fb      	strh	r3, [r7, #6]
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	b29b      	uxth	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	80fb      	strh	r3, [r7, #6]
 800151c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	b21a      	sxth	r2, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21b      	sxth	r3, r3
 800152e:	b29b      	uxth	r3, r3
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <updr2rps>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	3301      	adds	r3, #1
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <updr2rps+0x20>)
 800154c:	5cd3      	ldrb	r3, [r2, r3]
 800154e:	b29b      	uxth	r3, r3
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	0800ccb0 	.word	0x0800ccb0

08001560 <dndr2rps>:
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ffe5 	bl	800153c <updr2rps>
 8001572:	4603      	mov	r3, r0
 8001574:	2101      	movs	r1, #1
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ffa4 	bl	80014c4 <setNocrc>
 800157c:	4603      	mov	r3, r0
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <decDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <decDR+0x2c>)
 8001596:	5cd3      	ldrb	r3, [r2, r3]
 8001598:	2bff      	cmp	r3, #255	; 0xff
 800159a:	d003      	beq.n	80015a4 <decDR+0x1c>
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	3b01      	subs	r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	e000      	b.n	80015a6 <decDR+0x1e>
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	0800ccb0 	.word	0x0800ccb0

080015b8 <validDR>:
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	3301      	adds	r3, #1
 80015c6:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <validDR+0x28>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
 80015ca:	2bff      	cmp	r3, #255	; 0xff
 80015cc:	bf14      	ite	ne
 80015ce:	2301      	movne	r3, #1
 80015d0:	2300      	moveq	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	0800ccb0 	.word	0x0800ccb0

080015e4 <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	460a      	mov	r2, r1
 80015ee:	71fb      	strb	r3, [r7, #7]
 80015f0:	4613      	mov	r3, r2
 80015f2:	71bb      	strb	r3, [r7, #6]
 80015f4:	e005      	b.n	8001602 <lowerDR+0x1e>
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ffc5 	bl	8001588 <decDR>
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
 8001602:	79bb      	ldrb	r3, [r7, #6]
 8001604:	1e5a      	subs	r2, r3, #1
 8001606:	71ba      	strb	r2, [r7, #6]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f4      	bne.n	80015f6 <lowerDR+0x12>
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <os_rlsbf2>:
// BEG OS - default implementations for certain OS suport functions

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2 (xref2cu1_t buf) {
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
    return (u2_t)(buf[0] | (buf[1]<<8));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b21a      	sxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3301      	adds	r3, #1
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b21b      	sxth	r3, r3
 8001632:	b29b      	uxth	r3, r3
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4 (xref2cu1_t buf) {
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[0] | (buf[1]<<8) | ((u4_t)buf[2]<<16) | ((u4_t)buf[3]<<24));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3301      	adds	r3, #1
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	4313      	orrs	r3, r2
 8001658:	461a      	mov	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3302      	adds	r3, #2
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	041b      	lsls	r3, r3, #16
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3303      	adds	r3, #3
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	061b      	lsls	r3, r3, #24
 800166c:	4313      	orrs	r3, r2
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <os_rmsbf4>:
#endif


#if !defined(os_rmsbf4)
u4_t os_rmsbf4 (xref2cu1_t buf) {
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[3] | (buf[2]<<8) | ((u4_t)buf[1]<<16) | ((u4_t)buf[0]<<24));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3303      	adds	r3, #3
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3302      	adds	r3, #2
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	4313      	orrs	r3, r2
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3301      	adds	r3, #1
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	061b      	lsls	r3, r3, #24
 80016a6:	4313      	orrs	r3, r2
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
    buf[0] = v;
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 80016c8:	887b      	ldrh	r3, [r7, #2]
 80016ca:	0a1b      	lsrs	r3, r3, #8
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3301      	adds	r3, #1
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (xref2u1_t buf, u4_t v) {
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
    buf[0] = v;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	0a1a      	lsrs	r2, r3, #8
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3301      	adds	r3, #1
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>16;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	0c1a      	lsrs	r2, r3, #16
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3302      	adds	r3, #2
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	701a      	strb	r2, [r3, #0]
    buf[3] = v>>24;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	0e1a      	lsrs	r2, r3, #24
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3303      	adds	r3, #3
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	701a      	strb	r2, [r3, #0]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (xref2u1_t buf, u4_t v) {
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
    buf[3] = v;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3303      	adds	r3, #3
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>8;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	0a1a      	lsrs	r2, r3, #8
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3302      	adds	r3, #2
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>16;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	0c1a      	lsrs	r2, r3, #16
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3301      	adds	r3, #1
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	701a      	strb	r2, [r3, #0]
    buf[0] = v>>24;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	0e1b      	lsrs	r3, r3, #24
 8001754:	b2da      	uxtb	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	701a      	strb	r2, [r3, #0]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel (void) {
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
    return MCMD_DEVS_BATT_NOINFO;
 800176a:	23ff      	movs	r3, #255	; 0xff
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16 (xref2u1_t data, uint len) {
 8001776:	b480      	push	{r7}
 8001778:	b087      	sub	sp, #28
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
    u2_t remainder = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	82fb      	strh	r3, [r7, #22]
    u2_t polynomial = 0x1021;
 8001784:	f241 0321 	movw	r3, #4129	; 0x1021
 8001788:	81bb      	strh	r3, [r7, #12]
    for( uint i = 0; i < len; i++ ) {
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	e026      	b.n	80017de <os_crc16+0x68>
        remainder ^= data[i] << 8;
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4413      	add	r3, r2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	b21a      	sxth	r2, r3
 800179c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017a0:	4053      	eors	r3, r2
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 80017a6:	2308      	movs	r3, #8
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e012      	b.n	80017d2 <os_crc16+0x5c>
            if( (remainder & 0x8000) )
 80017ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da08      	bge.n	80017c6 <os_crc16+0x50>
                remainder = (remainder << 1) ^ polynomial;
 80017b4:	8afb      	ldrh	r3, [r7, #22]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	b21a      	sxth	r2, r3
 80017ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017be:	4053      	eors	r3, r2
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	82fb      	strh	r3, [r7, #22]
 80017c4:	e002      	b.n	80017cc <os_crc16+0x56>
            else 
                remainder <<= 1;
 80017c6:	8afb      	ldrh	r3, [r7, #22]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1e9      	bne.n	80017ac <os_crc16+0x36>
    for( uint i = 0; i < len; i++ ) {
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	3301      	adds	r3, #1
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3d4      	bcc.n	8001790 <os_crc16+0x1a>
        }
    }
    return remainder;
 80017e6:	8afb      	ldrh	r3, [r7, #22]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <micB0>:
// ================================================================================

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	603b      	str	r3, [r7, #0]
    os_clearMem(AESaux,16);
 8001802:	2210      	movs	r2, #16
 8001804:	2100      	movs	r1, #0
 8001806:	4810      	ldr	r0, [pc, #64]	; (8001848 <micB0+0x54>)
 8001808:	f009 ff5d 	bl	800b6c6 <memset>
    AESaux[0]  = 0x49;
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <micB0+0x54>)
 800180e:	2249      	movs	r2, #73	; 0x49
 8001810:	701a      	strb	r2, [r3, #0]
    AESaux[5]  = dndir?1:0;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf14      	ite	ne
 8001818:	2301      	movne	r3, #1
 800181a:	2300      	moveq	r3, #0
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <micB0+0x58>)
 8001820:	701a      	strb	r2, [r3, #0]
    AESaux[15] = len;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <micB0+0x5c>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <micB0+0x60>)
 800182c:	68f9      	ldr	r1, [r7, #12]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff57 	bl	80016e2 <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <micB0+0x64>)
 8001836:	68b9      	ldr	r1, [r7, #8]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff52 	bl	80016e2 <os_wlsbf4>
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000150 	.word	0x20000150
 800184c:	20000155 	.word	0x20000155
 8001850:	2000015f 	.word	0x2000015f
 8001854:	20000156 	.word	0x20000156
 8001858:	2000015a 	.word	0x2000015a

0800185c <aes_verifyMic>:


static int aes_verifyMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	68b8      	ldr	r0, [r7, #8]
 8001872:	f7ff ffbf 	bl	80017f4 <micB0>
    os_copyMem(AESkey,key,16);
 8001876:	2210      	movs	r2, #16
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	480d      	ldr	r0, [pc, #52]	; (80018b0 <aes_verifyMic+0x54>)
 800187c:	f009 ff18 	bl	800b6b0 <memcpy>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	b29b      	uxth	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	6a39      	ldr	r1, [r7, #32]
 8001888:	2002      	movs	r0, #2
 800188a:	f7fe fee9 	bl	8000660 <os_aes>
 800188e:	4604      	mov	r4, r0
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	6a3a      	ldr	r2, [r7, #32]
 8001894:	4413      	add	r3, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff feef 	bl	800167a <os_rmsbf4>
 800189c:	4603      	mov	r3, r0
 800189e:	429c      	cmp	r4, r3
 80018a0:	bf0c      	ite	eq
 80018a2:	2301      	moveq	r3, #1
 80018a4:	2300      	movne	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd90      	pop	{r4, r7, pc}
 80018b0:	200000a0 	.word	0x200000a0

080018b4 <aes_appendMic>:


static void aes_appendMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	68b8      	ldr	r0, [r7, #8]
 80018ca:	f7ff ff93 	bl	80017f4 <micB0>
    os_copyMem(AESkey,key,16);
 80018ce:	2210      	movs	r2, #16
 80018d0:	68f9      	ldr	r1, [r7, #12]
 80018d2:	480b      	ldr	r0, [pc, #44]	; (8001900 <aes_appendMic+0x4c>)
 80018d4:	f009 feec 	bl	800b6b0 <memcpy>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	6a3a      	ldr	r2, [r7, #32]
 80018dc:	18d4      	adds	r4, r2, r3
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	6a39      	ldr	r1, [r7, #32]
 80018e6:	2002      	movs	r0, #2
 80018e8:	f7fe feba 	bl	8000660 <os_aes>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4619      	mov	r1, r3
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7ff ff17 	bl	8001724 <os_wmsbf4>
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd90      	pop	{r4, r7, pc}
 80018fe:	bf00      	nop
 8001900:	200000a0 	.word	0x200000a0

08001904 <aes_appendMic0>:


static void aes_appendMic0 (xref2u1_t pdu, int len) {
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 800190e:	480b      	ldr	r0, [pc, #44]	; (800193c <aes_appendMic0+0x38>)
 8001910:	f002 fe98 	bl	8004644 <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	18d4      	adds	r4, r2, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b29b      	uxth	r3, r3
 800191e:	461a      	mov	r2, r3
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	200a      	movs	r0, #10
 8001924:	f7fe fe9c 	bl	8000660 <os_aes>
 8001928:	4603      	mov	r3, r0
 800192a:	4619      	mov	r1, r3
 800192c:	4620      	mov	r0, r4
 800192e:	f7ff fef9 	bl	8001724 <os_wmsbf4>
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bd90      	pop	{r4, r7, pc}
 800193a:	bf00      	nop
 800193c:	200000a0 	.word	0x200000a0

08001940 <aes_verifyMic0>:


static int aes_verifyMic0 (xref2u1_t pdu, int len) {
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <aes_verifyMic0+0x40>)
 800194c:	f002 fe7a 	bl	8004644 <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	200a      	movs	r0, #10
 800195a:	f7fe fe81 	bl	8000660 <os_aes>
 800195e:	4604      	mov	r4, r0
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fe87 	bl	800167a <os_rmsbf4>
 800196c:	4603      	mov	r3, r0
 800196e:	429c      	cmp	r4, r3
 8001970:	bf0c      	ite	eq
 8001972:	2301      	moveq	r3, #1
 8001974:	2300      	movne	r3, #0
 8001976:	b2db      	uxtb	r3, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bd90      	pop	{r4, r7, pc}
 8001980:	200000a0 	.word	0x200000a0

08001984 <aes_encrypt>:


static void aes_encrypt (xref2u1_t pdu, int len) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 800198e:	4807      	ldr	r0, [pc, #28]	; (80019ac <aes_encrypt+0x28>)
 8001990:	f002 fe58 	bl	8004644 <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	461a      	mov	r2, r3
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	2000      	movs	r0, #0
 800199e:	f7fe fe5f 	bl	8000660 <os_aes>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200000a0 	.word	0x200000a0

080019b0 <aes_cipher>:


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
    if( len <= 0 )
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	dd29      	ble.n	8001a18 <aes_cipher+0x68>
        return;
    os_clearMem(AESaux, 16);
 80019c4:	2210      	movs	r2, #16
 80019c6:	2100      	movs	r1, #0
 80019c8:	4815      	ldr	r0, [pc, #84]	; (8001a20 <aes_cipher+0x70>)
 80019ca:	f009 fe7c 	bl	800b6c6 <memset>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <aes_cipher+0x74>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
 80019d4:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <aes_cipher+0x70>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	7013      	strb	r3, [r2, #0]
    AESaux[5] = dndir?1:0;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf14      	ite	ne
 80019e0:	2301      	movne	r3, #1
 80019e2:	2300      	moveq	r3, #0
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <aes_cipher+0x78>)
 80019e8:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <aes_cipher+0x7c>)
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fe77 	bl	80016e2 <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <aes_cipher+0x80>)
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fe72 	bl	80016e2 <os_wlsbf4>
    os_copyMem(AESkey,key,16);
 80019fe:	2210      	movs	r2, #16
 8001a00:	68f9      	ldr	r1, [r7, #12]
 8001a02:	480c      	ldr	r0, [pc, #48]	; (8001a34 <aes_cipher+0x84>)
 8001a04:	f009 fe54 	bl	800b6b0 <memcpy>
    os_aes(AES_CTR, payload, len);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	69b9      	ldr	r1, [r7, #24]
 8001a10:	2004      	movs	r0, #4
 8001a12:	f7fe fe25 	bl	8000660 <os_aes>
 8001a16:	e000      	b.n	8001a1a <aes_cipher+0x6a>
        return;
 8001a18:	bf00      	nop
}
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000150 	.word	0x20000150
 8001a24:	2000015f 	.word	0x2000015f
 8001a28:	20000155 	.word	0x20000155
 8001a2c:	20000156 	.word	0x20000156
 8001a30:	2000015a 	.word	0x2000015a
 8001a34:	200000a0 	.word	0x200000a0

08001a38 <aes_sessKeys>:


static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	4603      	mov	r3, r0
 8001a46:	81fb      	strh	r3, [r7, #14]
    os_clearMem(nwkkey, 16);
 8001a48:	2210      	movs	r2, #16
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f009 fe3a 	bl	800b6c6 <memset>
    nwkkey[0] = 0x01;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	2206      	movs	r2, #6
 8001a5e:	68b9      	ldr	r1, [r7, #8]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f009 fe25 	bl	800b6b0 <memcpy>
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3307      	adds	r3, #7
 8001a6a:	89fa      	ldrh	r2, [r7, #14]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fe20 	bl	80016b4 <os_wlsbf2>
    os_copyMem(artkey, nwkkey, 16);
 8001a74:	2210      	movs	r2, #16
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	6838      	ldr	r0, [r7, #0]
 8001a7a:	f009 fe19 	bl	800b6b0 <memcpy>
    artkey[0] = 0x02;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2202      	movs	r2, #2
 8001a82:	701a      	strb	r2, [r3, #0]

    os_getDevKey(AESkey);
 8001a84:	4809      	ldr	r0, [pc, #36]	; (8001aac <aes_sessKeys+0x74>)
 8001a86:	f002 fddd 	bl	8004644 <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7fe fde6 	bl	8000660 <os_aes>
    os_getDevKey(AESkey);
 8001a94:	4805      	ldr	r0, [pc, #20]	; (8001aac <aes_sessKeys+0x74>)
 8001a96:	f002 fdd5 	bl	8004644 <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	6839      	ldr	r1, [r7, #0]
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7fe fdde 	bl	8000660 <os_aes>
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200000a0 	.word	0x200000a0

08001ab0 <getSensitivity>:
    { 141-135,  141-132, 141-129 },  // SF10
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	80fb      	strh	r3, [r7, #6]
    return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fca4 	bl	800140a <getSf>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461c      	mov	r4, r3
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fcae 	bl	800142a <getBw>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4a06      	ldr	r2, [pc, #24]	; (8001aec <getSensitivity+0x3c>)
 8001ad4:	4623      	mov	r3, r4
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4423      	add	r3, r4
 8001ada:	4413      	add	r3, r2
 8001adc:	440b      	add	r3, r1
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	3b8d      	subs	r3, #141	; 0x8d
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd90      	pop	{r4, r7, pc}
 8001aea:	bf00      	nop
 8001aec:	0800cccc 	.word	0x0800cccc

08001af0 <calcAirTime>:

ostime_t calcAirTime (rps_t rps, u1_t plen) {
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	460a      	mov	r2, r1
 8001afa:	80fb      	strh	r3, [r7, #6]
 8001afc:	4613      	mov	r3, r2
 8001afe:	717b      	strb	r3, [r7, #5]
    u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fc91 	bl	800142a <getBw>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	72fb      	strb	r3, [r7, #11]
    u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fc7b 	bl	800140a <getSf>
 8001b14:	4603      	mov	r3, r0
 8001b16:	72bb      	strb	r3, [r7, #10]
    if( sf == FSK ) {
 8001b18:	7abb      	ldrb	r3, [r7, #10]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10c      	bne.n	8001b38 <calcAirTime+0x48>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
 8001b1e:	797b      	ldrb	r3, [r7, #5]
 8001b20:	330b      	adds	r3, #11
            * (s4_t)OSTICKS_PER_SEC / /*kbit/s*/50000;
 8001b22:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8001b26:	fb02 f303 	mul.w	r3, r2, r3
 8001b2a:	4a3c      	ldr	r2, [pc, #240]	; (8001c1c <calcAirTime+0x12c>)
 8001b2c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b30:	1312      	asrs	r2, r2, #12
 8001b32:	17db      	asrs	r3, r3, #31
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	e06d      	b.n	8001c14 <calcAirTime+0x124>
    }
    u1_t sfx = 4*(sf+(7-SF7));
 8001b38:	7abb      	ldrb	r3, [r7, #10]
 8001b3a:	3306      	adds	r3, #6
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	75fb      	strb	r3, [r7, #23]
    u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 8001b42:	7abb      	ldrb	r3, [r7, #10]
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d901      	bls.n	8001b4c <calcAirTime+0x5c>
 8001b48:	2308      	movs	r3, #8
 8001b4a:	e000      	b.n	8001b4e <calcAirTime+0x5e>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	7dfa      	ldrb	r2, [r7, #23]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	727b      	strb	r3, [r7, #9]
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
 8001b54:	797b      	ldrb	r3, [r7, #5]
 8001b56:	00da      	lsls	r2, r3, #3
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f103 041c 	add.w	r4, r3, #28
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fc9e 	bl	80014a4 <getNocrc>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <calcAirTime+0x82>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <calcAirTime+0x84>
 8001b72:	2310      	movs	r3, #16
 8001b74:	441c      	add	r4, r3
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fcba 	bl	80014f2 <getIh>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <calcAirTime+0x98>
 8001b84:	2314      	movs	r3, #20
 8001b86:	e000      	b.n	8001b8a <calcAirTime+0x9a>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	1ae3      	subs	r3, r4, r3
 8001b8c:	613b      	str	r3, [r7, #16]
    if( tmp > 0 ) {
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	dd15      	ble.n	8001bc0 <calcAirTime+0xd0>
        tmp = (tmp + q - 1) / q;
 8001b94:	7a7a      	ldrb	r2, [r7, #9]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4413      	add	r3, r2
 8001b9a:	1e5a      	subs	r2, r3, #1
 8001b9c:	7a7b      	ldrb	r3, [r7, #9]
 8001b9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ba2:	613b      	str	r3, [r7, #16]
        tmp *= getCr(rps)+5;
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fc51 	bl	800144e <getCr>
 8001bac:	4603      	mov	r3, r0
 8001bae:	1d5a      	adds	r2, r3, #5
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
 8001bb6:	613b      	str	r3, [r7, #16]
        tmp += 8;
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	3308      	adds	r3, #8
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	e001      	b.n	8001bc4 <calcAirTime+0xd4>
    } else {
        tmp = 8;
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	613b      	str	r3, [r7, #16]
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	3331      	adds	r3, #49	; 0x31
 8001bca:	613b      	str	r3, [r7, #16]
    //
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
 8001bcc:	7aba      	ldrb	r2, [r7, #10]
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	75fb      	strb	r3, [r7, #23]
    int div = 15625;
 8001bd8:	f643 5309 	movw	r3, #15625	; 0x3d09
 8001bdc:	60fb      	str	r3, [r7, #12]
    if( sfx > 4 ) {
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d907      	bls.n	8001bf4 <calcAirTime+0x104>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	3b04      	subs	r3, #4
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	fa42 f303 	asr.w	r3, r2, r3
 8001bee:	60fb      	str	r3, [r7, #12]
        sfx = 4;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	75fb      	strb	r3, [r7, #23]
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * OSTICKS_PER_SEC + div/2) / div;
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001c00:	fb02 f203 	mul.w	r2, r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	0fd9      	lsrs	r1, r3, #31
 8001c08:	440b      	add	r3, r1
 8001c0a:	105b      	asrs	r3, r3, #1
 8001c0c:	441a      	add	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}
 8001c1c:	14f8b589 	.word	0x14f8b589

08001c20 <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
};


static ostime_t calcRxWindow (u1_t secs, dr_t dr) {
 8001c20:	b480      	push	{r7}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	460a      	mov	r2, r1
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	71bb      	strb	r3, [r7, #6]
    ostime_t rxoff, err;
    if( secs==0 ) {
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d108      	bne.n	8001c48 <calcRxWindow+0x28>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <calcRxWindow+0xa0>)
 8001c38:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8001c3c:	617b      	str	r3, [r7, #20]
        err = LMIC.lastDriftDiff;
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <calcRxWindow+0xa0>)
 8001c40:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	e011      	b.n	8001c6c <calcRxWindow+0x4c>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <calcRxWindow+0xa0>)
 8001c4a:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8001c4e:	461a      	mov	r2, r3
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	fb03 f302 	mul.w	r3, r3, r2
 8001c56:	11db      	asrs	r3, r3, #7
 8001c58:	617b      	str	r3, [r7, #20]
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <calcRxWindow+0xa0>)
 8001c5c:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8001c60:	461a      	mov	r2, r3
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	fb03 f302 	mul.w	r3, r3, r2
 8001c68:	11db      	asrs	r3, r3, #7
 8001c6a:	613b      	str	r3, [r7, #16]
    }
    u1_t rxsyms = MINRX_SYMS;
 8001c6c:	2305      	movs	r3, #5
 8001c6e:	73fb      	strb	r3, [r7, #15]
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
 8001c70:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <calcRxWindow+0xa0>)
 8001c72:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <calcRxWindow+0xa0>)
 8001c7a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8001c7e:	fb03 f302 	mul.w	r3, r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4413      	add	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 8001c88:	79bb      	ldrb	r3, [r7, #6]
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <calcRxWindow+0xa4>)
 8001c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	3305      	adds	r3, #5
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <calcRxWindow+0xa0>)
 8001c9e:	741a      	strb	r2, [r3, #16]

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	3b08      	subs	r3, #8
 8001ca4:	79ba      	ldrb	r2, [r7, #6]
 8001ca6:	4907      	ldr	r1, [pc, #28]	; (8001cc4 <calcRxWindow+0xa4>)
 8001ca8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001cac:	fb02 f203 	mul.w	r2, r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	4413      	add	r3, r2
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	371c      	adds	r7, #28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	20000304 	.word	0x20000304
 8001cc4:	0800ccf0 	.word	0x0800ccf0

08001cc8 <calcBcnRxWindowFromMillis>:


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
 8001cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	460a      	mov	r2, r1
 8001cd2:	71fb      	strb	r3, [r7, #7]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	71bb      	strb	r3, [r7, #6]
    if( ini ) {
 8001cd8:	79bb      	ldrb	r3, [r7, #6]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d014      	beq.n	8001d08 <calcBcnRxWindowFromMillis+0x40>
        LMIC.drift = 0;
 8001cde:	4b38      	ldr	r3, [pc, #224]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
        LMIC.maxDriftDiff = 0;
 8001ce6:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
        LMIC.missedBcns = 0;
 8001cee:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
 8001cf6:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001cf8:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001cfc:	f043 030c 	orr.w	r3, r3, #12
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001d04:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
    }
    ostime_t hsym = dr2hsym(DR_BCN);
 8001d08:	2342      	movs	r3, #66	; 0x42
 8001d0a:	60fb      	str	r3, [r7, #12]
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 8001d0c:	79fd      	ldrb	r5, [r7, #7]
 8001d0e:	f04f 0600 	mov.w	r6, #0
 8001d12:	462b      	mov	r3, r5
 8001d14:	4634      	mov	r4, r6
 8001d16:	f04f 0100 	mov.w	r1, #0
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	0162      	lsls	r2, r4, #5
 8001d20:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001d24:	0159      	lsls	r1, r3, #5
 8001d26:	460b      	mov	r3, r1
 8001d28:	4614      	mov	r4, r2
 8001d2a:	1b5b      	subs	r3, r3, r5
 8001d2c:	eb64 0406 	sbc.w	r4, r4, r6
 8001d30:	f04f 0100 	mov.w	r1, #0
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	00a2      	lsls	r2, r4, #2
 8001d3a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001d3e:	0099      	lsls	r1, r3, #2
 8001d40:	460b      	mov	r3, r1
 8001d42:	4614      	mov	r4, r2
 8001d44:	195b      	adds	r3, r3, r5
 8001d46:	eb44 0406 	adc.w	r4, r4, r6
 8001d4a:	f04f 0100 	mov.w	r1, #0
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	0222      	lsls	r2, r4, #8
 8001d54:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8001d58:	0219      	lsls	r1, r3, #8
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4614      	mov	r4, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4622      	mov	r2, r4
 8001d62:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001d66:	f04f 0400 	mov.w	r4, #0
 8001d6a:	18cd      	adds	r5, r1, r3
 8001d6c:	eb42 0604 	adc.w	r6, r2, r4
 8001d70:	4628      	mov	r0, r5
 8001d72:	4631      	mov	r1, r6
 8001d74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	f7fe fa24 	bl	80001c8 <__aeabi_ldivmod>
 8001d80:	4603      	mov	r3, r0
 8001d82:	460c      	mov	r4, r1
 8001d84:	461a      	mov	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3305      	adds	r3, #5
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001d94:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001d9a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001d9e:	f503 127a 	add.w	r2, r3, #4096000	; 0x3e8000
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001da4:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8001da8:	3b08      	subs	r3, #8
 8001daa:	68f9      	ldr	r1, [r7, #12]
 8001dac:	fb01 f303 	mul.w	r3, r1, r3
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	4a03      	ldr	r2, [pc, #12]	; (8001dc0 <calcBcnRxWindowFromMillis+0xf8>)
 8001db4:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc0:	20000304 	.word	0x20000304

08001dc4 <rxschedInit>:


// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (xref2rxsched_t rxsched) {
 8001dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
    os_clearMem(AESkey,16);
 8001dce:	2210      	movs	r2, #16
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	484b      	ldr	r0, [pc, #300]	; (8001f00 <rxschedInit+0x13c>)
 8001dd4:	f009 fc77 	bl	800b6c6 <memset>
    os_clearMem(LMIC.frame+8,8);
 8001dd8:	4b4a      	ldr	r3, [pc, #296]	; (8001f04 <rxschedInit+0x140>)
 8001dda:	2208      	movs	r2, #8
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f009 fc71 	bl	800b6c6 <memset>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 8001de4:	4b48      	ldr	r3, [pc, #288]	; (8001f08 <rxschedInit+0x144>)
 8001de6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8001dea:	4619      	mov	r1, r3
 8001dec:	4847      	ldr	r0, [pc, #284]	; (8001f0c <rxschedInit+0x148>)
 8001dee:	f7ff fc78 	bl	80016e2 <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
 8001df2:	4a47      	ldr	r2, [pc, #284]	; (8001f10 <rxschedInit+0x14c>)
 8001df4:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <rxschedInit+0x144>)
 8001df6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f7ff fc70 	bl	80016e2 <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
 8001e02:	2210      	movs	r2, #16
 8001e04:	4941      	ldr	r1, [pc, #260]	; (8001f0c <rxschedInit+0x148>)
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7fe fc2a 	bl	8000660 <os_aes>
    u1_t intvExp = rxsched->intvExp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	785b      	ldrb	r3, [r3, #1]
 8001e10:	73fb      	strb	r3, [r7, #15]
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 8001e12:	483e      	ldr	r0, [pc, #248]	; (8001f0c <rxschedInit+0x148>)
 8001e14:	f7ff fbff 	bl	8001616 <os_rlsbf2>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	f1c3 0307 	rsb	r3, r3, #7
 8001e22:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e26:	fa42 f303 	asr.w	r3, r2, r3
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	60bb      	str	r3, [r7, #8]
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8001e2e:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <rxschedInit+0x144>)
 8001e30:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001e34:	f503 3884 	add.w	r8, r3, #67584	; 0x10800
 8001e38:	f508 7880 	add.w	r8, r8, #256	; 0x100
                       BCN_RESERVE_osticks +
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	461d      	mov	r5, r3
 8001e40:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001e44:	462b      	mov	r3, r5
 8001e46:	4634      	mov	r4, r6
 8001e48:	f04f 0100 	mov.w	r1, #0
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	0162      	lsls	r2, r4, #5
 8001e52:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001e56:	0159      	lsls	r1, r3, #5
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4614      	mov	r4, r2
 8001e5c:	1b5b      	subs	r3, r3, r5
 8001e5e:	eb64 0406 	sbc.w	r4, r4, r6
 8001e62:	f04f 0100 	mov.w	r1, #0
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	00a2      	lsls	r2, r4, #2
 8001e6c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001e70:	0099      	lsls	r1, r3, #2
 8001e72:	460b      	mov	r3, r1
 8001e74:	4614      	mov	r4, r2
 8001e76:	195b      	adds	r3, r3, r5
 8001e78:	eb44 0406 	adc.w	r4, r4, r6
 8001e7c:	f04f 0100 	mov.w	r1, #0
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	0122      	lsls	r2, r4, #4
 8001e86:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8001e8a:	0119      	lsls	r1, r3, #4
 8001e8c:	1ac9      	subs	r1, r1, r3
 8001e8e:	eb62 0204 	sbc.w	r2, r2, r4
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	f04f 0400 	mov.w	r4, #0
 8001e9a:	0254      	lsls	r4, r2, #9
 8001e9c:	ea44 54d1 	orr.w	r4, r4, r1, lsr #23
 8001ea0:	024b      	lsls	r3, r1, #9
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4622      	mov	r2, r4
 8001ea6:	4608      	mov	r0, r1
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	f7fe f989 	bl	80001c8 <__aeabi_ldivmod>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	460c      	mov	r4, r1
                       BCN_RESERVE_osticks +
 8001eba:	eb08 0203 	add.w	r2, r8, r3
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	605a      	str	r2, [r3, #4]
    rxsched->slot   = 0;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	709a      	strb	r2, [r3, #2]
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685c      	ldr	r4, [r3, #4]
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	f7ff fe9d 	bl	8001c20 <calcRxWindow>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	1ae2      	subs	r2, r4, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <rxschedInit+0x144>)
 8001ef0:	7c1a      	ldrb	r2, [r3, #16]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	70da      	strb	r2, [r3, #3]
}
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f00:	200000a0 	.word	0x200000a0
 8001f04:	20000454 	.word	0x20000454
 8001f08:	20000304 	.word	0x20000304
 8001f0c:	2000044c 	.word	0x2000044c
 8001f10:	20000450 	.word	0x20000450

08001f14 <rxschedNext>:


static bit_t rxschedNext (xref2rxsched_t rxsched, ostime_t cando) {
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  again:
    if( rxsched->rxtime - cando >= 0 )
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	db01      	blt.n	8001f2e <rxschedNext+0x1a>
        return 1;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e03a      	b.n	8001fa4 <rxschedNext+0x90>
    u1_t slot;
    if( (slot=rxsched->slot) >= 128 )
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	789b      	ldrb	r3, [r3, #2]
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	da01      	bge.n	8001f40 <rxschedNext+0x2c>
        return 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e031      	b.n	8001fa4 <rxschedNext+0x90>
    u1_t intv = 1<<rxsched->intvExp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	785b      	ldrb	r3, [r3, #1]
 8001f44:	461a      	mov	r2, r3
 8001f46:	2301      	movs	r3, #1
 8001f48:	4093      	lsls	r3, r2
 8001f4a:	73bb      	strb	r3, [r7, #14]
    if( (rxsched->slot = (slot += (intv))) >= 128 )
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	7bbb      	ldrb	r3, [r7, #14]
 8001f50:	4413      	add	r3, r2
 8001f52:	73fb      	strb	r3, [r7, #15]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	709a      	strb	r2, [r3, #2]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	789b      	ldrb	r3, [r3, #2]
 8001f5e:	b25b      	sxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	da01      	bge.n	8001f68 <rxschedNext+0x54>
        return 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e01d      	b.n	8001fa4 <rxschedNext+0x90>
    rxsched->rxtime = rxsched->rxbase
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6859      	ldr	r1, [r3, #4]
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	049b      	lsls	r3, r3, #18
 8001f76:	11db      	asrs	r3, r3, #7
 8001f78:	18cc      	adds	r4, r1, r3
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	7bbb      	ldrb	r3, [r7, #14]
 8001f7e:	4413      	add	r3, r2
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	3302      	adds	r3, #2
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	f7ff fe47 	bl	8001c20 <calcRxWindow>
 8001f92:	4603      	mov	r3, r0
 8001f94:	1ae2      	subs	r2, r4, r3
    rxsched->rxtime = rxsched->rxbase
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <rxschedNext+0x98>)
 8001f9c:	7c1a      	ldrb	r2, [r3, #16]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	70da      	strb	r2, [r3, #3]
    goto again;
 8001fa2:	e7bc      	b.n	8001f1e <rxschedNext+0xa>
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd90      	pop	{r4, r7, pc}
 8001fac:	20000304 	.word	0x20000304

08001fb0 <rndDelay>:


static ostime_t rndDelay (u1_t secSpan) {
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
    u2_t r = os_getRndU2();
 8001fba:	f003 fbf3 	bl	80057a4 <radio_rand1>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	b21c      	sxth	r4, r3
 8001fc4:	f003 fbee 	bl	80057a4 <radio_rand1>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	4323      	orrs	r3, r4
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	817b      	strh	r3, [r7, #10]
    ostime_t delay = r;
 8001fd2:	897b      	ldrh	r3, [r7, #10]
 8001fd4:	60fb      	str	r3, [r7, #12]
    if( delay > OSTICKS_PER_SEC )
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001fdc:	dd0b      	ble.n	8001ff6 <rndDelay+0x46>
        delay = r % (u2_t)OSTICKS_PER_SEC;
 8001fde:	897b      	ldrh	r3, [r7, #10]
 8001fe0:	4a11      	ldr	r2, [pc, #68]	; (8002028 <rndDelay+0x78>)
 8001fe2:	fba2 1203 	umull	r1, r2, r2, r3
 8001fe6:	0ad2      	lsrs	r2, r2, #11
 8001fe8:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8001fec:	fb01 f202 	mul.w	r2, r1, r2
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	60fb      	str	r3, [r7, #12]
    if( secSpan > 0 )
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d010      	beq.n	800201e <rndDelay+0x6e>
        delay += ((u1_t)r % secSpan) * OSTICKS_PER_SEC;
 8001ffc:	897b      	ldrh	r3, [r7, #10]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	79fa      	ldrb	r2, [r7, #7]
 8002002:	fbb3 f1f2 	udiv	r1, r3, r2
 8002006:	fb02 f201 	mul.w	r2, r2, r1
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002014:	fb03 f302 	mul.w	r3, r3, r2
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
    return delay;
 800201e:	68fb      	ldr	r3, [r7, #12]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	bd90      	pop	{r4, r7, pc}
 8002028:	10624dd3 	.word	0x10624dd3

0800202c <txDelay>:


static void txDelay (ostime_t reftime, u1_t secSpan) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
    reftime += rndDelay(secSpan);
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ffb8 	bl	8001fb0 <rndDelay>
 8002040:	4602      	mov	r2, r0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	607b      	str	r3, [r7, #4]
    if( LMIC.globalDutyRate == 0  ||  (reftime - LMIC.globalDutyAvail) > 0 ) {
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <txDelay+0x58>)
 800204a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d006      	beq.n	8002060 <txDelay+0x34>
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <txDelay+0x58>)
 8002054:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	dd0c      	ble.n	800207a <txDelay+0x4e>
        LMIC.globalDutyAvail = reftime;
 8002060:	4a08      	ldr	r2, [pc, #32]	; (8002084 <txDelay+0x58>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        LMIC.opmode |= OP_RNDTX;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <txDelay+0x58>)
 800206a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800206e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <txDelay+0x58>)
 8002076:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    }
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000304 	.word	0x20000304

08002088 <setDrJoin>:


static void setDrJoin (u1_t reason, u1_t dr) {
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	460a      	mov	r2, r1
 8002092:	71fb      	strb	r3, [r7, #7]
 8002094:	4613      	mov	r3, r2
 8002096:	71bb      	strb	r3, [r7, #6]
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <setDrJoin+0x24>)
 800209a:	79bb      	ldrb	r3, [r7, #6]
 800209c:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
    DO_DEVDB(LMIC.datarate,datarate);
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	20000304 	.word	0x20000304

080020b0 <setDrTxpow>:


static void setDrTxpow (u1_t reason, u1_t dr, s1_t pow) {
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
 80020ba:	460b      	mov	r3, r1
 80020bc:	71bb      	strb	r3, [r7, #6]
 80020be:	4613      	mov	r3, r2
 80020c0:	717b      	strb	r3, [r7, #5]
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    
    if( pow != KEEP_TXPOW )
 80020c2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80020c6:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80020ca:	d003      	beq.n	80020d4 <setDrTxpow+0x24>
        LMIC.adrTxPow = pow;
 80020cc:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <setDrTxpow+0x58>)
 80020ce:	797b      	ldrb	r3, [r7, #5]
 80020d0:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
    if( LMIC.datarate != dr ) {
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <setDrTxpow+0x58>)
 80020d6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80020da:	79ba      	ldrb	r2, [r7, #6]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d00c      	beq.n	80020fa <setDrTxpow+0x4a>
        LMIC.datarate = dr;
 80020e0:	4a09      	ldr	r2, [pc, #36]	; (8002108 <setDrTxpow+0x58>)
 80020e2:	79bb      	ldrb	r3, [r7, #6]
 80020e4:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <setDrTxpow+0x58>)
 80020ea:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80020ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <setDrTxpow+0x58>)
 80020f6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000304 	.word	0x20000304

0800210c <initDefaultChannels>:
    // Default operational frequencies
    EU868_F1|BAND_CENTI, EU868_F2|BAND_CENTI, EU868_F3|BAND_CENTI,
    EU868_F4|BAND_MILLI, EU868_F5|BAND_MILLI, EU868_F6|BAND_DECI
};

static void initDefaultChannels (bit_t join) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
    os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 8002116:	2240      	movs	r2, #64	; 0x40
 8002118:	2100      	movs	r1, #0
 800211a:	483a      	ldr	r0, [pc, #232]	; (8002204 <initDefaultChannels+0xf8>)
 800211c:	f009 fad3 	bl	800b6c6 <memset>
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 8002120:	2220      	movs	r2, #32
 8002122:	2100      	movs	r1, #0
 8002124:	4838      	ldr	r0, [pc, #224]	; (8002208 <initDefaultChannels+0xfc>)
 8002126:	f009 face 	bl	800b6c6 <memset>
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 800212a:	2220      	movs	r2, #32
 800212c:	2100      	movs	r1, #0
 800212e:	4837      	ldr	r0, [pc, #220]	; (800220c <initDefaultChannels+0x100>)
 8002130:	f009 fac9 	bl	800b6c6 <memset>

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 8002134:	4b36      	ldr	r3, [pc, #216]	; (8002210 <initDefaultChannels+0x104>)
 8002136:	223f      	movs	r2, #63	; 0x3f
 8002138:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <initDefaultChannels+0x3a>
 8002142:	2300      	movs	r3, #0
 8002144:	e000      	b.n	8002148 <initDefaultChannels+0x3c>
 8002146:	2306      	movs	r3, #6
 8002148:	73fb      	strb	r3, [r7, #15]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 800214a:	2300      	movs	r3, #0
 800214c:	73bb      	strb	r3, [r7, #14]
 800214e:	e014      	b.n	800217a <initDefaultChannels+0x6e>
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	7bbb      	ldrb	r3, [r7, #14]
 8002154:	492f      	ldr	r1, [pc, #188]	; (8002214 <initDefaultChannels+0x108>)
 8002156:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800215a:	492d      	ldr	r1, [pc, #180]	; (8002210 <initDefaultChannels+0x104>)
 800215c:	3310      	adds	r3, #16
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
 8002162:	7bbb      	ldrb	r3, [r7, #14]
 8002164:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <initDefaultChannels+0x104>)
 8002166:	3340      	adds	r3, #64	; 0x40
 8002168:	213f      	movs	r1, #63	; 0x3f
 800216a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 800216e:	7bbb      	ldrb	r3, [r7, #14]
 8002170:	3301      	adds	r3, #1
 8002172:	73bb      	strb	r3, [r7, #14]
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	3301      	adds	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
 800217a:	7bbb      	ldrb	r3, [r7, #14]
 800217c:	2b05      	cmp	r3, #5
 800217e:	d9e7      	bls.n	8002150 <initDefaultChannels+0x44>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

    LMIC.bands[BAND_MILLI].txcap    = 1000;  // 0.1%
 8002180:	4b23      	ldr	r3, [pc, #140]	; (8002210 <initDefaultChannels+0x104>)
 8002182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002186:	841a      	strh	r2, [r3, #32]
    LMIC.bands[BAND_MILLI].txpow    = 14;
 8002188:	4b21      	ldr	r3, [pc, #132]	; (8002210 <initDefaultChannels+0x104>)
 800218a:	220e      	movs	r2, #14
 800218c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002190:	f003 fb08 	bl	80057a4 <radio_rand1>
 8002194:	4603      	mov	r3, r0
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	b2da      	uxtb	r2, r3
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <initDefaultChannels+0x104>)
 800219e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    LMIC.bands[BAND_CENTI].txcap    = 100;   // 1%
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <initDefaultChannels+0x104>)
 80021a4:	2264      	movs	r2, #100	; 0x64
 80021a6:	851a      	strh	r2, [r3, #40]	; 0x28
    LMIC.bands[BAND_CENTI].txpow    = 14;
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <initDefaultChannels+0x104>)
 80021aa:	220e      	movs	r2, #14
 80021ac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 80021b0:	f003 faf8 	bl	80057a4 <radio_rand1>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b14      	ldr	r3, [pc, #80]	; (8002210 <initDefaultChannels+0x104>)
 80021be:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <initDefaultChannels+0x104>)
 80021c4:	220a      	movs	r2, #10
 80021c6:	861a      	strh	r2, [r3, #48]	; 0x30
    LMIC.bands[BAND_DECI ].txpow    = 27;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <initDefaultChannels+0x104>)
 80021ca:	221b      	movs	r2, #27
 80021cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
 80021d0:	f003 fae8 	bl	80057a4 <radio_rand1>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <initDefaultChannels+0x104>)
 80021de:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
 80021e2:	f002 fdb9 	bl	8004d58 <os_getTime>
 80021e6:	4602      	mov	r2, r0
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <initDefaultChannels+0x104>)
 80021ea:	635a      	str	r2, [r3, #52]	; 0x34
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <initDefaultChannels+0x104>)
 80021ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    LMIC.bands[BAND_CENTI].avail =
 80021f0:	4a07      	ldr	r2, [pc, #28]	; (8002210 <initDefaultChannels+0x104>)
 80021f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <initDefaultChannels+0x104>)
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    LMIC.bands[BAND_MILLI].avail = 
 80021f8:	4a05      	ldr	r2, [pc, #20]	; (8002210 <initDefaultChannels+0x104>)
 80021fa:	6253      	str	r3, [r2, #36]	; 0x24
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000344 	.word	0x20000344
 8002208:	20000384 	.word	0x20000384
 800220c:	20000324 	.word	0x20000324
 8002210:	20000304 	.word	0x20000304
 8002214:	0800cd10 	.word	0x0800cd10

08002218 <LMIC_setupChannel>:
    b->avail = os_getTime();
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    return 1;
}

bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6039      	str	r1, [r7, #0]
 8002220:	4611      	mov	r1, r2
 8002222:	461a      	mov	r2, r3
 8002224:	4603      	mov	r3, r0
 8002226:	71fb      	strb	r3, [r7, #7]
 8002228:	460b      	mov	r3, r1
 800222a:	80bb      	strh	r3, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	71bb      	strb	r3, [r7, #6]
    if( chidx >= MAX_CHANNELS )
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	2b0f      	cmp	r3, #15
 8002234:	d901      	bls.n	800223a <LMIC_setupChannel+0x22>
        return 0;
 8002236:	2300      	movs	r3, #0
 8002238:	e054      	b.n	80022e4 <LMIC_setupChannel+0xcc>
    if( band == -1 ) {
 800223a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800223e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002242:	d121      	bne.n	8002288 <LMIC_setupChannel+0x70>
        if( freq >= 869400000 && freq <= 869650000 )
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <LMIC_setupChannel+0xd8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d908      	bls.n	800225e <LMIC_setupChannel+0x46>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4a29      	ldr	r2, [pc, #164]	; (80022f4 <LMIC_setupChannel+0xdc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d804      	bhi.n	800225e <LMIC_setupChannel+0x46>
            freq |= BAND_DECI;   // 10% 27dBm
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	f043 0302 	orr.w	r3, r3, #2
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	e021      	b.n	80022a2 <LMIC_setupChannel+0x8a>
        else if( (freq >= 868000000 && freq <= 868600000) ||
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <LMIC_setupChannel+0xe0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d903      	bls.n	800226e <LMIC_setupChannel+0x56>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	4a24      	ldr	r2, [pc, #144]	; (80022fc <LMIC_setupChannel+0xe4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d907      	bls.n	800227e <LMIC_setupChannel+0x66>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	4a23      	ldr	r2, [pc, #140]	; (8002300 <LMIC_setupChannel+0xe8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d915      	bls.n	80022a2 <LMIC_setupChannel+0x8a>
                 (freq >= 869700000 && freq <= 870000000)  )
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	4a22      	ldr	r2, [pc, #136]	; (8002304 <LMIC_setupChannel+0xec>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d811      	bhi.n	80022a2 <LMIC_setupChannel+0x8a>
            freq |= BAND_CENTI;  // 1% 14dBm 
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	e00c      	b.n	80022a2 <LMIC_setupChannel+0x8a>
        else 
            freq |= BAND_MILLI;  // 0.1% 14dBm
    } else {
        if( band > BAND_AUX ) return 0;
 8002288:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800228c:	2b03      	cmp	r3, #3
 800228e:	dd01      	ble.n	8002294 <LMIC_setupChannel+0x7c>
 8002290:	2300      	movs	r3, #0
 8002292:	e027      	b.n	80022e4 <LMIC_setupChannel+0xcc>
        freq = (freq&~3) | band;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800229e:	4313      	orrs	r3, r2
 80022a0:	603b      	str	r3, [r7, #0]
    }
    LMIC.channelFreq [chidx] = freq;
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	4918      	ldr	r1, [pc, #96]	; (8002308 <LMIC_setupChannel+0xf0>)
 80022a6:	3310      	adds	r3, #16
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
 80022ae:	88bb      	ldrh	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <LMIC_setupChannel+0xa0>
 80022b4:	88ba      	ldrh	r2, [r7, #4]
 80022b6:	e000      	b.n	80022ba <LMIC_setupChannel+0xa2>
 80022b8:	223f      	movs	r2, #63	; 0x3f
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	4912      	ldr	r1, [pc, #72]	; (8002308 <LMIC_setupChannel+0xf0>)
 80022be:	3340      	adds	r3, #64	; 0x40
 80022c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    LMIC.channelMap |= 1<<chidx;  // enabled right away
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <LMIC_setupChannel+0xf0>)
 80022c6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80022ca:	b21a      	sxth	r2, r3
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	4313      	orrs	r3, r2
 80022d8:	b21b      	sxth	r3, r3
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <LMIC_setupChannel+0xf0>)
 80022de:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    return 1;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	33d1fdbf 	.word	0x33d1fdbf
 80022f4:	33d5ce50 	.word	0x33d5ce50
 80022f8:	33bca0ff 	.word	0x33bca0ff
 80022fc:	33c5c8c0 	.word	0x33c5c8c0
 8002300:	33d6919f 	.word	0x33d6919f
 8002304:	33db2580 	.word	0x33db2580
 8002308:	20000304 	.word	0x20000304

0800230c <convFreq>:
    LMIC.channelFreq[channel] = 0;
    LMIC.channelDrMap[channel] = 0;
    LMIC.channelMap &= ~(1<<channel);
}

static u4_t convFreq (xref2u1_t ptr) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
    u4_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff f991 	bl	8001640 <os_rlsbf4>
 800231e:	4603      	mov	r3, r0
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	2264      	movs	r2, #100	; 0x64
 8002324:	fb02 f303 	mul.w	r3, r2, r3
 8002328:	60fb      	str	r3, [r7, #12]
    if( freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX )
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a06      	ldr	r2, [pc, #24]	; (8002348 <convFreq+0x3c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d903      	bls.n	800233a <convFreq+0x2e>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a05      	ldr	r2, [pc, #20]	; (800234c <convFreq+0x40>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <convFreq+0x32>
        freq = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
    return freq;
 800233e:	68fb      	ldr	r3, [r7, #12]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	337055bf 	.word	0x337055bf
 800234c:	33db2580 	.word	0x33db2580

08002350 <mapChannels>:

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	460a      	mov	r2, r1
 800235a:	71fb      	strb	r3, [r7, #7]
 800235c:	4613      	mov	r3, r2
 800235e:	80bb      	strh	r3, [r7, #4]
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10a      	bne.n	800237c <mapChannels+0x2c>
 8002366:	88bb      	ldrh	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <mapChannels+0x2c>
 800236c:	88ba      	ldrh	r2, [r7, #4]
 800236e:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <mapChannels+0x90>)
 8002370:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002374:	43db      	mvns	r3, r3
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <mapChannels+0x30>
        return 0;  // illegal input
 800237c:	2300      	movs	r3, #0
 800237e:	e028      	b.n	80023d2 <mapChannels+0x82>
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]
 8002384:	e01d      	b.n	80023c2 <mapChannels+0x72>
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
 8002386:	88ba      	ldrh	r2, [r7, #4]
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	fa42 f303 	asr.w	r3, r2, r3
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d012      	beq.n	80023bc <mapChannels+0x6c>
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <mapChannels+0x90>)
 800239a:	3310      	adds	r3, #16
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10b      	bne.n	80023bc <mapChannels+0x6c>
            chmap &= ~(1<<chnl); // ignore - channel is not defined
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2201      	movs	r2, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	b21a      	sxth	r2, r3
 80023b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80023b6:	4013      	ands	r3, r2
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	80bb      	strh	r3, [r7, #4]
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	3301      	adds	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	2b0f      	cmp	r3, #15
 80023c6:	d9de      	bls.n	8002386 <mapChannels+0x36>
    }
    LMIC.channelMap = chmap;
 80023c8:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <mapChannels+0x90>)
 80023ca:	88bb      	ldrh	r3, [r7, #4]
 80023cc:	f8a2 30a0 	strh.w	r3, [r2, #160]	; 0xa0
    return 1;
 80023d0:	2301      	movs	r3, #1
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000304 	.word	0x20000304

080023e4 <updateTx>:


static void updateTx (ostime_t txbeg) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
    u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 80023ec:	4b21      	ldr	r3, [pc, #132]	; (8002474 <updateTx+0x90>)
 80023ee:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80023f2:	4a20      	ldr	r2, [pc, #128]	; (8002474 <updateTx+0x90>)
 80023f4:	3310      	adds	r3, #16
 80023f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fa:	617b      	str	r3, [r7, #20]
    // Update global/band specific duty cycle stats
    ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 80023fc:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <updateTx+0x90>)
 80023fe:	89da      	ldrh	r2, [r3, #14]
 8002400:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <updateTx+0x90>)
 8002402:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8002406:	4619      	mov	r1, r3
 8002408:	4610      	mov	r0, r2
 800240a:	f7ff fb71 	bl	8001af0 <calcAirTime>
 800240e:	6138      	str	r0, [r7, #16]
    // Update channel/global duty cycle stats
    xref2band_t band = &LMIC.bands[freq & 0x3];
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	3304      	adds	r3, #4
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4a16      	ldr	r2, [pc, #88]	; (8002474 <updateTx+0x90>)
 800241c:	4413      	add	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
    LMIC.freq  = freq & ~(u4_t)3;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f023 0303 	bic.w	r3, r3, #3
 8002426:	4a13      	ldr	r2, [pc, #76]	; (8002474 <updateTx+0x90>)
 8002428:	6093      	str	r3, [r2, #8]
    LMIC.txpow = band->txpow;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8002430:	4b10      	ldr	r3, [pc, #64]	; (8002474 <updateTx+0x90>)
 8002432:	749a      	strb	r2, [r3, #18]
    band->avail = txbeg + airtime * band->txcap;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	fb03 f202 	mul.w	r2, r3, r2
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	441a      	add	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	605a      	str	r2, [r3, #4]
    if( LMIC.globalDutyRate != 0 )
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <updateTx+0x90>)
 800244a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00b      	beq.n	800246a <updateTx+0x86>
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <updateTx+0x90>)
 8002454:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8002458:	461a      	mov	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	fa03 f202 	lsl.w	r2, r3, r2
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	4a03      	ldr	r2, [pc, #12]	; (8002474 <updateTx+0x90>)
 8002466:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000304 	.word	0x20000304

08002478 <nextTx>:

static ostime_t nextTx (ostime_t now) {
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
    u1_t bmap=0xF;
 8002480:	230f      	movs	r3, #15
 8002482:	75fb      	strb	r3, [r7, #23]
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	4b48      	ldr	r3, [pc, #288]	; (80025a8 <nextTx+0x130>)
 8002488:	4413      	add	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        u1_t band=0;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
        for( u1_t bi=0; bi<4; bi++ ) {
 8002490:	2300      	movs	r3, #0
 8002492:	73bb      	strb	r3, [r7, #14]
 8002494:	e01d      	b.n	80024d2 <nextTx+0x5a>
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
 8002496:	7dfa      	ldrb	r2, [r7, #23]
 8002498:	7bbb      	ldrb	r3, [r7, #14]
 800249a:	fa42 f303 	asr.w	r3, r2, r3
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d012      	beq.n	80024cc <nextTx+0x54>
 80024a6:	7bbb      	ldrb	r3, [r7, #14]
 80024a8:	4a40      	ldr	r2, [pc, #256]	; (80025ac <nextTx+0x134>)
 80024aa:	3304      	adds	r3, #4
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	dd08      	ble.n	80024cc <nextTx+0x54>
                mintime = LMIC.bands[band = bi].avail;
 80024ba:	7bbb      	ldrb	r3, [r7, #14]
 80024bc:	73fb      	strb	r3, [r7, #15]
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	4a3a      	ldr	r2, [pc, #232]	; (80025ac <nextTx+0x134>)
 80024c2:	3304      	adds	r3, #4
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	613b      	str	r3, [r7, #16]
        for( u1_t bi=0; bi<4; bi++ ) {
 80024cc:	7bbb      	ldrb	r3, [r7, #14]
 80024ce:	3301      	adds	r3, #1
 80024d0:	73bb      	strb	r3, [r7, #14]
 80024d2:	7bbb      	ldrb	r3, [r7, #14]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d9de      	bls.n	8002496 <nextTx+0x1e>
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	4a34      	ldr	r2, [pc, #208]	; (80025ac <nextTx+0x134>)
 80024dc:	3304      	adds	r3, #4
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4413      	add	r3, r2
 80024e2:	78db      	ldrb	r3, [r3, #3]
 80024e4:	737b      	strb	r3, [r7, #13]
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 80024e6:	2300      	movs	r3, #0
 80024e8:	733b      	strb	r3, [r7, #12]
 80024ea:	e042      	b.n	8002572 <nextTx+0xfa>
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
 80024ec:	7b7b      	ldrb	r3, [r7, #13]
 80024ee:	3301      	adds	r3, #1
 80024f0:	737b      	strb	r3, [r7, #13]
 80024f2:	7b7b      	ldrb	r3, [r7, #13]
 80024f4:	2b0f      	cmp	r3, #15
 80024f6:	d902      	bls.n	80024fe <nextTx+0x86>
                chnl -=  MAX_CHANNELS;
 80024f8:	7b7b      	ldrb	r3, [r7, #13]
 80024fa:	3b10      	subs	r3, #16
 80024fc:	737b      	strb	r3, [r7, #13]
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 80024fe:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <nextTx+0x134>)
 8002500:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002504:	461a      	mov	r2, r3
 8002506:	7b7b      	ldrb	r3, [r7, #13]
 8002508:	fa42 f303 	asr.w	r3, r2, r3
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d02b      	beq.n	800256c <nextTx+0xf4>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 8002514:	7b7b      	ldrb	r3, [r7, #13]
 8002516:	4a25      	ldr	r2, [pc, #148]	; (80025ac <nextTx+0x134>)
 8002518:	3340      	adds	r3, #64	; 0x40
 800251a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800251e:	461a      	mov	r2, r3
 8002520:	4b22      	ldr	r3, [pc, #136]	; (80025ac <nextTx+0x134>)
 8002522:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	fa42 f303 	asr.w	r3, r2, r3
 800252e:	f003 0301 	and.w	r3, r3, #1
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 8002532:	2b00      	cmp	r3, #0
 8002534:	d01a      	beq.n	800256c <nextTx+0xf4>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	7b7b      	ldrb	r3, [r7, #13]
 800253a:	491c      	ldr	r1, [pc, #112]	; (80025ac <nextTx+0x134>)
 800253c:	3310      	adds	r3, #16
 800253e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002542:	f003 0303 	and.w	r3, r3, #3
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 8002546:	429a      	cmp	r2, r3
 8002548:	d110      	bne.n	800256c <nextTx+0xf4>
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	4917      	ldr	r1, [pc, #92]	; (80025ac <nextTx+0x134>)
 800254e:	1d13      	adds	r3, r2, #4
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	440b      	add	r3, r1
 8002554:	7b79      	ldrb	r1, [r7, #13]
 8002556:	70d9      	strb	r1, [r3, #3]
 8002558:	4914      	ldr	r1, [pc, #80]	; (80025ac <nextTx+0x134>)
 800255a:	1d13      	adds	r3, r2, #4
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	440b      	add	r3, r1
 8002560:	78da      	ldrb	r2, [r3, #3]
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <nextTx+0x134>)
 8002564:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
                return mintime;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	e016      	b.n	800259a <nextTx+0x122>
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 800256c:	7b3b      	ldrb	r3, [r7, #12]
 800256e:	3301      	adds	r3, #1
 8002570:	733b      	strb	r3, [r7, #12]
 8002572:	7b3b      	ldrb	r3, [r7, #12]
 8002574:	2b0f      	cmp	r3, #15
 8002576:	d9b9      	bls.n	80024ec <nextTx+0x74>
            }
        }
        if( (bmap &= ~(1<<band)) == 0 ) {
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2201      	movs	r2, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	b25b      	sxtb	r3, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	b25a      	sxtb	r2, r3
 8002586:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800258a:	4013      	ands	r3, r2
 800258c:	b25b      	sxtb	r3, r3
 800258e:	75fb      	strb	r3, [r7, #23]
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	2b00      	cmp	r3, #0
 8002594:	f47f af76 	bne.w	8002484 <nextTx+0xc>
            // No feasible channel  found!
            return mintime;
 8002598:	693b      	ldr	r3, [r7, #16]
        }
    } while(1);
}
 800259a:	4618      	mov	r0, r3
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	44aa2000 	.word	0x44aa2000
 80025ac:	20000304 	.word	0x20000304

080025b0 <setBcnRxParams>:


static void setBcnRxParams (void) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
    LMIC.dataLen = 0;
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <setBcnRxParams+0x48>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t)3;
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <setBcnRxParams+0x48>)
 80025be:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 80025c2:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <setBcnRxParams+0x48>)
 80025c4:	3310      	adds	r3, #16
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	f023 0303 	bic.w	r3, r3, #3
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <setBcnRxParams+0x48>)
 80025d0:	6093      	str	r3, [r2, #8]
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
 80025d2:	2003      	movs	r0, #3
 80025d4:	f7fe ffc4 	bl	8001560 <dndr2rps>
 80025d8:	4603      	mov	r3, r0
 80025da:	2101      	movs	r1, #1
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe ff71 	bl	80014c4 <setNocrc>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2111      	movs	r1, #17
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe ff92 	bl	8001510 <setIh>
 80025ec:	4603      	mov	r3, r0
 80025ee:	461a      	mov	r2, r3
 80025f0:	4b01      	ldr	r3, [pc, #4]	; (80025f8 <setBcnRxParams+0x48>)
 80025f2:	81da      	strh	r2, [r3, #14]
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000304 	.word	0x20000304

080025fc <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop (void) {
 80025fc:	b598      	push	{r3, r4, r7, lr}
 80025fe:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 8002600:	f003 f8d0 	bl	80057a4 <radio_rand1>
 8002604:	4603      	mov	r3, r0
 8002606:	461a      	mov	r2, r3
 8002608:	4b15      	ldr	r3, [pc, #84]	; (8002660 <initJoinLoop+0x64>)
 800260a:	fba3 1302 	umull	r1, r3, r3, r2
 800260e:	0899      	lsrs	r1, r3, #2
 8002610:	460b      	mov	r3, r1
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	440b      	add	r3, r1
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	b2da      	uxtb	r2, r3
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <initJoinLoop+0x68>)
 800261e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
#endif
    LMIC.adrTxPow = 14;
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <initJoinLoop+0x68>)
 8002624:	220e      	movs	r2, #14
 8002626:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
    setDrJoin(DRCHG_SET, DR_SF7);
 800262a:	2105      	movs	r1, #5
 800262c:	2000      	movs	r0, #0
 800262e:	f7ff fd2b 	bl	8002088 <setDrJoin>
    initDefaultChannels(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f7ff fd6a 	bl	800210c <initDefaultChannels>
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <initJoinLoop+0x68>)
 800263a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800263e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <initJoinLoop+0x4e>
 8002646:	f7fe fed9 	bl	80013fc <hal_failed>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <initJoinLoop+0x68>)
 800264c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800264e:	2008      	movs	r0, #8
 8002650:	f7ff fcae 	bl	8001fb0 <rndDelay>
 8002654:	4603      	mov	r3, r0
 8002656:	4423      	add	r3, r4
 8002658:	4a02      	ldr	r2, [pc, #8]	; (8002664 <initJoinLoop+0x68>)
 800265a:	6013      	str	r3, [r2, #0]
}
 800265c:	bf00      	nop
 800265e:	bd98      	pop	{r3, r4, r7, pc}
 8002660:	aaaaaaab 	.word	0xaaaaaaab
 8002664:	20000304 	.word	0x20000304

08002668 <nextJoinState>:


static ostime_t nextJoinState (void) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
    u1_t failed = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	71fb      	strb	r3, [r7, #7]

    // Try 869.x and then 864.x with same DR
    // If both fail try next lower datarate
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
 8002672:	4b30      	ldr	r3, [pc, #192]	; (8002734 <nextJoinState+0xcc>)
 8002674:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002678:	3301      	adds	r3, #1
 800267a:	b2da      	uxtb	r2, r3
 800267c:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <nextJoinState+0xcc>)
 800267e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8002682:	4b2c      	ldr	r3, [pc, #176]	; (8002734 <nextJoinState+0xcc>)
 8002684:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002688:	2b06      	cmp	r3, #6
 800268a:	d103      	bne.n	8002694 <nextJoinState+0x2c>
        LMIC.txChnl = 0;
 800268c:	4b29      	ldr	r3, [pc, #164]	; (8002734 <nextJoinState+0xcc>)
 800268e:	2200      	movs	r2, #0
 8002690:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    if( (++LMIC.txCnt & 1) == 0 ) {
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <nextJoinState+0xcc>)
 8002696:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 800269a:	3301      	adds	r3, #1
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4b25      	ldr	r3, [pc, #148]	; (8002734 <nextJoinState+0xcc>)
 80026a0:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
 80026a4:	4b23      	ldr	r3, [pc, #140]	; (8002734 <nextJoinState+0xcc>)
 80026a6:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d112      	bne.n	80026d8 <nextJoinState+0x70>
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <nextJoinState+0xcc>)
 80026b4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <nextJoinState+0x5a>
            failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 80026bc:	2301      	movs	r3, #1
 80026be:	71fb      	strb	r3, [r7, #7]
 80026c0:	e00a      	b.n	80026d8 <nextJoinState+0x70>
        else
            setDrJoin(DRCHG_NOJACC, decDR((dr_t)LMIC.datarate));
 80026c2:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <nextJoinState+0xcc>)
 80026c4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe ff5d 	bl	8001588 <decDR>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4619      	mov	r1, r3
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff fcd8 	bl	8002088 <setDrJoin>
    }
    // Clear NEXTCHNL because join state engine controls channel hopping
    LMIC.opmode &= ~OP_NEXTCHNL;
 80026d8:	4b16      	ldr	r3, [pc, #88]	; (8002734 <nextJoinState+0xcc>)
 80026da:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80026de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	4b13      	ldr	r3, [pc, #76]	; (8002734 <nextJoinState+0xcc>)
 80026e6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
 80026ea:	f002 fb35 	bl	8004d58 <os_getTime>
 80026ee:	6038      	str	r0, [r7, #0]
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
 80026f0:	4b10      	ldr	r3, [pc, #64]	; (8002734 <nextJoinState+0xcc>)
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	da02      	bge.n	8002702 <nextJoinState+0x9a>
        time = LMIC.bands[BAND_MILLI].avail;
 80026fc:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <nextJoinState+0xcc>)
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	603b      	str	r3, [r7, #0]
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <nextJoinState+0xcc>)
 8002704:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002708:	461a      	mov	r2, r3
 800270a:	23ff      	movs	r3, #255	; 0xff
 800270c:	4113      	asrs	r3, r2
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fc4d 	bl	8001fb0 <rndDelay>
 8002716:	4603      	mov	r3, r0
 8002718:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800271c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    LMIC.txend = time +
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	4413      	add	r3, r2
 8002724:	4a03      	ldr	r2, [pc, #12]	; (8002734 <nextJoinState+0xcc>)
 8002726:	6013      	str	r3, [r2, #0]
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
 8002728:	79fb      	ldrb	r3, [r7, #7]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000304 	.word	0x20000304

08002738 <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif


static void runEngineUpdate (xref2osjob_t osjob) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
    engineUpdate();
 8002740:	f001 fce8 	bl	8004114 <engineUpdate>
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <reportEvent>:


static void reportEvent (ev_t ev) {
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	4618      	mov	r0, r3
 800275a:	f001 ffe9 	bl	8004730 <onEvent>
    engineUpdate();
 800275e:	f001 fcd9 	bl	8004114 <engineUpdate>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <runReset>:


static void runReset (xref2osjob_t osjob) {
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
    // Disable session
    LMIC_reset();
 8002772:	f001 fe99 	bl	80044a8 <LMIC_reset>
    LMIC_startJoining();
 8002776:	f001 fa41 	bl	8003bfc <LMIC_startJoining>
    reportEvent(EV_RESET);
 800277a:	200c      	movs	r0, #12
 800277c:	f7ff ffe6 	bl	800274c <reportEvent>
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <stateJustJoined>:

static void stateJustJoined (void) {
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <stateJustJoined+0xc4>)
 800278e:	2200      	movs	r2, #0
 8002790:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8002794:	4b2d      	ldr	r3, [pc, #180]	; (800284c <stateJustJoined+0xc4>)
 8002796:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800279a:	4a2c      	ldr	r2, [pc, #176]	; (800284c <stateJustJoined+0xc4>)
 800279c:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    LMIC.rejoinCnt   = 0;
 80027a0:	4b2a      	ldr	r3, [pc, #168]	; (800284c <stateJustJoined+0xc4>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 80027a8:	4b28      	ldr	r3, [pc, #160]	; (800284c <stateJustJoined+0xc4>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
 80027b0:	4b26      	ldr	r3, [pc, #152]	; (800284c <stateJustJoined+0xc4>)
 80027b2:	f893 2126 	ldrb.w	r2, [r3, #294]	; 0x126
 80027b6:	4b25      	ldr	r3, [pc, #148]	; (800284c <stateJustJoined+0xc4>)
 80027b8:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
 80027bc:	4b23      	ldr	r3, [pc, #140]	; (800284c <stateJustJoined+0xc4>)
 80027be:	f893 2125 	ldrb.w	r2, [r3, #293]	; 0x125
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <stateJustJoined+0xc4>)
 80027c4:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 80027c8:	4b20      	ldr	r3, [pc, #128]	; (800284c <stateJustJoined+0xc4>)
 80027ca:	f893 2122 	ldrb.w	r2, [r3, #290]	; 0x122
 80027ce:	4b1f      	ldr	r3, [pc, #124]	; (800284c <stateJustJoined+0xc4>)
 80027d0:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    LMIC.moreData    = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <stateJustJoined+0xc4>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 80027dc:	4b1b      	ldr	r3, [pc, #108]	; (800284c <stateJustJoined+0xc4>)
 80027de:	f893 2129 	ldrb.w	r2, [r3, #297]	; 0x129
 80027e2:	4b1a      	ldr	r3, [pc, #104]	; (800284c <stateJustJoined+0xc4>)
 80027e4:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 80027e8:	4b18      	ldr	r3, [pc, #96]	; (800284c <stateJustJoined+0xc4>)
 80027ea:	f893 212a 	ldrb.w	r2, [r3, #298]	; 0x12a
 80027ee:	4b17      	ldr	r3, [pc, #92]	; (800284c <stateJustJoined+0xc4>)
 80027f0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 80027f4:	4b15      	ldr	r3, [pc, #84]	; (800284c <stateJustJoined+0xc4>)
 80027f6:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <stateJustJoined+0xc4>)
 80027fc:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    LMIC.pingSetAns  = 0;
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <stateJustJoined+0xc4>)
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
    LMIC.upRepeat    = 0;
 8002808:	4b10      	ldr	r3, [pc, #64]	; (800284c <stateJustJoined+0xc4>)
 800280a:	2200      	movs	r2, #0
 800280c:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
    LMIC.adrAckReq   = LINK_CHECK_INIT;
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <stateJustJoined+0xc4>)
 8002812:	22f4      	movs	r2, #244	; 0xf4
 8002814:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
    LMIC.dn2Dr       = DR_DNW2;
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <stateJustJoined+0xc4>)
 800281a:	2200      	movs	r2, #0
 800281c:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
    LMIC.dn2Freq     = FREQ_DNW2;
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <stateJustJoined+0xc4>)
 8002822:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <stateJustJoined+0xc8>)
 8002824:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    LMIC.bcnChnl     = CHNL_BCN;
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <stateJustJoined+0xc4>)
 800282a:	2205      	movs	r2, #5
 800282c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
    LMIC.ping.freq   = FREQ_PING;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <stateJustJoined+0xc4>)
 8002832:	4a07      	ldr	r2, [pc, #28]	; (8002850 <stateJustJoined+0xc8>)
 8002834:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    LMIC.ping.dr     = DR_PING;
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <stateJustJoined+0xc4>)
 800283a:	2203      	movs	r2, #3
 800283c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20000304 	.word	0x20000304
 8002850:	33d3e608 	.word	0x33d3e608

08002854 <decodeBeacon>:
// ================================================================================
// Decoding frames


// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <decodeBeacon+0x120>)
 800285c:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8002860:	2b11      	cmp	r3, #17
 8002862:	d001      	beq.n	8002868 <decodeBeacon+0x14>
 8002864:	f7fe fdca 	bl	80013fc <hal_failed>
    xref2u1_t d = LMIC.frame;
 8002868:	4b43      	ldr	r3, [pc, #268]	; (8002978 <decodeBeacon+0x124>)
 800286a:	607b      	str	r3, [r7, #4]
    if(
#if defined CFG_eu868
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3307      	adds	r3, #7
 8002870:	781c      	ldrb	r4, [r3, #0]
 8002872:	2107      	movs	r1, #7
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7fe ff7e 	bl	8001776 <os_crc16>
 800287a:	4603      	mov	r3, r0
 800287c:	b2db      	uxtb	r3, r3
    if(
 800287e:	429c      	cmp	r4, r3
 8002880:	d001      	beq.n	8002886 <decodeBeacon+0x32>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
 8002882:	2300      	movs	r3, #0
 8002884:	e071      	b.n	800296a <decodeBeacon+0x116>
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe feda 	bl	8001640 <os_rlsbf4>
 800288c:	4603      	mov	r3, r0
 800288e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002892:	603b      	str	r3, [r7, #0]
    if( bcnnetid != LMIC.netid )
 8002894:	4b37      	ldr	r3, [pc, #220]	; (8002974 <decodeBeacon+0x120>)
 8002896:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d002      	beq.n	80028a6 <decodeBeacon+0x52>
        return -1;  // not the beacon we're looking for
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
 80028a4:	e061      	b.n	800296a <decodeBeacon+0x116>

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
 80028a6:	4b33      	ldr	r3, [pc, #204]	; (8002974 <decodeBeacon+0x120>)
 80028a8:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80028ac:	f023 0303 	bic.w	r3, r3, #3
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4b30      	ldr	r3, [pc, #192]	; (8002974 <decodeBeacon+0x120>)
 80028b4:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
 80028b8:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <decodeBeacon+0x120>)
 80028ba:	f993 200d 	ldrsb.w	r2, [r3, #13]
 80028be:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <decodeBeacon+0x120>)
 80028c0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    LMIC.bcninfo.rssi   = LMIC.rssi;
 80028c4:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <decodeBeacon+0x120>)
 80028c6:	f993 200c 	ldrsb.w	r2, [r3, #12]
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <decodeBeacon+0x120>)
 80028cc:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 80028d0:	4b28      	ldr	r3, [pc, #160]	; (8002974 <decodeBeacon+0x120>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 80028d8:	3b0c      	subs	r3, #12
 80028da:	4a26      	ldr	r2, [pc, #152]	; (8002974 <decodeBeacon+0x120>)
 80028dc:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3303      	adds	r3, #3
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe feab 	bl	8001640 <os_rlsbf4>
 80028ea:	4602      	mov	r2, r0
 80028ec:	4b21      	ldr	r3, [pc, #132]	; (8002974 <decodeBeacon+0x120>)
 80028ee:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    LMIC.bcninfo.flags |= BCN_PARTIAL;
 80028f2:	4b20      	ldr	r3, [pc, #128]	; (8002974 <decodeBeacon+0x120>)
 80028f4:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <decodeBeacon+0x120>)
 8002900:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	330f      	adds	r3, #15
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fe84 	bl	8001616 <os_rlsbf2>
 800290e:	4603      	mov	r3, r0
 8002910:	461c      	mov	r4, r3
 8002912:	210f      	movs	r1, #15
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7fe ff2e 	bl	8001776 <os_crc16>
 800291a:	4603      	mov	r3, r0
 800291c:	429c      	cmp	r4, r3
 800291e:	d001      	beq.n	8002924 <decodeBeacon+0xd0>
        return 1;
 8002920:	2301      	movs	r3, #1
 8002922:	e022      	b.n	800296a <decodeBeacon+0x116>
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3308      	adds	r3, #8
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fe89 	bl	8001640 <os_rlsbf4>
 800292e:	4603      	mov	r3, r0
 8002930:	121b      	asrs	r3, r3, #8
 8002932:	4a10      	ldr	r2, [pc, #64]	; (8002974 <decodeBeacon+0x120>)
 8002934:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	330b      	adds	r3, #11
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fe7f 	bl	8001640 <os_rlsbf4>
 8002942:	4603      	mov	r3, r0
 8002944:	121b      	asrs	r3, r3, #8
 8002946:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <decodeBeacon+0x120>)
 8002948:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7a1a      	ldrb	r2, [r3, #8]
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <decodeBeacon+0x120>)
 8002952:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
    LMIC.bcninfo.flags |= BCN_FULL;
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <decodeBeacon+0x120>)
 8002958:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800295c:	f043 0302 	orr.w	r3, r3, #2
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4b04      	ldr	r3, [pc, #16]	; (8002974 <decodeBeacon+0x120>)
 8002964:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
    return 2;
 8002968:	2302      	movs	r3, #2
}
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bd90      	pop	{r4, r7, pc}
 8002972:	bf00      	nop
 8002974:	20000304 	.word	0x20000304
 8002978:	2000044c 	.word	0x2000044c

0800297c <decodeFrame>:


static bit_t decodeFrame (void) {
 800297c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800297e:	b09d      	sub	sp, #116	; 0x74
 8002980:	af02      	add	r7, sp, #8
    xref2u1_t d = LMIC.frame;
 8002982:	4b97      	ldr	r3, [pc, #604]	; (8002be0 <decodeFrame+0x264>)
 8002984:	653b      	str	r3, [r7, #80]	; 0x50
    u1_t hdr    = d[0];
 8002986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    u1_t ftype  = hdr & HDR_FTYPE;
 800298e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002992:	f023 031f 	bic.w	r3, r3, #31
 8002996:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    int  dlen   = LMIC.dataLen;
 800299a:	4b92      	ldr	r3, [pc, #584]	; (8002be4 <decodeFrame+0x268>)
 800299c:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80029a0:	64bb      	str	r3, [r7, #72]	; 0x48
    if( dlen < OFF_DAT_OPTS+4 ||
 80029a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a4:	2b0b      	cmp	r3, #11
 80029a6:	dd0d      	ble.n	80029c4 <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 80029a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80029ac:	f003 0303 	and.w	r3, r3, #3
    if( dlen < OFF_DAT_OPTS+4 ||
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d107      	bne.n	80029c4 <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 80029b4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80029b8:	2b60      	cmp	r3, #96	; 0x60
 80029ba:	d012      	beq.n	80029e2 <decodeFrame+0x66>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
 80029bc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80029c0:	2ba0      	cmp	r3, #160	; 0xa0
 80029c2:	d00e      	beq.n	80029e2 <decodeFrame+0x66>
        // Basic sanity checks failed
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
 80029c4:	bf00      	nop
 80029c6:	e006      	b.n	80029d6 <decodeFrame+0x5a>
    if( addr != LMIC.devaddr ) {
        EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
 80029c8:	bf00      	nop
 80029ca:	e004      	b.n	80029d6 <decodeFrame+0x5a>
    }
    if( poff > pend ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
 80029cc:	bf00      	nop
 80029ce:	e002      	b.n	80029d6 <decodeFrame+0x5a>
        EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
                           e_.eui1   = MAIN::CDEV->getEui(),
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
 80029d0:	bf00      	nop
 80029d2:	e000      	b.n	80029d6 <decodeFrame+0x5a>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 80029d4:	bf00      	nop
        LMIC.dataLen = 0;
 80029d6:	4b83      	ldr	r3, [pc, #524]	; (8002be4 <decodeFrame+0x268>)
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
        return 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	e331      	b.n	8003046 <decodeFrame+0x6ca>
    int  fct   = d[OFF_DAT_FCT];
 80029e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e4:	3305      	adds	r3, #5
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	647b      	str	r3, [r7, #68]	; 0x44
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
 80029ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ec:	3301      	adds	r3, #1
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe fe26 	bl	8001640 <os_rlsbf4>
 80029f4:	6438      	str	r0, [r7, #64]	; 0x40
    u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 80029f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f8:	3306      	adds	r3, #6
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fe0b 	bl	8001616 <os_rlsbf2>
 8002a00:	4603      	mov	r3, r0
 8002a02:	63fb      	str	r3, [r7, #60]	; 0x3c
    int  olen  = fct & FCT_OPTLEN;
 8002a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	63bb      	str	r3, [r7, #56]	; 0x38
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 8002a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a0e:	115b      	asrs	r3, r3, #5
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
    int  poff  = OFF_DAT_OPTS+olen;
 8002a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a18:	3308      	adds	r3, #8
 8002a1a:	667b      	str	r3, [r7, #100]	; 0x64
    int  pend  = dlen-4;  // MIC
 8002a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a1e:	3b04      	subs	r3, #4
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
    if( addr != LMIC.devaddr ) {
 8002a22:	4b70      	ldr	r3, [pc, #448]	; (8002be4 <decodeFrame+0x268>)
 8002a24:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002a28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d1cc      	bne.n	80029c8 <decodeFrame+0x4c>
    if( poff > pend ) {
 8002a2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a32:	429a      	cmp	r2, r3
 8002a34:	dcca      	bgt.n	80029cc <decodeFrame+0x50>
    int port = -1;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3a:	663b      	str	r3, [r7, #96]	; 0x60
    int replayConf = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if( pend > poff )
 8002a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a44:	429a      	cmp	r2, r3
 8002a46:	dd07      	ble.n	8002a58 <decodeFrame+0xdc>
        port = d[poff++];
 8002a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	667a      	str	r2, [r7, #100]	; 0x64
 8002a4e:	461a      	mov	r2, r3
 8002a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a52:	4413      	add	r3, r2
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	663b      	str	r3, [r7, #96]	; 0x60
    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);
 8002a58:	4b62      	ldr	r3, [pc, #392]	; (8002be4 <decodeFrame+0x268>)
 8002a5a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002a5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a60:	b291      	uxth	r1, r2
 8002a62:	4a60      	ldr	r2, [pc, #384]	; (8002be4 <decodeFrame+0x268>)
 8002a64:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8002a68:	b292      	uxth	r2, r2
 8002a6a:	1a8a      	subs	r2, r1, r2
 8002a6c:	b292      	uxth	r2, r2
 8002a6e:	4413      	add	r3, r2
 8002a70:	63fb      	str	r3, [r7, #60]	; 0x3c
    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
 8002a72:	4b5c      	ldr	r3, [pc, #368]	; (8002be4 <decodeFrame+0x268>)
 8002a74:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 8002a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	2301      	movs	r3, #1
 8002a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a84:	4858      	ldr	r0, [pc, #352]	; (8002be8 <decodeFrame+0x26c>)
 8002a86:	f7fe fee9 	bl	800185c <aes_verifyMic>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d09f      	beq.n	80029d0 <decodeFrame+0x54>
    if( seqno < LMIC.seqnoDn ) {
 8002a90:	4b54      	ldr	r3, [pc, #336]	; (8002be4 <decodeFrame+0x268>)
 8002a92:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002a96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d21a      	bcs.n	8002ad2 <decodeFrame+0x156>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
 8002a9c:	4b51      	ldr	r3, [pc, #324]	; (8002be4 <decodeFrame+0x268>)
 8002a9e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	db94      	blt.n	80029d4 <decodeFrame+0x58>
        }
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
 8002aaa:	4b4e      	ldr	r3, [pc, #312]	; (8002be4 <decodeFrame+0x268>)
 8002aac:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d185      	bne.n	80029c4 <decodeFrame+0x48>
 8002ab8:	4b4a      	ldr	r3, [pc, #296]	; (8002be4 <decodeFrame+0x268>)
 8002aba:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d080      	beq.n	80029c4 <decodeFrame+0x48>
 8002ac2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002ac6:	2ba0      	cmp	r3, #160	; 0xa0
 8002ac8:	f47f af7c 	bne.w	80029c4 <decodeFrame+0x48>
                                e_.info2  = seqno));
            goto norx;
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
 8002acc:	2301      	movs	r3, #1
 8002ace:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ad0:	e00e      	b.n	8002af0 <decodeFrame+0x174>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
 8002ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	4a43      	ldr	r2, [pc, #268]	; (8002be4 <decodeFrame+0x268>)
 8002ad8:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 8002adc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002ae0:	2ba0      	cmp	r3, #160	; 0xa0
 8002ae2:	d101      	bne.n	8002ae8 <decodeFrame+0x16c>
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	e000      	b.n	8002aea <decodeFrame+0x16e>
 8002ae8:	2200      	movs	r2, #0
 8002aea:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <decodeFrame+0x268>)
 8002aec:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
 8002af0:	4b3c      	ldr	r3, [pc, #240]	; (8002be4 <decodeFrame+0x268>)
 8002af2:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d104      	bne.n	8002b04 <decodeFrame+0x188>
 8002afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <decodeFrame+0x19a>
        LMIC.opmode |= OP_POLL;
 8002b04:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <decodeFrame+0x268>)
 8002b06:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002b0a:	f043 0310 	orr.w	r3, r3, #16
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <decodeFrame+0x268>)
 8002b12:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
 8002b16:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <decodeFrame+0x268>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8002b1e:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <decodeFrame+0x268>)
 8002b20:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
 8002b24:	4b2f      	ldr	r3, [pc, #188]	; (8002be4 <decodeFrame+0x268>)
 8002b26:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8002b2a:	4b2e      	ldr	r3, [pc, #184]	; (8002be4 <decodeFrame+0x268>)
 8002b2c:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 8002b30:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8002b34:	d003      	beq.n	8002b3e <decodeFrame+0x1c2>
        LMIC.adrAckReq = LINK_CHECK_INIT;
 8002b36:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <decodeFrame+0x268>)
 8002b38:	22f4      	movs	r2, #244	; 0xf4
 8002b3a:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 8002b3e:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <decodeFrame+0x268>)
 8002b40:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002b44:	f1a3 0440 	sub.w	r4, r3, #64	; 0x40
 8002b48:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <decodeFrame+0x268>)
 8002b4a:	89db      	ldrh	r3, [r3, #14]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe ffaf 	bl	8001ab0 <getSensitivity>
 8002b52:	4603      	mov	r3, r0
 8002b54:	1ae3      	subs	r3, r4, r3
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 8002b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	db05      	blt.n	8002b6a <decodeFrame+0x1ee>
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	2bfe      	cmp	r3, #254	; 0xfe
 8002b62:	bfa8      	it	ge
 8002b64:	23fe      	movge	r3, #254	; 0xfe
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	e000      	b.n	8002b6c <decodeFrame+0x1f0>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <decodeFrame+0x268>)
 8002b6e:	f882 3124 	strb.w	r3, [r2, #292]	; 0x124

    xref2u1_t opts = &d[OFF_DAT_OPTS];
 8002b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b74:	3308      	adds	r3, #8
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
    int oidx = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	65bb      	str	r3, [r7, #88]	; 0x58
    while( oidx < olen ) {
 8002b7c:	e1f5      	b.n	8002f6a <decodeFrame+0x5ee>
        switch( opts[oidx] ) {
 8002b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	3b02      	subs	r3, #2
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	f200 81f4 	bhi.w	8002f76 <decodeFrame+0x5fa>
 8002b8e:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <decodeFrame+0x218>)
 8002b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b94:	08002bd9 	.word	0x08002bd9
 8002b98:	08002bed 	.word	0x08002bed
 8002b9c:	08002d4b 	.word	0x08002d4b
 8002ba0:	08002cc7 	.word	0x08002cc7
 8002ba4:	08002cb7 	.word	0x08002cb7
 8002ba8:	08002d99 	.word	0x08002d99
 8002bac:	08002f77 	.word	0x08002f77
 8002bb0:	08002f77 	.word	0x08002f77
 8002bb4:	08002f77 	.word	0x08002f77
 8002bb8:	08002f77 	.word	0x08002f77
 8002bbc:	08002f77 	.word	0x08002f77
 8002bc0:	08002f77 	.word	0x08002f77
 8002bc4:	08002f77 	.word	0x08002f77
 8002bc8:	08002f77 	.word	0x08002f77
 8002bcc:	08002f77 	.word	0x08002f77
 8002bd0:	08002e29 	.word	0x08002e29
 8002bd4:	08002e75 	.word	0x08002e75
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
 8002bd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bda:	3303      	adds	r3, #3
 8002bdc:	65bb      	str	r3, [r7, #88]	; 0x58
            continue;
 8002bde:	e1c4      	b.n	8002f6a <decodeFrame+0x5ee>
 8002be0:	2000044c 	.word	0x2000044c
 8002be4:	20000304 	.word	0x20000304
 8002be8:	200003f8 	.word	0x200003f8
        }
        case MCMD_LADR_REQ: {
            u1_t p1     = opts[oidx+1];            // txpow + DR
 8002bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bee:	3301      	adds	r3, #1
 8002bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	74bb      	strb	r3, [r7, #18]
            u2_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
 8002bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bfa:	3302      	adds	r3, #2
 8002bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bfe:	4413      	add	r3, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe fd08 	bl	8001616 <os_rlsbf2>
 8002c06:	4603      	mov	r3, r0
 8002c08:	823b      	strh	r3, [r7, #16]
            u1_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
 8002c0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c10:	4413      	add	r3, r2
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	f023 030f 	bic.w	r3, r3, #15
 8002c18:	73fb      	strb	r3, [r7, #15]
            u1_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
 8002c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c20:	4413      	add	r3, r2
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	73bb      	strb	r3, [r7, #14]
            oidx += 5;
 8002c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c2c:	3305      	adds	r3, #5
 8002c2e:	65bb      	str	r3, [r7, #88]	; 0x58

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
 8002c30:	4b8e      	ldr	r3, [pc, #568]	; (8002e6c <decodeFrame+0x4f0>)
 8002c32:	2287      	movs	r2, #135	; 0x87
 8002c34:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
 8002c38:	8a3a      	ldrh	r2, [r7, #16]
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fb86 	bl	8002350 <mapChannels>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d108      	bne.n	8002c5c <decodeFrame+0x2e0>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 8002c4a:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <decodeFrame+0x4f0>)
 8002c4c:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b85      	ldr	r3, [pc, #532]	; (8002e6c <decodeFrame+0x4f0>)
 8002c58:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
 8002c5c:	7cbb      	ldrb	r3, [r7, #18]
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	737b      	strb	r3, [r7, #13]
            if( !validDR(dr) ) {
 8002c62:	7b7b      	ldrb	r3, [r7, #13]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe fca7 	bl	80015b8 <validDR>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d108      	bne.n	8002c82 <decodeFrame+0x306>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 8002c70:	4b7e      	ldr	r3, [pc, #504]	; (8002e6c <decodeFrame+0x4f0>)
 8002c72:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8002c76:	f023 0302 	bic.w	r3, r3, #2
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	4b7b      	ldr	r3, [pc, #492]	; (8002e6c <decodeFrame+0x4f0>)
 8002c7e:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
 8002c82:	4b7a      	ldr	r3, [pc, #488]	; (8002e6c <decodeFrame+0x4f0>)
 8002c84:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8002c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c8c:	2b07      	cmp	r3, #7
 8002c8e:	d10d      	bne.n	8002cac <decodeFrame+0x330>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
 8002c90:	4a76      	ldr	r2, [pc, #472]	; (8002e6c <decodeFrame+0x4f0>)
 8002c92:	7bbb      	ldrb	r3, [r7, #14]
 8002c94:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 8002c98:	7cbb      	ldrb	r3, [r7, #18]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	4a74      	ldr	r2, [pc, #464]	; (8002e70 <decodeFrame+0x4f4>)
 8002ca0:	56d2      	ldrsb	r2, [r2, r3]
 8002ca2:	7b7b      	ldrb	r3, [r7, #13]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	2004      	movs	r0, #4
 8002ca8:	f7ff fa02 	bl	80020b0 <setDrTxpow>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 8002cac:	4b6f      	ldr	r3, [pc, #444]	; (8002e6c <decodeFrame+0x4f0>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
            continue;
 8002cb4:	e159      	b.n	8002f6a <decodeFrame+0x5ee>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
 8002cb6:	4b6d      	ldr	r3, [pc, #436]	; (8002e6c <decodeFrame+0x4f0>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
            oidx += 1;
 8002cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	65bb      	str	r3, [r7, #88]	; 0x58
            continue;
 8002cc4:	e151      	b.n	8002f6a <decodeFrame+0x5ee>
        }
        case MCMD_DN2P_SET: {
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
 8002cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc8:	3301      	adds	r3, #1
 8002cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ccc:	4413      	add	r3, r2
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	76bb      	strb	r3, [r7, #26]
            u4_t freq = convFreq(&opts[oidx+2]);
 8002cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd8:	3302      	adds	r3, #2
 8002cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cdc:	4413      	add	r3, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fb14 	bl	800230c <convFreq>
 8002ce4:	6178      	str	r0, [r7, #20]
            oidx += 5;
 8002ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ce8:	3305      	adds	r3, #5
 8002cea:	65bb      	str	r3, [r7, #88]	; 0x58
            LMIC.dn2Ans = 0x80;   // answer pending
 8002cec:	4b5f      	ldr	r3, [pc, #380]	; (8002e6c <decodeFrame+0x4f0>)
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            if( validDR(dr) )
 8002cf4:	7ebb      	ldrb	r3, [r7, #26]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fc5e 	bl	80015b8 <validDR>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d008      	beq.n	8002d14 <decodeFrame+0x398>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 8002d02:	4b5a      	ldr	r3, [pc, #360]	; (8002e6c <decodeFrame+0x4f0>)
 8002d04:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4b57      	ldr	r3, [pc, #348]	; (8002e6c <decodeFrame+0x4f0>)
 8002d10:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            if( freq != 0 )
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <decodeFrame+0x3b0>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 8002d1a:	4b54      	ldr	r3, [pc, #336]	; (8002e6c <decodeFrame+0x4f0>)
 8002d1c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4b51      	ldr	r3, [pc, #324]	; (8002e6c <decodeFrame+0x4f0>)
 8002d28:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
 8002d2c:	4b4f      	ldr	r3, [pc, #316]	; (8002e6c <decodeFrame+0x4f0>)
 8002d2e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002d32:	2b83      	cmp	r3, #131	; 0x83
 8002d34:	f040 8119 	bne.w	8002f6a <decodeFrame+0x5ee>
                LMIC.dn2Dr = dr;
 8002d38:	4a4c      	ldr	r2, [pc, #304]	; (8002e6c <decodeFrame+0x4f0>)
 8002d3a:	7ebb      	ldrb	r3, [r7, #26]
 8002d3c:	f882 312b 	strb.w	r3, [r2, #299]	; 0x12b
                LMIC.dn2Freq = freq;
 8002d40:	4a4a      	ldr	r2, [pc, #296]	; (8002e6c <decodeFrame+0x4f0>)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
                DO_DEVDB(LMIC.dn2Dr,dn2Dr);
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
            continue;
 8002d48:	e10f      	b.n	8002f6a <decodeFrame+0x5ee>
        }
        case MCMD_DCAP_REQ: {
            u1_t cap = opts[oidx+1];
 8002d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d50:	4413      	add	r3, r2
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	74fb      	strb	r3, [r7, #19]
            oidx += 2;
 8002d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d58:	3302      	adds	r3, #2
 8002d5a:	65bb      	str	r3, [r7, #88]	; 0x58
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
 8002d5c:	7cfb      	ldrb	r3, [r7, #19]
 8002d5e:	2bff      	cmp	r3, #255	; 0xff
 8002d60:	d108      	bne.n	8002d74 <decodeFrame+0x3f8>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 8002d62:	4b42      	ldr	r3, [pc, #264]	; (8002e6c <decodeFrame+0x4f0>)
 8002d64:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <decodeFrame+0x4f0>)
 8002d70:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            LMIC.globalDutyRate  = cap & 0xF;
 8002d74:	7cfb      	ldrb	r3, [r7, #19]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <decodeFrame+0x4f0>)
 8002d7e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
            LMIC.globalDutyAvail = os_getTime();
 8002d82:	f001 ffe9 	bl	8004d58 <os_getTime>
 8002d86:	4602      	mov	r2, r0
 8002d88:	4b38      	ldr	r3, [pc, #224]	; (8002e6c <decodeFrame+0x4f0>)
 8002d8a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
 8002d8e:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <decodeFrame+0x4f0>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            continue;
 8002d96:	e0e8      	b.n	8002f6a <decodeFrame+0x5ee>
        }
        case MCMD_SNCH_REQ: {
            u1_t chidx = opts[oidx+1];  // channel
 8002d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d9e:	4413      	add	r3, r2
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            u4_t freq  = convFreq(&opts[oidx+2]); // freq
 8002da6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002da8:	3302      	adds	r3, #2
 8002daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dac:	4413      	add	r3, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff faac 	bl	800230c <convFreq>
 8002db4:	61f8      	str	r0, [r7, #28]
            u1_t drs   = opts[oidx+5];  // datarate span
 8002db6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002db8:	3305      	adds	r3, #5
 8002dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dbc:	4413      	add	r3, r2
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	76fb      	strb	r3, [r7, #27]
            LMIC.snchAns = 0x80;
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <decodeFrame+0x4f0>)
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d027      	beq.n	8002e20 <decodeFrame+0x4a4>
 8002dd0:	7efb      	ldrb	r3, [r7, #27]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	b21a      	sxth	r2, r3
 8002de0:	7efb      	ldrb	r3, [r7, #27]
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f1c3 030f 	rsb	r3, r3, #15
 8002dea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002dee:	fa41 f303 	asr.w	r3, r1, r3
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	4013      	ands	r3, r2
 8002df6:	b21b      	sxth	r3, r3
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002e02:	69f9      	ldr	r1, [r7, #28]
 8002e04:	f7ff fa08 	bl	8002218 <LMIC_setupChannel>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <decodeFrame+0x4a4>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <decodeFrame+0x4f0>)
 8002e10:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8002e14:	f043 0303 	orr.w	r3, r3, #3
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <decodeFrame+0x4f0>)
 8002e1c:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
            oidx += 6;
 8002e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e22:	3306      	adds	r3, #6
 8002e24:	65bb      	str	r3, [r7, #88]	; 0x58
            continue;
 8002e26:	e0a0      	b.n	8002f6a <decodeFrame+0x5ee>
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
 8002e28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e2e:	4413      	add	r3, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fa6b 	bl	800230c <convFreq>
 8002e36:	6278      	str	r0, [r7, #36]	; 0x24
            oidx += 4;
 8002e38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	65bb      	str	r3, [r7, #88]	; 0x58
            u1_t flags = 0x80;
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            if( freq != 0 ) {
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <decodeFrame+0x4e2>
                flags |= MCMD_PING_ANS_FQACK;
 8002e4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                LMIC.ping.freq = freq;
 8002e56:	4a05      	ldr	r2, [pc, #20]	; (8002e6c <decodeFrame+0x4f0>)
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
 8002e5e:	4a03      	ldr	r2, [pc, #12]	; (8002e6c <decodeFrame+0x4f0>)
 8002e60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e64:	f882 3133 	strb.w	r3, [r2, #307]	; 0x133
            continue;
 8002e68:	e07f      	b.n	8002f6a <decodeFrame+0x5ee>
 8002e6a:	bf00      	nop
 8002e6c:	20000304 	.word	0x20000304
 8002e70:	0800ccbc 	.word	0x0800ccbc
        }
        case MCMD_BCNI_ANS: {
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
 8002e74:	4b76      	ldr	r3, [pc, #472]	; (8003050 <decodeFrame+0x6d4>)
 8002e76:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d16f      	bne.n	8002f62 <decodeFrame+0x5e6>
                LMIC.bcnChnl = opts[oidx+3];
 8002e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e84:	3303      	adds	r3, #3
 8002e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e88:	4413      	add	r3, r2
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	4b70      	ldr	r3, [pc, #448]	; (8003050 <decodeFrame+0x6d4>)
 8002e8e:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
 8002e92:	4b6f      	ldr	r3, [pc, #444]	; (8003050 <decodeFrame+0x6d4>)
 8002e94:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002e98:	f043 0302 	orr.w	r3, r3, #2
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	4b6c      	ldr	r3, [pc, #432]	; (8003050 <decodeFrame+0x6d4>)
 8002ea0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
 8002ea4:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <decodeFrame+0x6d4>)
 8002ea6:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <decodeFrame+0x536>
 8002eae:	f7fe faa5 	bl	80013fc <hal_failed>
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8002eb2:	4b67      	ldr	r3, [pc, #412]	; (8003050 <decodeFrame+0x6d4>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	607b      	str	r3, [r7, #4]
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
 8002eb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eba:	3301      	adds	r3, #1
 8002ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ebe:	4413      	add	r3, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe fba8 	bl	8001616 <os_rlsbf2>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	b29d      	uxth	r5, r3
 8002eca:	f04f 0600 	mov.w	r6, #0
 8002ece:	462b      	mov	r3, r5
 8002ed0:	4634      	mov	r4, r6
 8002ed2:	f04f 0100 	mov.w	r1, #0
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	0162      	lsls	r2, r4, #5
 8002edc:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002ee0:	0159      	lsls	r1, r3, #5
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4614      	mov	r4, r2
 8002ee6:	1b5b      	subs	r3, r3, r5
 8002ee8:	eb64 0406 	sbc.w	r4, r4, r6
 8002eec:	f04f 0100 	mov.w	r1, #0
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	00a2      	lsls	r2, r4, #2
 8002ef6:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002efa:	0099      	lsls	r1, r3, #2
 8002efc:	460b      	mov	r3, r1
 8002efe:	4614      	mov	r4, r2
 8002f00:	195b      	adds	r3, r3, r5
 8002f02:	eb44 0406 	adc.w	r4, r4, r6
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	0122      	lsls	r2, r4, #4
 8002f10:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8002f14:	0119      	lsls	r1, r3, #4
 8002f16:	1ac9      	subs	r1, r1, r3
 8002f18:	eb62 0204 	sbc.w	r2, r2, r4
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	f04f 0400 	mov.w	r4, #0
 8002f24:	0254      	lsls	r4, r2, #9
 8002f26:	ea44 54d1 	orr.w	r4, r4, r1, lsr #23
 8002f2a:	024b      	lsls	r3, r1, #9
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4622      	mov	r2, r4
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	f7fd f944 	bl	80001c8 <__aeabi_ldivmod>
 8002f40:	4603      	mov	r3, r0
 8002f42:	460c      	mov	r4, r1
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	441a      	add	r2, r3
                                       + ms2osticksCeil(MCMD_BCNI_TUNIT/2)
                                       - BCN_INTV_osticks);
 8002f48:	4b42      	ldr	r3, [pc, #264]	; (8003054 <decodeFrame+0x6d8>)
 8002f4a:	4413      	add	r3, r2
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8002f4c:	4a40      	ldr	r2, [pc, #256]	; (8003050 <decodeFrame+0x6d4>)
 8002f4e:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
                LMIC.bcninfo.flags = 0;  // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 8002f52:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <decodeFrame+0x6d4>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
                calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT,1);  // error of +/-N ms 
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	201e      	movs	r0, #30
 8002f5e:	f7fe feb3 	bl	8001cc8 <calcBcnRxWindowFromMillis>
                                     e_.info    = (LMIC.missedBcns |
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
            oidx += 4;
 8002f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f64:	3304      	adds	r3, #4
 8002f66:	65bb      	str	r3, [r7, #88]	; 0x58
            continue;
 8002f68:	bf00      	nop
    while( oidx < olen ) {
 8002f6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	f6ff ae05 	blt.w	8002b7e <decodeFrame+0x202>
 8002f74:	e000      	b.n	8002f78 <decodeFrame+0x5fc>
        }
        EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = Base::lsbf4(&d[pend]),
                           e_.info2  = Base::msbf4(&opts[oidx])));
        break;
 8002f76:	bf00      	nop
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
 8002f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d11d      	bne.n	8002fba <decodeFrame+0x63e>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
 8002f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	db1a      	blt.n	8002fba <decodeFrame+0x63e>
 8002f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	dd15      	ble.n	8002fba <decodeFrame+0x63e>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
 8002f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	dc01      	bgt.n	8002f98 <decodeFrame+0x61c>
 8002f94:	4830      	ldr	r0, [pc, #192]	; (8003058 <decodeFrame+0x6dc>)
 8002f96:	e000      	b.n	8002f9a <decodeFrame+0x61e>
 8002f98:	4830      	ldr	r0, [pc, #192]	; (800305c <decodeFrame+0x6e0>)
 8002f9a:	4b2d      	ldr	r3, [pc, #180]	; (8003050 <decodeFrame+0x6d4>)
 8002f9c:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
 8002fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fa2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002fa4:	4413      	add	r3, r2
 8002fa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fa8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002faa:	1a8a      	subs	r2, r1, r2
 8002fac:	9201      	str	r2, [sp, #4]
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	f7fe fcfb 	bl	80019b0 <aes_cipher>
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = Base::lsbf4(&d[pend]),
                            e_.info2  = seqno));
    }

    if( // NWK acks but we don't have a frame pending
 8002fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbc:	2b00      	cmp	r3, #0
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
 8002fbe:	4b24      	ldr	r3, [pc, #144]	; (8003050 <decodeFrame+0x6d4>)
 8002fc0:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d010      	beq.n	8002fea <decodeFrame+0x66e>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 8002fc8:	4b21      	ldr	r3, [pc, #132]	; (8003050 <decodeFrame+0x6d4>)
 8002fca:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fd2:	2a00      	cmp	r2, #0
 8002fd4:	d002      	beq.n	8002fdc <decodeFrame+0x660>
 8002fd6:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002fda:	e000      	b.n	8002fde <decodeFrame+0x662>
 8002fdc:	2240      	movs	r2, #64	; 0x40
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	b25b      	sxtb	r3, r3
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <decodeFrame+0x6d4>)
 8002fe6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145

    if( port < 0 ) {
 8002fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	da12      	bge.n	8003016 <decodeFrame+0x69a>
        LMIC.txrxFlags |= TXRX_NOPORT;
 8002ff0:	4b17      	ldr	r3, [pc, #92]	; (8003050 <decodeFrame+0x6d4>)
 8002ff2:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8002ff6:	f043 0320 	orr.w	r3, r3, #32
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	4b14      	ldr	r3, [pc, #80]	; (8003050 <decodeFrame+0x6d4>)
 8002ffe:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        LMIC.dataBeg = poff;
 8003002:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <decodeFrame+0x6d4>)
 8003008:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
        LMIC.dataLen = 0;
 800300c:	4b10      	ldr	r3, [pc, #64]	; (8003050 <decodeFrame+0x6d4>)
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8003014:	e016      	b.n	8003044 <decodeFrame+0x6c8>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
 8003016:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <decodeFrame+0x6d4>)
 8003018:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 800301c:	f043 0310 	orr.w	r3, r3, #16
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <decodeFrame+0x6d4>)
 8003024:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        LMIC.dataBeg = poff;
 8003028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800302a:	b2da      	uxtb	r2, r3
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <decodeFrame+0x6d4>)
 800302e:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
        LMIC.dataLen = pend-poff;
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	b2da      	uxtb	r2, r3
 8003036:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003038:	b2db      	uxtb	r3, r3
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <decodeFrame+0x6d4>)
 8003040:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    }
    return 1;
 8003044:	2301      	movs	r3, #1
}
 8003046:	4618      	mov	r0, r3
 8003048:	376c      	adds	r7, #108	; 0x6c
 800304a:	46bd      	mov	sp, r7
 800304c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800304e:	bf00      	nop
 8003050:	20000304 	.word	0x20000304
 8003054:	ffc181e0 	.word	0xffc181e0
 8003058:	200003f8 	.word	0x200003f8
 800305c:	20000408 	.word	0x20000408

08003060 <setupRx2>:

// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
    LMIC.txrxFlags = TXRX_DNW2;
 8003064:	4b0d      	ldr	r3, [pc, #52]	; (800309c <setupRx2+0x3c>)
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <setupRx2+0x3c>)
 800306e:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fa74 	bl	8001560 <dndr2rps>
 8003078:	4603      	mov	r3, r0
 800307a:	461a      	mov	r2, r3
 800307c:	4b07      	ldr	r3, [pc, #28]	; (800309c <setupRx2+0x3c>)
 800307e:	81da      	strh	r2, [r3, #14]
    LMIC.freq = LMIC.dn2Freq;
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <setupRx2+0x3c>)
 8003082:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8003086:	4a05      	ldr	r2, [pc, #20]	; (800309c <setupRx2+0x3c>)
 8003088:	6093      	str	r3, [r2, #8]
    LMIC.dataLen = 0;
 800308a:	4b04      	ldr	r3, [pc, #16]	; (800309c <setupRx2+0x3c>)
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    os_radio(RADIO_RX);
 8003092:	2002      	movs	r0, #2
 8003094:	f002 fc82 	bl	800599c <os_radio>
}
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20000304 	.word	0x20000304

080030a0 <schedRx2>:


static void schedRx2 (ostime_t delay, osjobcb_t func) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <schedRx2+0x44>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	18d1      	adds	r1, r2, r3
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <schedRx2+0x44>)
 80030b4:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <schedRx2+0x48>)
 80030bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	440b      	add	r3, r1
 80030c8:	4a06      	ldr	r2, [pc, #24]	; (80030e4 <schedRx2+0x44>)
 80030ca:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <schedRx2+0x44>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	3b40      	subs	r3, #64	; 0x40
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	4619      	mov	r1, r3
 80030d6:	4805      	ldr	r0, [pc, #20]	; (80030ec <schedRx2+0x4c>)
 80030d8:	f001 fea8 	bl	8004e2c <os_setTimedCallback>
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000304 	.word	0x20000304
 80030e8:	0800ccf0 	.word	0x0800ccf0
 80030ec:	20000318 	.word	0x20000318

080030f0 <setupRx1>:

static void setupRx1 (osjobcb_t func) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
    LMIC.txrxFlags = TXRX_DNW1;
 80030f8:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <setupRx1+0x40>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <setupRx1+0x40>)
 8003102:	89db      	ldrh	r3, [r3, #14]
 8003104:	2101      	movs	r1, #1
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe f9dc 	bl	80014c4 <setNocrc>
 800310c:	4603      	mov	r3, r0
 800310e:	461a      	mov	r2, r3
 8003110:	4b07      	ldr	r3, [pc, #28]	; (8003130 <setupRx1+0x40>)
 8003112:	81da      	strh	r2, [r3, #14]
    LMIC.dataLen = 0;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <setupRx1+0x40>)
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    LMIC.osjob.func = func;
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <setupRx1+0x40>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	61d3      	str	r3, [r2, #28]
    os_radio(RADIO_RX);
 8003122:	2002      	movs	r0, #2
 8003124:	f002 fc3a 	bl	800599c <os_radio>
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000304 	.word	0x20000304

08003134 <txDone>:


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
 800313e:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <txDone+0x94>)
 8003140:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003144:	461a      	mov	r2, r3
 8003146:	f240 6302 	movw	r3, #1538	; 0x602
 800314a:	4013      	ands	r3, r2
 800314c:	f240 4202 	movw	r2, #1026	; 0x402
 8003150:	4293      	cmp	r3, r2
 8003152:	d10b      	bne.n	800316c <txDone+0x38>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 8003154:	481d      	ldr	r0, [pc, #116]	; (80031cc <txDone+0x98>)
 8003156:	f7fe fe35 	bl	8001dc4 <rxschedInit>
        LMIC.opmode |= OP_PINGINI;
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <txDone+0x94>)
 800315c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003160:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003164:	b29a      	uxth	r2, r3
 8003166:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <txDone+0x94>)
 8003168:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    setRx1Params();
    // LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
    // Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
    // into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
    if( /* TX datarate */LMIC.rxsyms == DR_FSK ) {
 800316c:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <txDone+0x94>)
 800316e:	7c1b      	ldrb	r3, [r3, #16]
 8003170:	2b07      	cmp	r3, #7
 8003172:	d10a      	bne.n	800318a <txDone+0x56>
        LMIC.rxtime = LMIC.txend + delay - PRERX_FSK*us2osticksRound(160);
 8003174:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <txDone+0x94>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4413      	add	r3, r2
 800317c:	3b05      	subs	r3, #5
 800317e:	4a12      	ldr	r2, [pc, #72]	; (80031c8 <txDone+0x94>)
 8003180:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = RXLEN_FSK;
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <txDone+0x94>)
 8003184:	2208      	movs	r2, #8
 8003186:	741a      	strb	r2, [r3, #16]
 8003188:	e012      	b.n	80031b0 <txDone+0x7c>
    }
    else
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <txDone+0x94>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	18d1      	adds	r1, r2, r3
 8003192:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <txDone+0x94>)
 8003194:	7c5b      	ldrb	r3, [r3, #17]
 8003196:	461a      	mov	r2, r3
 8003198:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <txDone+0x9c>)
 800319a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	440b      	add	r3, r1
 80031a6:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <txDone+0x94>)
 80031a8:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = MINRX_SYMS;
 80031aa:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <txDone+0x94>)
 80031ac:	2205      	movs	r2, #5
 80031ae:	741a      	strb	r2, [r3, #16]
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <txDone+0x94>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	3b40      	subs	r3, #64	; 0x40
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	4619      	mov	r1, r3
 80031ba:	4806      	ldr	r0, [pc, #24]	; (80031d4 <txDone+0xa0>)
 80031bc:	f001 fe36 	bl	8004e2c <os_setTimedCallback>
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000304 	.word	0x20000304
 80031cc:	20000438 	.word	0x20000438
 80031d0:	0800ccf0 	.word	0x0800ccf0
 80031d4:	20000318 	.word	0x20000318

080031d8 <onJoinFailed>:


// ======================================== Join frames


static void onJoinFailed (xref2osjob_t osjob) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
 80031e0:	2008      	movs	r0, #8
 80031e2:	f7ff fab3 	bl	800274c <reportEvent>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <processJoinAccept>:


static bit_t processJoinAccept (void) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 80031f6:	4b94      	ldr	r3, [pc, #592]	; (8003448 <processJoinAccept+0x258>)
 80031f8:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d106      	bne.n	800320e <processJoinAccept+0x1e>
 8003200:	4b91      	ldr	r3, [pc, #580]	; (8003448 <processJoinAccept+0x258>)
 8003202:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <processJoinAccept+0x1e>
 800320a:	f7fe f8f7 	bl	80013fc <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 800320e:	4b8e      	ldr	r3, [pc, #568]	; (8003448 <processJoinAccept+0x258>)
 8003210:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <processJoinAccept+0x30>
 800321c:	f7fe f8ee 	bl	80013fc <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8003220:	4b89      	ldr	r3, [pc, #548]	; (8003448 <processJoinAccept+0x258>)
 8003222:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003226:	2b00      	cmp	r3, #0
 8003228:	d14c      	bne.n	80032c4 <processJoinAccept+0xd4>
      nojoinframe:
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <processJoinAccept+0x40>
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
 800322e:	bf00      	nop
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
 8003230:	4b85      	ldr	r3, [pc, #532]	; (8003448 <processJoinAccept+0x258>)
 8003232:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d123      	bne.n	8003286 <processJoinAccept+0x96>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 800323e:	4b82      	ldr	r3, [pc, #520]	; (8003448 <processJoinAccept+0x258>)
 8003240:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <processJoinAccept+0x60>
 800324c:	f7fe f8d6 	bl	80013fc <hal_failed>
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
 8003250:	4b7d      	ldr	r3, [pc, #500]	; (8003448 <processJoinAccept+0x258>)
 8003252:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003256:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800325a:	b29a      	uxth	r2, r3
 800325c:	4b7a      	ldr	r3, [pc, #488]	; (8003448 <processJoinAccept+0x258>)
 800325e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            if( LMIC.rejoinCnt < 10 )
 8003262:	4b79      	ldr	r3, [pc, #484]	; (8003448 <processJoinAccept+0x258>)
 8003264:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8003268:	2b09      	cmp	r3, #9
 800326a:	d807      	bhi.n	800327c <processJoinAccept+0x8c>
                LMIC.rejoinCnt++;
 800326c:	4b76      	ldr	r3, [pc, #472]	; (8003448 <processJoinAccept+0x258>)
 800326e:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8003272:	3301      	adds	r3, #1
 8003274:	b2da      	uxtb	r2, r3
 8003276:	4b74      	ldr	r3, [pc, #464]	; (8003448 <processJoinAccept+0x258>)
 8003278:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
            reportEvent(EV_REJOIN_FAILED);
 800327c:	2009      	movs	r0, #9
 800327e:	f7ff fa65 	bl	800274c <reportEvent>
            return 1;
 8003282:	2301      	movs	r3, #1
 8003284:	e0dc      	b.n	8003440 <processJoinAccept+0x250>
        LMIC.opmode &= ~OP_TXRXPEND;
 8003286:	4b70      	ldr	r3, [pc, #448]	; (8003448 <processJoinAccept+0x258>)
 8003288:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800328c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003290:	b29a      	uxth	r2, r3
 8003292:	4b6d      	ldr	r3, [pc, #436]	; (8003448 <processJoinAccept+0x258>)
 8003294:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        ostime_t delay = nextJoinState();
 8003298:	f7ff f9e6 	bl	8002668 <nextJoinState>
 800329c:	6038      	str	r0, [r7, #0]
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800329e:	f001 fd5b 	bl	8004d58 <os_getTime>
 80032a2:	4602      	mov	r2, r0
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	18d1      	adds	r1, r2, r3
                            (delay&1) != 0
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <processJoinAccept+0xc6>
 80032b2:	4b66      	ldr	r3, [pc, #408]	; (800344c <processJoinAccept+0x25c>)
 80032b4:	e000      	b.n	80032b8 <processJoinAccept+0xc8>
 80032b6:	4b66      	ldr	r3, [pc, #408]	; (8003450 <processJoinAccept+0x260>)
 80032b8:	461a      	mov	r2, r3
 80032ba:	4866      	ldr	r0, [pc, #408]	; (8003454 <processJoinAccept+0x264>)
 80032bc:	f001 fdb6 	bl	8004e2c <os_setTimedCallback>
        return 1;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0bd      	b.n	8003440 <processJoinAccept+0x250>
    u1_t hdr  = LMIC.frame[0];
 80032c4:	4b60      	ldr	r3, [pc, #384]	; (8003448 <processJoinAccept+0x258>)
 80032c6:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80032ca:	737b      	strb	r3, [r7, #13]
    u1_t dlen = LMIC.dataLen;
 80032cc:	4b5e      	ldr	r3, [pc, #376]	; (8003448 <processJoinAccept+0x258>)
 80032ce:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80032d2:	73fb      	strb	r3, [r7, #15]
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b11      	cmp	r3, #17
 80032d8:	d002      	beq.n	80032e0 <processJoinAccept+0xf0>
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	2b21      	cmp	r3, #33	; 0x21
 80032de:	d104      	bne.n	80032ea <processJoinAccept+0xfa>
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
 80032e0:	7b7b      	ldrb	r3, [r7, #13]
 80032e2:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d00b      	beq.n	8003302 <processJoinAccept+0x112>
      badframe:
 80032ea:	bf00      	nop
 80032ec:	e000      	b.n	80032f0 <processJoinAccept+0x100>
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
 80032ee:	bf00      	nop
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 80032f0:	4b55      	ldr	r3, [pc, #340]	; (8003448 <processJoinAccept+0x258>)
 80032f2:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d097      	beq.n	800322e <processJoinAccept+0x3e>
            return 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	e09e      	b.n	8003440 <processJoinAccept+0x250>
    aes_encrypt(LMIC.frame+1, dlen-1);
 8003302:	4a55      	ldr	r2, [pc, #340]	; (8003458 <processJoinAccept+0x268>)
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	3b01      	subs	r3, #1
 8003308:	4619      	mov	r1, r3
 800330a:	4610      	mov	r0, r2
 800330c:	f7fe fb3a 	bl	8001984 <aes_encrypt>
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	3b04      	subs	r3, #4
 8003314:	4619      	mov	r1, r3
 8003316:	4851      	ldr	r0, [pc, #324]	; (800345c <processJoinAccept+0x26c>)
 8003318:	f7fe fb12 	bl	8001940 <aes_verifyMic0>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0e5      	beq.n	80032ee <processJoinAccept+0xfe>
    }

    u4_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
 8003322:	4b4f      	ldr	r3, [pc, #316]	; (8003460 <processJoinAccept+0x270>)
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe f98b 	bl	8001640 <os_rlsbf4>
 800332a:	60b8      	str	r0, [r7, #8]
    LMIC.devaddr = addr;
 800332c:	4a46      	ldr	r2, [pc, #280]	; (8003448 <processJoinAccept+0x258>)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 8003334:	484b      	ldr	r0, [pc, #300]	; (8003464 <processJoinAccept+0x274>)
 8003336:	f7fe f983 	bl	8001640 <os_rlsbf4>
 800333a:	4603      	mov	r3, r0
 800333c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003340:	4a41      	ldr	r2, [pc, #260]	; (8003448 <processJoinAccept+0x258>)
 8003342:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

#if defined(CFG_eu868)
    initDefaultChannels(0);
 8003346:	2000      	movs	r0, #0
 8003348:	f7fe fee0 	bl	800210c <initDefaultChannels>
#endif
    if( dlen > LEN_JA ) {
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	2b11      	cmp	r3, #17
 8003350:	d920      	bls.n	8003394 <processJoinAccept+0x1a4>
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
 8003352:	230d      	movs	r3, #13
 8003354:	73fb      	strb	r3, [r7, #15]
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003356:	2303      	movs	r3, #3
 8003358:	73bb      	strb	r3, [r7, #14]
 800335a:	e018      	b.n	800338e <processJoinAccept+0x19e>
            u4_t freq = convFreq(&LMIC.frame[dlen]);
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003362:	4a39      	ldr	r2, [pc, #228]	; (8003448 <processJoinAccept+0x258>)
 8003364:	4413      	add	r3, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe ffd0 	bl	800230c <convFreq>
 800336c:	6078      	str	r0, [r7, #4]
            if( freq )
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d006      	beq.n	8003382 <processJoinAccept+0x192>
                LMIC_setupChannel(chidx, freq, 0, -1);
 8003374:	7bb8      	ldrb	r0, [r7, #14]
 8003376:	f04f 33ff 	mov.w	r3, #4294967295
 800337a:	2200      	movs	r2, #0
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	f7fe ff4b 	bl	8002218 <LMIC_setupChannel>
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003382:	7bbb      	ldrb	r3, [r7, #14]
 8003384:	3301      	adds	r3, #1
 8003386:	73bb      	strb	r3, [r7, #14]
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	3303      	adds	r3, #3
 800338c:	73fb      	strb	r3, [r7, #15]
 800338e:	7bbb      	ldrb	r3, [r7, #14]
 8003390:	2b07      	cmp	r3, #7
 8003392:	d9e3      	bls.n	800335c <processJoinAccept+0x16c>
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
 8003394:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <processJoinAccept+0x258>)
 8003396:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 800339a:	3b01      	subs	r3, #1
 800339c:	b298      	uxth	r0, r3
 800339e:	4b32      	ldr	r3, [pc, #200]	; (8003468 <processJoinAccept+0x278>)
 80033a0:	4a32      	ldr	r2, [pc, #200]	; (800346c <processJoinAccept+0x27c>)
 80033a2:	492d      	ldr	r1, [pc, #180]	; (8003458 <processJoinAccept+0x268>)
 80033a4:	f7fe fb48 	bl	8001a38 <aes_sessKeys>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
 80033a8:	4b27      	ldr	r3, [pc, #156]	; (8003448 <processJoinAccept+0x258>)
 80033aa:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80033ae:	f003 0324 	and.w	r3, r3, #36	; 0x24
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <processJoinAccept+0x1ca>
 80033b6:	f7fe f821 	bl	80013fc <hal_failed>
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 80033ba:	4b23      	ldr	r3, [pc, #140]	; (8003448 <processJoinAccept+0x258>)
 80033bc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80033c0:	f003 0320 	and.w	r3, r3, #32
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00e      	beq.n	80033e6 <processJoinAccept+0x1f6>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 80033c8:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <processJoinAccept+0x258>)
 80033ca:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 80033ce:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <processJoinAccept+0x258>)
 80033d0:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 80033d4:	4619      	mov	r1, r3
 80033d6:	4610      	mov	r0, r2
 80033d8:	f7fe f904 	bl	80015e4 <lowerDR>
 80033dc:	4603      	mov	r3, r0
 80033de:	461a      	mov	r2, r3
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <processJoinAccept+0x258>)
 80033e2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
 80033e6:	4b18      	ldr	r3, [pc, #96]	; (8003448 <processJoinAccept+0x258>)
 80033e8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80033ec:	f423 7329 	bic.w	r3, r3, #676	; 0x2a4
 80033f0:	f023 0302 	bic.w	r3, r3, #2
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	4b14      	ldr	r3, [pc, #80]	; (8003448 <processJoinAccept+0x258>)
 80033f8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    LMIC.txCnt = 0;
 80033fc:	4b12      	ldr	r3, [pc, #72]	; (8003448 <processJoinAccept+0x258>)
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
    stateJustJoined();
 8003404:	f7ff f9c0 	bl	8002788 <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <processJoinAccept+0x258>)
 800340a:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	b2da      	uxtb	r2, r3
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <processJoinAccept+0x258>)
 8003416:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <processJoinAccept+0x258>)
 800341c:	f893 2154 	ldrb.w	r2, [r3, #340]	; 0x154
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <processJoinAccept+0x258>)
 8003422:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;   
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <processJoinAccept+0x258>)
 8003428:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800342c:	2b00      	cmp	r3, #0
 800342e:	d103      	bne.n	8003438 <processJoinAccept+0x248>
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <processJoinAccept+0x258>)
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
    reportEvent(EV_JOINED);
 8003438:	2006      	movs	r0, #6
 800343a:	f7ff f987 	bl	800274c <reportEvent>
    return 1;
 800343e:	2301      	movs	r3, #1
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000304 	.word	0x20000304
 800344c:	080031d9 	.word	0x080031d9
 8003450:	08002739 	.word	0x08002739
 8003454:	20000318 	.word	0x20000318
 8003458:	2000044d 	.word	0x2000044d
 800345c:	2000044c 	.word	0x2000044c
 8003460:	20000453 	.word	0x20000453
 8003464:	20000450 	.word	0x20000450
 8003468:	20000408 	.word	0x20000408
 800346c:	200003f8 	.word	0x200003f8

08003470 <processRx2Jacc>:


static void processRx2Jacc (xref2osjob_t osjob) {
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 )
 8003478:	4b07      	ldr	r3, [pc, #28]	; (8003498 <processRx2Jacc+0x28>)
 800347a:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 800347e:	2b00      	cmp	r3, #0
 8003480:	d103      	bne.n	800348a <processRx2Jacc+0x1a>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <processRx2Jacc+0x28>)
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    processJoinAccept();
 800348a:	f7ff feb1 	bl	80031f0 <processJoinAccept>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000304 	.word	0x20000304

0800349c <setupRx2Jacc>:


static void setupRx2Jacc (xref2osjob_t osjob) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <setupRx2Jacc+0x1c>)
 80034a6:	4a05      	ldr	r2, [pc, #20]	; (80034bc <setupRx2Jacc+0x20>)
 80034a8:	61da      	str	r2, [r3, #28]
    setupRx2();
 80034aa:	f7ff fdd9 	bl	8003060 <setupRx2>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000304 	.word	0x20000304
 80034bc:	08003471 	.word	0x08003471

080034c0 <processRx1Jacc>:


static void processRx1Jacc (xref2osjob_t osjob) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processJoinAccept() )
 80034c8:	4b08      	ldr	r3, [pc, #32]	; (80034ec <processRx1Jacc+0x2c>)
 80034ca:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d004      	beq.n	80034dc <processRx1Jacc+0x1c>
 80034d2:	f7ff fe8d 	bl	80031f0 <processJoinAccept>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d103      	bne.n	80034e4 <processRx1Jacc+0x24>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 80034dc:	4904      	ldr	r1, [pc, #16]	; (80034f0 <processRx1Jacc+0x30>)
 80034de:	4805      	ldr	r0, [pc, #20]	; (80034f4 <processRx1Jacc+0x34>)
 80034e0:	f7ff fdde 	bl	80030a0 <schedRx2>
}
 80034e4:	bf00      	nop
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000304 	.word	0x20000304
 80034f0:	0800349d 	.word	0x0800349d
 80034f4:	0002ee00 	.word	0x0002ee00

080034f8 <setupRx1Jacc>:


static void setupRx1Jacc (xref2osjob_t osjob) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1Jacc));
 8003500:	4803      	ldr	r0, [pc, #12]	; (8003510 <setupRx1Jacc+0x18>)
 8003502:	f7ff fdf5 	bl	80030f0 <setupRx1>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	080034c1 	.word	0x080034c1

08003514 <jreqDone>:


static void jreqDone (xref2osjob_t osjob) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 800351c:	4903      	ldr	r1, [pc, #12]	; (800352c <jreqDone+0x18>)
 800351e:	4804      	ldr	r0, [pc, #16]	; (8003530 <jreqDone+0x1c>)
 8003520:	f7ff fe08 	bl	8003134 <txDone>
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	080034f9 	.word	0x080034f9
 8003530:	00027100 	.word	0x00027100

08003534 <processRx2DnDataDelay>:
// ======================================== Data frames

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay (xref2osjob_t osjob) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
    processDnData();
 800353c:	f000 fbc6 	bl	8003ccc <processDnData>
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <processRx2DnData>:

static void processRx2DnData (xref2osjob_t osjob) {
 8003548:	b590      	push	{r4, r7, lr}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 ) {
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <processRx2DnData+0x48>)
 8003552:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003556:	2b00      	cmp	r3, #0
 8003558:	d115      	bne.n	8003586 <processRx2DnData+0x3e>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 800355a:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <processRx2DnData+0x48>)
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 8003562:	f001 fbf9 	bl	8004d58 <os_getTime>
 8003566:	4603      	mov	r3, r0
 8003568:	f503 34bb 	add.w	r4, r3, #95744	; 0x17600
 800356c:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8003570:	2002      	movs	r0, #2
 8003572:	f7fe fd1d 	bl	8001fb0 <rndDelay>
 8003576:	4603      	mov	r3, r0
        os_setTimedCallback(&LMIC.osjob,
 8003578:	4423      	add	r3, r4
 800357a:	4a06      	ldr	r2, [pc, #24]	; (8003594 <processRx2DnData+0x4c>)
 800357c:	4619      	mov	r1, r3
 800357e:	4806      	ldr	r0, [pc, #24]	; (8003598 <processRx2DnData+0x50>)
 8003580:	f001 fc54 	bl	8004e2c <os_setTimedCallback>
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
 8003584:	e001      	b.n	800358a <processRx2DnData+0x42>
    }
    processDnData();
 8003586:	f000 fba1 	bl	8003ccc <processDnData>
}
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	bd90      	pop	{r4, r7, pc}
 8003590:	20000304 	.word	0x20000304
 8003594:	08003535 	.word	0x08003535
 8003598:	20000318 	.word	0x20000318

0800359c <setupRx2DnData>:


static void setupRx2DnData (xref2osjob_t osjob) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <setupRx2DnData+0x1c>)
 80035a6:	4a05      	ldr	r2, [pc, #20]	; (80035bc <setupRx2DnData+0x20>)
 80035a8:	61da      	str	r2, [r3, #28]
    setupRx2();
 80035aa:	f7ff fd59 	bl	8003060 <setupRx2>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000304 	.word	0x20000304
 80035bc:	08003549 	.word	0x08003549

080035c0 <processRx1DnData>:


static void processRx1DnData (xref2osjob_t osjob) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processDnData() )
 80035c8:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <processRx1DnData+0x40>)
 80035ca:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d004      	beq.n	80035dc <processRx1DnData+0x1c>
 80035d2:	f000 fb7b 	bl	8003ccc <processDnData>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10c      	bne.n	80035f6 <processRx1DnData+0x36>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
 80035dc:	4b08      	ldr	r3, [pc, #32]	; (8003600 <processRx1DnData+0x40>)
 80035de:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 80035e2:	3301      	adds	r3, #1
 80035e4:	461a      	mov	r2, r3
 80035e6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80035ea:	fb03 f302 	mul.w	r3, r3, r2
 80035ee:	4905      	ldr	r1, [pc, #20]	; (8003604 <processRx1DnData+0x44>)
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fd55 	bl	80030a0 <schedRx2>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000304 	.word	0x20000304
 8003604:	0800359d 	.word	0x0800359d

08003608 <setupRx1DnData>:


static void setupRx1DnData (xref2osjob_t osjob) {
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1DnData));
 8003610:	4803      	ldr	r0, [pc, #12]	; (8003620 <setupRx1DnData+0x18>)
 8003612:	f7ff fd6d 	bl	80030f0 <setupRx1>
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	080035c1 	.word	0x080035c1

08003624 <updataDone>:


static void updataDone (xref2osjob_t osjob) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 800362c:	4b07      	ldr	r3, [pc, #28]	; (800364c <updataDone+0x28>)
 800362e:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8003632:	461a      	mov	r2, r3
 8003634:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003638:	fb03 f302 	mul.w	r3, r3, r2
 800363c:	4904      	ldr	r1, [pc, #16]	; (8003650 <updataDone+0x2c>)
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fd78 	bl	8003134 <txDone>
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000304 	.word	0x20000304
 8003650:	08003609 	.word	0x08003609

08003654 <buildDataFrame>:

// ======================================== 


static void buildDataFrame (void) {
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b087      	sub	sp, #28
 8003658:	af02      	add	r7, sp, #8
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
 800365a:	4ba3      	ldr	r3, [pc, #652]	; (80038e8 <buildDataFrame+0x294>)
 800365c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003660:	f003 0318 	and.w	r3, r3, #24
 8003664:	2b10      	cmp	r3, #16
 8003666:	bf14      	ite	ne
 8003668:	2301      	movne	r3, #1
 800366a:	2300      	moveq	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	73fb      	strb	r3, [r7, #15]
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <buildDataFrame+0x2a>
 8003676:	4b9c      	ldr	r3, [pc, #624]	; (80038e8 <buildDataFrame+0x294>)
 8003678:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800367c:	e000      	b.n	8003680 <buildDataFrame+0x2c>
 800367e:	2300      	movs	r3, #0
 8003680:	71bb      	strb	r3, [r7, #6]

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
 8003682:	2308      	movs	r3, #8
 8003684:	60bb      	str	r3, [r7, #8]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
 8003686:	4b98      	ldr	r3, [pc, #608]	; (80038e8 <buildDataFrame+0x294>)
 8003688:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800368c:	461a      	mov	r2, r3
 800368e:	f240 4302 	movw	r3, #1026	; 0x402
 8003692:	4013      	ands	r3, r2
 8003694:	f240 4202 	movw	r2, #1026	; 0x402
 8003698:	4293      	cmp	r3, r2
 800369a:	d11c      	bne.n	80036d6 <buildDataFrame+0x82>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
 800369c:	4a92      	ldr	r2, [pc, #584]	; (80038e8 <buildDataFrame+0x294>)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80036a6:	2210      	movs	r2, #16
 80036a8:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
 80036aa:	4b8f      	ldr	r3, [pc, #572]	; (80038e8 <buildDataFrame+0x294>)
 80036ac:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80036b0:	b25a      	sxtb	r2, r3
 80036b2:	4b8d      	ldr	r3, [pc, #564]	; (80038e8 <buildDataFrame+0x294>)
 80036b4:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	b25b      	sxtb	r3, r3
 80036bc:	4313      	orrs	r3, r2
 80036be:	b25a      	sxtb	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	3301      	adds	r3, #1
 80036c4:	b2d1      	uxtb	r1, r2
 80036c6:	4a88      	ldr	r2, [pc, #544]	; (80038e8 <buildDataFrame+0x294>)
 80036c8:	4413      	add	r3, r2
 80036ca:	460a      	mov	r2, r1
 80036cc:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	3302      	adds	r3, #2
 80036d4:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.dutyCapAns ) {
 80036d6:	4b84      	ldr	r3, [pc, #528]	; (80038e8 <buildDataFrame+0x294>)
 80036d8:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00d      	beq.n	80036fc <buildDataFrame+0xa8>
        LMIC.frame[end] = MCMD_DCAP_ANS;
 80036e0:	4a81      	ldr	r2, [pc, #516]	; (80038e8 <buildDataFrame+0x294>)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80036ea:	2204      	movs	r2, #4
 80036ec:	701a      	strb	r2, [r3, #0]
        end += 1;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	3301      	adds	r3, #1
 80036f2:	60bb      	str	r3, [r7, #8]
        LMIC.dutyCapAns = 0;
 80036f4:	4b7c      	ldr	r3, [pc, #496]	; (80038e8 <buildDataFrame+0x294>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
    }
    if( LMIC.dn2Ans ) {
 80036fc:	4b7a      	ldr	r3, [pc, #488]	; (80038e8 <buildDataFrame+0x294>)
 80036fe:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01a      	beq.n	800373c <buildDataFrame+0xe8>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
 8003706:	4a78      	ldr	r2, [pc, #480]	; (80038e8 <buildDataFrame+0x294>)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4413      	add	r3, r2
 800370c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003710:	2205      	movs	r2, #5
 8003712:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 8003714:	4b74      	ldr	r3, [pc, #464]	; (80038e8 <buildDataFrame+0x294>)
 8003716:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	3301      	adds	r3, #1
 800371e:	f002 0203 	and.w	r2, r2, #3
 8003722:	b2d1      	uxtb	r1, r2
 8003724:	4a70      	ldr	r2, [pc, #448]	; (80038e8 <buildDataFrame+0x294>)
 8003726:	4413      	add	r3, r2
 8003728:	460a      	mov	r2, r1
 800372a:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	3302      	adds	r3, #2
 8003732:	60bb      	str	r3, [r7, #8]
        LMIC.dn2Ans = 0;
 8003734:	4b6c      	ldr	r3, [pc, #432]	; (80038e8 <buildDataFrame+0x294>)
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }
    if( LMIC.devsAns ) {  // answer to device status
 800373c:	4b6a      	ldr	r3, [pc, #424]	; (80038e8 <buildDataFrame+0x294>)
 800373e:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 8003742:	2b00      	cmp	r3, #0
 8003744:	d021      	beq.n	800378a <buildDataFrame+0x136>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
 8003746:	4a68      	ldr	r2, [pc, #416]	; (80038e8 <buildDataFrame+0x294>)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4413      	add	r3, r2
 800374c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003750:	2206      	movs	r2, #6
 8003752:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = os_getBattLevel();
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	1c5c      	adds	r4, r3, #1
 8003758:	f7fe f805 	bl	8001766 <os_getBattLevel>
 800375c:	4603      	mov	r3, r0
 800375e:	461a      	mov	r2, r3
 8003760:	4b61      	ldr	r3, [pc, #388]	; (80038e8 <buildDataFrame+0x294>)
 8003762:	4423      	add	r3, r4
 8003764:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        LMIC.frame[end+2] = LMIC.margin;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	3302      	adds	r3, #2
 800376c:	4a5e      	ldr	r2, [pc, #376]	; (80038e8 <buildDataFrame+0x294>)
 800376e:	f892 1124 	ldrb.w	r1, [r2, #292]	; 0x124
 8003772:	4a5d      	ldr	r2, [pc, #372]	; (80038e8 <buildDataFrame+0x294>)
 8003774:	4413      	add	r3, r2
 8003776:	460a      	mov	r2, r1
 8003778:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 3;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	3303      	adds	r3, #3
 8003780:	60bb      	str	r3, [r7, #8]
        LMIC.devsAns = 0;
 8003782:	4b59      	ldr	r3, [pc, #356]	; (80038e8 <buildDataFrame+0x294>)
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
 800378a:	4b57      	ldr	r3, [pc, #348]	; (80038e8 <buildDataFrame+0x294>)
 800378c:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01a      	beq.n	80037ca <buildDataFrame+0x176>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
 8003794:	4a54      	ldr	r2, [pc, #336]	; (80038e8 <buildDataFrame+0x294>)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4413      	add	r3, r2
 800379a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800379e:	2203      	movs	r2, #3
 80037a0:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 80037a2:	4b51      	ldr	r3, [pc, #324]	; (80038e8 <buildDataFrame+0x294>)
 80037a4:	f893 2125 	ldrb.w	r2, [r3, #293]	; 0x125
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	3301      	adds	r3, #1
 80037ac:	f002 0207 	and.w	r2, r2, #7
 80037b0:	b2d1      	uxtb	r1, r2
 80037b2:	4a4d      	ldr	r2, [pc, #308]	; (80038e8 <buildDataFrame+0x294>)
 80037b4:	4413      	add	r3, r2
 80037b6:	460a      	mov	r2, r1
 80037b8:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	3302      	adds	r3, #2
 80037c0:	60bb      	str	r3, [r7, #8]
        LMIC.ladrAns = 0;
 80037c2:	4b49      	ldr	r3, [pc, #292]	; (80038e8 <buildDataFrame+0x294>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
    }
    if( LMIC.bcninfoTries > 0 ) {
 80037ca:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <buildDataFrame+0x294>)
 80037cc:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d009      	beq.n	80037e8 <buildDataFrame+0x194>
        LMIC.frame[end] = MCMD_BCNI_REQ;
 80037d4:	4a44      	ldr	r2, [pc, #272]	; (80038e8 <buildDataFrame+0x294>)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80037de:	2212      	movs	r2, #18
 80037e0:	701a      	strb	r2, [r3, #0]
        end += 1;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	3301      	adds	r3, #1
 80037e6:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.adrChanged ) {
 80037e8:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <buildDataFrame+0x294>)
 80037ea:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00c      	beq.n	800380c <buildDataFrame+0x1b8>
        if( LMIC.adrAckReq < 0 )
 80037f2:	4b3d      	ldr	r3, [pc, #244]	; (80038e8 <buildDataFrame+0x294>)
 80037f4:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	da03      	bge.n	8003804 <buildDataFrame+0x1b0>
            LMIC.adrAckReq = 0;
 80037fc:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <buildDataFrame+0x294>)
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        LMIC.adrChanged = 0;
 8003804:	4b38      	ldr	r3, [pc, #224]	; (80038e8 <buildDataFrame+0x294>)
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
    }
    if( LMIC.pingSetAns != 0 ) {
 800380c:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <buildDataFrame+0x294>)
 800380e:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 8003812:	2b00      	cmp	r3, #0
 8003814:	d01a      	beq.n	800384c <buildDataFrame+0x1f8>
        LMIC.frame[end+0] = MCMD_PING_ANS;
 8003816:	4a34      	ldr	r2, [pc, #208]	; (80038e8 <buildDataFrame+0x294>)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4413      	add	r3, r2
 800381c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003820:	2211      	movs	r2, #17
 8003822:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 8003824:	4b30      	ldr	r3, [pc, #192]	; (80038e8 <buildDataFrame+0x294>)
 8003826:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	3301      	adds	r3, #1
 800382e:	f002 0201 	and.w	r2, r2, #1
 8003832:	b2d1      	uxtb	r1, r2
 8003834:	4a2c      	ldr	r2, [pc, #176]	; (80038e8 <buildDataFrame+0x294>)
 8003836:	4413      	add	r3, r2
 8003838:	460a      	mov	r2, r1
 800383a:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	3302      	adds	r3, #2
 8003842:	60bb      	str	r3, [r7, #8]
        LMIC.pingSetAns = 0;
 8003844:	4b28      	ldr	r3, [pc, #160]	; (80038e8 <buildDataFrame+0x294>)
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
    }
    if( LMIC.snchAns ) {
 800384c:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <buildDataFrame+0x294>)
 800384e:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01a      	beq.n	800388c <buildDataFrame+0x238>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
 8003856:	4a24      	ldr	r2, [pc, #144]	; (80038e8 <buildDataFrame+0x294>)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4413      	add	r3, r2
 800385c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003860:	2207      	movs	r2, #7
 8003862:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 8003864:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <buildDataFrame+0x294>)
 8003866:	f893 212a 	ldrb.w	r2, [r3, #298]	; 0x12a
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	3301      	adds	r3, #1
 800386e:	f002 0203 	and.w	r2, r2, #3
 8003872:	b2d1      	uxtb	r1, r2
 8003874:	4a1c      	ldr	r2, [pc, #112]	; (80038e8 <buildDataFrame+0x294>)
 8003876:	4413      	add	r3, r2
 8003878:	460a      	mov	r2, r1
 800387a:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3302      	adds	r3, #2
 8003882:	60bb      	str	r3, [r7, #8]
        LMIC.snchAns = 0;
 8003884:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <buildDataFrame+0x294>)
 8003886:	2200      	movs	r2, #0
 8003888:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
    }
    ASSERT(end <= OFF_DAT_OPTS+16);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b18      	cmp	r3, #24
 8003890:	dd01      	ble.n	8003896 <buildDataFrame+0x242>
 8003892:	f7fd fdb3 	bl	80013fc <hal_failed>

    u1_t flen = end + (txdata ? 5+dlen : 4);
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <buildDataFrame+0x250>
 800389c:	79bb      	ldrb	r3, [r7, #6]
 800389e:	3305      	adds	r3, #5
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e000      	b.n	80038a6 <buildDataFrame+0x252>
 80038a4:	2304      	movs	r3, #4
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	4413      	add	r3, r2
 80038ac:	71fb      	strb	r3, [r7, #7]
    if( flen > MAX_LEN_FRAME ) {
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	2b40      	cmp	r3, #64	; 0x40
 80038b2:	d905      	bls.n	80038c0 <buildDataFrame+0x26c>
        // Options and payload too big - delay payload
        txdata = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	73fb      	strb	r3, [r7, #15]
        flen = end+4;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	3304      	adds	r3, #4
 80038be:	71fb      	strb	r3, [r7, #7]
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 80038c0:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <buildDataFrame+0x294>)
 80038c2:	2240      	movs	r2, #64	; 0x40
 80038c4:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 80038c8:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <buildDataFrame+0x294>)
 80038ca:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <buildDataFrame+0x294>)
 80038d0:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	b25b      	sxtb	r3, r3
 80038da:	4a03      	ldr	r2, [pc, #12]	; (80038e8 <buildDataFrame+0x294>)
 80038dc:	f992 2121 	ldrsb.w	r2, [r2, #289]	; 0x121
 80038e0:	2a00      	cmp	r2, #0
 80038e2:	db03      	blt.n	80038ec <buildDataFrame+0x298>
 80038e4:	2240      	movs	r2, #64	; 0x40
 80038e6:	e002      	b.n	80038ee <buildDataFrame+0x29a>
 80038e8:	20000304 	.word	0x20000304
 80038ec:	2200      	movs	r2, #0
 80038ee:	4313      	orrs	r3, r2
 80038f0:	b25a      	sxtb	r2, r3
                              | (end-OFF_DAT_OPTS));
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	3b08      	subs	r3, #8
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	b25b      	sxtb	r3, r3
 80038fc:	4313      	orrs	r3, r2
 80038fe:	b25b      	sxtb	r3, r3
 8003900:	b2da      	uxtb	r2, r3
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8003902:	4b40      	ldr	r3, [pc, #256]	; (8003a04 <buildDataFrame+0x3b0>)
 8003904:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
 8003908:	4a3f      	ldr	r2, [pc, #252]	; (8003a08 <buildDataFrame+0x3b4>)
 800390a:	4b3e      	ldr	r3, [pc, #248]	; (8003a04 <buildDataFrame+0x3b0>)
 800390c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003910:	4619      	mov	r1, r3
 8003912:	4610      	mov	r0, r2
 8003914:	f7fd fee5 	bl	80016e2 <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
 8003918:	4b3a      	ldr	r3, [pc, #232]	; (8003a04 <buildDataFrame+0x3b0>)
 800391a:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <buildDataFrame+0x2dc>
        LMIC.seqnoUp += 1;
 8003922:	4b38      	ldr	r3, [pc, #224]	; (8003a04 <buildDataFrame+0x3b0>)
 8003924:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8003928:	3301      	adds	r3, #1
 800392a:	4a36      	ldr	r2, [pc, #216]	; (8003a04 <buildDataFrame+0x3b0>)
 800392c:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (DRADJUST[LMIC.txCnt+1] << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
 8003930:	4a36      	ldr	r2, [pc, #216]	; (8003a0c <buildDataFrame+0x3b8>)
 8003932:	4b34      	ldr	r3, [pc, #208]	; (8003a04 <buildDataFrame+0x3b0>)
 8003934:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29b      	uxth	r3, r3
 800393e:	4619      	mov	r1, r3
 8003940:	4610      	mov	r0, r2
 8003942:	f7fd feb7 	bl	80016b4 <os_wlsbf2>

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
 8003946:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <buildDataFrame+0x3b0>)
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

    if( txdata ) {
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d03e      	beq.n	80039d2 <buildDataFrame+0x37e>
        if( LMIC.pendTxConf ) {
 8003954:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <buildDataFrame+0x3b0>)
 8003956:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00c      	beq.n	8003978 <buildDataFrame+0x324>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 800395e:	4b29      	ldr	r3, [pc, #164]	; (8003a04 <buildDataFrame+0x3b0>)
 8003960:	2280      	movs	r2, #128	; 0x80
 8003962:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
 8003966:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <buildDataFrame+0x3b0>)
 8003968:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 800396c:	2b00      	cmp	r3, #0
 800396e:	d103      	bne.n	8003978 <buildDataFrame+0x324>
 8003970:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <buildDataFrame+0x3b0>)
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        }
        LMIC.frame[end] = LMIC.pendTxPort;
 8003978:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <buildDataFrame+0x3b0>)
 800397a:	f893 10ba 	ldrb.w	r1, [r3, #186]	; 0xba
 800397e:	4a21      	ldr	r2, [pc, #132]	; (8003a04 <buildDataFrame+0x3b0>)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4413      	add	r3, r2
 8003984:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003988:	460a      	mov	r2, r1
 800398a:	701a      	strb	r2, [r3, #0]
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	3301      	adds	r3, #1
 8003990:	4a1f      	ldr	r2, [pc, #124]	; (8003a10 <buildDataFrame+0x3bc>)
 8003992:	4413      	add	r3, r2
 8003994:	79ba      	ldrb	r2, [r7, #6]
 8003996:	491f      	ldr	r1, [pc, #124]	; (8003a14 <buildDataFrame+0x3c0>)
 8003998:	4618      	mov	r0, r3
 800399a:	f007 fe89 	bl	800b6b0 <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 800399e:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <buildDataFrame+0x3b0>)
 80039a0:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <buildDataFrame+0x358>
 80039a8:	481b      	ldr	r0, [pc, #108]	; (8003a18 <buildDataFrame+0x3c4>)
 80039aa:	e000      	b.n	80039ae <buildDataFrame+0x35a>
 80039ac:	481b      	ldr	r0, [pc, #108]	; (8003a1c <buildDataFrame+0x3c8>)
 80039ae:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <buildDataFrame+0x3b0>)
 80039b0:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                   LMIC.devaddr, LMIC.seqnoUp-1,
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <buildDataFrame+0x3b0>)
 80039b6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 80039ba:	1e5c      	subs	r4, r3, #1
                   /*up*/0, LMIC.frame+end+1, dlen);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	3301      	adds	r3, #1
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 80039c0:	4a13      	ldr	r2, [pc, #76]	; (8003a10 <buildDataFrame+0x3bc>)
 80039c2:	4413      	add	r3, r2
 80039c4:	79ba      	ldrb	r2, [r7, #6]
 80039c6:	9201      	str	r2, [sp, #4]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	2300      	movs	r3, #0
 80039cc:	4622      	mov	r2, r4
 80039ce:	f7fd ffef 	bl	80019b0 <aes_cipher>
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
 80039d2:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <buildDataFrame+0x3b0>)
 80039d4:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 80039d8:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <buildDataFrame+0x3b0>)
 80039da:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80039de:	1e5a      	subs	r2, r3, #1
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	3b04      	subs	r3, #4
 80039e4:	9301      	str	r3, [sp, #4]
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <buildDataFrame+0x3bc>)
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	2300      	movs	r3, #0
 80039ec:	480a      	ldr	r0, [pc, #40]	; (8003a18 <buildDataFrame+0x3c4>)
 80039ee:	f7fd ff61 	bl	80018b4 <aes_appendMic>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
 80039f2:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <buildDataFrame+0x3b0>)
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	f882 3147 	strb.w	r3, [r2, #327]	; 0x147
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd90      	pop	{r4, r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000304 	.word	0x20000304
 8003a08:	2000044d 	.word	0x2000044d
 8003a0c:	20000452 	.word	0x20000452
 8003a10:	2000044c 	.word	0x2000044c
 8003a14:	200003c1 	.word	0x200003c1
 8003a18:	200003f8 	.word	0x200003f8
 8003a1c:	20000408 	.word	0x20000408

08003a20 <onBcnRx>:


// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (xref2osjob_t job) {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f001 ffb7 	bl	800599c <os_radio>
    os_clearCallback(&LMIC.osjob);
 8003a2e:	4823      	ldr	r0, [pc, #140]	; (8003abc <onBcnRx+0x9c>)
 8003a30:	f001 f9b8 	bl	8004da4 <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
 8003a34:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <onBcnRx+0xa0>)
 8003a36:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10c      	bne.n	8003a58 <onBcnRx+0x38>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 8003a3e:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <onBcnRx+0xa0>)
 8003a40:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003a44:	f023 0303 	bic.w	r3, r3, #3
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <onBcnRx+0xa0>)
 8003a4c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        reportEvent(EV_SCAN_TIMEOUT);
 8003a50:	2001      	movs	r0, #1
 8003a52:	f7fe fe7b 	bl	800274c <reportEvent>
        return;
 8003a56:	e02d      	b.n	8003ab4 <onBcnRx+0x94>
    }
    if( decodeBeacon() <= 0 ) {
 8003a58:	f7fe fefc 	bl	8002854 <decodeBeacon>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	dc0f      	bgt.n	8003a82 <onBcnRx+0x62>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
 8003a62:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <onBcnRx+0xa0>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
        os_radio(RADIO_RXON);
 8003a6a:	2003      	movs	r0, #3
 8003a6c:	f001 ff96 	bl	800599c <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
 8003a70:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <onBcnRx+0xa0>)
 8003a72:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003a76:	4a13      	ldr	r2, [pc, #76]	; (8003ac4 <onBcnRx+0xa4>)
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4810      	ldr	r0, [pc, #64]	; (8003abc <onBcnRx+0x9c>)
 8003a7c:	f001 f9d6 	bl	8004e2c <os_setTimedCallback>
        return;
 8003a80:	e018      	b.n	8003ab4 <onBcnRx+0x94>
    }
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
 8003a82:	2101      	movs	r1, #1
 8003a84:	200d      	movs	r0, #13
 8003a86:	f7fe f91f 	bl	8001cc8 <calcBcnRxWindowFromMillis>
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <onBcnRx+0xa0>)
 8003a8c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <onBcnRx+0xa0>)
 8003a98:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
 8003a9c:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <onBcnRx+0xa0>)
 8003a9e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003aa2:	f043 0302 	orr.w	r3, r3, #2
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <onBcnRx+0xa0>)
 8003aaa:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 8003aae:	2002      	movs	r0, #2
 8003ab0:	f7fe fe4c 	bl	800274c <reportEvent>
}
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000318 	.word	0x20000318
 8003ac0:	20000304 	.word	0x20000304
 8003ac4:	08003a21 	.word	0x08003a21

08003ac8 <startScan>:
// Enable receiver to listen to incoming beacons
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
 8003acc:	4b27      	ldr	r3, [pc, #156]	; (8003b6c <startScan+0xa4>)
 8003ace:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d006      	beq.n	8003ae4 <startScan+0x1c>
 8003ad6:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <startScan+0xa4>)
 8003ad8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <startScan+0x20>
 8003ae4:	f7fd fc8a 	bl	80013fc <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
 8003ae8:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <startScan+0xa4>)
 8003aea:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d137      	bne.n	8003b66 <startScan+0x9e>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 8003af6:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <startScan+0xa4>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 8003afe:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <startScan+0xa4>)
 8003b00:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <startScan+0xa4>)
 8003b06:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
 8003b0a:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <startScan+0xa4>)
 8003b0c:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 8003b10:	4b16      	ldr	r3, [pc, #88]	; (8003b6c <startScan+0xa4>)
 8003b12:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 8003b16:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <startScan+0xa4>)
 8003b18:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <startScan+0xa4>)
 8003b2a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    setBcnRxParams();
 8003b2e:	f7fe fd3f 	bl	80025b0 <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
 8003b32:	f001 f911 	bl	8004d58 <os_getTime>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f503 137b 	add.w	r3, r3, #4112384	; 0x3ec000
 8003b3c:	f503 5374 	add.w	r3, r3, #15616	; 0x3d00
 8003b40:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <startScan+0xa4>)
 8003b42:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <startScan+0xa4>)
 8003b48:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003b4c:	4a07      	ldr	r2, [pc, #28]	; (8003b6c <startScan+0xa4>)
 8003b4e:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <startScan+0xa4>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4a06      	ldr	r2, [pc, #24]	; (8003b70 <startScan+0xa8>)
 8003b56:	4619      	mov	r1, r3
 8003b58:	4806      	ldr	r0, [pc, #24]	; (8003b74 <startScan+0xac>)
 8003b5a:	f001 f967 	bl	8004e2c <os_setTimedCallback>
    os_radio(RADIO_RXON);
 8003b5e:	2003      	movs	r0, #3
 8003b60:	f001 ff1c 	bl	800599c <os_radio>
 8003b64:	e000      	b.n	8003b68 <startScan+0xa0>
        return;
 8003b66:	bf00      	nop
}
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000304 	.word	0x20000304
 8003b70:	08003a21 	.word	0x08003a21
 8003b74:	20000318 	.word	0x20000318

08003b78 <buildJoinRequest>:
//
// Join stuff
//
// ================================================================================

static void buildJoinRequest (u1_t ftype) {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	71fb      	strb	r3, [r7, #7]
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    xref2u1_t d = LMIC.frame;
 8003b82:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <buildJoinRequest+0x64>)
 8003b84:	60fb      	str	r3, [r7, #12]
    d[OFF_JR_HDR] = ftype;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	79fa      	ldrb	r2, [r7, #7]
 8003b8a:	701a      	strb	r2, [r3, #0]
    os_getArtEui(d + OFF_JR_ARTEUI);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fd33 	bl	80045fc <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3309      	adds	r3, #9
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fd40 	bl	8004620 <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f103 0211 	add.w	r2, r3, #17
 8003ba6:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <buildJoinRequest+0x68>)
 8003ba8:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8003bac:	4619      	mov	r1, r3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	f7fd fd80 	bl	80016b4 <os_wlsbf2>
    aes_appendMic0(d, OFF_JR_MIC);
 8003bb4:	2113      	movs	r1, #19
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f7fd fea4 	bl	8001904 <aes_appendMic0>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
 8003bbc:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <buildJoinRequest+0x68>)
 8003bbe:	2217      	movs	r2, #23
 8003bc0:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    LMIC.devNonce++;
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <buildJoinRequest+0x68>)
 8003bc6:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8003bca:	3301      	adds	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <buildJoinRequest+0x68>)
 8003bd0:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
    DO_DEVDB(LMIC.devNonce,devNonce);
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	2000044c 	.word	0x2000044c
 8003be0:	20000304 	.word	0x20000304

08003be4 <startJoining>:

static void startJoining (xref2osjob_t osjob) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
    reportEvent(EV_JOINING);
 8003bec:	2005      	movs	r0, #5
 8003bee:	f7fe fdad 	bl	800274c <reportEvent>
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining (void) {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
    if( LMIC.devaddr == 0 ) {
 8003c00:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <LMIC_startJoining+0x88>)
 8003c02:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d138      	bne.n	8003c7c <LMIC_startJoining+0x80>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
 8003c0a:	4b1e      	ldr	r3, [pc, #120]	; (8003c84 <LMIC_startJoining+0x88>)
 8003c0c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003c10:	f003 0390 	and.w	r3, r3, #144	; 0x90
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <LMIC_startJoining+0x20>
 8003c18:	f7fd fbf0 	bl	80013fc <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
 8003c1c:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <LMIC_startJoining+0x88>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
 8003c24:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <LMIC_startJoining+0x88>)
 8003c26:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003c2a:	f423 53c1 	bic.w	r3, r3, #6176	; 0x1820
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	4b13      	ldr	r3, [pc, #76]	; (8003c84 <LMIC_startJoining+0x88>)
 8003c36:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <LMIC_startJoining+0x88>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <LMIC_startJoining+0x88>)
 8003c44:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
 8003c48:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <LMIC_startJoining+0x88>)
 8003c4a:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <LMIC_startJoining+0x88>)
 8003c50:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <LMIC_startJoining+0x88>)
 8003c56:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
        initJoinLoop();
 8003c5a:	f7fe fccf 	bl	80025fc <initJoinLoop>
        LMIC.opmode |= OP_JOINING;
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <LMIC_startJoining+0x88>)
 8003c60:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <LMIC_startJoining+0x88>)
 8003c6c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 8003c70:	4905      	ldr	r1, [pc, #20]	; (8003c88 <LMIC_startJoining+0x8c>)
 8003c72:	4806      	ldr	r0, [pc, #24]	; (8003c8c <LMIC_startJoining+0x90>)
 8003c74:	f001 f8b4 	bl	8004de0 <os_setCallback>
        return 1;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <LMIC_startJoining+0x82>
    }
    return 0; // already joined
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000304 	.word	0x20000304
 8003c88:	08003be5 	.word	0x08003be5
 8003c8c:	20000318 	.word	0x20000318

08003c90 <processPingRx>:
//
//
//
// ================================================================================

static void processPingRx (xref2osjob_t osjob) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen != 0 ) {
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <processPingRx+0x38>)
 8003c9a:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00c      	beq.n	8003cbc <processPingRx+0x2c>
        LMIC.txrxFlags = TXRX_PING;
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <processPingRx+0x38>)
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        if( decodeFrame() ) {
 8003caa:	f7fe fe67 	bl	800297c <decodeFrame>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <processPingRx+0x2c>
            reportEvent(EV_RXCOMPLETE);
 8003cb4:	200d      	movs	r0, #13
 8003cb6:	f7fe fd49 	bl	800274c <reportEvent>
            return;
 8003cba:	e001      	b.n	8003cc0 <processPingRx+0x30>
        }
    }
    // Pick next ping slot
    engineUpdate();
 8003cbc:	f000 fa2a 	bl	8004114 <engineUpdate>
}
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000304 	.word	0x20000304

08003ccc <processDnData>:


static bit_t processDnData (void) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8003cd0:	4b76      	ldr	r3, [pc, #472]	; (8003eac <processDnData+0x1e0>)
 8003cd2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <processDnData+0x16>
 8003cde:	f7fd fb8d 	bl	80013fc <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8003ce2:	4b72      	ldr	r3, [pc, #456]	; (8003eac <processDnData+0x1e0>)
 8003ce4:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f040 80ce 	bne.w	8003e8a <processDnData+0x1be>
      norx:
 8003cee:	bf00      	nop
 8003cf0:	e000      	b.n	8003cf4 <processDnData+0x28>
        return 1;
    }
    if( !decodeFrame() ) {
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto norx;
 8003cf2:	bf00      	nop
        if( LMIC.txCnt != 0 ) {
 8003cf4:	4b6d      	ldr	r3, [pc, #436]	; (8003eac <processDnData+0x1e0>)
 8003cf6:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d038      	beq.n	8003d70 <processDnData+0xa4>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
 8003cfe:	4b6b      	ldr	r3, [pc, #428]	; (8003eac <processDnData+0x1e0>)
 8003d00:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003d04:	2b07      	cmp	r3, #7
 8003d06:	d82e      	bhi.n	8003d66 <processDnData+0x9a>
                LMIC.txCnt += 1;
 8003d08:	4b68      	ldr	r3, [pc, #416]	; (8003eac <processDnData+0x1e0>)
 8003d0a:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003d0e:	3301      	adds	r3, #1
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	4b66      	ldr	r3, [pc, #408]	; (8003eac <processDnData+0x1e0>)
 8003d14:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]), KEEP_TXPOW);
 8003d18:	4b64      	ldr	r3, [pc, #400]	; (8003eac <processDnData+0x1e0>)
 8003d1a:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8003d1e:	4b63      	ldr	r3, [pc, #396]	; (8003eac <processDnData+0x1e0>)
 8003d20:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003d24:	4619      	mov	r1, r3
 8003d26:	4b62      	ldr	r3, [pc, #392]	; (8003eb0 <processDnData+0x1e4>)
 8003d28:	5c5b      	ldrb	r3, [r3, r1]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f7fd fc59 	bl	80015e4 <lowerDR>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003d38:	4619      	mov	r1, r3
 8003d3a:	2002      	movs	r0, #2
 8003d3c:	f7fe f9b8 	bl	80020b0 <setDrTxpow>
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 8003d40:	4b5a      	ldr	r3, [pc, #360]	; (8003eac <processDnData+0x1e0>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2103      	movs	r1, #3
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe f970 	bl	800202c <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
 8003d4c:	4b57      	ldr	r3, [pc, #348]	; (8003eac <processDnData+0x1e0>)
 8003d4e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	4b54      	ldr	r3, [pc, #336]	; (8003eac <processDnData+0x1e0>)
 8003d5a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
                engineUpdate();
 8003d5e:	f000 f9d9 	bl	8004114 <engineUpdate>
                return 1;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e09f      	b.n	8003ea6 <processDnData+0x1da>
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 8003d66:	4b51      	ldr	r3, [pc, #324]	; (8003eac <processDnData+0x1e0>)
 8003d68:	2260      	movs	r2, #96	; 0x60
 8003d6a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
 8003d6e:	e003      	b.n	8003d78 <processDnData+0xac>
            LMIC.txrxFlags = TXRX_NOPORT;
 8003d70:	4b4e      	ldr	r3, [pc, #312]	; (8003eac <processDnData+0x1e0>)
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8003d78:	4b4c      	ldr	r3, [pc, #304]	; (8003eac <processDnData+0x1e0>)
 8003d7a:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 8003d7e:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8003d82:	d009      	beq.n	8003d98 <processDnData+0xcc>
            LMIC.adrAckReq += 1;
 8003d84:	4b49      	ldr	r3, [pc, #292]	; (8003eac <processDnData+0x1e0>)
 8003d86:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	b25a      	sxtb	r2, r3
 8003d92:	4b46      	ldr	r3, [pc, #280]	; (8003eac <processDnData+0x1e0>)
 8003d94:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        LMIC.dataBeg = LMIC.dataLen = 0;
 8003d98:	4b44      	ldr	r3, [pc, #272]	; (8003eac <processDnData+0x1e0>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8003da0:	4b42      	ldr	r3, [pc, #264]	; (8003eac <processDnData+0x1e0>)
 8003da2:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
 8003da6:	4b41      	ldr	r3, [pc, #260]	; (8003eac <processDnData+0x1e0>)
 8003da8:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 8003dac:	e000      	b.n	8003db0 <processDnData+0xe4>
    }
    goto txcomplete;
 8003dae:	bf00      	nop
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
 8003db0:	4b3e      	ldr	r3, [pc, #248]	; (8003eac <processDnData+0x1e0>)
 8003db2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003db6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <processDnData+0x1e0>)
 8003dbe:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
 8003dc2:	4b3a      	ldr	r3, [pc, #232]	; (8003eac <processDnData+0x1e0>)
 8003dc4:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d012      	beq.n	8003df6 <processDnData+0x12a>
 8003dd0:	4b36      	ldr	r3, [pc, #216]	; (8003eac <processDnData+0x1e0>)
 8003dd2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00b      	beq.n	8003df6 <processDnData+0x12a>
            LMIC.opmode &= ~OP_LINKDEAD;
 8003dde:	4b33      	ldr	r3, [pc, #204]	; (8003eac <processDnData+0x1e0>)
 8003de0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	4b30      	ldr	r3, [pc, #192]	; (8003eac <processDnData+0x1e0>)
 8003dec:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            reportEvent(EV_LINK_ALIVE);
 8003df0:	200f      	movs	r0, #15
 8003df2:	f7fe fcab 	bl	800274c <reportEvent>
        reportEvent(EV_TXCOMPLETE);
 8003df6:	200a      	movs	r0, #10
 8003df8:	f7fe fca8 	bl	800274c <reportEvent>
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
 8003dfc:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <processDnData+0x1e0>)
 8003dfe:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 8003e02:	2b18      	cmp	r3, #24
 8003e04:	dd1c      	ble.n	8003e40 <processDnData+0x174>
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
 8003e06:	4b29      	ldr	r3, [pc, #164]	; (8003eac <processDnData+0x1e0>)
 8003e08:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fd fbbb 	bl	8001588 <decDR>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003e18:	4619      	mov	r1, r3
 8003e1a:	2003      	movs	r0, #3
 8003e1c:	f7fe f948 	bl	80020b0 <setDrTxpow>
            LMIC.adrAckReq = LINK_CHECK_CONT;
 8003e20:	4b22      	ldr	r3, [pc, #136]	; (8003eac <processDnData+0x1e0>)
 8003e22:	220c      	movs	r2, #12
 8003e24:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
 8003e28:	4b20      	ldr	r3, [pc, #128]	; (8003eac <processDnData+0x1e0>)
 8003e2a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003e2e:	f443 5381 	orr.w	r3, r3, #4128	; 0x1020
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <processDnData+0x1e0>)
 8003e36:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            reportEvent(EV_LINK_DEAD);
 8003e3a:	200e      	movs	r0, #14
 8003e3c:	f7fe fc86 	bl	800274c <reportEvent>
        if( LMIC.bcninfoTries > 0 ) {
 8003e40:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <processDnData+0x1e0>)
 8003e42:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01d      	beq.n	8003e86 <processDnData+0x1ba>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8003e4a:	4b18      	ldr	r3, [pc, #96]	; (8003eac <processDnData+0x1e0>)
 8003e4c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d007      	beq.n	8003e68 <processDnData+0x19c>
                reportEvent(EV_BEACON_FOUND);
 8003e58:	2002      	movs	r0, #2
 8003e5a:	f7fe fc77 	bl	800274c <reportEvent>
                LMIC.bcninfoTries = 0;
 8003e5e:	4b13      	ldr	r3, [pc, #76]	; (8003eac <processDnData+0x1e0>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8003e66:	e00e      	b.n	8003e86 <processDnData+0x1ba>
            else if( --LMIC.bcninfoTries == 0 ) {
 8003e68:	4b10      	ldr	r3, [pc, #64]	; (8003eac <processDnData+0x1e0>)
 8003e6a:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <processDnData+0x1e0>)
 8003e74:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8003e78:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <processDnData+0x1e0>)
 8003e7a:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <processDnData+0x1ba>
                startScan();   // NWK did not answer - try scan
 8003e82:	f7ff fe21 	bl	8003ac8 <startScan>
        return 1;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e00d      	b.n	8003ea6 <processDnData+0x1da>
    if( !decodeFrame() ) {
 8003e8a:	f7fe fd77 	bl	800297c <decodeFrame>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d18c      	bne.n	8003dae <processDnData+0xe2>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <processDnData+0x1e0>)
 8003e96:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f43f af27 	beq.w	8003cf2 <processDnData+0x26>
            return 0;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20000304 	.word	0x20000304
 8003eb0:	0800cce4 	.word	0x0800cce4

08003eb4 <processBeacon>:


static void processBeacon (xref2osjob_t osjob) {
 8003eb4:	b590      	push	{r4, r7, lr}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
 8003ebc:	4b81      	ldr	r3, [pc, #516]	; (80040c4 <processBeacon+0x210>)
 8003ebe:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003ec2:	60fb      	str	r3, [r7, #12]
    u1_t flags = LMIC.bcninfo.flags;
 8003ec4:	4b7f      	ldr	r3, [pc, #508]	; (80040c4 <processBeacon+0x210>)
 8003ec6:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003eca:	72fb      	strb	r3, [r7, #11]
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8003ecc:	4b7d      	ldr	r3, [pc, #500]	; (80040c4 <processBeacon+0x210>)
 8003ece:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 8087 	beq.w	8003fe6 <processBeacon+0x132>
 8003ed8:	f7fe fcbc 	bl	8002854 <decodeBeacon>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f340 8081 	ble.w	8003fe6 <processBeacon+0x132>
        ev = EV_BEACON_TRACKED;
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	75fb      	strb	r3, [r7, #23]
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
 8003ee8:	7afb      	ldrb	r3, [r7, #11]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <processBeacon+0x48>
            // We don't have a previous beacon to calc some drift - assume
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	200d      	movs	r0, #13
 8003ef6:	f7fd fee7 	bl	8001cc8 <calcBcnRxWindowFromMillis>
            goto rev;
 8003efa:	e0d2      	b.n	80040a2 <processBeacon+0x1ee>
        }
        // We have a previous BEACON to calculate some drift
        s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	4b70      	ldr	r3, [pc, #448]	; (80040c4 <processBeacon+0x210>)
 8003f02:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	82bb      	strh	r3, [r7, #20]
        if( LMIC.missedBcns > 0 ) {
 8003f14:	4b6b      	ldr	r3, [pc, #428]	; (80040c4 <processBeacon+0x210>)
 8003f16:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d013      	beq.n	8003f46 <processBeacon+0x92>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
 8003f1e:	4b69      	ldr	r3, [pc, #420]	; (80040c4 <processBeacon+0x210>)
 8003f20:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003f2a:	4966      	ldr	r1, [pc, #408]	; (80040c4 <processBeacon+0x210>)
 8003f2c:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	; 0xb4
 8003f30:	1a59      	subs	r1, r3, r1
 8003f32:	4b64      	ldr	r3, [pc, #400]	; (80040c4 <processBeacon+0x210>)
 8003f34:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8003f38:	3301      	adds	r3, #1
 8003f3a:	fb91 f3f3 	sdiv	r3, r1, r3
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	4413      	add	r3, r2
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	82bb      	strh	r3, [r7, #20]
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
 8003f46:	4b5f      	ldr	r3, [pc, #380]	; (80040c4 <processBeacon+0x210>)
 8003f48:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d127      	bne.n	8003fa4 <processBeacon+0xf0>
            s2_t diff = LMIC.drift - drift;
 8003f54:	4b5b      	ldr	r3, [pc, #364]	; (80040c4 <processBeacon+0x210>)
 8003f56:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	8abb      	ldrh	r3, [r7, #20]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	827b      	strh	r3, [r7, #18]
            if( diff < 0 ) diff = -diff;
 8003f64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	da03      	bge.n	8003f74 <processBeacon+0xc0>
 8003f6c:	8a7b      	ldrh	r3, [r7, #18]
 8003f6e:	425b      	negs	r3, r3
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	827b      	strh	r3, [r7, #18]
            LMIC.lastDriftDiff = diff;
 8003f74:	4a53      	ldr	r2, [pc, #332]	; (80040c4 <processBeacon+0x210>)
 8003f76:	8a7b      	ldrh	r3, [r7, #18]
 8003f78:	f8a2 30b6 	strh.w	r3, [r2, #182]	; 0xb6
            if( LMIC.maxDriftDiff < diff )
 8003f7c:	4b51      	ldr	r3, [pc, #324]	; (80040c4 <processBeacon+0x210>)
 8003f7e:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8003f82:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	dd03      	ble.n	8003f92 <processBeacon+0xde>
                LMIC.maxDriftDiff = diff;
 8003f8a:	4a4e      	ldr	r2, [pc, #312]	; (80040c4 <processBeacon+0x210>)
 8003f8c:	8a7b      	ldrh	r3, [r7, #18]
 8003f8e:	f8a2 30b8 	strh.w	r3, [r2, #184]	; 0xb8
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 8003f92:	4b4c      	ldr	r3, [pc, #304]	; (80040c4 <processBeacon+0x210>)
 8003f94:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003f98:	f023 0308 	bic.w	r3, r3, #8
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	4b49      	ldr	r3, [pc, #292]	; (80040c4 <processBeacon+0x210>)
 8003fa0:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
        }
        LMIC.drift = drift;
 8003fa4:	4a47      	ldr	r2, [pc, #284]	; (80040c4 <processBeacon+0x210>)
 8003fa6:	8abb      	ldrh	r3, [r7, #20]
 8003fa8:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
 8003fac:	4b45      	ldr	r3, [pc, #276]	; (80040c4 <processBeacon+0x210>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8003fb4:	4b43      	ldr	r3, [pc, #268]	; (80040c4 <processBeacon+0x210>)
 8003fb6:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
 8003fba:	4b42      	ldr	r3, [pc, #264]	; (80040c4 <processBeacon+0x210>)
 8003fbc:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 8003fc0:	4b40      	ldr	r3, [pc, #256]	; (80040c4 <processBeacon+0x210>)
 8003fc2:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003fc6:	f023 0304 	bic.w	r3, r3, #4
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	4b3d      	ldr	r3, [pc, #244]	; (80040c4 <processBeacon+0x210>)
 8003fce:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
 8003fd2:	4b3c      	ldr	r3, [pc, #240]	; (80040c4 <processBeacon+0x210>)
 8003fd4:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d14c      	bne.n	800407a <processBeacon+0x1c6>
 8003fe0:	f7fd fa0c 	bl	80013fc <hal_failed>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8003fe4:	e049      	b.n	800407a <processBeacon+0x1c6>
    } else {
        ev = EV_BEACON_MISSED;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	75fb      	strb	r3, [r7, #23]
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 8003fea:	4b36      	ldr	r3, [pc, #216]	; (80040c4 <processBeacon+0x210>)
 8003fec:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8003ff0:	4b34      	ldr	r3, [pc, #208]	; (80040c4 <processBeacon+0x210>)
 8003ff2:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8003ff6:	f5c3 137a 	rsb	r3, r3, #4096000	; 0x3e8000
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a31      	ldr	r2, [pc, #196]	; (80040c4 <processBeacon+0x210>)
 8003ffe:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
        LMIC.bcninfo.time   += BCN_INTV_sec;
 8004002:	4b30      	ldr	r3, [pc, #192]	; (80040c4 <processBeacon+0x210>)
 8004004:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004008:	3380      	adds	r3, #128	; 0x80
 800400a:	4a2e      	ldr	r2, [pc, #184]	; (80040c4 <processBeacon+0x210>)
 800400c:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
        LMIC.missedBcns++;
 8004010:	4b2c      	ldr	r3, [pc, #176]	; (80040c4 <processBeacon+0x210>)
 8004012:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8004016:	3301      	adds	r3, #1
 8004018:	b2da      	uxtb	r2, r3
 800401a:	4b2a      	ldr	r3, [pc, #168]	; (80040c4 <processBeacon+0x210>)
 800401c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 8004020:	4b28      	ldr	r3, [pc, #160]	; (80040c4 <processBeacon+0x210>)
 8004022:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8004026:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800402a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800402e:	2104      	movs	r1, #4
 8004030:	4618      	mov	r0, r3
 8004032:	f7fd fffb 	bl	800202c <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
 8004036:	4b23      	ldr	r3, [pc, #140]	; (80040c4 <processBeacon+0x210>)
 8004038:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800403c:	2b14      	cmp	r3, #20
 800403e:	d908      	bls.n	8004052 <processBeacon+0x19e>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 8004040:	4b20      	ldr	r3, [pc, #128]	; (80040c4 <processBeacon+0x210>)
 8004042:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004046:	f043 0320 	orr.w	r3, r3, #32
 800404a:	b29a      	uxth	r2, r3
 800404c:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <processBeacon+0x210>)
 800404e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
 8004052:	4b1c      	ldr	r3, [pc, #112]	; (80040c4 <processBeacon+0x210>)
 8004054:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8004058:	2b64      	cmp	r3, #100	; 0x64
 800405a:	d90f      	bls.n	800407c <processBeacon+0x1c8>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
 800405c:	4b19      	ldr	r3, [pc, #100]	; (80040c4 <processBeacon+0x210>)
 800405e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004062:	f423 63c4 	bic.w	r3, r3, #1568	; 0x620
 8004066:	f023 0302 	bic.w	r3, r3, #2
 800406a:	b29a      	uxth	r2, r3
 800406c:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <processBeacon+0x210>)
 800406e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            reportEvent(EV_LOST_TSYNC);
 8004072:	200b      	movs	r0, #11
 8004074:	f7fe fb6a 	bl	800274c <reportEvent>
            return;
 8004078:	e021      	b.n	80040be <processBeacon+0x20a>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 800407a:	bf00      	nop
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
 800407c:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <processBeacon+0x210>)
 800407e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8004082:	f503 147a 	add.w	r4, r3, #4096000	; 0x3e8000
 8004086:	2103      	movs	r1, #3
 8004088:	2000      	movs	r0, #0
 800408a:	f7fd fdc9 	bl	8001c20 <calcRxWindow>
 800408e:	4603      	mov	r3, r0
 8004090:	1ae3      	subs	r3, r4, r3
 8004092:	4a0c      	ldr	r2, [pc, #48]	; (80040c4 <processBeacon+0x210>)
 8004094:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
    LMIC.bcnRxsyms = LMIC.rxsyms;    
 8004098:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <processBeacon+0x210>)
 800409a:	7c1a      	ldrb	r2, [r3, #16]
 800409c:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <processBeacon+0x210>)
 800409e:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
 80040a2:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <processBeacon+0x210>)
 80040a4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80040a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <processBeacon+0x202>
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 80040b0:	4805      	ldr	r0, [pc, #20]	; (80040c8 <processBeacon+0x214>)
 80040b2:	f7fd fe87 	bl	8001dc4 <rxschedInit>
    reportEvent(ev);
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe fb47 	bl	800274c <reportEvent>
}
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd90      	pop	{r4, r7, pc}
 80040c4:	20000304 	.word	0x20000304
 80040c8:	20000438 	.word	0x20000438

080040cc <startRxBcn>:


static void startRxBcn (xref2osjob_t osjob) {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processBeacon);
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <startRxBcn+0x1c>)
 80040d6:	4a05      	ldr	r2, [pc, #20]	; (80040ec <startRxBcn+0x20>)
 80040d8:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 80040da:	2002      	movs	r0, #2
 80040dc:	f001 fc5e 	bl	800599c <os_radio>
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000304 	.word	0x20000304
 80040ec:	08003eb5 	.word	0x08003eb5

080040f0 <startRxPing>:


static void startRxPing (xref2osjob_t osjob) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <startRxPing+0x1c>)
 80040fa:	4a05      	ldr	r2, [pc, #20]	; (8004110 <startRxPing+0x20>)
 80040fc:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 80040fe:	2002      	movs	r0, #2
 8004100:	f001 fc4c 	bl	800599c <os_radio>
}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	20000304 	.word	0x20000304
 8004110:	08003c91 	.word	0x08003c91

08004114 <engineUpdate>:


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
 800411a:	4b90      	ldr	r3, [pc, #576]	; (800435c <engineUpdate+0x248>)
 800411c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004120:	f003 03c1 	and.w	r3, r3, #193	; 0xc1
 8004124:	2b00      	cmp	r3, #0
 8004126:	f040 81ab 	bne.w	8004480 <engineUpdate+0x36c>
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
 800412a:	4b8c      	ldr	r3, [pc, #560]	; (800435c <engineUpdate+0x248>)
 800412c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <engineUpdate+0x34>
 8004134:	4b89      	ldr	r3, [pc, #548]	; (800435c <engineUpdate+0x248>)
 8004136:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <engineUpdate+0x34>
        LMIC_startJoining();
 8004142:	f7ff fd5b 	bl	8003bfc <LMIC_startJoining>
        return;
 8004146:	e19e      	b.n	8004486 <engineUpdate+0x372>
    }

    ostime_t now    = os_getTime();
 8004148:	f000 fe06 	bl	8004d58 <os_getTime>
 800414c:	60b8      	str	r0, [r7, #8]
    ostime_t rxtime = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
    ostime_t txbeg  = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]

    if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8004156:	4b81      	ldr	r3, [pc, #516]	; (800435c <engineUpdate+0x248>)
 8004158:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00f      	beq.n	8004184 <engineUpdate+0x70>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800416a:	4b7c      	ldr	r3, [pc, #496]	; (800435c <engineUpdate+0x248>)
 800416c:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	dd01      	ble.n	800417a <engineUpdate+0x66>
 8004176:	f7fd f941 	bl	80013fc <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 800417a:	4b78      	ldr	r3, [pc, #480]	; (800435c <engineUpdate+0x248>)
 800417c:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8004180:	3b40      	subs	r3, #64	; 0x40
 8004182:	617b      	str	r3, [r7, #20]
    }

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
 8004184:	4b75      	ldr	r3, [pc, #468]	; (800435c <engineUpdate+0x248>)
 8004186:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800418a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 80f2 	beq.w	8004378 <engineUpdate+0x264>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
 8004194:	4b71      	ldr	r3, [pc, #452]	; (800435c <engineUpdate+0x248>)
 8004196:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800419a:	f003 0324 	and.w	r3, r3, #36	; 0x24
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf14      	ite	ne
 80041a2:	2301      	movne	r3, #1
 80041a4:	2300      	moveq	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	71fb      	strb	r3, [r7, #7]
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
 80041aa:	4b6c      	ldr	r3, [pc, #432]	; (800435c <engineUpdate+0x248>)
 80041ac:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80041b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d012      	beq.n	80041de <engineUpdate+0xca>
            txbeg = LMIC.txend = nextTx(now);
 80041b8:	68b8      	ldr	r0, [r7, #8]
 80041ba:	f7fe f95d 	bl	8002478 <nextTx>
 80041be:	4602      	mov	r2, r0
 80041c0:	4b66      	ldr	r3, [pc, #408]	; (800435c <engineUpdate+0x248>)
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	4b65      	ldr	r3, [pc, #404]	; (800435c <engineUpdate+0x248>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	613b      	str	r3, [r7, #16]
            LMIC.opmode &= ~OP_NEXTCHNL;
 80041ca:	4b64      	ldr	r3, [pc, #400]	; (800435c <engineUpdate+0x248>)
 80041cc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80041d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	4b61      	ldr	r3, [pc, #388]	; (800435c <engineUpdate+0x248>)
 80041d8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80041dc:	e002      	b.n	80041e4 <engineUpdate+0xd0>
        } else {
            txbeg = LMIC.txend;
 80041de:	4b5f      	ldr	r3, [pc, #380]	; (800435c <engineUpdate+0x248>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	613b      	str	r3, [r7, #16]
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
 80041e4:	4b5d      	ldr	r3, [pc, #372]	; (800435c <engineUpdate+0x248>)
 80041e6:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <engineUpdate+0xe8>
 80041ee:	4b5b      	ldr	r3, [pc, #364]	; (800435c <engineUpdate+0x248>)
 80041f0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80041f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <engineUpdate+0xfe>
 80041fc:	4b57      	ldr	r3, [pc, #348]	; (800435c <engineUpdate+0x248>)
 80041fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	da03      	bge.n	8004212 <engineUpdate+0xfe>
            txbeg = LMIC.globalDutyAvail;
 800420a:	4b54      	ldr	r3, [pc, #336]	; (800435c <engineUpdate+0x248>)
 800420c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004210:	613b      	str	r3, [r7, #16]
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004212:	4b52      	ldr	r3, [pc, #328]	; (800435c <engineUpdate+0x248>)
 8004214:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d017      	beq.n	8004250 <engineUpdate+0x13c>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <engineUpdate+0x116>
 8004226:	4a4e      	ldr	r2, [pc, #312]	; (8004360 <engineUpdate+0x24c>)
 8004228:	e000      	b.n	800422c <engineUpdate+0x118>
 800422a:	4a4e      	ldr	r2, [pc, #312]	; (8004364 <engineUpdate+0x250>)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	441a      	add	r2, r3
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	1ad3      	subs	r3, r2, r3
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004234:	2b00      	cmp	r3, #0
 8004236:	dd0b      	ble.n	8004250 <engineUpdate+0x13c>
            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800423e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004242:	2110      	movs	r1, #16
 8004244:	4618      	mov	r0, r3
 8004246:	f7fd fef1 	bl	800202c <txDelay>
            txbeg = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	613b      	str	r3, [r7, #16]
            goto checkrx;
 800424e:	e09b      	b.n	8004388 <engineUpdate+0x274>
        }
        // Earliest possible time vs overhead to setup radio
        if( txbeg - (now + TX_RAMPUP) < 0 ) {
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	3340      	adds	r3, #64	; 0x40
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	da70      	bge.n	800433e <engineUpdate+0x22a>
            // We could send right now!
        txbeg = now;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	613b      	str	r3, [r7, #16]
            dr_t txdr = (dr_t)LMIC.datarate;
 8004260:	4b3e      	ldr	r3, [pc, #248]	; (800435c <engineUpdate+0x248>)
 8004262:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004266:	73fb      	strb	r3, [r7, #15]
            if( jacc ) {
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01d      	beq.n	80042aa <engineUpdate+0x196>
                u1_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 800426e:	4b3b      	ldr	r3, [pc, #236]	; (800435c <engineUpdate+0x248>)
 8004270:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00c      	beq.n	8004296 <engineUpdate+0x182>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
 800427c:	4b37      	ldr	r3, [pc, #220]	; (800435c <engineUpdate+0x248>)
 800427e:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f7fd f9ac 	bl	80015e4 <lowerDR>
 800428c:	4603      	mov	r3, r0
 800428e:	73fb      	strb	r3, [r7, #15]
                    ftype = HDR_FTYPE_REJOIN;
 8004290:	23c0      	movs	r3, #192	; 0xc0
 8004292:	73bb      	strb	r3, [r7, #14]
 8004294:	e001      	b.n	800429a <engineUpdate+0x186>
                } else {
                    ftype = HDR_FTYPE_JREQ;
 8004296:	2300      	movs	r3, #0
 8004298:	73bb      	strb	r3, [r7, #14]
                }
                buildJoinRequest(ftype);
 800429a:	7bbb      	ldrb	r3, [r7, #14]
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fc6b 	bl	8003b78 <buildJoinRequest>
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
 80042a2:	4b2e      	ldr	r3, [pc, #184]	; (800435c <engineUpdate+0x248>)
 80042a4:	4a30      	ldr	r2, [pc, #192]	; (8004368 <engineUpdate+0x254>)
 80042a6:	61da      	str	r2, [r3, #28]
 80042a8:	e01d      	b.n	80042e6 <engineUpdate+0x1d2>
            } else {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
 80042aa:	4b2c      	ldr	r3, [pc, #176]	; (800435c <engineUpdate+0x248>)
 80042ac:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80042b0:	f113 0f81 	cmn.w	r3, #129	; 0x81
 80042b4:	d907      	bls.n	80042c6 <engineUpdate+0x1b2>
                                        e_.eui    = MAIN::CDEV->getEui(),
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
 80042b6:	bf00      	nop
 80042b8:	e000      	b.n	80042bc <engineUpdate+0x1a8>
                    EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
                                       e_.eui    = MAIN::CDEV->getEui(),
                                       e_.info2  = LMIC.seqnoUp));
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
 80042ba:	bf00      	nop
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 80042bc:	492b      	ldr	r1, [pc, #172]	; (800436c <engineUpdate+0x258>)
 80042be:	482c      	ldr	r0, [pc, #176]	; (8004370 <engineUpdate+0x25c>)
 80042c0:	f000 fd8e 	bl	8004de0 <os_setCallback>
                    return;
 80042c4:	e0df      	b.n	8004486 <engineUpdate+0x372>
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
 80042c6:	4b25      	ldr	r3, [pc, #148]	; (800435c <engineUpdate+0x248>)
 80042c8:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d105      	bne.n	80042dc <engineUpdate+0x1c8>
 80042d0:	4b22      	ldr	r3, [pc, #136]	; (800435c <engineUpdate+0x248>)
 80042d2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d0ee      	beq.n	80042ba <engineUpdate+0x1a6>
                }
                buildDataFrame();
 80042dc:	f7ff f9ba 	bl	8003654 <buildDataFrame>
                LMIC.osjob.func = FUNC_ADDR(updataDone);
 80042e0:	4b1e      	ldr	r3, [pc, #120]	; (800435c <engineUpdate+0x248>)
 80042e2:	4a24      	ldr	r2, [pc, #144]	; (8004374 <engineUpdate+0x260>)
 80042e4:	61da      	str	r2, [r3, #28]
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fd f927 	bl	800153c <updr2rps>
 80042ee:	4603      	mov	r3, r0
 80042f0:	461a      	mov	r2, r3
 80042f2:	4b1a      	ldr	r3, [pc, #104]	; (800435c <engineUpdate+0x248>)
 80042f4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80042f8:	4619      	mov	r1, r3
 80042fa:	4610      	mov	r0, r2
 80042fc:	f7fd f8b9 	bl	8001472 <setCr>
 8004300:	4603      	mov	r3, r0
 8004302:	461a      	mov	r2, r3
 8004304:	4b15      	ldr	r3, [pc, #84]	; (800435c <engineUpdate+0x248>)
 8004306:	81da      	strh	r2, [r3, #14]
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 8004308:	4a14      	ldr	r2, [pc, #80]	; (800435c <engineUpdate+0x248>)
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	7453      	strb	r3, [r2, #17]
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
 800430e:	4b13      	ldr	r3, [pc, #76]	; (800435c <engineUpdate+0x248>)
 8004310:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004314:	b21b      	sxth	r3, r3
 8004316:	f423 6319 	bic.w	r3, r3, #2448	; 0x990
 800431a:	b21b      	sxth	r3, r3
 800431c:	f443 6308 	orr.w	r3, r3, #2176	; 0x880
 8004320:	b21b      	sxth	r3, r3
 8004322:	b29a      	uxth	r2, r3
 8004324:	4b0d      	ldr	r3, [pc, #52]	; (800435c <engineUpdate+0x248>)
 8004326:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            updateTx(txbeg);
 800432a:	6938      	ldr	r0, [r7, #16]
 800432c:	f7fe f85a 	bl	80023e4 <updateTx>
            reportEvent(EV_TXSTART);
 8004330:	2011      	movs	r0, #17
 8004332:	f7fe fa0b 	bl	800274c <reportEvent>
            os_radio(RADIO_TX);
 8004336:	2001      	movs	r0, #1
 8004338:	f001 fb30 	bl	800599c <os_radio>
            return;
 800433c:	e0a3      	b.n	8004486 <engineUpdate+0x372>
        }
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 800433e:	4b07      	ldr	r3, [pc, #28]	; (800435c <engineUpdate+0x248>)
 8004340:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 808c 	beq.w	8004466 <engineUpdate+0x352>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d119      	bne.n	8004388 <engineUpdate+0x274>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	3301      	adds	r3, #1
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	e015      	b.n	8004388 <engineUpdate+0x274>
 800435c:	20000304 	.word	0x20000304
 8004360:	00046500 	.word	0x00046500
 8004364:	0002ee00 	.word	0x0002ee00
 8004368:	08003515 	.word	0x08003515
 800436c:	0800276b 	.word	0x0800276b
 8004370:	20000318 	.word	0x20000318
 8004374:	08003625 	.word	0x08003625
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8004378:	4b44      	ldr	r3, [pc, #272]	; (800448c <engineUpdate+0x378>)
 800437a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d07e      	beq.n	8004484 <engineUpdate+0x370>
            return;
    }

    // Are we pingable?
  checkrx:
 8004386:	bf00      	nop
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
 8004388:	4b40      	ldr	r3, [pc, #256]	; (800448c <engineUpdate+0x378>)
 800438a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800438e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004392:	2b00      	cmp	r3, #0
 8004394:	d041      	beq.n	800441a <engineUpdate+0x306>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	3340      	adds	r3, #64	; 0x40
 800439a:	4619      	mov	r1, r3
 800439c:	483c      	ldr	r0, [pc, #240]	; (8004490 <engineUpdate+0x37c>)
 800439e:	f7fd fdb9 	bl	8001f14 <rxschedNext>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d038      	beq.n	800441a <engineUpdate+0x306>
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d006      	beq.n	80043bc <engineUpdate+0x2a8>
 80043ae:	4b37      	ldr	r3, [pc, #220]	; (800448c <engineUpdate+0x378>)
 80043b0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	db56      	blt.n	800446a <engineUpdate+0x356>
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
 80043bc:	4b33      	ldr	r3, [pc, #204]	; (800448c <engineUpdate+0x378>)
 80043be:	f893 2137 	ldrb.w	r2, [r3, #311]	; 0x137
 80043c2:	4b32      	ldr	r3, [pc, #200]	; (800448c <engineUpdate+0x378>)
 80043c4:	741a      	strb	r2, [r3, #16]
            LMIC.rxtime  = LMIC.ping.rxtime;
 80043c6:	4b31      	ldr	r3, [pc, #196]	; (800448c <engineUpdate+0x378>)
 80043c8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80043cc:	4a2f      	ldr	r2, [pc, #188]	; (800448c <engineUpdate+0x378>)
 80043ce:	6053      	str	r3, [r2, #4]
            LMIC.freq    = LMIC.ping.freq;
 80043d0:	4b2e      	ldr	r3, [pc, #184]	; (800448c <engineUpdate+0x378>)
 80043d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80043d6:	4a2d      	ldr	r2, [pc, #180]	; (800448c <engineUpdate+0x378>)
 80043d8:	6093      	str	r3, [r2, #8]
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
 80043da:	4b2c      	ldr	r3, [pc, #176]	; (800448c <engineUpdate+0x378>)
 80043dc:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fd f8bd 	bl	8001560 <dndr2rps>
 80043e6:	4603      	mov	r3, r0
 80043e8:	461a      	mov	r2, r3
 80043ea:	4b28      	ldr	r3, [pc, #160]	; (800448c <engineUpdate+0x378>)
 80043ec:	81da      	strh	r2, [r3, #14]
            LMIC.dataLen = 0;
 80043ee:	4b27      	ldr	r3, [pc, #156]	; (800448c <engineUpdate+0x378>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
 80043f6:	4b25      	ldr	r3, [pc, #148]	; (800448c <engineUpdate+0x378>)
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	3340      	adds	r3, #64	; 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	da01      	bge.n	8004408 <engineUpdate+0x2f4>
 8004404:	f7fc fffa 	bl	80013fc <hal_failed>
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
 8004408:	4b20      	ldr	r3, [pc, #128]	; (800448c <engineUpdate+0x378>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	3b40      	subs	r3, #64	; 0x40
 800440e:	4a21      	ldr	r2, [pc, #132]	; (8004494 <engineUpdate+0x380>)
 8004410:	4619      	mov	r1, r3
 8004412:	4821      	ldr	r0, [pc, #132]	; (8004498 <engineUpdate+0x384>)
 8004414:	f000 fd0a 	bl	8004e2c <os_setTimedCallback>
            return;
 8004418:	e035      	b.n	8004486 <engineUpdate+0x372>
        }
        // no - just wait for the beacon
    }

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <engineUpdate+0x316>
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	db21      	blt.n	800446e <engineUpdate+0x35a>
        goto txdelay;

    setBcnRxParams();
 800442a:	f7fe f8c1 	bl	80025b0 <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
 800442e:	4b17      	ldr	r3, [pc, #92]	; (800448c <engineUpdate+0x378>)
 8004430:	f893 2189 	ldrb.w	r2, [r3, #393]	; 0x189
 8004434:	4b15      	ldr	r3, [pc, #84]	; (800448c <engineUpdate+0x378>)
 8004436:	741a      	strb	r2, [r3, #16]
    LMIC.rxtime = LMIC.bcnRxtime;
 8004438:	4b14      	ldr	r3, [pc, #80]	; (800448c <engineUpdate+0x378>)
 800443a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800443e:	4a13      	ldr	r2, [pc, #76]	; (800448c <engineUpdate+0x378>)
 8004440:	6053      	str	r3, [r2, #4]
    if( now - rxtime >= 0 ) {
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	db06      	blt.n	800445a <engineUpdate+0x346>
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
 800444c:	4b0f      	ldr	r3, [pc, #60]	; (800448c <engineUpdate+0x378>)
 800444e:	4a13      	ldr	r2, [pc, #76]	; (800449c <engineUpdate+0x388>)
 8004450:	61da      	str	r2, [r3, #28]
        os_radio(RADIO_RX);
 8004452:	2002      	movs	r0, #2
 8004454:	f001 faa2 	bl	800599c <os_radio>
        return;
 8004458:	e015      	b.n	8004486 <engineUpdate+0x372>
    }
    os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 800445a:	4a11      	ldr	r2, [pc, #68]	; (80044a0 <engineUpdate+0x38c>)
 800445c:	6979      	ldr	r1, [r7, #20]
 800445e:	480e      	ldr	r0, [pc, #56]	; (8004498 <engineUpdate+0x384>)
 8004460:	f000 fce4 	bl	8004e2c <os_setTimedCallback>
    return;
 8004464:	e00f      	b.n	8004486 <engineUpdate+0x372>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
 8004466:	bf00      	nop
 8004468:	e002      	b.n	8004470 <engineUpdate+0x35c>
                goto txdelay;
 800446a:	bf00      	nop
 800446c:	e000      	b.n	8004470 <engineUpdate+0x35c>
        goto txdelay;
 800446e:	bf00      	nop
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	3b40      	subs	r3, #64	; 0x40
 8004474:	4a0b      	ldr	r2, [pc, #44]	; (80044a4 <engineUpdate+0x390>)
 8004476:	4619      	mov	r1, r3
 8004478:	4807      	ldr	r0, [pc, #28]	; (8004498 <engineUpdate+0x384>)
 800447a:	f000 fcd7 	bl	8004e2c <os_setTimedCallback>
 800447e:	e002      	b.n	8004486 <engineUpdate+0x372>
        return;
 8004480:	bf00      	nop
 8004482:	e000      	b.n	8004486 <engineUpdate+0x372>
            return;
 8004484:	bf00      	nop
}
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000304 	.word	0x20000304
 8004490:	20000438 	.word	0x20000438
 8004494:	080040f1 	.word	0x080040f1
 8004498:	20000318 	.word	0x20000318
 800449c:	08003eb5 	.word	0x08003eb5
 80044a0:	080040cd 	.word	0x080040cd
 80044a4:	08002739 	.word	0x08002739

080044a8 <LMIC_reset>:
    os_radio(RADIO_RST);
    LMIC.opmode |= OP_SHUTDOWN;
}


void LMIC_reset (void) {
 80044a8:	b598      	push	{r3, r4, r7, lr}
 80044aa:	af00      	add	r7, sp, #0
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
 80044ac:	2000      	movs	r0, #0
 80044ae:	f001 fa75 	bl	800599c <os_radio>
    os_clearCallback(&LMIC.osjob);
 80044b2:	4821      	ldr	r0, [pc, #132]	; (8004538 <LMIC_reset+0x90>)
 80044b4:	f000 fc76 	bl	8004da4 <os_clearCallback>

    os_clearMem((xref2u1_t)&LMIC,SIZEOFEXPR(LMIC));
 80044b8:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80044bc:	2100      	movs	r1, #0
 80044be:	481f      	ldr	r0, [pc, #124]	; (800453c <LMIC_reset+0x94>)
 80044c0:	f007 f901 	bl	800b6c6 <memset>
    LMIC.devaddr      =  0;
 80044c4:	4b1d      	ldr	r3, [pc, #116]	; (800453c <LMIC_reset+0x94>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    LMIC.devNonce     =  os_getRndU2();
 80044cc:	f001 f96a 	bl	80057a4 <radio_rand1>
 80044d0:	4603      	mov	r3, r0
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	b21c      	sxth	r4, r3
 80044d6:	f001 f965 	bl	80057a4 <radio_rand1>
 80044da:	4603      	mov	r3, r0
 80044dc:	b21b      	sxth	r3, r3
 80044de:	4323      	orrs	r3, r4
 80044e0:	b21b      	sxth	r3, r3
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	4b15      	ldr	r3, [pc, #84]	; (800453c <LMIC_reset+0x94>)
 80044e6:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
    LMIC.opmode       =  OP_NONE;
 80044ea:	4b14      	ldr	r3, [pc, #80]	; (800453c <LMIC_reset+0x94>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    LMIC.errcr        =  CR_4_5;
 80044f2:	4b12      	ldr	r3, [pc, #72]	; (800453c <LMIC_reset+0x94>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    LMIC.adrEnabled   =  FCT_ADREN;
 80044fa:	4b10      	ldr	r3, [pc, #64]	; (800453c <LMIC_reset+0x94>)
 80044fc:	2280      	movs	r2, #128	; 0x80
 80044fe:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
 8004502:	4b0e      	ldr	r3, [pc, #56]	; (800453c <LMIC_reset+0x94>)
 8004504:	2200      	movs	r2, #0
 8004506:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
 800450a:	4b0c      	ldr	r3, [pc, #48]	; (800453c <LMIC_reset+0x94>)
 800450c:	4a0c      	ldr	r2, [pc, #48]	; (8004540 <LMIC_reset+0x98>)
 800450e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    LMIC.rxDelay      =  DELAY_DNW1;
 8004512:	4b0a      	ldr	r3, [pc, #40]	; (800453c <LMIC_reset+0x94>)
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
 800451a:	4b08      	ldr	r3, [pc, #32]	; (800453c <LMIC_reset+0x94>)
 800451c:	4a08      	ldr	r2, [pc, #32]	; (8004540 <LMIC_reset+0x98>)
 800451e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    LMIC.ping.dr      =  DR_PING;   // ditto
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <LMIC_reset+0x94>)
 8004524:	2203      	movs	r2, #3
 8004526:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    LMIC.ping.intvExp =  0xFF;
 800452a:	4b04      	ldr	r3, [pc, #16]	; (800453c <LMIC_reset+0x94>)
 800452c:	22ff      	movs	r2, #255	; 0xff
 800452e:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    DO_DEVDB(LMIC.dn2Dr,        dn2Dr);
    DO_DEVDB(LMIC.dn2Freq,      dn2Freq);
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 8004532:	bf00      	nop
 8004534:	bd98      	pop	{r3, r4, r7, pc}
 8004536:	bf00      	nop
 8004538:	20000318 	.word	0x20000318
 800453c:	20000304 	.word	0x20000304
 8004540:	33d3e608 	.word	0x33d3e608

08004544 <LMIC_init>:


void LMIC_init (void) {
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
    LMIC.opmode = OP_SHUTDOWN;
 8004548:	4b04      	ldr	r3, [pc, #16]	; (800455c <LMIC_init+0x18>)
 800454a:	2240      	movs	r2, #64	; 0x40
 800454c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20000304 	.word	0x20000304

08004560 <LMIC_setTxData>:
    os_radio(RADIO_RST);
    engineUpdate();
}


void LMIC_setTxData (void) {
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
    LMIC.opmode |= OP_TXDATA;
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <LMIC_setTxData+0x34>)
 8004566:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800456a:	f043 0308 	orr.w	r3, r3, #8
 800456e:	b29a      	uxth	r2, r3
 8004570:	4b08      	ldr	r3, [pc, #32]	; (8004594 <LMIC_setTxData+0x34>)
 8004572:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    if( (LMIC.opmode & OP_JOINING) == 0 )
 8004576:	4b07      	ldr	r3, [pc, #28]	; (8004594 <LMIC_setTxData+0x34>)
 8004578:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d103      	bne.n	800458c <LMIC_setTxData+0x2c>
        LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 8004584:	4b03      	ldr	r3, [pc, #12]	; (8004594 <LMIC_setTxData+0x34>)
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
    engineUpdate();
 800458c:	f7ff fdc2 	bl	8004114 <engineUpdate>
}
 8004590:	bf00      	nop
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000304 	.word	0x20000304

08004598 <LMIC_setTxData2>:


//
int LMIC_setTxData2 (u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6039      	str	r1, [r7, #0]
 80045a0:	4611      	mov	r1, r2
 80045a2:	461a      	mov	r2, r3
 80045a4:	4603      	mov	r3, r0
 80045a6:	71fb      	strb	r3, [r7, #7]
 80045a8:	460b      	mov	r3, r1
 80045aa:	71bb      	strb	r3, [r7, #6]
 80045ac:	4613      	mov	r3, r2
 80045ae:	717b      	strb	r3, [r7, #5]
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
 80045b0:	79bb      	ldrb	r3, [r7, #6]
 80045b2:	2b34      	cmp	r3, #52	; 0x34
 80045b4:	d902      	bls.n	80045bc <LMIC_setTxData2+0x24>
        return -2;
 80045b6:	f06f 0301 	mvn.w	r3, #1
 80045ba:	e017      	b.n	80045ec <LMIC_setTxData2+0x54>
    if( data != (xref2u1_t)0 )
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <LMIC_setTxData2+0x36>
        os_copyMem(LMIC.pendTxData, data, dlen);
 80045c2:	79bb      	ldrb	r3, [r7, #6]
 80045c4:	461a      	mov	r2, r3
 80045c6:	6839      	ldr	r1, [r7, #0]
 80045c8:	480a      	ldr	r0, [pc, #40]	; (80045f4 <LMIC_setTxData2+0x5c>)
 80045ca:	f007 f871 	bl	800b6b0 <memcpy>
    LMIC.pendTxConf = confirmed;
 80045ce:	4a0a      	ldr	r2, [pc, #40]	; (80045f8 <LMIC_setTxData2+0x60>)
 80045d0:	797b      	ldrb	r3, [r7, #5]
 80045d2:	f882 30bb 	strb.w	r3, [r2, #187]	; 0xbb
    LMIC.pendTxPort = port;
 80045d6:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <LMIC_setTxData2+0x60>)
 80045d8:	79fb      	ldrb	r3, [r7, #7]
 80045da:	f882 30ba 	strb.w	r3, [r2, #186]	; 0xba
    LMIC.pendTxLen  = dlen;
 80045de:	4a06      	ldr	r2, [pc, #24]	; (80045f8 <LMIC_setTxData2+0x60>)
 80045e0:	79bb      	ldrb	r3, [r7, #6]
 80045e2:	f882 30bc 	strb.w	r3, [r2, #188]	; 0xbc
    LMIC_setTxData();
 80045e6:	f7ff ffbb 	bl	8004560 <LMIC_setTxData>
    return 0;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	200003c1 	.word	0x200003c1
 80045f8:	20000304 	.word	0x20000304

080045fc <os_getArtEui>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// provide application router ID (8 bytes, LSBF)
void os_getArtEui (u1_t* buf) {
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
    memcpy(buf, APPEUI, 8);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a05      	ldr	r2, [pc, #20]	; (800461c <os_getArtEui+0x20>)
 8004608:	6811      	ldr	r1, [r2, #0]
 800460a:	6852      	ldr	r2, [r2, #4]
 800460c:	6019      	str	r1, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	0800cda4 	.word	0x0800cda4

08004620 <os_getDevEui>:

// provide device ID (8 bytes, LSBF)
void os_getDevEui (u1_t* buf) {
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
    memcpy(buf, DEVEUI, 8);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a05      	ldr	r2, [pc, #20]	; (8004640 <os_getDevEui+0x20>)
 800462c:	6811      	ldr	r1, [r2, #0]
 800462e:	6852      	ldr	r2, [r2, #4]
 8004630:	6019      	str	r1, [r3, #0]
 8004632:	605a      	str	r2, [r3, #4]
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	0800cd9c 	.word	0x0800cd9c

08004644 <os_getDevKey>:

// provide device key (16 bytes)
void os_getDevKey (u1_t* buf) {
 8004644:	b490      	push	{r4, r7}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
    memcpy(buf, DEVKEY, 16);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a07      	ldr	r2, [pc, #28]	; (800466c <os_getDevKey+0x28>)
 8004650:	6814      	ldr	r4, [r2, #0]
 8004652:	6850      	ldr	r0, [r2, #4]
 8004654:	6891      	ldr	r1, [r2, #8]
 8004656:	68d2      	ldr	r2, [r2, #12]
 8004658:	601c      	str	r4, [r3, #0]
 800465a:	6058      	str	r0, [r3, #4]
 800465c:	6099      	str	r1, [r3, #8]
 800465e:	60da      	str	r2, [r3, #12]
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bc90      	pop	{r4, r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	0800cdac 	.word	0x0800cdac

08004670 <initfunc>:


void initfunc (osjob_t* j) {
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
    // reset MAC state
    LMIC_reset();
 8004678:	f7ff ff16 	bl	80044a8 <LMIC_reset>
    // start joining
    LMIC_startJoining();
 800467c:	f7ff fabe 	bl	8003bfc <LMIC_startJoining>
    // init done - onEvent() callback will be invoked...
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <reportfunc>:


static osjob_t reportjob;


static void reportfunc (osjob_t* j) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

    // read sensors
	int pm25 = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]
	int pm10 = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	60bb      	str	r3, [r7, #8]
	hpmStartParticleMeasurement();
 8004698:	f001 fb38 	bl	8005d0c <hpmStartParticleMeasurement>
	HAL_Delay(measure);
 800469c:	4b1f      	ldr	r3, [pc, #124]	; (800471c <reportfunc+0x94>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f001 fdbb 	bl	800621c <HAL_Delay>
	hpmReadResults(&pm25,&pm10);
 80046a6:	f107 0208 	add.w	r2, r7, #8
 80046aa:	f107 030c 	add.w	r3, r7, #12
 80046ae:	4611      	mov	r1, r2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f001 fae9 	bl	8005c88 <hpmReadResults>
	hpmStopParticleMeasurement();
 80046b6:	f001 fb4a 	bl	8005d4e <hpmStopParticleMeasurement>

    // prepare and schedule data for transmission
    LMIC.frame[0] = pm25 >> 8;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	121b      	asrs	r3, r3, #8
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	4b17      	ldr	r3, [pc, #92]	; (8004720 <reportfunc+0x98>)
 80046c2:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    LMIC.frame[1] = pm25;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <reportfunc+0x98>)
 80046cc:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    LMIC.frame[2] = pm10 >> 8;
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	121b      	asrs	r3, r3, #8
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	4b12      	ldr	r3, [pc, #72]	; (8004720 <reportfunc+0x98>)
 80046d8:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    LMIC.frame[3] = pm10;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	4b0f      	ldr	r3, [pc, #60]	; (8004720 <reportfunc+0x98>)
 80046e2:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b

    // send data
    LMIC_setTxData2(1, LMIC.frame, 4, 0); // (port 1, 4 bytes, unconfirmed)
 80046e6:	2300      	movs	r3, #0
 80046e8:	2204      	movs	r2, #4
 80046ea:	490e      	ldr	r1, [pc, #56]	; (8004724 <reportfunc+0x9c>)
 80046ec:	2001      	movs	r0, #1
 80046ee:	f7ff ff53 	bl	8004598 <LMIC_setTxData2>

    // reschedule job
    os_setTimedCallback(j, os_getTime()+sec2osticks(interval), reportfunc);
 80046f2:	f000 fb31 	bl	8004d58 <os_getTime>
 80046f6:	4602      	mov	r2, r0
 80046f8:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <reportfunc+0xa0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4619      	mov	r1, r3
 80046fe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004702:	fb03 f301 	mul.w	r3, r3, r1
 8004706:	4413      	add	r3, r2
 8004708:	4a08      	ldr	r2, [pc, #32]	; (800472c <reportfunc+0xa4>)
 800470a:	4619      	mov	r1, r3
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fb8d 	bl	8004e2c <os_setTimedCallback>
}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	0800cdc0 	.word	0x0800cdc0
 8004720:	20000304 	.word	0x20000304
 8004724:	2000044c 	.word	0x2000044c
 8004728:	0800cdbc 	.word	0x0800cdbc
 800472c:	08004689 	.word	0x08004689

08004730 <onEvent>:

//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////

void onEvent (ev_t ev) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	4603      	mov	r3, r0
 8004738:	71fb      	strb	r3, [r7, #7]
    debug_event(ev);
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	4618      	mov	r0, r3
 800473e:	f7fc fca9 	bl	8001094 <debug_event>

    switch(ev) {
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	3b01      	subs	r3, #1
 8004746:	2b0e      	cmp	r3, #14
 8004748:	d873      	bhi.n	8004832 <onEvent+0x102>
 800474a:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <onEvent+0x20>)
 800474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004750:	080047ab 	.word	0x080047ab
 8004754:	080047b3 	.word	0x080047b3
 8004758:	080047bb 	.word	0x080047bb
 800475c:	080047c3 	.word	0x080047c3
 8004760:	0800478d 	.word	0x0800478d
 8004764:	08004795 	.word	0x08004795
 8004768:	080047cb 	.word	0x080047cb
 800476c:	080047a3 	.word	0x080047a3
 8004770:	080047d3 	.word	0x080047d3
 8004774:	080047db 	.word	0x080047db
 8004778:	0800480b 	.word	0x0800480b
 800477c:	08004813 	.word	0x08004813
 8004780:	0800481b 	.word	0x0800481b
 8004784:	08004823 	.word	0x08004823
 8004788:	0800482b 	.word	0x0800482b

      // network joined, session established
      case EV_JOINING:
       	  debug_str("try joining\r\n");
 800478c:	482d      	ldr	r0, [pc, #180]	; (8004844 <onEvent+0x114>)
 800478e:	f7fc fc6d 	bl	800106c <debug_str>
       	  break;
 8004792:	e053      	b.n	800483c <onEvent+0x10c>
      case EV_JOINED:
          //debug_led(1);
    	  debug_str("joined\r\n");
 8004794:	482c      	ldr	r0, [pc, #176]	; (8004848 <onEvent+0x118>)
 8004796:	f7fc fc69 	bl	800106c <debug_str>
          // kick-off periodic sensor job
          reportfunc(&reportjob);
 800479a:	482c      	ldr	r0, [pc, #176]	; (800484c <onEvent+0x11c>)
 800479c:	f7ff ff74 	bl	8004688 <reportfunc>
          break;
 80047a0:	e04c      	b.n	800483c <onEvent+0x10c>
      case EV_JOIN_FAILED:
    	  debug_str("join failed\r\n");
 80047a2:	482b      	ldr	r0, [pc, #172]	; (8004850 <onEvent+0x120>)
 80047a4:	f7fc fc62 	bl	800106c <debug_str>
    	  break;
 80047a8:	e048      	b.n	800483c <onEvent+0x10c>
      case EV_SCAN_TIMEOUT:
    	  debug_str("EV_SCAN_TIMEOUT\r\n");
 80047aa:	482a      	ldr	r0, [pc, #168]	; (8004854 <onEvent+0x124>)
 80047ac:	f7fc fc5e 	bl	800106c <debug_str>
		  break;
 80047b0:	e044      	b.n	800483c <onEvent+0x10c>
	  case EV_BEACON_FOUND:
		  debug_str("EV_BEACON_FOUND\r\n");
 80047b2:	4829      	ldr	r0, [pc, #164]	; (8004858 <onEvent+0x128>)
 80047b4:	f7fc fc5a 	bl	800106c <debug_str>
		  break;
 80047b8:	e040      	b.n	800483c <onEvent+0x10c>
	  case EV_BEACON_MISSED:
		  debug_str("EV_BEACON_MISSED\r\n");
 80047ba:	4828      	ldr	r0, [pc, #160]	; (800485c <onEvent+0x12c>)
 80047bc:	f7fc fc56 	bl	800106c <debug_str>
		  break;
 80047c0:	e03c      	b.n	800483c <onEvent+0x10c>
	  case EV_BEACON_TRACKED:
		  debug_str("EV_BEACON_TRACKED\r\n");
 80047c2:	4827      	ldr	r0, [pc, #156]	; (8004860 <onEvent+0x130>)
 80047c4:	f7fc fc52 	bl	800106c <debug_str>
		  break;
 80047c8:	e038      	b.n	800483c <onEvent+0x10c>
	  case EV_RFU1:
		  debug_str("EV_RFU1\r\n");
 80047ca:	4826      	ldr	r0, [pc, #152]	; (8004864 <onEvent+0x134>)
 80047cc:	f7fc fc4e 	bl	800106c <debug_str>
		  break;
 80047d0:	e034      	b.n	800483c <onEvent+0x10c>
	  case EV_REJOIN_FAILED:
		  debug_str("EV_REJOIN_FAILED\r\n");
 80047d2:	4825      	ldr	r0, [pc, #148]	; (8004868 <onEvent+0x138>)
 80047d4:	f7fc fc4a 	bl	800106c <debug_str>
		  break;
 80047d8:	e030      	b.n	800483c <onEvent+0x10c>
	  case EV_TXCOMPLETE:
		  debug_str("EV_TXCOMPLETE (includes waiting for RX windows)\r\n");
 80047da:	4824      	ldr	r0, [pc, #144]	; (800486c <onEvent+0x13c>)
 80047dc:	f7fc fc46 	bl	800106c <debug_str>
		  if (LMIC.txrxFlags & TXRX_ACK)
 80047e0:	4b23      	ldr	r3, [pc, #140]	; (8004870 <onEvent+0x140>)
 80047e2:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 80047e6:	b25b      	sxtb	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	da02      	bge.n	80047f2 <onEvent+0xc2>
			  debug_str("Received ack\r\n");
 80047ec:	4821      	ldr	r0, [pc, #132]	; (8004874 <onEvent+0x144>)
 80047ee:	f7fc fc3d 	bl	800106c <debug_str>
		  if (LMIC.dataLen) {
 80047f2:	4b1f      	ldr	r3, [pc, #124]	; (8004870 <onEvent+0x140>)
 80047f4:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01e      	beq.n	800483a <onEvent+0x10a>
			  debug_str("Received ");
 80047fc:	481e      	ldr	r0, [pc, #120]	; (8004878 <onEvent+0x148>)
 80047fe:	f7fc fc35 	bl	800106c <debug_str>
			  //debug_str(LMIC.dataLen);
			  debug_str(" bytes of payload\r\n");
 8004802:	481e      	ldr	r0, [pc, #120]	; (800487c <onEvent+0x14c>)
 8004804:	f7fc fc32 	bl	800106c <debug_str>
		  }
		  break;
 8004808:	e017      	b.n	800483a <onEvent+0x10a>
	  case EV_LOST_TSYNC:
		  debug_str("EV_LOST_TSYNC\r\n");
 800480a:	481d      	ldr	r0, [pc, #116]	; (8004880 <onEvent+0x150>)
 800480c:	f7fc fc2e 	bl	800106c <debug_str>
		  break;
 8004810:	e014      	b.n	800483c <onEvent+0x10c>
	  case EV_RESET:
		  debug_str("EV_RESET\r\n");
 8004812:	481c      	ldr	r0, [pc, #112]	; (8004884 <onEvent+0x154>)
 8004814:	f7fc fc2a 	bl	800106c <debug_str>
		  break;
 8004818:	e010      	b.n	800483c <onEvent+0x10c>
	  case EV_RXCOMPLETE:
		  // data received in ping slot
		  debug_str("EV_RXCOMPLETE\r\n");
 800481a:	481b      	ldr	r0, [pc, #108]	; (8004888 <onEvent+0x158>)
 800481c:	f7fc fc26 	bl	800106c <debug_str>
		  break;
 8004820:	e00c      	b.n	800483c <onEvent+0x10c>
	  case EV_LINK_DEAD:
		  debug_str("EV_LINK_DEAD\r\n");
 8004822:	481a      	ldr	r0, [pc, #104]	; (800488c <onEvent+0x15c>)
 8004824:	f7fc fc22 	bl	800106c <debug_str>
		  break;
 8004828:	e008      	b.n	800483c <onEvent+0x10c>
	  case EV_LINK_ALIVE:
		  debug_str("EV_LINK_ALIVE\r\n");
 800482a:	4819      	ldr	r0, [pc, #100]	; (8004890 <onEvent+0x160>)
 800482c:	f7fc fc1e 	bl	800106c <debug_str>
		  break;
 8004830:	e004      	b.n	800483c <onEvent+0x10c>
	  default:
		   debug_str("\r\n");
 8004832:	4818      	ldr	r0, [pc, #96]	; (8004894 <onEvent+0x164>)
 8004834:	f7fc fc1a 	bl	800106c <debug_str>
		  break;
 8004838:	e000      	b.n	800483c <onEvent+0x10c>
		  break;
 800483a:	bf00      	nop
    }
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	0800b810 	.word	0x0800b810
 8004848:	0800b820 	.word	0x0800b820
 800484c:	20000078 	.word	0x20000078
 8004850:	0800b82c 	.word	0x0800b82c
 8004854:	0800b83c 	.word	0x0800b83c
 8004858:	0800b850 	.word	0x0800b850
 800485c:	0800b864 	.word	0x0800b864
 8004860:	0800b878 	.word	0x0800b878
 8004864:	0800b88c 	.word	0x0800b88c
 8004868:	0800b898 	.word	0x0800b898
 800486c:	0800b8ac 	.word	0x0800b8ac
 8004870:	20000304 	.word	0x20000304
 8004874:	0800b8e0 	.word	0x0800b8e0
 8004878:	0800b8f0 	.word	0x0800b8f0
 800487c:	0800b8fc 	.word	0x0800b8fc
 8004880:	0800b910 	.word	0x0800b910
 8004884:	0800b920 	.word	0x0800b920
 8004888:	0800b92c 	.word	0x0800b92c
 800488c:	0800b93c 	.word	0x0800b93c
 8004890:	0800b94c 	.word	0x0800b94c
 8004894:	0800b95c 	.word	0x0800b95c

08004898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800489e:	f001 fc45 	bl	800612c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048a2:	f000 f839 	bl	8004918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048a6:	f000 f9a5 	bl	8004bf4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80048aa:	f000 f8ad 	bl	8004a08 <MX_SPI1_Init>
  MX_TIM4_Init();
 80048ae:	f000 f8e9 	bl	8004a84 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80048b2:	f000 f96f 	bl	8004b94 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80048b6:	f000 f93d 	bl	8004b34 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);    // <-----------  change to your setup
 80048ba:	4812      	ldr	r0, [pc, #72]	; (8004904 <main+0x6c>)
 80048bc:	f004 fd96 	bl	80093ec <HAL_TIM_Base_Start_IT>
  __HAL_SPI_ENABLE(&hspi1);         // <-----------  change to your setup
 80048c0:	4b11      	ldr	r3, [pc, #68]	; (8004908 <main+0x70>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4b10      	ldr	r3, [pc, #64]	; (8004908 <main+0x70>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ce:	601a      	str	r2, [r3, #0]

  osjob_t initjob;

  // initialize runtime env
  os_init();
 80048d0:	f000 fa30 	bl	8004d34 <os_init>

  // initialize debug library
  debug_init();
 80048d4:	f7fc fb94 	bl	8001000 <debug_init>

  // Configure UART for Air-Sensor
  debug_str("Configuring Sensor\r\n");
 80048d8:	480c      	ldr	r0, [pc, #48]	; (800490c <main+0x74>)
 80048da:	f7fc fbc7 	bl	800106c <debug_str>
  hpmSetUart(&huart4);
 80048de:	480c      	ldr	r0, [pc, #48]	; (8004910 <main+0x78>)
 80048e0:	f001 f9c2 	bl	8005c68 <hpmSetUart>
  hpmStopAutoSend();
 80048e4:	f001 fa54 	bl	8005d90 <hpmStopAutoSend>
  hpmStopParticleMeasurement();
 80048e8:	f001 fa31 	bl	8005d4e <hpmStopParticleMeasurement>
  // setup initial job
   os_setCallback(&initjob, initfunc);
 80048ec:	1d3b      	adds	r3, r7, #4
 80048ee:	4909      	ldr	r1, [pc, #36]	; (8004914 <main+0x7c>)
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fa75 	bl	8004de0 <os_setCallback>
  // execute scheduled jobs and events
  os_runloop();
 80048f6:	f000 facf 	bl	8004e98 <os_runloop>
  // (not reached)
  return 0;
 80048fa:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20000160 	.word	0x20000160
 8004908:	20000220 	.word	0x20000220
 800490c:	0800b960 	.word	0x0800b960
 8004910:	200001a0 	.word	0x200001a0
 8004914:	08004671 	.word	0x08004671

08004918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b0b8      	sub	sp, #224	; 0xe0
 800491c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800491e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004922:	2244      	movs	r2, #68	; 0x44
 8004924:	2100      	movs	r1, #0
 8004926:	4618      	mov	r0, r3
 8004928:	f006 fecd 	bl	800b6c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800492c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	605a      	str	r2, [r3, #4]
 8004936:	609a      	str	r2, [r3, #8]
 8004938:	60da      	str	r2, [r3, #12]
 800493a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800493c:	463b      	mov	r3, r7
 800493e:	2288      	movs	r2, #136	; 0x88
 8004940:	2100      	movs	r1, #0
 8004942:	4618      	mov	r0, r3
 8004944:	f006 febf 	bl	800b6c6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004948:	2302      	movs	r3, #2
 800494a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800494e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004952:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004956:	2310      	movs	r3, #16
 8004958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800495c:	2302      	movs	r3, #2
 800495e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004962:	2302      	movs	r3, #2
 8004964:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004968:	2301      	movs	r3, #1
 800496a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 9;
 800496e:	2309      	movs	r3, #9
 8004970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004974:	2307      	movs	r3, #7
 8004976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800497a:	2302      	movs	r3, #2
 800497c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004980:	2302      	movs	r3, #2
 8004982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004986:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800498a:	4618      	mov	r0, r3
 800498c:	f002 f8ee 	bl	8006b6c <HAL_RCC_OscConfig>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004996:	f000 f9bb 	bl	8004d10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800499a:	230f      	movs	r3, #15
 800499c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049a0:	2303      	movs	r3, #3
 80049a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049a6:	2300      	movs	r3, #0
 80049a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049ac:	2300      	movs	r3, #0
 80049ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049b2:	2300      	movs	r3, #0
 80049b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80049b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80049bc:	2104      	movs	r1, #4
 80049be:	4618      	mov	r0, r3
 80049c0:	f002 fdc2 	bl	8007548 <HAL_RCC_ClockConfig>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80049ca:	f000 f9a1 	bl	8004d10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4;
 80049ce:	230a      	movs	r3, #10
 80049d0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80049d2:	2300      	movs	r3, #0
 80049d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80049d6:	2300      	movs	r3, #0
 80049d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049da:	463b      	mov	r3, r7
 80049dc:	4618      	mov	r0, r3
 80049de:	f003 f857 	bl	8007a90 <HAL_RCCEx_PeriphCLKConfig>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80049e8:	f000 f992 	bl	8004d10 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80049ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80049f0:	f002 f85a 	bl	8006aa8 <HAL_PWREx_ControlVoltageScaling>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80049fa:	f000 f989 	bl	8004d10 <Error_Handler>
  }
}
 80049fe:	bf00      	nop
 8004a00:	37e0      	adds	r7, #224	; 0xe0
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004a0c:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <MX_SPI1_Init+0x74>)
 8004a0e:	4a1c      	ldr	r2, [pc, #112]	; (8004a80 <MX_SPI1_Init+0x78>)
 8004a10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004a12:	4b1a      	ldr	r3, [pc, #104]	; (8004a7c <MX_SPI1_Init+0x74>)
 8004a14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004a1a:	4b18      	ldr	r3, [pc, #96]	; (8004a7c <MX_SPI1_Init+0x74>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a20:	4b16      	ldr	r3, [pc, #88]	; (8004a7c <MX_SPI1_Init+0x74>)
 8004a22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004a26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a28:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <MX_SPI1_Init+0x74>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a2e:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <MX_SPI1_Init+0x74>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004a34:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <MX_SPI1_Init+0x74>)
 8004a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004a3c:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <MX_SPI1_Init+0x74>)
 8004a3e:	2230      	movs	r2, #48	; 0x30
 8004a40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a42:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <MX_SPI1_Init+0x74>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a48:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <MX_SPI1_Init+0x74>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <MX_SPI1_Init+0x74>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004a54:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <MX_SPI1_Init+0x74>)
 8004a56:	2207      	movs	r2, #7
 8004a58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004a5a:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <MX_SPI1_Init+0x74>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <MX_SPI1_Init+0x74>)
 8004a62:	2208      	movs	r2, #8
 8004a64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004a66:	4805      	ldr	r0, [pc, #20]	; (8004a7c <MX_SPI1_Init+0x74>)
 8004a68:	f003 fffa 	bl	8008a60 <HAL_SPI_Init>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004a72:	f000 f94d 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004a76:	bf00      	nop
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000220 	.word	0x20000220
 8004a80:	40013000 	.word	0x40013000

08004a84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	; 0x28
 8004a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a8a:	f107 031c 	add.w	r3, r7, #28
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	605a      	str	r2, [r3, #4]
 8004a94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a96:	463b      	mov	r3, r7
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	609a      	str	r2, [r3, #8]
 8004aa0:	60da      	str	r2, [r3, #12]
 8004aa2:	611a      	str	r2, [r3, #16]
 8004aa4:	615a      	str	r2, [r3, #20]
 8004aa6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004aa8:	4b20      	ldr	r3, [pc, #128]	; (8004b2c <MX_TIM4_Init+0xa8>)
 8004aaa:	4a21      	ldr	r2, [pc, #132]	; (8004b30 <MX_TIM4_Init+0xac>)
 8004aac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2250-1;
 8004aae:	4b1f      	ldr	r3, [pc, #124]	; (8004b2c <MX_TIM4_Init+0xa8>)
 8004ab0:	f640 02c9 	movw	r2, #2249	; 0x8c9
 8004ab4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ab6:	4b1d      	ldr	r3, [pc, #116]	; (8004b2c <MX_TIM4_Init+0xa8>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 8004abc:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <MX_TIM4_Init+0xa8>)
 8004abe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004ac2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ac4:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <MX_TIM4_Init+0xa8>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004aca:	4b18      	ldr	r3, [pc, #96]	; (8004b2c <MX_TIM4_Init+0xa8>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8004ad0:	4816      	ldr	r0, [pc, #88]	; (8004b2c <MX_TIM4_Init+0xa8>)
 8004ad2:	f004 fd05 	bl	80094e0 <HAL_TIM_OC_Init>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8004adc:	f000 f918 	bl	8004d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004ae8:	f107 031c 	add.w	r3, r7, #28
 8004aec:	4619      	mov	r1, r3
 8004aee:	480f      	ldr	r0, [pc, #60]	; (8004b2c <MX_TIM4_Init+0xa8>)
 8004af0:	f005 fc92 	bl	800a418 <HAL_TIMEx_MasterConfigSynchronization>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8004afa:	f000 f909 	bl	8004d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004afe:	2300      	movs	r3, #0
 8004b00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b06:	2300      	movs	r3, #0
 8004b08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b0e:	463b      	mov	r3, r7
 8004b10:	2200      	movs	r2, #0
 8004b12:	4619      	mov	r1, r3
 8004b14:	4805      	ldr	r0, [pc, #20]	; (8004b2c <MX_TIM4_Init+0xa8>)
 8004b16:	f004 feb9 	bl	800988c <HAL_TIM_OC_ConfigChannel>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8004b20:	f000 f8f6 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004b24:	bf00      	nop
 8004b26:	3728      	adds	r7, #40	; 0x28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20000160 	.word	0x20000160
 8004b30:	40000800 	.word	0x40000800

08004b34 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004b38:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <MX_UART4_Init+0x58>)
 8004b3a:	4a15      	ldr	r2, [pc, #84]	; (8004b90 <MX_UART4_Init+0x5c>)
 8004b3c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <MX_UART4_Init+0x58>)
 8004b40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004b44:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004b46:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <MX_UART4_Init+0x58>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <MX_UART4_Init+0x58>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004b52:	4b0e      	ldr	r3, [pc, #56]	; (8004b8c <MX_UART4_Init+0x58>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <MX_UART4_Init+0x58>)
 8004b5a:	220c      	movs	r2, #12
 8004b5c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <MX_UART4_Init+0x58>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b64:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <MX_UART4_Init+0x58>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b6a:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <MX_UART4_Init+0x58>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <MX_UART4_Init+0x58>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004b76:	4805      	ldr	r0, [pc, #20]	; (8004b8c <MX_UART4_Init+0x58>)
 8004b78:	f005 fd92 	bl	800a6a0 <HAL_UART_Init>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8004b82:	f000 f8c5 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004b86:	bf00      	nop
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200001a0 	.word	0x200001a0
 8004b90:	40004c00 	.word	0x40004c00

08004b94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004b98:	4b14      	ldr	r3, [pc, #80]	; (8004bec <MX_USART2_UART_Init+0x58>)
 8004b9a:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <MX_USART2_UART_Init+0x5c>)
 8004b9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004b9e:	4b13      	ldr	r3, [pc, #76]	; (8004bec <MX_USART2_UART_Init+0x58>)
 8004ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ba4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004ba6:	4b11      	ldr	r3, [pc, #68]	; (8004bec <MX_USART2_UART_Init+0x58>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004bac:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <MX_USART2_UART_Init+0x58>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <MX_USART2_UART_Init+0x58>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <MX_USART2_UART_Init+0x58>)
 8004bba:	220c      	movs	r2, #12
 8004bbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bbe:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <MX_USART2_UART_Init+0x58>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bc4:	4b09      	ldr	r3, [pc, #36]	; (8004bec <MX_USART2_UART_Init+0x58>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bca:	4b08      	ldr	r3, [pc, #32]	; (8004bec <MX_USART2_UART_Init+0x58>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bd0:	4b06      	ldr	r3, [pc, #24]	; (8004bec <MX_USART2_UART_Init+0x58>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004bd6:	4805      	ldr	r0, [pc, #20]	; (8004bec <MX_USART2_UART_Init+0x58>)
 8004bd8:	f005 fd62 	bl	800a6a0 <HAL_UART_Init>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004be2:	f000 f895 	bl	8004d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004be6:	bf00      	nop
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000284 	.word	0x20000284
 8004bf0:	40004400 	.word	0x40004400

08004bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	; 0x28
 8004bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bfa:	f107 0314 	add.w	r3, r7, #20
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	605a      	str	r2, [r3, #4]
 8004c04:	609a      	str	r2, [r3, #8]
 8004c06:	60da      	str	r2, [r3, #12]
 8004c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c0a:	4b3d      	ldr	r3, [pc, #244]	; (8004d00 <MX_GPIO_Init+0x10c>)
 8004c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0e:	4a3c      	ldr	r2, [pc, #240]	; (8004d00 <MX_GPIO_Init+0x10c>)
 8004c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c16:	4b3a      	ldr	r3, [pc, #232]	; (8004d00 <MX_GPIO_Init+0x10c>)
 8004c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c22:	4b37      	ldr	r3, [pc, #220]	; (8004d00 <MX_GPIO_Init+0x10c>)
 8004c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c26:	4a36      	ldr	r2, [pc, #216]	; (8004d00 <MX_GPIO_Init+0x10c>)
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c2e:	4b34      	ldr	r3, [pc, #208]	; (8004d00 <MX_GPIO_Init+0x10c>)
 8004c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c3a:	4b31      	ldr	r3, [pc, #196]	; (8004d00 <MX_GPIO_Init+0x10c>)
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3e:	4a30      	ldr	r2, [pc, #192]	; (8004d00 <MX_GPIO_Init+0x10c>)
 8004c40:	f043 0304 	orr.w	r3, r3, #4
 8004c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c46:	4b2e      	ldr	r3, [pc, #184]	; (8004d00 <MX_GPIO_Init+0x10c>)
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	60bb      	str	r3, [r7, #8]
 8004c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c52:	4b2b      	ldr	r3, [pc, #172]	; (8004d00 <MX_GPIO_Init+0x10c>)
 8004c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c56:	4a2a      	ldr	r2, [pc, #168]	; (8004d00 <MX_GPIO_Init+0x10c>)
 8004c58:	f043 0302 	orr.w	r3, r3, #2
 8004c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c5e:	4b28      	ldr	r3, [pc, #160]	; (8004d00 <MX_GPIO_Init+0x10c>)
 8004c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	607b      	str	r3, [r7, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RST_Pin|LED_Pin, GPIO_PIN_RESET);
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004c70:	4824      	ldr	r0, [pc, #144]	; (8004d04 <MX_GPIO_Init+0x110>)
 8004c72:	f001 fec3 	bl	80069fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8004c76:	2200      	movs	r2, #0
 8004c78:	2140      	movs	r1, #64	; 0x40
 8004c7a:	4823      	ldr	r0, [pc, #140]	; (8004d08 <MX_GPIO_Init+0x114>)
 8004c7c:	f001 febe 	bl	80069fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin LED_Pin */
  GPIO_InitStruct.Pin = RST_Pin|LED_Pin;
 8004c80:	f44f 7320 	mov.w	r3, #640	; 0x280
 8004c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c86:	2301      	movs	r3, #1
 8004c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c92:	f107 0314 	add.w	r3, r7, #20
 8004c96:	4619      	mov	r1, r3
 8004c98:	481a      	ldr	r0, [pc, #104]	; (8004d04 <MX_GPIO_Init+0x110>)
 8004c9a:	f001 fc21 	bl	80064e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO2_Pin DIO1_Pin DIO0_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|DIO1_Pin|DIO0_Pin;
 8004c9e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ca4:	4b19      	ldr	r3, [pc, #100]	; (8004d0c <MX_GPIO_Init+0x118>)
 8004ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cac:	f107 0314 	add.w	r3, r7, #20
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cb6:	f001 fc13 	bl	80064e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8004cba:	2340      	movs	r3, #64	; 0x40
 8004cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8004cca:	f107 0314 	add.w	r3, r7, #20
 8004cce:	4619      	mov	r1, r3
 8004cd0:	480d      	ldr	r0, [pc, #52]	; (8004d08 <MX_GPIO_Init+0x114>)
 8004cd2:	f001 fc05 	bl	80064e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2100      	movs	r1, #0
 8004cda:	2017      	movs	r0, #23
 8004cdc:	f001 fbb0 	bl	8006440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004ce0:	2017      	movs	r0, #23
 8004ce2:	f001 fbd9 	bl	8006498 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2100      	movs	r1, #0
 8004cea:	2028      	movs	r0, #40	; 0x28
 8004cec:	f001 fba8 	bl	8006440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004cf0:	2028      	movs	r0, #40	; 0x28
 8004cf2:	f001 fbd1 	bl	8006498 <HAL_NVIC_EnableIRQ>

}
 8004cf6:	bf00      	nop
 8004cf8:	3728      	adds	r7, #40	; 0x28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40021000 	.word	0x40021000
 8004d04:	48000800 	.word	0x48000800
 8004d08:	48000400 	.word	0x48000400
 8004d0c:	10110000 	.word	0x10110000

08004d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004d14:	bf00      	nop
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(char *file, uint32_t line)
{ 
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <os_init>:
static struct {
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
    memset(&OS, 0x00, sizeof(OS));
 8004d38:	2208      	movs	r2, #8
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	4805      	ldr	r0, [pc, #20]	; (8004d54 <os_init+0x20>)
 8004d3e:	f006 fcc2 	bl	800b6c6 <memset>
    hal_init();
 8004d42:	f7fc fb45 	bl	80013d0 <hal_init>
    radio_init();
 8004d46:	f000 fcb9 	bl	80056bc <radio_init>
    LMIC_init();
 8004d4a:	f7ff fbfb 	bl	8004544 <LMIC_init>
}
 8004d4e:	bf00      	nop
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000084 	.word	0x20000084

08004d58 <os_getTime>:

ostime_t os_getTime () {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
    return hal_ticks();
 8004d5c:	f7fc fa58 	bl	8001210 <hal_ticks>
 8004d60:	4603      	mov	r3, r0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8004d70:	e00d      	b.n	8004d8e <unlinkjob+0x28>
        if(*pnext == job) { // unlink
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d105      	bne.n	8004d88 <unlinkjob+0x22>
            *pnext = job->next;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	601a      	str	r2, [r3, #0]
            return 1;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e007      	b.n	8004d98 <unlinkjob+0x32>
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	607b      	str	r3, [r7, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1ed      	bne.n	8004d72 <unlinkjob+0xc>
        }
    }
    return 0;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <os_clearCallback>:

// clear scheduled job
void os_clearCallback (osjob_t* job) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
    hal_disableIRQs();
 8004dac:	f7fc fae4 	bl	8001378 <hal_disableIRQs>
    unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	4809      	ldr	r0, [pc, #36]	; (8004dd8 <os_clearCallback+0x34>)
 8004db4:	f7ff ffd7 	bl	8004d66 <unlinkjob>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d105      	bne.n	8004dca <os_clearCallback+0x26>
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	4806      	ldr	r0, [pc, #24]	; (8004ddc <os_clearCallback+0x38>)
 8004dc2:	f7ff ffd0 	bl	8004d66 <unlinkjob>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
    hal_enableIRQs();
 8004dca:	f7fc fae5 	bl	8001398 <hal_enableIRQs>
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000084 	.word	0x20000084
 8004ddc:	20000088 	.word	0x20000088

08004de0 <os_setCallback>:

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
    osjob_t** pnext;
    hal_disableIRQs();
 8004dea:	f7fc fac5 	bl	8001378 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	480d      	ldr	r0, [pc, #52]	; (8004e28 <os_setCallback+0x48>)
 8004df2:	f7ff ffb8 	bl	8004d66 <unlinkjob>
    // fill-in job
    job->func = cb;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
 8004e02:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <os_setCallback+0x48>)
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	e002      	b.n	8004e0e <os_setCallback+0x2e>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f8      	bne.n	8004e08 <os_setCallback+0x28>
    *pnext = job;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8004e1c:	f7fc fabc 	bl	8001398 <hal_enableIRQs>
}
 8004e20:	bf00      	nop
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	20000088 	.word	0x20000088

08004e2c <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
    osjob_t** pnext;
    hal_disableIRQs();
 8004e38:	f7fc fa9e 	bl	8001378 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
 8004e3c:	68f9      	ldr	r1, [r7, #12]
 8004e3e:	4815      	ldr	r0, [pc, #84]	; (8004e94 <os_setTimedCallback+0x68>)
 8004e40:	f7ff ff91 	bl	8004d66 <unlinkjob>
    // fill-in job
    job->deadline = time;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	605a      	str	r2, [r3, #4]
    job->func = cb;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8004e56:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <os_setTimedCallback+0x68>)
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	e00e      	b.n	8004e7a <os_setTimedCallback+0x4e>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	dd04      	ble.n	8004e74 <os_setTimedCallback+0x48>
            // enqueue before next element and stop
            job->next = *pnext;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	601a      	str	r2, [r3, #0]
            break;
 8004e72:	e006      	b.n	8004e82 <os_setTimedCallback+0x56>
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1ec      	bne.n	8004e5c <os_setTimedCallback+0x30>
        }
    }
    *pnext = job;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8004e88:	f7fc fa86 	bl	8001398 <hal_enableIRQs>
}
 8004e8c:	bf00      	nop
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	20000084 	.word	0x20000084

08004e98 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
    while(1) {
        osjob_t* j = NULL;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]
        hal_disableIRQs();
 8004ea2:	f7fc fa69 	bl	8001378 <hal_disableIRQs>
        // check for runnable jobs
        if(OS.runnablejobs) {
 8004ea6:	4b16      	ldr	r3, [pc, #88]	; (8004f00 <os_runloop+0x68>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <os_runloop+0x26>
            j = OS.runnablejobs;
 8004eae:	4b14      	ldr	r3, [pc, #80]	; (8004f00 <os_runloop+0x68>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	607b      	str	r3, [r7, #4]
            OS.runnablejobs = j->next;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a11      	ldr	r2, [pc, #68]	; (8004f00 <os_runloop+0x68>)
 8004eba:	6053      	str	r3, [r2, #4]
 8004ebc:	e016      	b.n	8004eec <os_runloop+0x54>
        } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 8004ebe:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <os_runloop+0x68>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d010      	beq.n	8004ee8 <os_runloop+0x50>
 8004ec6:	4b0e      	ldr	r3, [pc, #56]	; (8004f00 <os_runloop+0x68>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fc f9fb 	bl	80012c8 <hal_checkTimer>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <os_runloop+0x50>
            j = OS.scheduledjobs;
 8004ed8:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <os_runloop+0x68>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	607b      	str	r3, [r7, #4]
            OS.scheduledjobs = j->next;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a07      	ldr	r2, [pc, #28]	; (8004f00 <os_runloop+0x68>)
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	e001      	b.n	8004eec <os_runloop+0x54>
        } else { // nothing pending
            hal_sleep(); // wake by irq (timer already restarted)
 8004ee8:	f7fc fa6a 	bl	80013c0 <hal_sleep>
        }
        hal_enableIRQs();
 8004eec:	f7fc fa54 	bl	8001398 <hal_enableIRQs>
        if(j) { // run job callback
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0d3      	beq.n	8004e9e <os_runloop+0x6>
            j->func(j);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	4798      	blx	r3
    while(1) {
 8004efe:	e7ce      	b.n	8004e9e <os_runloop+0x6>
 8004f00:	20000084 	.word	0x20000084

08004f04 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif


static void writeReg (u1_t addr, u1_t data ) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	460a      	mov	r2, r1
 8004f0e:	71fb      	strb	r3, [r7, #7]
 8004f10:	4613      	mov	r3, r2
 8004f12:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8004f14:	2000      	movs	r0, #0
 8004f16:	f7fc f8ed 	bl	80010f4 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fc f94e 	bl	80011c4 <hal_spi>
    hal_spi(data);
 8004f28:	79bb      	ldrb	r3, [r7, #6]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fc f94a 	bl	80011c4 <hal_spi>
    hal_pin_nss(1);
 8004f30:	2001      	movs	r0, #1
 8004f32:	f7fc f8df 	bl	80010f4 <hal_pin_nss>
}
 8004f36:	bf00      	nop
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <readReg>:

static u1_t readReg (u1_t addr) {
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	4603      	mov	r3, r0
 8004f46:	71fb      	strb	r3, [r7, #7]
    hal_pin_nss(0);
 8004f48:	2000      	movs	r0, #0
 8004f4a:	f7fc f8d3 	bl	80010f4 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fc f934 	bl	80011c4 <hal_spi>
    u1_t val = hal_spi(0x00);
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	f7fc f931 	bl	80011c4 <hal_spi>
 8004f62:	4603      	mov	r3, r0
 8004f64:	73fb      	strb	r3, [r7, #15]
    hal_pin_nss(1);
 8004f66:	2001      	movs	r0, #1
 8004f68:	f7fc f8c4 	bl	80010f4 <hal_pin_nss>
    return val;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <writeBuf>:

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	6039      	str	r1, [r7, #0]
 8004f80:	71fb      	strb	r3, [r7, #7]
 8004f82:	4613      	mov	r3, r2
 8004f84:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8004f86:	2000      	movs	r0, #0
 8004f88:	f7fc f8b4 	bl	80010f4 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fc f915 	bl	80011c4 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	73fb      	strb	r3, [r7, #15]
 8004f9e:	e009      	b.n	8004fb4 <writeBuf+0x3e>
        hal_spi(buf[i]);
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fc f90b 	bl	80011c4 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
 8004fb4:	7bfa      	ldrb	r2, [r7, #15]
 8004fb6:	79bb      	ldrb	r3, [r7, #6]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d3f1      	bcc.n	8004fa0 <writeBuf+0x2a>
    }
    hal_pin_nss(1);
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	f7fc f899 	bl	80010f4 <hal_pin_nss>
}
 8004fc2:	bf00      	nop
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <readBuf>:

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8004fca:	b590      	push	{r4, r7, lr}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	6039      	str	r1, [r7, #0]
 8004fd4:	71fb      	strb	r3, [r7, #7]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8004fda:	2000      	movs	r0, #0
 8004fdc:	f7fc f88a 	bl	80010f4 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fc f8eb 	bl	80011c4 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 8004fee:	2300      	movs	r3, #0
 8004ff0:	73fb      	strb	r3, [r7, #15]
 8004ff2:	e00a      	b.n	800500a <readBuf+0x40>
        buf[i] = hal_spi(0x00);
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	18d4      	adds	r4, r2, r3
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	f7fc f8e2 	bl	80011c4 <hal_spi>
 8005000:	4603      	mov	r3, r0
 8005002:	7023      	strb	r3, [r4, #0]
    for (u1_t i=0; i<len; i++) {
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	3301      	adds	r3, #1
 8005008:	73fb      	strb	r3, [r7, #15]
 800500a:	7bfa      	ldrb	r2, [r7, #15]
 800500c:	79bb      	ldrb	r3, [r7, #6]
 800500e:	429a      	cmp	r2, r3
 8005010:	d3f0      	bcc.n	8004ff4 <readBuf+0x2a>
    }
    hal_pin_nss(1);
 8005012:	2001      	movs	r0, #1
 8005014:	f7fc f86e 	bl	80010f4 <hal_pin_nss>
}
 8005018:	bf00      	nop
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	bd90      	pop	{r4, r7, pc}

08005020 <opmode>:

static void opmode (u1_t mode) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	71fb      	strb	r3, [r7, #7]
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 800502a:	2001      	movs	r0, #1
 800502c:	f7ff ff87 	bl	8004f3e <readReg>
 8005030:	4603      	mov	r3, r0
 8005032:	b25b      	sxtb	r3, r3
 8005034:	f023 0307 	bic.w	r3, r3, #7
 8005038:	b25a      	sxtb	r2, r3
 800503a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503e:	4313      	orrs	r3, r2
 8005040:	b25b      	sxtb	r3, r3
 8005042:	b2db      	uxtb	r3, r3
 8005044:	4619      	mov	r1, r3
 8005046:	2001      	movs	r0, #1
 8005048:	f7ff ff5c 	bl	8004f04 <writeReg>
}
 800504c:	bf00      	nop
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <opmodeLora>:

static void opmodeLora() {
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
    u1_t u = OPMODE_LORA;
 800505a:	2380      	movs	r3, #128	; 0x80
 800505c:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	f043 0308 	orr.w	r3, r3, #8
 8005064:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	4619      	mov	r1, r3
 800506a:	2001      	movs	r0, #1
 800506c:	f7ff ff4a 	bl	8004f04 <writeReg>
}
 8005070:	bf00      	nop
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <opmodeFSK>:

static void opmodeFSK() {
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
    u1_t u = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	f043 0308 	orr.w	r3, r3, #8
 8005088:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	4619      	mov	r1, r3
 800508e:	2001      	movs	r0, #1
 8005090:	f7ff ff38 	bl	8004f04 <writeReg>
}
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
    sf_t sf = getSf(LMIC.rps);
 80050a2:	4b52      	ldr	r3, [pc, #328]	; (80051ec <configLoraModem+0x150>)
 80050a4:	89db      	ldrh	r3, [r3, #14]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fc f9af 	bl	800140a <getSf>
 80050ac:	4603      	mov	r3, r0
 80050ae:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 80050b0:	2300      	movs	r3, #0
 80050b2:	71fb      	strb	r3, [r7, #7]
 80050b4:	2300      	movs	r3, #0
 80050b6:	71bb      	strb	r3, [r7, #6]
 80050b8:	2300      	movs	r3, #0
 80050ba:	717b      	strb	r3, [r7, #5]

        switch (getBw(LMIC.rps)) {
 80050bc:	4b4b      	ldr	r3, [pc, #300]	; (80051ec <configLoraModem+0x150>)
 80050be:	89db      	ldrh	r3, [r3, #14]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fc f9b2 	bl	800142a <getBw>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d008      	beq.n	80050de <configLoraModem+0x42>
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d00b      	beq.n	80050e8 <configLoraModem+0x4c>
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10e      	bne.n	80050f2 <configLoraModem+0x56>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80050da:	71fb      	strb	r3, [r7, #7]
 80050dc:	e00b      	b.n	80050f6 <configLoraModem+0x5a>
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050e4:	71fb      	strb	r3, [r7, #7]
 80050e6:	e006      	b.n	80050f6 <configLoraModem+0x5a>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80050ee:	71fb      	strb	r3, [r7, #7]
 80050f0:	e001      	b.n	80050f6 <configLoraModem+0x5a>
        default:
            ASSERT(0);
 80050f2:	f7fc f983 	bl	80013fc <hal_failed>
        }
        switch( getCr(LMIC.rps) ) {
 80050f6:	4b3d      	ldr	r3, [pc, #244]	; (80051ec <configLoraModem+0x150>)
 80050f8:	89db      	ldrh	r3, [r3, #14]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fc f9a7 	bl	800144e <getCr>
 8005100:	4603      	mov	r3, r0
 8005102:	2b03      	cmp	r3, #3
 8005104:	d81e      	bhi.n	8005144 <configLoraModem+0xa8>
 8005106:	a201      	add	r2, pc, #4	; (adr r2, 800510c <configLoraModem+0x70>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	0800511d 	.word	0x0800511d
 8005110:	08005127 	.word	0x08005127
 8005114:	08005131 	.word	0x08005131
 8005118:	0800513b 	.word	0x0800513b
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	f043 0302 	orr.w	r3, r3, #2
 8005122:	71fb      	strb	r3, [r7, #7]
 8005124:	e010      	b.n	8005148 <configLoraModem+0xac>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
 8005126:	79fb      	ldrb	r3, [r7, #7]
 8005128:	f043 0304 	orr.w	r3, r3, #4
 800512c:	71fb      	strb	r3, [r7, #7]
 800512e:	e00b      	b.n	8005148 <configLoraModem+0xac>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
 8005130:	79fb      	ldrb	r3, [r7, #7]
 8005132:	f043 0306 	orr.w	r3, r3, #6
 8005136:	71fb      	strb	r3, [r7, #7]
 8005138:	e006      	b.n	8005148 <configLoraModem+0xac>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	f043 0308 	orr.w	r3, r3, #8
 8005140:	71fb      	strb	r3, [r7, #7]
 8005142:	e001      	b.n	8005148 <configLoraModem+0xac>
        default:
            ASSERT(0);
 8005144:	f7fc f95a 	bl	80013fc <hal_failed>
        }

        if (getIh(LMIC.rps)) {
 8005148:	4b28      	ldr	r3, [pc, #160]	; (80051ec <configLoraModem+0x150>)
 800514a:	89db      	ldrh	r3, [r3, #14]
 800514c:	4618      	mov	r0, r3
 800514e:	f7fc f9d0 	bl	80014f2 <getIh>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00e      	beq.n	8005176 <configLoraModem+0xda>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 8005158:	79fb      	ldrb	r3, [r7, #7]
 800515a:	f043 0301 	orr.w	r3, r3, #1
 800515e:	71fb      	strb	r3, [r7, #7]
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 8005160:	4b22      	ldr	r3, [pc, #136]	; (80051ec <configLoraModem+0x150>)
 8005162:	89db      	ldrh	r3, [r3, #14]
 8005164:	4618      	mov	r0, r3
 8005166:	f7fc f9c4 	bl	80014f2 <getIh>
 800516a:	4603      	mov	r3, r0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	4619      	mov	r1, r3
 8005170:	2022      	movs	r0, #34	; 0x22
 8005172:	f7ff fec7 	bl	8004f04 <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
 8005176:	79fb      	ldrb	r3, [r7, #7]
 8005178:	4619      	mov	r1, r3
 800517a:	201d      	movs	r0, #29
 800517c:	f7ff fec2 	bl	8004f04 <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
 8005180:	793b      	ldrb	r3, [r7, #4]
 8005182:	3b01      	subs	r3, #1
 8005184:	b2db      	uxtb	r3, r3
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	b2db      	uxtb	r3, r3
 800518a:	3370      	adds	r3, #112	; 0x70
 800518c:	71bb      	strb	r3, [r7, #6]
        if (getNocrc(LMIC.rps) == 0) {
 800518e:	4b17      	ldr	r3, [pc, #92]	; (80051ec <configLoraModem+0x150>)
 8005190:	89db      	ldrh	r3, [r3, #14]
 8005192:	4618      	mov	r0, r3
 8005194:	f7fc f986 	bl	80014a4 <getNocrc>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <configLoraModem+0x10a>
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 800519e:	79bb      	ldrb	r3, [r7, #6]
 80051a0:	f043 0304 	orr.w	r3, r3, #4
 80051a4:	71bb      	strb	r3, [r7, #6]
        }
        writeReg(LORARegModemConfig2, mc2);
 80051a6:	79bb      	ldrb	r3, [r7, #6]
 80051a8:	4619      	mov	r1, r3
 80051aa:	201e      	movs	r0, #30
 80051ac:	f7ff feaa 	bl	8004f04 <writeReg>
        
        mc3 = SX1276_MC3_AGCAUTO;
 80051b0:	2304      	movs	r3, #4
 80051b2:	717b      	strb	r3, [r7, #5]
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 80051b4:	793b      	ldrb	r3, [r7, #4]
 80051b6:	2b05      	cmp	r3, #5
 80051b8:	d002      	beq.n	80051c0 <configLoraModem+0x124>
 80051ba:	793b      	ldrb	r3, [r7, #4]
 80051bc:	2b06      	cmp	r3, #6
 80051be:	d10b      	bne.n	80051d8 <configLoraModem+0x13c>
 80051c0:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <configLoraModem+0x150>)
 80051c2:	89db      	ldrh	r3, [r3, #14]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fc f930 	bl	800142a <getBw>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d103      	bne.n	80051d8 <configLoraModem+0x13c>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 80051d0:	797b      	ldrb	r3, [r7, #5]
 80051d2:	f043 0308 	orr.w	r3, r3, #8
 80051d6:	717b      	strb	r3, [r7, #5]
        }
        writeReg(LORARegModemConfig3, mc3);
 80051d8:	797b      	ldrb	r3, [r7, #5]
 80051da:	4619      	mov	r1, r3
 80051dc:	2026      	movs	r0, #38	; 0x26
 80051de:	f7ff fe91 	bl	8004f04 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	20000304 	.word	0x20000304

080051f0 <configChannel>:

static void configChannel () {
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    u8_t frf = ((u8_t)LMIC.freq << 19) / 32000000;
 80051f6:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <configChannel+0x74>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f04f 0400 	mov.w	r4, #0
 80051fe:	0b59      	lsrs	r1, r3, #13
 8005200:	04d8      	lsls	r0, r3, #19
 8005202:	4a19      	ldr	r2, [pc, #100]	; (8005268 <configChannel+0x78>)
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	f7fb f82e 	bl	8000268 <__aeabi_uldivmod>
 800520c:	4603      	mov	r3, r0
 800520e:	460c      	mov	r4, r1
 8005210:	e9c7 3400 	strd	r3, r4, [r7]
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
 8005214:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	f04f 0400 	mov.w	r4, #0
 8005220:	0c0b      	lsrs	r3, r1, #16
 8005222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005226:	0c14      	lsrs	r4, r2, #16
 8005228:	b2db      	uxtb	r3, r3
 800522a:	4619      	mov	r1, r3
 800522c:	2006      	movs	r0, #6
 800522e:	f7ff fe69 	bl	8004f04 <writeReg>
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
 8005232:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005236:	f04f 0300 	mov.w	r3, #0
 800523a:	f04f 0400 	mov.w	r4, #0
 800523e:	0a0b      	lsrs	r3, r1, #8
 8005240:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005244:	0a14      	lsrs	r4, r2, #8
 8005246:	b2db      	uxtb	r3, r3
 8005248:	4619      	mov	r1, r3
 800524a:	2007      	movs	r0, #7
 800524c:	f7ff fe5a 	bl	8004f04 <writeReg>
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
 8005250:	783b      	ldrb	r3, [r7, #0]
 8005252:	4619      	mov	r1, r3
 8005254:	2008      	movs	r0, #8
 8005256:	f7ff fe55 	bl	8004f04 <writeReg>
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	bd90      	pop	{r4, r7, pc}
 8005262:	bf00      	nop
 8005264:	20000304 	.word	0x20000304
 8005268:	01e84800 	.word	0x01e84800

0800526c <configPower>:



static void configPower () {
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
 8005272:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <configPower+0x5c>)
 8005274:	7c9b      	ldrb	r3, [r3, #18]
 8005276:	71fb      	strb	r3, [r7, #7]
    if(pw >= 17) {
 8005278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800527c:	2b10      	cmp	r3, #16
 800527e:	dd02      	ble.n	8005286 <configPower+0x1a>
        pw = 15;
 8005280:	230f      	movs	r3, #15
 8005282:	71fb      	strb	r3, [r7, #7]
 8005284:	e005      	b.n	8005292 <configPower+0x26>
    } else if(pw < 2) {
 8005286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528a:	2b01      	cmp	r3, #1
 800528c:	dc01      	bgt.n	8005292 <configPower+0x26>
        pw = 2;
 800528e:	2302      	movs	r3, #2
 8005290:	71fb      	strb	r3, [r7, #7]
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (u1_t)(0x80|(pw&0xf)));
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	b25b      	sxtb	r3, r3
 800529a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800529e:	b25b      	sxtb	r3, r3
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	4619      	mov	r1, r3
 80052a4:	2009      	movs	r0, #9
 80052a6:	f7ff fe2d 	bl	8004f04 <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
 80052aa:	205a      	movs	r0, #90	; 0x5a
 80052ac:	f7ff fe47 	bl	8004f3e <readReg>
 80052b0:	4603      	mov	r3, r0
 80052b2:	f043 0304 	orr.w	r3, r3, #4
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	4619      	mov	r1, r3
 80052ba:	205a      	movs	r0, #90	; 0x5a
 80052bc:	f7ff fe22 	bl	8004f04 <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 80052c0:	bf00      	nop
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000304 	.word	0x20000304

080052cc <txfsk>:

static void txfsk () {
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 80052d0:	2110      	movs	r1, #16
 80052d2:	2001      	movs	r0, #1
 80052d4:	f7ff fe16 	bl	8004f04 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
 80052d8:	2001      	movs	r0, #1
 80052da:	f7ff fe30 	bl	8004f3e <readReg>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b10      	cmp	r3, #16
 80052e2:	d001      	beq.n	80052e8 <txfsk+0x1c>
 80052e4:	f7fc f88a 	bl	80013fc <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 80052e8:	2001      	movs	r0, #1
 80052ea:	f7ff fe99 	bl	8005020 <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 80052ee:	2102      	movs	r1, #2
 80052f0:	2002      	movs	r0, #2
 80052f2:	f7ff fe07 	bl	8004f04 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 80052f6:	2180      	movs	r1, #128	; 0x80
 80052f8:	2003      	movs	r0, #3
 80052fa:	f7ff fe03 	bl	8004f04 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 80052fe:	2101      	movs	r1, #1
 8005300:	2004      	movs	r0, #4
 8005302:	f7ff fdff 	bl	8004f04 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8005306:	2199      	movs	r1, #153	; 0x99
 8005308:	2005      	movs	r0, #5
 800530a:	f7ff fdfb 	bl	8004f04 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
 800530e:	2100      	movs	r1, #0
 8005310:	2025      	movs	r0, #37	; 0x25
 8005312:	f7ff fdf7 	bl	8004f04 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
 8005316:	2105      	movs	r1, #5
 8005318:	2026      	movs	r0, #38	; 0x26
 800531a:	f7ff fdf3 	bl	8004f04 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
 800531e:	2112      	movs	r1, #18
 8005320:	2027      	movs	r0, #39	; 0x27
 8005322:	f7ff fdef 	bl	8004f04 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
 8005326:	21d0      	movs	r1, #208	; 0xd0
 8005328:	2030      	movs	r0, #48	; 0x30
 800532a:	f7ff fdeb 	bl	8004f04 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
 800532e:	2140      	movs	r1, #64	; 0x40
 8005330:	2031      	movs	r0, #49	; 0x31
 8005332:	f7ff fde7 	bl	8004f04 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
 8005336:	21c1      	movs	r1, #193	; 0xc1
 8005338:	2028      	movs	r0, #40	; 0x28
 800533a:	f7ff fde3 	bl	8004f04 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 800533e:	2194      	movs	r1, #148	; 0x94
 8005340:	2029      	movs	r0, #41	; 0x29
 8005342:	f7ff fddf 	bl	8004f04 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005346:	21c1      	movs	r1, #193	; 0xc1
 8005348:	202a      	movs	r0, #42	; 0x2a
 800534a:	f7ff fddb 	bl	8004f04 <writeReg>
    // configure frequency
    configChannel();
 800534e:	f7ff ff4f 	bl	80051f0 <configChannel>
    // configure output power
    configPower();
 8005352:	f7ff ff8b 	bl	800526c <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
 8005356:	2134      	movs	r1, #52	; 0x34
 8005358:	2040      	movs	r0, #64	; 0x40
 800535a:	f7ff fdd3 	bl	8004f04 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <txfsk+0xd4>)
 8005360:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005364:	3301      	adds	r3, #1
 8005366:	b2db      	uxtb	r3, r3
 8005368:	4619      	mov	r1, r3
 800536a:	2032      	movs	r0, #50	; 0x32
 800536c:	f7ff fdca 	bl	8004f04 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <txfsk+0xd4>)
 8005372:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005376:	4619      	mov	r1, r3
 8005378:	2000      	movs	r0, #0
 800537a:	f7ff fdc3 	bl	8004f04 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 800537e:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <txfsk+0xd4>)
 8005380:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005384:	461a      	mov	r2, r3
 8005386:	4907      	ldr	r1, [pc, #28]	; (80053a4 <txfsk+0xd8>)
 8005388:	2000      	movs	r0, #0
 800538a:	f7ff fdf4 	bl	8004f76 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 800538e:	2001      	movs	r0, #1
 8005390:	f7fb fea5 	bl	80010de <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8005394:	2003      	movs	r0, #3
 8005396:	f7ff fe43 	bl	8005020 <opmode>
}
 800539a:	bf00      	nop
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000304 	.word	0x20000304
 80053a4:	2000044c 	.word	0x2000044c

080053a8 <txlora>:

static void txlora () {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
 80053ac:	f7ff fe52 	bl	8005054 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 80053b0:	2001      	movs	r0, #1
 80053b2:	f7ff fdc4 	bl	8004f3e <readReg>
 80053b6:	4603      	mov	r3, r0
 80053b8:	b25b      	sxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	db01      	blt.n	80053c2 <txlora+0x1a>
 80053be:	f7fc f81d 	bl	80013fc <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 80053c2:	2001      	movs	r0, #1
 80053c4:	f7ff fe2c 	bl	8005020 <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
 80053c8:	f7ff fe68 	bl	800509c <configLoraModem>
    // configure frequency
    configChannel();
 80053cc:	f7ff ff10 	bl	80051f0 <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 80053d0:	200a      	movs	r0, #10
 80053d2:	f7ff fdb4 	bl	8004f3e <readReg>
 80053d6:	4603      	mov	r3, r0
 80053d8:	b25b      	sxtb	r3, r3
 80053da:	f023 030f 	bic.w	r3, r3, #15
 80053de:	b25b      	sxtb	r3, r3
 80053e0:	f043 0308 	orr.w	r3, r3, #8
 80053e4:	b25b      	sxtb	r3, r3
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	4619      	mov	r1, r3
 80053ea:	200a      	movs	r0, #10
 80053ec:	f7ff fd8a 	bl	8004f04 <writeReg>
    configPower();
 80053f0:	f7ff ff3c 	bl	800526c <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 80053f4:	2134      	movs	r1, #52	; 0x34
 80053f6:	2039      	movs	r0, #57	; 0x39
 80053f8:	f7ff fd84 	bl	8004f04 <writeReg>
    
    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 80053fc:	21f0      	movs	r1, #240	; 0xf0
 80053fe:	2040      	movs	r0, #64	; 0x40
 8005400:	f7ff fd80 	bl	8004f04 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005404:	21ff      	movs	r1, #255	; 0xff
 8005406:	2012      	movs	r0, #18
 8005408:	f7ff fd7c 	bl	8004f04 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 800540c:	21f7      	movs	r1, #247	; 0xf7
 800540e:	2011      	movs	r0, #17
 8005410:	f7ff fd78 	bl	8004f04 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(LORARegFifoTxBaseAddr, 0x00);
 8005414:	2100      	movs	r1, #0
 8005416:	200e      	movs	r0, #14
 8005418:	f7ff fd74 	bl	8004f04 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
 800541c:	2100      	movs	r1, #0
 800541e:	200d      	movs	r0, #13
 8005420:	f7ff fd70 	bl	8004f04 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <txlora+0xac>)
 8005426:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 800542a:	4619      	mov	r1, r3
 800542c:	2022      	movs	r0, #34	; 0x22
 800542e:	f7ff fd69 	bl	8004f04 <writeReg>
       
    // download buffer to the radio FIFO
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005432:	4b08      	ldr	r3, [pc, #32]	; (8005454 <txlora+0xac>)
 8005434:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005438:	461a      	mov	r2, r3
 800543a:	4907      	ldr	r1, [pc, #28]	; (8005458 <txlora+0xb0>)
 800543c:	2000      	movs	r0, #0
 800543e:	f7ff fd9a 	bl	8004f76 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8005442:	2001      	movs	r0, #1
 8005444:	f7fb fe4b 	bl	80010de <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8005448:	2003      	movs	r0, #3
 800544a:	f7ff fde9 	bl	8005020 <opmode>
}
 800544e:	bf00      	nop
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000304 	.word	0x20000304
 8005458:	2000044c 	.word	0x2000044c

0800545c <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8005460:	2001      	movs	r0, #1
 8005462:	f7ff fd6c 	bl	8004f3e <readReg>
 8005466:	4603      	mov	r3, r0
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <starttx+0x18>
 8005470:	f7fb ffc4 	bl	80013fc <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8005474:	4b07      	ldr	r3, [pc, #28]	; (8005494 <starttx+0x38>)
 8005476:	89db      	ldrh	r3, [r3, #14]
 8005478:	4618      	mov	r0, r3
 800547a:	f7fb ffc6 	bl	800140a <getSf>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d102      	bne.n	800548a <starttx+0x2e>
        txfsk();
 8005484:	f7ff ff22 	bl	80052cc <txfsk>
    } else { // LoRa modem
        txlora();
    }
    // the radio will go back to STANDBY mode as soon as the TX is finished
    // the corresponding IRQ will inform us about completion.
}
 8005488:	e001      	b.n	800548e <starttx+0x32>
        txlora();
 800548a:	f7ff ff8d 	bl	80053a8 <txlora>
}
 800548e:	bf00      	nop
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20000304 	.word	0x20000304

08005498 <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	71fb      	strb	r3, [r7, #7]
    // select LoRa modem (from sleep mode)
    opmodeLora();
 80054a2:	f7ff fdd7 	bl	8005054 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 80054a6:	2001      	movs	r0, #1
 80054a8:	f7ff fd49 	bl	8004f3e <readReg>
 80054ac:	4603      	mov	r3, r0
 80054ae:	b25b      	sxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	db01      	blt.n	80054b8 <rxlora+0x20>
 80054b4:	f7fb ffa2 	bl	80013fc <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 80054b8:	2001      	movs	r0, #1
 80054ba:	f7ff fdb1 	bl	8005020 <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 80054be:	79fb      	ldrb	r3, [r7, #7]
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d108      	bne.n	80054d6 <rxlora+0x3e>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 80054c4:	210a      	movs	r1, #10
 80054c6:	201d      	movs	r0, #29
 80054c8:	f7ff fd1c 	bl	8004f04 <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 80054cc:	2170      	movs	r1, #112	; 0x70
 80054ce:	201e      	movs	r0, #30
 80054d0:	f7ff fd18 	bl	8004f04 <writeReg>
 80054d4:	e003      	b.n	80054de <rxlora+0x46>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
 80054d6:	f7ff fde1 	bl	800509c <configLoraModem>
        // configure frequency
        configChannel();
 80054da:	f7ff fe89 	bl	80051f0 <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN); 
 80054de:	2121      	movs	r1, #33	; 0x21
 80054e0:	200c      	movs	r0, #12
 80054e2:	f7ff fd0f 	bl	8004f04 <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
 80054e6:	2140      	movs	r1, #64	; 0x40
 80054e8:	2023      	movs	r0, #35	; 0x23
 80054ea:	f7ff fd0b 	bl	8004f04 <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
 80054ee:	4b26      	ldr	r3, [pc, #152]	; (8005588 <rxlora+0xf0>)
 80054f0:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00b      	beq.n	8005510 <rxlora+0x78>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
 80054f8:	2033      	movs	r0, #51	; 0x33
 80054fa:	f7ff fd20 	bl	8004f3e <readReg>
 80054fe:	4603      	mov	r3, r0
 8005500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005504:	b2db      	uxtb	r3, r3
 8005506:	4619      	mov	r1, r3
 8005508:	2033      	movs	r0, #51	; 0x33
 800550a:	f7ff fcfb 	bl	8004f04 <writeReg>
 800550e:	e00a      	b.n	8005526 <rxlora+0x8e>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
 8005510:	2033      	movs	r0, #51	; 0x33
 8005512:	f7ff fd14 	bl	8004f3e <readReg>
 8005516:	4603      	mov	r3, r0
 8005518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800551c:	b2db      	uxtb	r3, r3
 800551e:	4619      	mov	r1, r3
 8005520:	2033      	movs	r0, #51	; 0x33
 8005522:	f7ff fcef 	bl	8004f04 <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 8005526:	4b18      	ldr	r3, [pc, #96]	; (8005588 <rxlora+0xf0>)
 8005528:	7c1b      	ldrb	r3, [r3, #16]
 800552a:	4619      	mov	r1, r3
 800552c:	201f      	movs	r0, #31
 800552e:	f7ff fce9 	bl	8004f04 <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005532:	2134      	movs	r1, #52	; 0x34
 8005534:	2039      	movs	r0, #57	; 0x39
 8005536:	f7ff fce5 	bl	8004f04 <writeReg>
    
    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
 800553a:	21c0      	movs	r1, #192	; 0xc0
 800553c:	2040      	movs	r0, #64	; 0x40
 800553e:	f7ff fce1 	bl	8004f04 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005542:	21ff      	movs	r1, #255	; 0xff
 8005544:	2012      	movs	r0, #18
 8005546:	f7ff fcdd 	bl	8004f04 <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	4a0f      	ldr	r2, [pc, #60]	; (800558c <rxlora+0xf4>)
 800554e:	5cd3      	ldrb	r3, [r2, r3]
 8005550:	43db      	mvns	r3, r3
 8005552:	b2db      	uxtb	r3, r3
 8005554:	4619      	mov	r1, r3
 8005556:	2011      	movs	r0, #17
 8005558:	f7ff fcd4 	bl	8004f04 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 800555c:	2000      	movs	r0, #0
 800555e:	f7fb fdbe 	bl	80010de <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d108      	bne.n	800557a <rxlora+0xe2>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8005568:	4b07      	ldr	r3, [pc, #28]	; (8005588 <rxlora+0xf0>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4618      	mov	r0, r3
 800556e:	f7fb fe9c 	bl	80012aa <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
 8005572:	2006      	movs	r0, #6
 8005574:	f7ff fd54 	bl	8005020 <opmode>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    }
}
 8005578:	e002      	b.n	8005580 <rxlora+0xe8>
        opmode(OPMODE_RX); 
 800557a:	2005      	movs	r0, #5
 800557c:	f7ff fd50 	bl	8005020 <opmode>
}
 8005580:	bf00      	nop
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20000304 	.word	0x20000304
 800558c:	0800cd40 	.word	0x0800cd40

08005590 <rxfsk>:

static void rxfsk (u1_t rxmode) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	4603      	mov	r3, r0
 8005598:	71fb      	strb	r3, [r7, #7]
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <rxfsk+0x14>
 80055a0:	f7fb ff2c 	bl	80013fc <hal_failed>
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
 80055a4:	f7ff fd68 	bl	8005078 <opmodeFSK>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 80055a8:	2001      	movs	r0, #1
 80055aa:	f7ff fcc8 	bl	8004f3e <readReg>
 80055ae:	4603      	mov	r3, r0
 80055b0:	b25b      	sxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	da01      	bge.n	80055ba <rxfsk+0x2a>
 80055b6:	f7fb ff21 	bl	80013fc <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 80055ba:	2001      	movs	r0, #1
 80055bc:	f7ff fd30 	bl	8005020 <opmode>
    // configure frequency
    configChannel();
 80055c0:	f7ff fe16 	bl	80051f0 <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
 80055c4:	2121      	movs	r1, #33	; 0x21
 80055c6:	200c      	movs	r0, #12
 80055c8:	f7ff fc9c 	bl	8004f04 <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 80055cc:	211e      	movs	r1, #30
 80055ce:	200d      	movs	r0, #13
 80055d0:	f7ff fc98 	bl	8004f04 <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 80055d4:	210b      	movs	r1, #11
 80055d6:	2012      	movs	r0, #18
 80055d8:	f7ff fc94 	bl	8004f04 <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 80055dc:	2112      	movs	r1, #18
 80055de:	2013      	movs	r0, #19
 80055e0:	f7ff fc90 	bl	8004f04 <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 80055e4:	21aa      	movs	r1, #170	; 0xaa
 80055e6:	201f      	movs	r0, #31
 80055e8:	f7ff fc8c 	bl	8004f04 <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 80055ec:	2112      	movs	r1, #18
 80055ee:	2027      	movs	r0, #39	; 0x27
 80055f0:	f7ff fc88 	bl	8004f04 <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 80055f4:	21d8      	movs	r1, #216	; 0xd8
 80055f6:	2030      	movs	r0, #48	; 0x30
 80055f8:	f7ff fc84 	bl	8004f04 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 80055fc:	2140      	movs	r1, #64	; 0x40
 80055fe:	2031      	movs	r0, #49	; 0x31
 8005600:	f7ff fc80 	bl	8004f04 <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
 8005604:	21c1      	movs	r1, #193	; 0xc1
 8005606:	2028      	movs	r0, #40	; 0x28
 8005608:	f7ff fc7c 	bl	8004f04 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 800560c:	2194      	movs	r1, #148	; 0x94
 800560e:	2029      	movs	r0, #41	; 0x29
 8005610:	f7ff fc78 	bl	8004f04 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005614:	21c1      	movs	r1, #193	; 0xc1
 8005616:	202a      	movs	r0, #42	; 0x2a
 8005618:	f7ff fc74 	bl	8004f04 <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
 800561c:	21ff      	movs	r1, #255	; 0xff
 800561e:	2021      	movs	r0, #33	; 0x21
 8005620:	f7ff fc70 	bl	8004f04 <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8005624:	2102      	movs	r1, #2
 8005626:	2002      	movs	r0, #2
 8005628:	f7ff fc6c 	bl	8004f04 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 800562c:	2180      	movs	r1, #128	; 0x80
 800562e:	2003      	movs	r0, #3
 8005630:	f7ff fc68 	bl	8004f04 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8005634:	2101      	movs	r1, #1
 8005636:	2004      	movs	r0, #4
 8005638:	f7ff fc64 	bl	8004f04 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 800563c:	2199      	movs	r1, #153	; 0x99
 800563e:	2005      	movs	r0, #5
 8005640:	f7ff fc60 	bl	8004f04 <writeReg>
    
    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
 8005644:	2138      	movs	r1, #56	; 0x38
 8005646:	2040      	movs	r0, #64	; 0x40
 8005648:	f7ff fc5c 	bl	8004f04 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 800564c:	2000      	movs	r0, #0
 800564e:	f7fb fd46 	bl	80010de <hal_pin_rxtx>
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8005652:	4b06      	ldr	r3, [pc, #24]	; (800566c <rxfsk+0xdc>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	4618      	mov	r0, r3
 8005658:	f7fb fe27 	bl	80012aa <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
 800565c:	2005      	movs	r0, #5
 800565e:	f7ff fcdf 	bl	8005020 <opmode>
}
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	20000304 	.word	0x20000304

08005670 <startrx>:

static void startrx (u1_t rxmode) {
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 800567a:	2001      	movs	r0, #1
 800567c:	f7ff fc5f 	bl	8004f3e <readReg>
 8005680:	4603      	mov	r3, r0
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <startrx+0x1e>
 800568a:	f7fb feb7 	bl	80013fc <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 800568e:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <startrx+0x48>)
 8005690:	89db      	ldrh	r3, [r3, #14]
 8005692:	4618      	mov	r0, r3
 8005694:	f7fb feb9 	bl	800140a <getSf>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d104      	bne.n	80056a8 <startrx+0x38>
        rxfsk(rxmode);
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff ff75 	bl	8005590 <rxfsk>
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
 80056a6:	e003      	b.n	80056b0 <startrx+0x40>
        rxlora(rxmode);
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fef4 	bl	8005498 <rxlora>
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	20000304 	.word	0x20000304

080056bc <radio_init>:

// get random seed from wideband noise rssi
void radio_init () {
 80056bc:	b590      	push	{r4, r7, lr}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 80056c2:	f7fb fe59 	bl	8001378 <hal_disableIRQs>

    // manually reset radio
#ifdef CFG_sx1276_radio
    hal_pin_rst(0); // drive RST pin low
 80056c6:	2000      	movs	r0, #0
 80056c8:	f7fb fd26 	bl	8001118 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
 80056cc:	f7ff fb44 	bl	8004d58 <os_getTime>
 80056d0:	4603      	mov	r3, r0
 80056d2:	3320      	adds	r3, #32
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fb fde8 	bl	80012aa <hal_waitUntil>
    hal_pin_rst(2); // configure RST pin floating!
 80056da:	2002      	movs	r0, #2
 80056dc:	f7fb fd1c 	bl	8001118 <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
 80056e0:	f7ff fb3a 	bl	8004d58 <os_getTime>
 80056e4:	4603      	mov	r3, r0
 80056e6:	33a0      	adds	r3, #160	; 0xa0
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fb fdde 	bl	80012aa <hal_waitUntil>

    opmode(OPMODE_SLEEP);
 80056ee:	2000      	movs	r0, #0
 80056f0:	f7ff fc96 	bl	8005020 <opmode>

    // some sanity checks, e.g., read version number
    u1_t v = readReg(RegVersion);
 80056f4:	2042      	movs	r0, #66	; 0x42
 80056f6:	f7ff fc22 	bl	8004f3e <readReg>
 80056fa:	4603      	mov	r3, r0
 80056fc:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    ASSERT(v == 0x12 ); 
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	2b12      	cmp	r3, #18
 8005702:	d001      	beq.n	8005708 <radio_init+0x4c>
 8005704:	f7fb fe7a 	bl	80013fc <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
 8005708:	2002      	movs	r0, #2
 800570a:	f7ff fec5 	bl	8005498 <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
 800570e:	bf00      	nop
 8005710:	2001      	movs	r0, #1
 8005712:	f7ff fc14 	bl	8004f3e <readReg>
 8005716:	4603      	mov	r3, r0
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	2b05      	cmp	r3, #5
 800571e:	d1f7      	bne.n	8005710 <radio_init+0x54>
    for(int i=1; i<16; i++) {
 8005720:	2301      	movs	r3, #1
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e02c      	b.n	8005780 <radio_init+0xc4>
        for(int j=0; j<8; j++) {
 8005726:	2300      	movs	r3, #0
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	e023      	b.n	8005774 <radio_init+0xb8>
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
 800572c:	bf00      	nop
 800572e:	202c      	movs	r0, #44	; 0x2c
 8005730:	f7ff fc05 	bl	8004f3e <readReg>
 8005734:	4603      	mov	r3, r0
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	71bb      	strb	r3, [r7, #6]
 800573c:	79bc      	ldrb	r4, [r7, #6]
 800573e:	202c      	movs	r0, #44	; 0x2c
 8005740:	f7ff fbfd 	bl	8004f3e <readReg>
 8005744:	4603      	mov	r3, r0
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	429c      	cmp	r4, r3
 800574c:	d0ef      	beq.n	800572e <radio_init+0x72>
            randbuf[i] = (randbuf[i] << 1) | b;
 800574e:	4a14      	ldr	r2, [pc, #80]	; (80057a0 <radio_init+0xe4>)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4413      	add	r3, r2
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	b25a      	sxtb	r2, r3
 800575a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800575e:	4313      	orrs	r3, r2
 8005760:	b25b      	sxtb	r3, r3
 8005762:	b2d9      	uxtb	r1, r3
 8005764:	4a0e      	ldr	r2, [pc, #56]	; (80057a0 <radio_init+0xe4>)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4413      	add	r3, r2
 800576a:	460a      	mov	r2, r1
 800576c:	701a      	strb	r2, [r3, #0]
        for(int j=0; j<8; j++) {
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	3301      	adds	r3, #1
 8005772:	60bb      	str	r3, [r7, #8]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2b07      	cmp	r3, #7
 8005778:	ddd8      	ble.n	800572c <radio_init+0x70>
    for(int i=1; i<16; i++) {
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3301      	adds	r3, #1
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b0f      	cmp	r3, #15
 8005784:	ddcf      	ble.n	8005726 <radio_init+0x6a>
        }
    }
    randbuf[0] = 16; // set initial index
 8005786:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <radio_init+0xe4>)
 8005788:	2210      	movs	r2, #16
 800578a:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
 800578c:	2000      	movs	r0, #0
 800578e:	f7ff fc47 	bl	8005020 <opmode>

    hal_enableIRQs();
 8005792:	f7fb fe01 	bl	8001398 <hal_enableIRQs>
}
 8005796:	bf00      	nop
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	bd90      	pop	{r4, r7, pc}
 800579e:	bf00      	nop
 80057a0:	2000008c 	.word	0x2000008c

080057a4 <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1 () {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
    u1_t i = randbuf[0];
 80057aa:	4b10      	ldr	r3, [pc, #64]	; (80057ec <radio_rand1+0x48>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	71fb      	strb	r3, [r7, #7]
    ASSERT( i != 0 );
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <radio_rand1+0x16>
 80057b6:	f7fb fe21 	bl	80013fc <hal_failed>
    if( i==16 ) {
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	2b10      	cmp	r3, #16
 80057be:	d106      	bne.n	80057ce <radio_rand1+0x2a>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 80057c0:	2210      	movs	r2, #16
 80057c2:	490a      	ldr	r1, [pc, #40]	; (80057ec <radio_rand1+0x48>)
 80057c4:	2000      	movs	r0, #0
 80057c6:	f7fa ff4b 	bl	8000660 <os_aes>
        i = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	71fb      	strb	r3, [r7, #7]
    }
    u1_t v = randbuf[i++];
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	71fa      	strb	r2, [r7, #7]
 80057d4:	461a      	mov	r2, r3
 80057d6:	4b05      	ldr	r3, [pc, #20]	; (80057ec <radio_rand1+0x48>)
 80057d8:	5c9b      	ldrb	r3, [r3, r2]
 80057da:	71bb      	strb	r3, [r7, #6]
    randbuf[0] = i;
 80057dc:	4a03      	ldr	r2, [pc, #12]	; (80057ec <radio_rand1+0x48>)
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	7013      	strb	r3, [r2, #0]
    return v;
 80057e2:	79bb      	ldrb	r3, [r7, #6]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	2000008c 	.word	0x2000008c

080057f0 <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
    ostime_t now = os_getTime();
 80057fa:	f7ff faad 	bl	8004d58 <os_getTime>
 80057fe:	60f8      	str	r0, [r7, #12]
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 8005800:	2001      	movs	r0, #1
 8005802:	f7ff fb9c 	bl	8004f3e <readReg>
 8005806:	4603      	mov	r3, r0
 8005808:	b25b      	sxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	da74      	bge.n	80058f8 <radio_irq_handler+0x108>
        u1_t flags = readReg(LORARegIrqFlags);
 800580e:	2012      	movs	r0, #18
 8005810:	f7ff fb95 	bl	8004f3e <readReg>
 8005814:	4603      	mov	r3, r0
 8005816:	727b      	strb	r3, [r7, #9]
        if( flags & IRQ_LORA_TXDONE_MASK ) {
 8005818:	7a7b      	ldrb	r3, [r7, #9]
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d004      	beq.n	800582c <radio_irq_handler+0x3c>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	3b01      	subs	r3, #1
 8005826:	4a59      	ldr	r2, [pc, #356]	; (800598c <radio_irq_handler+0x19c>)
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	e05c      	b.n	80058e6 <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
 800582c:	7a7b      	ldrb	r3, [r7, #9]
 800582e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005832:	2b00      	cmp	r3, #0
 8005834:	d04f      	beq.n	80058d6 <radio_irq_handler+0xe6>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
 8005836:	4b55      	ldr	r3, [pc, #340]	; (800598c <radio_irq_handler+0x19c>)
 8005838:	89db      	ldrh	r3, [r3, #14]
 800583a:	4618      	mov	r0, r3
 800583c:	f7fb fdf5 	bl	800142a <getBw>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10d      	bne.n	8005862 <radio_irq_handler+0x72>
                now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 8005846:	4b51      	ldr	r3, [pc, #324]	; (800598c <radio_irq_handler+0x19c>)
 8005848:	89db      	ldrh	r3, [r3, #14]
 800584a:	4618      	mov	r0, r3
 800584c:	f7fb fddd 	bl	800140a <getSf>
 8005850:	4603      	mov	r3, r0
 8005852:	461a      	mov	r2, r3
 8005854:	4b4e      	ldr	r3, [pc, #312]	; (8005990 <radio_irq_handler+0x1a0>)
 8005856:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800585a:	461a      	mov	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
            }
            LMIC.rxtime = now;
 8005862:	4a4a      	ldr	r2, [pc, #296]	; (800598c <radio_irq_handler+0x19c>)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8005868:	201d      	movs	r0, #29
 800586a:	f7ff fb68 	bl	8004f3e <readReg>
 800586e:	4603      	mov	r3, r0
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <radio_irq_handler+0x94>
 8005878:	2022      	movs	r0, #34	; 0x22
 800587a:	f7ff fb60 	bl	8004f3e <readReg>
 800587e:	4603      	mov	r3, r0
 8005880:	461a      	mov	r2, r3
 8005882:	e004      	b.n	800588e <radio_irq_handler+0x9e>
 8005884:	2013      	movs	r0, #19
 8005886:	f7ff fb5a 	bl	8004f3e <readReg>
 800588a:	4603      	mov	r3, r0
 800588c:	461a      	mov	r2, r3
 800588e:	4b3f      	ldr	r3, [pc, #252]	; (800598c <radio_irq_handler+0x19c>)
 8005890:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr)); 
 8005894:	2010      	movs	r0, #16
 8005896:	f7ff fb52 	bl	8004f3e <readReg>
 800589a:	4603      	mov	r3, r0
 800589c:	4619      	mov	r1, r3
 800589e:	200d      	movs	r0, #13
 80058a0:	f7ff fb30 	bl	8004f04 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80058a4:	4b39      	ldr	r3, [pc, #228]	; (800598c <radio_irq_handler+0x19c>)
 80058a6:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80058aa:	461a      	mov	r2, r3
 80058ac:	4939      	ldr	r1, [pc, #228]	; (8005994 <radio_irq_handler+0x1a4>)
 80058ae:	2000      	movs	r0, #0
 80058b0:	f7ff fb8b 	bl	8004fca <readBuf>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 80058b4:	2019      	movs	r0, #25
 80058b6:	f7ff fb42 	bl	8004f3e <readReg>
 80058ba:	4603      	mov	r3, r0
 80058bc:	b25a      	sxtb	r2, r3
 80058be:	4b33      	ldr	r3, [pc, #204]	; (800598c <radio_irq_handler+0x19c>)
 80058c0:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 80058c2:	201a      	movs	r0, #26
 80058c4:	f7ff fb3b 	bl	8004f3e <readReg>
 80058c8:	4603      	mov	r3, r0
 80058ca:	3b3d      	subs	r3, #61	; 0x3d
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	b25a      	sxtb	r2, r3
 80058d0:	4b2e      	ldr	r3, [pc, #184]	; (800598c <radio_irq_handler+0x19c>)
 80058d2:	731a      	strb	r2, [r3, #12]
 80058d4:	e007      	b.n	80058e6 <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
 80058d6:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	da03      	bge.n	80058e6 <radio_irq_handler+0xf6>
            // indicate timeout
            LMIC.dataLen = 0;
 80058de:	4b2b      	ldr	r3, [pc, #172]	; (800598c <radio_irq_handler+0x19c>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
 80058e6:	21ff      	movs	r1, #255	; 0xff
 80058e8:	2011      	movs	r0, #17
 80058ea:	f7ff fb0b 	bl	8004f04 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
 80058ee:	21ff      	movs	r1, #255	; 0xff
 80058f0:	2012      	movs	r0, #18
 80058f2:	f7ff fb07 	bl	8004f04 <writeReg>
 80058f6:	e03c      	b.n	8005972 <radio_irq_handler+0x182>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
 80058f8:	203e      	movs	r0, #62	; 0x3e
 80058fa:	f7ff fb20 	bl	8004f3e <readReg>
 80058fe:	4603      	mov	r3, r0
 8005900:	72fb      	strb	r3, [r7, #11]
        u1_t flags2 = readReg(FSKRegIrqFlags2);
 8005902:	203f      	movs	r0, #63	; 0x3f
 8005904:	f7ff fb1b 	bl	8004f3e <readReg>
 8005908:	4603      	mov	r3, r0
 800590a:	72bb      	strb	r3, [r7, #10]
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
 800590c:	7abb      	ldrb	r3, [r7, #10]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <radio_irq_handler+0x12e>
            // save exact tx time
            LMIC.txend = now;
 8005916:	4a1d      	ldr	r2, [pc, #116]	; (800598c <radio_irq_handler+0x19c>)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	e029      	b.n	8005972 <radio_irq_handler+0x182>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
 800591e:	7abb      	ldrb	r3, [r7, #10]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d019      	beq.n	800595c <radio_irq_handler+0x16c>
            // save exact rx time
            LMIC.rxtime = now;
 8005928:	4a18      	ldr	r2, [pc, #96]	; (800598c <radio_irq_handler+0x19c>)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
 800592e:	2032      	movs	r0, #50	; 0x32
 8005930:	f7ff fb05 	bl	8004f3e <readReg>
 8005934:	4603      	mov	r3, r0
 8005936:	461a      	mov	r2, r3
 8005938:	4b14      	ldr	r3, [pc, #80]	; (800598c <radio_irq_handler+0x19c>)
 800593a:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 800593e:	4b13      	ldr	r3, [pc, #76]	; (800598c <radio_irq_handler+0x19c>)
 8005940:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005944:	461a      	mov	r2, r3
 8005946:	4913      	ldr	r1, [pc, #76]	; (8005994 <radio_irq_handler+0x1a4>)
 8005948:	2000      	movs	r0, #0
 800594a:	f7ff fb3e 	bl	8004fca <readBuf>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
 800594e:	4b0f      	ldr	r3, [pc, #60]	; (800598c <radio_irq_handler+0x19c>)
 8005950:	2200      	movs	r2, #0
 8005952:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = 0; // determine rssi
 8005954:	4b0d      	ldr	r3, [pc, #52]	; (800598c <radio_irq_handler+0x19c>)
 8005956:	2200      	movs	r2, #0
 8005958:	731a      	strb	r2, [r3, #12]
 800595a:	e00a      	b.n	8005972 <radio_irq_handler+0x182>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
 800595c:	7afb      	ldrb	r3, [r7, #11]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b00      	cmp	r3, #0
 8005964:	d004      	beq.n	8005970 <radio_irq_handler+0x180>
            // indicate timeout
            LMIC.dataLen = 0;
 8005966:	4b09      	ldr	r3, [pc, #36]	; (800598c <radio_irq_handler+0x19c>)
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 800596e:	e000      	b.n	8005972 <radio_irq_handler+0x182>
        } else {
            while(1);
 8005970:	e7fe      	b.n	8005970 <radio_irq_handler+0x180>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
 8005972:	2000      	movs	r0, #0
 8005974:	f7ff fb54 	bl	8005020 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 8005978:	4b04      	ldr	r3, [pc, #16]	; (800598c <radio_irq_handler+0x19c>)
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	4619      	mov	r1, r3
 800597e:	4806      	ldr	r0, [pc, #24]	; (8005998 <radio_irq_handler+0x1a8>)
 8005980:	f7ff fa2e 	bl	8004de0 <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 8005984:	bf00      	nop
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	20000304 	.word	0x20000304
 8005990:	0800cd44 	.word	0x0800cd44
 8005994:	2000044c 	.word	0x2000044c
 8005998:	20000318 	.word	0x20000318

0800599c <os_radio>:

void os_radio (u1_t mode) {
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	4603      	mov	r3, r0
 80059a4:	71fb      	strb	r3, [r7, #7]
    hal_disableIRQs();
 80059a6:	f7fb fce7 	bl	8001378 <hal_disableIRQs>
    switch (mode) {
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d81a      	bhi.n	80059e6 <os_radio+0x4a>
 80059b0:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <os_radio+0x1c>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	080059c9 	.word	0x080059c9
 80059bc:	080059d1 	.word	0x080059d1
 80059c0:	080059d7 	.word	0x080059d7
 80059c4:	080059df 	.word	0x080059df
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
 80059c8:	2000      	movs	r0, #0
 80059ca:	f7ff fb29 	bl	8005020 <opmode>
        break;
 80059ce:	e00a      	b.n	80059e6 <os_radio+0x4a>

      case RADIO_TX:
        // transmit frame now
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 80059d0:	f7ff fd44 	bl	800545c <starttx>
        break;
 80059d4:	e007      	b.n	80059e6 <os_radio+0x4a>
      
      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 80059d6:	2000      	movs	r0, #0
 80059d8:	f7ff fe4a 	bl	8005670 <startrx>
        break;
 80059dc:	e003      	b.n	80059e6 <os_radio+0x4a>

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
 80059de:	2001      	movs	r0, #1
 80059e0:	f7ff fe46 	bl	8005670 <startrx>
        break;
 80059e4:	bf00      	nop
    }
    hal_enableIRQs();
 80059e6:	f7fb fcd7 	bl	8001398 <hal_enableIRQs>
}
 80059ea:	bf00      	nop
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop

080059f4 <hpmCalculateChecksum>:

static UART_HandleTypeDef *hpmHuart = 0;


static uint8_t hpmCalculateChecksum(uint8_t *buffer, int length)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint16_t sum = 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	81fb      	strh	r3, [r7, #14]
  int i;

  for (i = 0; i < length; i++)
 8005a02:	2300      	movs	r3, #0
 8005a04:	60bb      	str	r3, [r7, #8]
 8005a06:	e00a      	b.n	8005a1e <hpmCalculateChecksum+0x2a>
    sum += buffer[i];
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	89fb      	ldrh	r3, [r7, #14]
 8005a14:	4413      	add	r3, r2
 8005a16:	81fb      	strh	r3, [r7, #14]
  for (i = 0; i < length; i++)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	dbf0      	blt.n	8005a08 <hpmCalculateChecksum+0x14>

  return (65536U - sum) % 256;
 8005a26:	89fb      	ldrh	r3, [r7, #14]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	425b      	negs	r3, r3
 8005a2c:	b2db      	uxtb	r3, r3
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
	...

08005a3c <hpmUartTx>:


static unsigned int hpmUartTx(uint8_t *buffer, int length)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(hpmHuart, buffer, length, DEFAULT_TX_TIMEOUT_MS);
 8005a46:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <hpmUartTx+0x28>)
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	f004 fecc 	bl	800a7f0 <HAL_UART_Transmit>

  return length;
 8005a58:	683b      	ldr	r3, [r7, #0]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	2000009c 	.word	0x2000009c

08005a68 <hpmUartRx>:


static unsigned int hpmUartRx(uint8_t *buffer, int length)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  int errCode;

  errCode = HAL_UART_Receive(hpmHuart, buffer, length, DEFAULT_RX_TIMEOUT_MS);
 8005a72:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <hpmUartRx+0x34>)
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	f004 ff49 	bl	800a916 <HAL_UART_Receive>
 8005a84:	4603      	mov	r3, r0
 8005a86:	60fb      	str	r3, [r7, #12]

  return errCode == HAL_OK ? length : 0;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <hpmUartRx+0x2a>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	e000      	b.n	8005a94 <hpmUartRx+0x2c>
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	2000009c 	.word	0x2000009c

08005aa0 <hpmSendCommand>:


static int hpmSendCommand(uint8_t cmd, uint8_t *data, uint8_t dataLength)
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b0c5      	sub	sp, #276	; 0x114
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	6019      	str	r1, [r3, #0]
 8005aaa:	4611      	mov	r1, r2
 8005aac:	1dfb      	adds	r3, r7, #7
 8005aae:	4602      	mov	r2, r0
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	1dbb      	adds	r3, r7, #6
 8005ab4:	460a      	mov	r2, r1
 8005ab6:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[1+1+1+256+1];

  /* Check the data parameters */
  if (!data && dataLength > 0)
 8005ab8:	463b      	mov	r3, r7
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d106      	bne.n	8005ace <hpmSendCommand+0x2e>
 8005ac0:	1dbb      	adds	r3, r7, #6
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <hpmSendCommand+0x2e>
    return HPM_ERR_BAD_ARG;
 8005ac8:	f06f 0301 	mvn.w	r3, #1
 8005acc:	e038      	b.n	8005b40 <hpmSendCommand+0xa0>

  /* Header */
  buffer[0] = HPM_CMD_HEADER;
 8005ace:	f107 030c 	add.w	r3, r7, #12
 8005ad2:	2268      	movs	r2, #104	; 0x68
 8005ad4:	701a      	strb	r2, [r3, #0]

  /* Length */
  buffer[1] = 1 + dataLength;
 8005ad6:	1dbb      	adds	r3, r7, #6
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	3301      	adds	r3, #1
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	f107 030c 	add.w	r3, r7, #12
 8005ae2:	705a      	strb	r2, [r3, #1]

  /* Command */
  buffer[2] = cmd;
 8005ae4:	f107 030c 	add.w	r3, r7, #12
 8005ae8:	1dfa      	adds	r2, r7, #7
 8005aea:	7812      	ldrb	r2, [r2, #0]
 8005aec:	709a      	strb	r2, [r3, #2]

  /* Data */
  if (dataLength > 0)
 8005aee:	1dbb      	adds	r3, r7, #6
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d009      	beq.n	8005b0a <hpmSendCommand+0x6a>
    memcpy(&buffer[3], data, dataLength);
 8005af6:	1dbb      	adds	r3, r7, #6
 8005af8:	7819      	ldrb	r1, [r3, #0]
 8005afa:	463b      	mov	r3, r7
 8005afc:	f107 020c 	add.w	r2, r7, #12
 8005b00:	1cd0      	adds	r0, r2, #3
 8005b02:	460a      	mov	r2, r1
 8005b04:	6819      	ldr	r1, [r3, #0]
 8005b06:	f005 fdd3 	bl	800b6b0 <memcpy>

  /* Checksum */
  buffer[3 + dataLength] = hpmCalculateChecksum(buffer, 3 + dataLength);
 8005b0a:	1dbb      	adds	r3, r7, #6
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	1cda      	adds	r2, r3, #3
 8005b10:	1dbb      	adds	r3, r7, #6
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	1cdc      	adds	r4, r3, #3
 8005b16:	f107 030c 	add.w	r3, r7, #12
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff ff69 	bl	80059f4 <hpmCalculateChecksum>
 8005b22:	4603      	mov	r3, r0
 8005b24:	461a      	mov	r2, r3
 8005b26:	f107 030c 	add.w	r3, r7, #12
 8005b2a:	551a      	strb	r2, [r3, r4]

  /* Return the length of data transmitted */
  return hpmUartTx(buffer, 3 + dataLength + 1);
 8005b2c:	1dbb      	adds	r3, r7, #6
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	1d1a      	adds	r2, r3, #4
 8005b32:	f107 030c 	add.w	r3, r7, #12
 8005b36:	4611      	mov	r1, r2
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff ff7f 	bl	8005a3c <hpmUartTx>
 8005b3e:	4603      	mov	r3, r0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd90      	pop	{r4, r7, pc}

08005b4a <hpmGetSimpleAckResponse>:


static AckResponse hpmGetSimpleAckResponse()
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
  uint8_t ack[2];

  if (hpmUartRx(ack, 2) != 2)
 8005b50:	1d3b      	adds	r3, r7, #4
 8005b52:	2102      	movs	r1, #2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff ff87 	bl	8005a68 <hpmUartRx>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d001      	beq.n	8005b64 <hpmGetSimpleAckResponse+0x1a>
    return ACK_ERR;
 8005b60:	2302      	movs	r3, #2
 8005b62:	e010      	b.n	8005b86 <hpmGetSimpleAckResponse+0x3c>

  if (ack[0] == 0xa5 && ack[1] == 0xa5)
 8005b64:	793b      	ldrb	r3, [r7, #4]
 8005b66:	2ba5      	cmp	r3, #165	; 0xa5
 8005b68:	d104      	bne.n	8005b74 <hpmGetSimpleAckResponse+0x2a>
 8005b6a:	797b      	ldrb	r3, [r7, #5]
 8005b6c:	2ba5      	cmp	r3, #165	; 0xa5
 8005b6e:	d101      	bne.n	8005b74 <hpmGetSimpleAckResponse+0x2a>
    return ACK_POS;
 8005b70:	2300      	movs	r3, #0
 8005b72:	e008      	b.n	8005b86 <hpmGetSimpleAckResponse+0x3c>

  if (ack[0] == 0x96 && ack[1] == 0x96)
 8005b74:	793b      	ldrb	r3, [r7, #4]
 8005b76:	2b96      	cmp	r3, #150	; 0x96
 8005b78:	d104      	bne.n	8005b84 <hpmGetSimpleAckResponse+0x3a>
 8005b7a:	797b      	ldrb	r3, [r7, #5]
 8005b7c:	2b96      	cmp	r3, #150	; 0x96
 8005b7e:	d101      	bne.n	8005b84 <hpmGetSimpleAckResponse+0x3a>
    return ACK_NEG;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e000      	b.n	8005b86 <hpmGetSimpleAckResponse+0x3c>

  return ACK_ERR;
 8005b84:	2302      	movs	r3, #2
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <hpmGetComplexAckResponse>:


static AckResponse hpmGetComplexAckResponse(
    uint8_t *payloadBuffer, int maxPayloadLength,
    uint8_t *cmd, int *actualPayloadLength)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b090      	sub	sp, #64	; 0x40
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
 8005b9a:	603b      	str	r3, [r7, #0]
  uint8_t response[32];
  unsigned int respLength;
  int receivedChecksum, expectedChecksum;

  /* There should be at least 2 bytes in the response */
  if (hpmUartRx(response, 2) != 2)
 8005b9c:	f107 0314 	add.w	r3, r7, #20
 8005ba0:	2102      	movs	r1, #2
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff ff60 	bl	8005a68 <hpmUartRx>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d001      	beq.n	8005bb2 <hpmGetComplexAckResponse+0x24>
    return ACK_ERR;
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e055      	b.n	8005c5e <hpmGetComplexAckResponse+0xd0>

  /* Handle negative acknowledgement 0x9696 */
  if (response[0] == 0x96 && response[1] == 0x96)
 8005bb2:	7d3b      	ldrb	r3, [r7, #20]
 8005bb4:	2b96      	cmp	r3, #150	; 0x96
 8005bb6:	d104      	bne.n	8005bc2 <hpmGetComplexAckResponse+0x34>
 8005bb8:	7d7b      	ldrb	r3, [r7, #21]
 8005bba:	2b96      	cmp	r3, #150	; 0x96
 8005bbc:	d101      	bne.n	8005bc2 <hpmGetComplexAckResponse+0x34>
    return ACK_NEG;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e04d      	b.n	8005c5e <hpmGetComplexAckResponse+0xd0>

  /* Handle positive acknowledgement 0x40... */
  if (response[0] == 0x40)
 8005bc2:	7d3b      	ldrb	r3, [r7, #20]
 8005bc4:	2b40      	cmp	r3, #64	; 0x40
 8005bc6:	d149      	bne.n	8005c5c <hpmGetComplexAckResponse+0xce>
  {
    /* The response length has already been read */
    respLength = response[1];
 8005bc8:	7d7b      	ldrb	r3, [r7, #21]
 8005bca:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* The payload length is 1 less */
    *actualPayloadLength = respLength - 1;
 8005bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	601a      	str	r2, [r3, #0]

    /* Bail out if the amount of data to read is anormal or too
     * much for the payload buffer*/
    if (respLength >= sizeof(response) - 2 ||
 8005bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd8:	2b1d      	cmp	r3, #29
 8005bda:	d804      	bhi.n	8005be6 <hpmGetComplexAckResponse+0x58>
        *actualPayloadLength > maxPayloadLength)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
    if (respLength >= sizeof(response) - 2 ||
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	da01      	bge.n	8005bea <hpmGetComplexAckResponse+0x5c>
      return ACK_ERR;
 8005be6:	2302      	movs	r3, #2
 8005be8:	e039      	b.n	8005c5e <hpmGetComplexAckResponse+0xd0>

    /* Read the rest of the message, respLength + 1 bytes */
    if (hpmUartRx(&response[2], respLength + 1) != respLength + 1)
 8005bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bec:	3301      	adds	r3, #1
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f107 0314 	add.w	r3, r7, #20
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff ff35 	bl	8005a68 <hpmUartRx>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c02:	3301      	adds	r3, #1
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d001      	beq.n	8005c0c <hpmGetComplexAckResponse+0x7e>
      return ACK_ERR;
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e028      	b.n	8005c5e <hpmGetComplexAckResponse+0xd0>

    /* The command code */
    *cmd = response[2];
 8005c0c:	7dba      	ldrb	r2, [r7, #22]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	701a      	strb	r2, [r3, #0]

    /* The data payload */
    memcpy(payloadBuffer, &response[3], *actualPayloadLength);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	f107 0314 	add.w	r3, r7, #20
 8005c1c:	3303      	adds	r3, #3
 8005c1e:	4619      	mov	r1, r3
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f005 fd45 	bl	800b6b0 <memcpy>

    /* Verify the checksum */
    receivedChecksum = response[2 + respLength];
 8005c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c28:	3302      	adds	r3, #2
 8005c2a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005c2e:	4413      	add	r3, r2
 8005c30:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8005c34:	63bb      	str	r3, [r7, #56]	; 0x38
    expectedChecksum = hpmCalculateChecksum(response, 2 + respLength);
 8005c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c38:	3302      	adds	r3, #2
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f107 0314 	add.w	r3, r7, #20
 8005c40:	4611      	mov	r1, r2
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff fed6 	bl	80059f4 <hpmCalculateChecksum>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
    if (receivedChecksum != expectedChecksum)
 8005c4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d001      	beq.n	8005c58 <hpmGetComplexAckResponse+0xca>
      return ACK_BAD_CHECKSUM;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e002      	b.n	8005c5e <hpmGetComplexAckResponse+0xd0>

    return ACK_POS;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e000      	b.n	8005c5e <hpmGetComplexAckResponse+0xd0>
  }
  else
  {
    return ACK_ERR;
 8005c5c:	2302      	movs	r3, #2
  }
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3740      	adds	r7, #64	; 0x40
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <hpmSetUart>:


int hpmSetUart(UART_HandleTypeDef *huart)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  hpmHuart = huart;
 8005c70:	4a04      	ldr	r2, [pc, #16]	; (8005c84 <hpmSetUart+0x1c>)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6013      	str	r3, [r2, #0]

  return HPM_ERR_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	2000009c 	.word	0x2000009c

08005c88 <hpmReadResults>:


int hpmReadResults(int *pm25concentration, int *pm10concentration)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  int errCode;
  uint8_t data[4];
  uint8_t cmdInAck;
  int dataLength;

  if ((errCode = hpmSendCommand(HPM_READ_RESULTS_CMD, NULL, 0)) < 0)
 8005c92:	2200      	movs	r2, #0
 8005c94:	2100      	movs	r1, #0
 8005c96:	2004      	movs	r0, #4
 8005c98:	f7ff ff02 	bl	8005aa0 <hpmSendCommand>
 8005c9c:	6178      	str	r0, [r7, #20]
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	da01      	bge.n	8005ca8 <hpmReadResults+0x20>
    return errCode;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	e02d      	b.n	8005d04 <hpmReadResults+0x7c>

  switch(hpmGetComplexAckResponse(data, sizeof(data), &cmdInAck, &dataLength))
 8005ca8:	f107 0308 	add.w	r3, r7, #8
 8005cac:	f107 020f 	add.w	r2, r7, #15
 8005cb0:	f107 0010 	add.w	r0, r7, #16
 8005cb4:	2104      	movs	r1, #4
 8005cb6:	f7ff ff6a 	bl	8005b8e <hpmGetComplexAckResponse>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d019      	beq.n	8005cf4 <hpmReadResults+0x6c>
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d01a      	beq.n	8005cfa <hpmReadResults+0x72>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d11b      	bne.n	8005d00 <hpmReadResults+0x78>
  {
    case ACK_POS:
      /* Verify the command and data length are correct in the response */
      if (cmdInAck != HPM_READ_RESULTS_CMD || dataLength != 4)
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d102      	bne.n	8005cd4 <hpmReadResults+0x4c>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d001      	beq.n	8005cd8 <hpmReadResults+0x50>
        return ACK_ERR;
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e015      	b.n	8005d04 <hpmReadResults+0x7c>

      *pm25concentration = (int) data[0] * 256 + data[1];
 8005cd8:	7c3b      	ldrb	r3, [r7, #16]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	7c7a      	ldrb	r2, [r7, #17]
 8005cde:	441a      	add	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	601a      	str	r2, [r3, #0]
      *pm10concentration = (int) data[2] * 256 + data[3];
 8005ce4:	7cbb      	ldrb	r3, [r7, #18]
 8005ce6:	021b      	lsls	r3, r3, #8
 8005ce8:	7cfa      	ldrb	r2, [r7, #19]
 8005cea:	441a      	add	r2, r3
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	601a      	str	r2, [r3, #0]
      return HPM_ERR_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e007      	b.n	8005d04 <hpmReadResults+0x7c>
      break;
    case ACK_NEG:
      return HPM_ERR_NEG_ACK;
 8005cf4:	f06f 0302 	mvn.w	r3, #2
 8005cf8:	e004      	b.n	8005d04 <hpmReadResults+0x7c>
      break;
    case ACK_BAD_CHECKSUM:
      return HPM_ERR_BAD_CHECKSUM;
 8005cfa:	f06f 0305 	mvn.w	r3, #5
 8005cfe:	e001      	b.n	8005d04 <hpmReadResults+0x7c>
      break;
    case ACK_ERR:
    default:
      return HPM_ERR_BAD_RESPONSE;
 8005d00:	f06f 0304 	mvn.w	r3, #4
  }
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <hpmStartParticleMeasurement>:


int hpmStartParticleMeasurement()
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
  int errCode;

  if ((errCode = hpmSendCommand(HPM_START_MEASURE_CMD, NULL, 0)) < 0)
 8005d12:	2200      	movs	r2, #0
 8005d14:	2100      	movs	r1, #0
 8005d16:	2001      	movs	r0, #1
 8005d18:	f7ff fec2 	bl	8005aa0 <hpmSendCommand>
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	da01      	bge.n	8005d28 <hpmStartParticleMeasurement+0x1c>
    return errCode;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	e00e      	b.n	8005d46 <hpmStartParticleMeasurement+0x3a>

  switch(hpmGetSimpleAckResponse())
 8005d28:	f7ff ff0f 	bl	8005b4a <hpmGetSimpleAckResponse>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <hpmStartParticleMeasurement+0x2c>
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d002      	beq.n	8005d3c <hpmStartParticleMeasurement+0x30>
 8005d36:	e004      	b.n	8005d42 <hpmStartParticleMeasurement+0x36>
  {
  case ACK_POS: return HPM_ERR_OK; break;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e004      	b.n	8005d46 <hpmStartParticleMeasurement+0x3a>
  case ACK_NEG: return HPM_ERR_NEG_ACK; break;
 8005d3c:	f06f 0302 	mvn.w	r3, #2
 8005d40:	e001      	b.n	8005d46 <hpmStartParticleMeasurement+0x3a>
  case ACK_ERR:
  default:
    return HPM_ERR_BAD_RESPONSE;
 8005d42:	f06f 0304 	mvn.w	r3, #4
  }
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <hpmStopParticleMeasurement>:


int hpmStopParticleMeasurement()
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
  int errCode;

  if ((errCode = hpmSendCommand(HPM_STOP_MEASURE_CMD, NULL, 0)) < 0)
 8005d54:	2200      	movs	r2, #0
 8005d56:	2100      	movs	r1, #0
 8005d58:	2002      	movs	r0, #2
 8005d5a:	f7ff fea1 	bl	8005aa0 <hpmSendCommand>
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	da01      	bge.n	8005d6a <hpmStopParticleMeasurement+0x1c>
    return errCode;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	e00e      	b.n	8005d88 <hpmStopParticleMeasurement+0x3a>

  switch(hpmGetSimpleAckResponse())
 8005d6a:	f7ff feee 	bl	8005b4a <hpmGetSimpleAckResponse>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <hpmStopParticleMeasurement+0x2c>
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d002      	beq.n	8005d7e <hpmStopParticleMeasurement+0x30>
 8005d78:	e004      	b.n	8005d84 <hpmStopParticleMeasurement+0x36>
  {
    case ACK_POS: return HPM_ERR_OK; break;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e004      	b.n	8005d88 <hpmStopParticleMeasurement+0x3a>
    case ACK_NEG: return HPM_ERR_NEG_ACK; break;
 8005d7e:	f06f 0302 	mvn.w	r3, #2
 8005d82:	e001      	b.n	8005d88 <hpmStopParticleMeasurement+0x3a>
    case ACK_ERR:
    default:
      return HPM_ERR_BAD_RESPONSE;
 8005d84:	f06f 0304 	mvn.w	r3, #4
  }
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <hpmStopAutoSend>:
  }
}


int hpmStopAutoSend()
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
  int errCode;

  if ((errCode = hpmSendCommand(HPM_STOP_AUTO_SEND_CMD, NULL, 0)) < 0)
 8005d96:	2200      	movs	r2, #0
 8005d98:	2100      	movs	r1, #0
 8005d9a:	2020      	movs	r0, #32
 8005d9c:	f7ff fe80 	bl	8005aa0 <hpmSendCommand>
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	da01      	bge.n	8005dac <hpmStopAutoSend+0x1c>
    return errCode;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	e00e      	b.n	8005dca <hpmStopAutoSend+0x3a>

  switch(hpmGetSimpleAckResponse())
 8005dac:	f7ff fecd 	bl	8005b4a <hpmGetSimpleAckResponse>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <hpmStopAutoSend+0x2c>
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d002      	beq.n	8005dc0 <hpmStopAutoSend+0x30>
 8005dba:	e004      	b.n	8005dc6 <hpmStopAutoSend+0x36>
  {
    case ACK_POS: return HPM_ERR_OK; break;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e004      	b.n	8005dca <hpmStopAutoSend+0x3a>
    case ACK_NEG: return HPM_ERR_NEG_ACK; break;
 8005dc0:	f06f 0302 	mvn.w	r3, #2
 8005dc4:	e001      	b.n	8005dca <hpmStopAutoSend+0x3a>
    case ACK_ERR:
    default:
      return HPM_ERR_BAD_RESPONSE;
 8005dc6:	f06f 0304 	mvn.w	r3, #4
  }
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dda:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <HAL_MspInit+0x44>)
 8005ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dde:	4a0e      	ldr	r2, [pc, #56]	; (8005e18 <HAL_MspInit+0x44>)
 8005de0:	f043 0301 	orr.w	r3, r3, #1
 8005de4:	6613      	str	r3, [r2, #96]	; 0x60
 8005de6:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <HAL_MspInit+0x44>)
 8005de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	607b      	str	r3, [r7, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005df2:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <HAL_MspInit+0x44>)
 8005df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df6:	4a08      	ldr	r2, [pc, #32]	; (8005e18 <HAL_MspInit+0x44>)
 8005df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8005dfe:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <HAL_MspInit+0x44>)
 8005e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e06:	603b      	str	r3, [r7, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	40021000 	.word	0x40021000

08005e1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08a      	sub	sp, #40	; 0x28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e24:	f107 0314 	add.w	r3, r7, #20
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	605a      	str	r2, [r3, #4]
 8005e2e:	609a      	str	r2, [r3, #8]
 8005e30:	60da      	str	r2, [r3, #12]
 8005e32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a17      	ldr	r2, [pc, #92]	; (8005e98 <HAL_SPI_MspInit+0x7c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d128      	bne.n	8005e90 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005e3e:	4b17      	ldr	r3, [pc, #92]	; (8005e9c <HAL_SPI_MspInit+0x80>)
 8005e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e42:	4a16      	ldr	r2, [pc, #88]	; (8005e9c <HAL_SPI_MspInit+0x80>)
 8005e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e48:	6613      	str	r3, [r2, #96]	; 0x60
 8005e4a:	4b14      	ldr	r3, [pc, #80]	; (8005e9c <HAL_SPI_MspInit+0x80>)
 8005e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e52:	613b      	str	r3, [r7, #16]
 8005e54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e56:	4b11      	ldr	r3, [pc, #68]	; (8005e9c <HAL_SPI_MspInit+0x80>)
 8005e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e5a:	4a10      	ldr	r2, [pc, #64]	; (8005e9c <HAL_SPI_MspInit+0x80>)
 8005e5c:	f043 0301 	orr.w	r3, r3, #1
 8005e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e62:	4b0e      	ldr	r3, [pc, #56]	; (8005e9c <HAL_SPI_MspInit+0x80>)
 8005e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005e6e:	23e0      	movs	r3, #224	; 0xe0
 8005e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e72:	2302      	movs	r3, #2
 8005e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005e7e:	2305      	movs	r3, #5
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e82:	f107 0314 	add.w	r3, r7, #20
 8005e86:	4619      	mov	r1, r3
 8005e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e8c:	f000 fb28 	bl	80064e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005e90:	bf00      	nop
 8005e92:	3728      	adds	r7, #40	; 0x28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40013000 	.word	0x40013000
 8005e9c:	40021000 	.word	0x40021000

08005ea0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a0d      	ldr	r2, [pc, #52]	; (8005ee4 <HAL_TIM_OC_MspInit+0x44>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d113      	bne.n	8005eda <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005eb2:	4b0d      	ldr	r3, [pc, #52]	; (8005ee8 <HAL_TIM_OC_MspInit+0x48>)
 8005eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb6:	4a0c      	ldr	r2, [pc, #48]	; (8005ee8 <HAL_TIM_OC_MspInit+0x48>)
 8005eb8:	f043 0304 	orr.w	r3, r3, #4
 8005ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8005ebe:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <HAL_TIM_OC_MspInit+0x48>)
 8005ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2100      	movs	r1, #0
 8005ece:	201e      	movs	r0, #30
 8005ed0:	f000 fab6 	bl	8006440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005ed4:	201e      	movs	r0, #30
 8005ed6:	f000 fadf 	bl	8006498 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005eda:	bf00      	nop
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40000800 	.word	0x40000800
 8005ee8:	40021000 	.word	0x40021000

08005eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08c      	sub	sp, #48	; 0x30
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ef4:	f107 031c 	add.w	r3, r7, #28
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	609a      	str	r2, [r3, #8]
 8005f00:	60da      	str	r2, [r3, #12]
 8005f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a2f      	ldr	r2, [pc, #188]	; (8005fc8 <HAL_UART_MspInit+0xdc>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d129      	bne.n	8005f62 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005f0e:	4b2f      	ldr	r3, [pc, #188]	; (8005fcc <HAL_UART_MspInit+0xe0>)
 8005f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f12:	4a2e      	ldr	r2, [pc, #184]	; (8005fcc <HAL_UART_MspInit+0xe0>)
 8005f14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f18:	6593      	str	r3, [r2, #88]	; 0x58
 8005f1a:	4b2c      	ldr	r3, [pc, #176]	; (8005fcc <HAL_UART_MspInit+0xe0>)
 8005f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f26:	4b29      	ldr	r3, [pc, #164]	; (8005fcc <HAL_UART_MspInit+0xe0>)
 8005f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2a:	4a28      	ldr	r2, [pc, #160]	; (8005fcc <HAL_UART_MspInit+0xe0>)
 8005f2c:	f043 0301 	orr.w	r3, r3, #1
 8005f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f32:	4b26      	ldr	r3, [pc, #152]	; (8005fcc <HAL_UART_MspInit+0xe0>)
 8005f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	617b      	str	r3, [r7, #20]
 8005f3c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f42:	2302      	movs	r3, #2
 8005f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005f4e:	2308      	movs	r3, #8
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f52:	f107 031c 	add.w	r3, r7, #28
 8005f56:	4619      	mov	r1, r3
 8005f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f5c:	f000 fac0 	bl	80064e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005f60:	e02d      	b.n	8005fbe <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART2)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a1a      	ldr	r2, [pc, #104]	; (8005fd0 <HAL_UART_MspInit+0xe4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d128      	bne.n	8005fbe <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f6c:	4b17      	ldr	r3, [pc, #92]	; (8005fcc <HAL_UART_MspInit+0xe0>)
 8005f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f70:	4a16      	ldr	r2, [pc, #88]	; (8005fcc <HAL_UART_MspInit+0xe0>)
 8005f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f76:	6593      	str	r3, [r2, #88]	; 0x58
 8005f78:	4b14      	ldr	r3, [pc, #80]	; (8005fcc <HAL_UART_MspInit+0xe0>)
 8005f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f84:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <HAL_UART_MspInit+0xe0>)
 8005f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f88:	4a10      	ldr	r2, [pc, #64]	; (8005fcc <HAL_UART_MspInit+0xe0>)
 8005f8a:	f043 0301 	orr.w	r3, r3, #1
 8005f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f90:	4b0e      	ldr	r3, [pc, #56]	; (8005fcc <HAL_UART_MspInit+0xe0>)
 8005f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005f9c:	230c      	movs	r3, #12
 8005f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005fac:	2307      	movs	r3, #7
 8005fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fb0:	f107 031c 	add.w	r3, r7, #28
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fba:	f000 fa91 	bl	80064e0 <HAL_GPIO_Init>
}
 8005fbe:	bf00      	nop
 8005fc0:	3730      	adds	r7, #48	; 0x30
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	40004c00 	.word	0x40004c00
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	40004400 	.word	0x40004400

08005fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005fd8:	bf00      	nop
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005fe6:	e7fe      	b.n	8005fe6 <HardFault_Handler+0x4>

08005fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005fec:	e7fe      	b.n	8005fec <MemManage_Handler+0x4>

08005fee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ff2:	e7fe      	b.n	8005ff2 <BusFault_Handler+0x4>

08005ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ff8:	e7fe      	b.n	8005ff8 <UsageFault_Handler+0x4>

08005ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ffe:	bf00      	nop
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800600c:	bf00      	nop
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006016:	b480      	push	{r7}
 8006018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800601a:	bf00      	nop
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006028:	f000 f8da 	bl	80061e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800602c:	bf00      	nop
 800602e:	bd80      	pop	{r7, pc}

08006030 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006034:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006038:	f000 fd10 	bl	8006a5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800603c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006040:	f000 fd0c 	bl	8006a5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006044:	bf00      	nop
 8006046:	bd80      	pop	{r7, pc}

08006048 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800604c:	4802      	ldr	r0, [pc, #8]	; (8006058 <TIM4_IRQHandler+0x10>)
 800604e:	f003 fafd 	bl	800964c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006052:	bf00      	nop
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20000160 	.word	0x20000160

0800605c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8006060:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006064:	f000 fcfa 	bl	8006a5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006068:	bf00      	nop
 800606a:	bd80      	pop	{r7, pc}

0800606c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006070:	4b17      	ldr	r3, [pc, #92]	; (80060d0 <SystemInit+0x64>)
 8006072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006076:	4a16      	ldr	r2, [pc, #88]	; (80060d0 <SystemInit+0x64>)
 8006078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800607c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006080:	4b14      	ldr	r3, [pc, #80]	; (80060d4 <SystemInit+0x68>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a13      	ldr	r2, [pc, #76]	; (80060d4 <SystemInit+0x68>)
 8006086:	f043 0301 	orr.w	r3, r3, #1
 800608a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800608c:	4b11      	ldr	r3, [pc, #68]	; (80060d4 <SystemInit+0x68>)
 800608e:	2200      	movs	r2, #0
 8006090:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006092:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <SystemInit+0x68>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a0f      	ldr	r2, [pc, #60]	; (80060d4 <SystemInit+0x68>)
 8006098:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800609c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80060a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80060a2:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <SystemInit+0x68>)
 80060a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80060aa:	4b0a      	ldr	r3, [pc, #40]	; (80060d4 <SystemInit+0x68>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a09      	ldr	r2, [pc, #36]	; (80060d4 <SystemInit+0x68>)
 80060b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80060b6:	4b07      	ldr	r3, [pc, #28]	; (80060d4 <SystemInit+0x68>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80060bc:	4b04      	ldr	r3, [pc, #16]	; (80060d0 <SystemInit+0x64>)
 80060be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060c2:	609a      	str	r2, [r3, #8]
#endif
}
 80060c4:	bf00      	nop
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	e000ed00 	.word	0xe000ed00
 80060d4:	40021000 	.word	0x40021000

080060d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80060d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006110 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80060dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80060de:	e003      	b.n	80060e8 <LoopCopyDataInit>

080060e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80060e0:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80060e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80060e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80060e6:	3104      	adds	r1, #4

080060e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80060e8:	480b      	ldr	r0, [pc, #44]	; (8006118 <LoopForever+0xa>)
	ldr	r3, =_edata
 80060ea:	4b0c      	ldr	r3, [pc, #48]	; (800611c <LoopForever+0xe>)
	adds	r2, r0, r1
 80060ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80060ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80060f0:	d3f6      	bcc.n	80060e0 <CopyDataInit>
	ldr	r2, =_sbss
 80060f2:	4a0b      	ldr	r2, [pc, #44]	; (8006120 <LoopForever+0x12>)
	b	LoopFillZerobss
 80060f4:	e002      	b.n	80060fc <LoopFillZerobss>

080060f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80060f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80060f8:	f842 3b04 	str.w	r3, [r2], #4

080060fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80060fc:	4b09      	ldr	r3, [pc, #36]	; (8006124 <LoopForever+0x16>)
	cmp	r2, r3
 80060fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006100:	d3f9      	bcc.n	80060f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006102:	f7ff ffb3 	bl	800606c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006106:	f005 faaf 	bl	800b668 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800610a:	f7fe fbc5 	bl	8004898 <main>

0800610e <LoopForever>:

LoopForever:
    b LoopForever
 800610e:	e7fe      	b.n	800610e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006110:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006114:	0800cdd4 	.word	0x0800cdd4
	ldr	r0, =_sdata
 8006118:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800611c:	20000054 	.word	0x20000054
	ldr	r2, =_sbss
 8006120:	20000054 	.word	0x20000054
	ldr	r3, = _ebss
 8006124:	200004b4 	.word	0x200004b4

08006128 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006128:	e7fe      	b.n	8006128 <ADC1_2_IRQHandler>
	...

0800612c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006136:	4b0c      	ldr	r3, [pc, #48]	; (8006168 <HAL_Init+0x3c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a0b      	ldr	r2, [pc, #44]	; (8006168 <HAL_Init+0x3c>)
 800613c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006140:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006142:	2003      	movs	r0, #3
 8006144:	f000 f95c 	bl	8006400 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006148:	2000      	movs	r0, #0
 800614a:	f000 f80f 	bl	800616c <HAL_InitTick>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	71fb      	strb	r3, [r7, #7]
 8006158:	e001      	b.n	800615e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800615a:	f7ff fe3b 	bl	8005dd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800615e:	79fb      	ldrb	r3, [r7, #7]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40022000 	.word	0x40022000

0800616c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006178:	4b16      	ldr	r3, [pc, #88]	; (80061d4 <HAL_InitTick+0x68>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d022      	beq.n	80061c6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006180:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <HAL_InitTick+0x6c>)
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	4b13      	ldr	r3, [pc, #76]	; (80061d4 <HAL_InitTick+0x68>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800618c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006190:	fbb2 f3f3 	udiv	r3, r2, r3
 8006194:	4618      	mov	r0, r3
 8006196:	f000 f997 	bl	80064c8 <HAL_SYSTICK_Config>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10f      	bne.n	80061c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b0f      	cmp	r3, #15
 80061a4:	d809      	bhi.n	80061ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061a6:	2200      	movs	r2, #0
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	f04f 30ff 	mov.w	r0, #4294967295
 80061ae:	f000 f947 	bl	8006440 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80061b2:	4a0a      	ldr	r2, [pc, #40]	; (80061dc <HAL_InitTick+0x70>)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	e007      	b.n	80061ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	73fb      	strb	r3, [r7, #15]
 80061be:	e004      	b.n	80061ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	73fb      	strb	r3, [r7, #15]
 80061c4:	e001      	b.n	80061ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	20000050 	.word	0x20000050
 80061d8:	20000048 	.word	0x20000048
 80061dc:	2000004c 	.word	0x2000004c

080061e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061e4:	4b05      	ldr	r3, [pc, #20]	; (80061fc <HAL_IncTick+0x1c>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	4b05      	ldr	r3, [pc, #20]	; (8006200 <HAL_IncTick+0x20>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4413      	add	r3, r2
 80061ee:	4a03      	ldr	r2, [pc, #12]	; (80061fc <HAL_IncTick+0x1c>)
 80061f0:	6013      	str	r3, [r2, #0]
}
 80061f2:	bf00      	nop
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	200004b0 	.word	0x200004b0
 8006200:	20000050 	.word	0x20000050

08006204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
  return uwTick;
 8006208:	4b03      	ldr	r3, [pc, #12]	; (8006218 <HAL_GetTick+0x14>)
 800620a:	681b      	ldr	r3, [r3, #0]
}
 800620c:	4618      	mov	r0, r3
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	200004b0 	.word	0x200004b0

0800621c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006224:	f7ff ffee 	bl	8006204 <HAL_GetTick>
 8006228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006234:	d004      	beq.n	8006240 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006236:	4b09      	ldr	r3, [pc, #36]	; (800625c <HAL_Delay+0x40>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4413      	add	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006240:	bf00      	nop
 8006242:	f7ff ffdf 	bl	8006204 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	429a      	cmp	r2, r3
 8006250:	d8f7      	bhi.n	8006242 <HAL_Delay+0x26>
  {
  }
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20000050 	.word	0x20000050

08006260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006270:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800627c:	4013      	ands	r3, r2
 800627e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800628c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006292:	4a04      	ldr	r2, [pc, #16]	; (80062a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	60d3      	str	r3, [r2, #12]
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	e000ed00 	.word	0xe000ed00

080062a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062ac:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <__NVIC_GetPriorityGrouping+0x18>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	0a1b      	lsrs	r3, r3, #8
 80062b2:	f003 0307 	and.w	r3, r3, #7
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	e000ed00 	.word	0xe000ed00

080062c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	db0b      	blt.n	80062ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062d6:	79fb      	ldrb	r3, [r7, #7]
 80062d8:	f003 021f 	and.w	r2, r3, #31
 80062dc:	4907      	ldr	r1, [pc, #28]	; (80062fc <__NVIC_EnableIRQ+0x38>)
 80062de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	2001      	movs	r0, #1
 80062e6:	fa00 f202 	lsl.w	r2, r0, r2
 80062ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	e000e100 	.word	0xe000e100

08006300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	4603      	mov	r3, r0
 8006308:	6039      	str	r1, [r7, #0]
 800630a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800630c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006310:	2b00      	cmp	r3, #0
 8006312:	db0a      	blt.n	800632a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	b2da      	uxtb	r2, r3
 8006318:	490c      	ldr	r1, [pc, #48]	; (800634c <__NVIC_SetPriority+0x4c>)
 800631a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800631e:	0112      	lsls	r2, r2, #4
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	440b      	add	r3, r1
 8006324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006328:	e00a      	b.n	8006340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	b2da      	uxtb	r2, r3
 800632e:	4908      	ldr	r1, [pc, #32]	; (8006350 <__NVIC_SetPriority+0x50>)
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	3b04      	subs	r3, #4
 8006338:	0112      	lsls	r2, r2, #4
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	440b      	add	r3, r1
 800633e:	761a      	strb	r2, [r3, #24]
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	e000e100 	.word	0xe000e100
 8006350:	e000ed00 	.word	0xe000ed00

08006354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006354:	b480      	push	{r7}
 8006356:	b089      	sub	sp, #36	; 0x24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	f1c3 0307 	rsb	r3, r3, #7
 800636e:	2b04      	cmp	r3, #4
 8006370:	bf28      	it	cs
 8006372:	2304      	movcs	r3, #4
 8006374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	3304      	adds	r3, #4
 800637a:	2b06      	cmp	r3, #6
 800637c:	d902      	bls.n	8006384 <NVIC_EncodePriority+0x30>
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	3b03      	subs	r3, #3
 8006382:	e000      	b.n	8006386 <NVIC_EncodePriority+0x32>
 8006384:	2300      	movs	r3, #0
 8006386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006388:	f04f 32ff 	mov.w	r2, #4294967295
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	43da      	mvns	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	401a      	ands	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800639c:	f04f 31ff 	mov.w	r1, #4294967295
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	fa01 f303 	lsl.w	r3, r1, r3
 80063a6:	43d9      	mvns	r1, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063ac:	4313      	orrs	r3, r2
         );
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3724      	adds	r7, #36	; 0x24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063cc:	d301      	bcc.n	80063d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063ce:	2301      	movs	r3, #1
 80063d0:	e00f      	b.n	80063f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063d2:	4a0a      	ldr	r2, [pc, #40]	; (80063fc <SysTick_Config+0x40>)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063da:	210f      	movs	r1, #15
 80063dc:	f04f 30ff 	mov.w	r0, #4294967295
 80063e0:	f7ff ff8e 	bl	8006300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <SysTick_Config+0x40>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063ea:	4b04      	ldr	r3, [pc, #16]	; (80063fc <SysTick_Config+0x40>)
 80063ec:	2207      	movs	r2, #7
 80063ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	e000e010 	.word	0xe000e010

08006400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b07      	cmp	r3, #7
 800640c:	d00f      	beq.n	800642e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b06      	cmp	r3, #6
 8006412:	d00c      	beq.n	800642e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b05      	cmp	r3, #5
 8006418:	d009      	beq.n	800642e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b04      	cmp	r3, #4
 800641e:	d006      	beq.n	800642e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b03      	cmp	r3, #3
 8006424:	d003      	beq.n	800642e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006426:	21a7      	movs	r1, #167	; 0xa7
 8006428:	4804      	ldr	r0, [pc, #16]	; (800643c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800642a:	f7fe fc78 	bl	8004d1e <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7ff ff16 	bl	8006260 <__NVIC_SetPriorityGrouping>
}
 8006434:	bf00      	nop
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	0800b978 	.word	0x0800b978

08006440 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	4603      	mov	r3, r0
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800644e:	2300      	movs	r3, #0
 8006450:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b0f      	cmp	r3, #15
 8006456:	d903      	bls.n	8006460 <HAL_NVIC_SetPriority+0x20>
 8006458:	21bf      	movs	r1, #191	; 0xbf
 800645a:	480e      	ldr	r0, [pc, #56]	; (8006494 <HAL_NVIC_SetPriority+0x54>)
 800645c:	f7fe fc5f 	bl	8004d1e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b0f      	cmp	r3, #15
 8006464:	d903      	bls.n	800646e <HAL_NVIC_SetPriority+0x2e>
 8006466:	21c0      	movs	r1, #192	; 0xc0
 8006468:	480a      	ldr	r0, [pc, #40]	; (8006494 <HAL_NVIC_SetPriority+0x54>)
 800646a:	f7fe fc58 	bl	8004d1e <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800646e:	f7ff ff1b 	bl	80062a8 <__NVIC_GetPriorityGrouping>
 8006472:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	6978      	ldr	r0, [r7, #20]
 800647a:	f7ff ff6b 	bl	8006354 <NVIC_EncodePriority>
 800647e:	4602      	mov	r2, r0
 8006480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006484:	4611      	mov	r1, r2
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff ff3a 	bl	8006300 <__NVIC_SetPriority>
}
 800648c:	bf00      	nop
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	0800b978 	.word	0x0800b978

08006498 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	4603      	mov	r3, r0
 80064a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80064a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	da03      	bge.n	80064b2 <HAL_NVIC_EnableIRQ+0x1a>
 80064aa:	21d3      	movs	r1, #211	; 0xd3
 80064ac:	4805      	ldr	r0, [pc, #20]	; (80064c4 <HAL_NVIC_EnableIRQ+0x2c>)
 80064ae:	f7fe fc36 	bl	8004d1e <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7ff ff04 	bl	80062c4 <__NVIC_EnableIRQ>
}
 80064bc:	bf00      	nop
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	0800b978 	.word	0x0800b978

080064c8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff ff73 	bl	80063bc <SysTick_Config>
 80064d6:	4603      	mov	r3, r0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80064f4:	d01f      	beq.n	8006536 <HAL_GPIO_Init+0x56>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a3f      	ldr	r2, [pc, #252]	; (80065f8 <HAL_GPIO_Init+0x118>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d01b      	beq.n	8006536 <HAL_GPIO_Init+0x56>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a3e      	ldr	r2, [pc, #248]	; (80065fc <HAL_GPIO_Init+0x11c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d017      	beq.n	8006536 <HAL_GPIO_Init+0x56>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a3d      	ldr	r2, [pc, #244]	; (8006600 <HAL_GPIO_Init+0x120>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d013      	beq.n	8006536 <HAL_GPIO_Init+0x56>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a3c      	ldr	r2, [pc, #240]	; (8006604 <HAL_GPIO_Init+0x124>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00f      	beq.n	8006536 <HAL_GPIO_Init+0x56>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a3b      	ldr	r2, [pc, #236]	; (8006608 <HAL_GPIO_Init+0x128>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00b      	beq.n	8006536 <HAL_GPIO_Init+0x56>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a3a      	ldr	r2, [pc, #232]	; (800660c <HAL_GPIO_Init+0x12c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d007      	beq.n	8006536 <HAL_GPIO_Init+0x56>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a39      	ldr	r2, [pc, #228]	; (8006610 <HAL_GPIO_Init+0x130>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d003      	beq.n	8006536 <HAL_GPIO_Init+0x56>
 800652e:	21b3      	movs	r1, #179	; 0xb3
 8006530:	4838      	ldr	r0, [pc, #224]	; (8006614 <HAL_GPIO_Init+0x134>)
 8006532:	f7fe fbf4 	bl	8004d1e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d005      	beq.n	800654c <HAL_GPIO_Init+0x6c>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	0c1b      	lsrs	r3, r3, #16
 8006546:	041b      	lsls	r3, r3, #16
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <HAL_GPIO_Init+0x74>
 800654c:	21b4      	movs	r1, #180	; 0xb4
 800654e:	4831      	ldr	r0, [pc, #196]	; (8006614 <HAL_GPIO_Init+0x134>)
 8006550:	f7fe fbe5 	bl	8004d1e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d039      	beq.n	80065d0 <HAL_GPIO_Init+0xf0>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d035      	beq.n	80065d0 <HAL_GPIO_Init+0xf0>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2b11      	cmp	r3, #17
 800656a:	d031      	beq.n	80065d0 <HAL_GPIO_Init+0xf0>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2b02      	cmp	r3, #2
 8006572:	d02d      	beq.n	80065d0 <HAL_GPIO_Init+0xf0>
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	2b12      	cmp	r3, #18
 800657a:	d029      	beq.n	80065d0 <HAL_GPIO_Init+0xf0>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	4a25      	ldr	r2, [pc, #148]	; (8006618 <HAL_GPIO_Init+0x138>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d024      	beq.n	80065d0 <HAL_GPIO_Init+0xf0>
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	4a24      	ldr	r2, [pc, #144]	; (800661c <HAL_GPIO_Init+0x13c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d01f      	beq.n	80065d0 <HAL_GPIO_Init+0xf0>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	4a22      	ldr	r2, [pc, #136]	; (8006620 <HAL_GPIO_Init+0x140>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d01a      	beq.n	80065d0 <HAL_GPIO_Init+0xf0>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	4a21      	ldr	r2, [pc, #132]	; (8006624 <HAL_GPIO_Init+0x144>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d015      	beq.n	80065d0 <HAL_GPIO_Init+0xf0>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	4a1f      	ldr	r2, [pc, #124]	; (8006628 <HAL_GPIO_Init+0x148>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d010      	beq.n	80065d0 <HAL_GPIO_Init+0xf0>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	4a1e      	ldr	r2, [pc, #120]	; (800662c <HAL_GPIO_Init+0x14c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00b      	beq.n	80065d0 <HAL_GPIO_Init+0xf0>
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d007      	beq.n	80065d0 <HAL_GPIO_Init+0xf0>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2b0b      	cmp	r3, #11
 80065c6:	d003      	beq.n	80065d0 <HAL_GPIO_Init+0xf0>
 80065c8:	21b5      	movs	r1, #181	; 0xb5
 80065ca:	4812      	ldr	r0, [pc, #72]	; (8006614 <HAL_GPIO_Init+0x134>)
 80065cc:	f7fe fba7 	bl	8004d1e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8200 	beq.w	80069da <HAL_GPIO_Init+0x4fa>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	f000 81fb 	beq.w	80069da <HAL_GPIO_Init+0x4fa>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	f000 81f6 	beq.w	80069da <HAL_GPIO_Init+0x4fa>
 80065ee:	21b6      	movs	r1, #182	; 0xb6
 80065f0:	4808      	ldr	r0, [pc, #32]	; (8006614 <HAL_GPIO_Init+0x134>)
 80065f2:	f7fe fb94 	bl	8004d1e <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065f6:	e1f0      	b.n	80069da <HAL_GPIO_Init+0x4fa>
 80065f8:	48000400 	.word	0x48000400
 80065fc:	48000800 	.word	0x48000800
 8006600:	48000c00 	.word	0x48000c00
 8006604:	48001000 	.word	0x48001000
 8006608:	48001400 	.word	0x48001400
 800660c:	48001800 	.word	0x48001800
 8006610:	48001c00 	.word	0x48001c00
 8006614:	0800b9b4 	.word	0x0800b9b4
 8006618:	10110000 	.word	0x10110000
 800661c:	10210000 	.word	0x10210000
 8006620:	10310000 	.word	0x10310000
 8006624:	10120000 	.word	0x10120000
 8006628:	10220000 	.word	0x10220000
 800662c:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	2101      	movs	r1, #1
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	fa01 f303 	lsl.w	r3, r1, r3
 800663c:	4013      	ands	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 81c6 	beq.w	80069d4 <HAL_GPIO_Init+0x4f4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d003      	beq.n	8006658 <HAL_GPIO_Init+0x178>
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b12      	cmp	r3, #18
 8006656:	d14f      	bne.n	80066f8 <HAL_GPIO_Init+0x218>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800665e:	d01f      	beq.n	80066a0 <HAL_GPIO_Init+0x1c0>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4aa0      	ldr	r2, [pc, #640]	; (80068e4 <HAL_GPIO_Init+0x404>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d01b      	beq.n	80066a0 <HAL_GPIO_Init+0x1c0>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a9f      	ldr	r2, [pc, #636]	; (80068e8 <HAL_GPIO_Init+0x408>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d017      	beq.n	80066a0 <HAL_GPIO_Init+0x1c0>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a9e      	ldr	r2, [pc, #632]	; (80068ec <HAL_GPIO_Init+0x40c>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d013      	beq.n	80066a0 <HAL_GPIO_Init+0x1c0>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a9d      	ldr	r2, [pc, #628]	; (80068f0 <HAL_GPIO_Init+0x410>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00f      	beq.n	80066a0 <HAL_GPIO_Init+0x1c0>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a9c      	ldr	r2, [pc, #624]	; (80068f4 <HAL_GPIO_Init+0x414>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00b      	beq.n	80066a0 <HAL_GPIO_Init+0x1c0>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a9b      	ldr	r2, [pc, #620]	; (80068f8 <HAL_GPIO_Init+0x418>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d007      	beq.n	80066a0 <HAL_GPIO_Init+0x1c0>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a9a      	ldr	r2, [pc, #616]	; (80068fc <HAL_GPIO_Init+0x41c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d003      	beq.n	80066a0 <HAL_GPIO_Init+0x1c0>
 8006698:	21c5      	movs	r1, #197	; 0xc5
 800669a:	4899      	ldr	r0, [pc, #612]	; (8006900 <HAL_GPIO_Init+0x420>)
 800669c:	f7fe fb3f 	bl	8004d1e <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	2b0f      	cmp	r3, #15
 80066a6:	d903      	bls.n	80066b0 <HAL_GPIO_Init+0x1d0>
 80066a8:	21c6      	movs	r1, #198	; 0xc6
 80066aa:	4895      	ldr	r0, [pc, #596]	; (8006900 <HAL_GPIO_Init+0x420>)
 80066ac:	f7fe fb37 	bl	8004d1e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	08da      	lsrs	r2, r3, #3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3208      	adds	r2, #8
 80066b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	220f      	movs	r2, #15
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	43db      	mvns	r3, r3
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4013      	ands	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	08da      	lsrs	r2, r3, #3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3208      	adds	r2, #8
 80066f2:	6939      	ldr	r1, [r7, #16]
 80066f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	2203      	movs	r2, #3
 8006704:	fa02 f303 	lsl.w	r3, r2, r3
 8006708:	43db      	mvns	r3, r3
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4013      	ands	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f003 0203 	and.w	r2, r3, #3
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d00b      	beq.n	800674c <HAL_GPIO_Init+0x26c>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d007      	beq.n	800674c <HAL_GPIO_Init+0x26c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006740:	2b11      	cmp	r3, #17
 8006742:	d003      	beq.n	800674c <HAL_GPIO_Init+0x26c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b12      	cmp	r3, #18
 800674a:	d144      	bne.n	80067d6 <HAL_GPIO_Init+0x2f6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00f      	beq.n	8006774 <HAL_GPIO_Init+0x294>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d00b      	beq.n	8006774 <HAL_GPIO_Init+0x294>
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	2b02      	cmp	r3, #2
 8006762:	d007      	beq.n	8006774 <HAL_GPIO_Init+0x294>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	2b03      	cmp	r3, #3
 800676a:	d003      	beq.n	8006774 <HAL_GPIO_Init+0x294>
 800676c:	21da      	movs	r1, #218	; 0xda
 800676e:	4864      	ldr	r0, [pc, #400]	; (8006900 <HAL_GPIO_Init+0x420>)
 8006770:	f7fe fad5 	bl	8004d1e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	2203      	movs	r2, #3
 8006780:	fa02 f303 	lsl.w	r3, r2, r3
 8006784:	43db      	mvns	r3, r3
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	4013      	ands	r3, r2
 800678a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	fa02 f303 	lsl.w	r3, r2, r3
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067aa:	2201      	movs	r2, #1
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	fa02 f303 	lsl.w	r3, r2, r3
 80067b2:	43db      	mvns	r3, r3
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4013      	ands	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	091b      	lsrs	r3, r3, #4
 80067c0:	f003 0201 	and.w	r2, r3, #1
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f003 0303 	and.w	r3, r3, #3
 80067de:	2b03      	cmp	r3, #3
 80067e0:	d118      	bne.n	8006814 <HAL_GPIO_Init+0x334>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80067e8:	2201      	movs	r2, #1
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	fa02 f303 	lsl.w	r3, r2, r3
 80067f0:	43db      	mvns	r3, r3
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4013      	ands	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	08db      	lsrs	r3, r3, #3
 80067fe:	f003 0201 	and.w	r2, r3, #1
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	fa02 f303 	lsl.w	r3, r2, r3
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	2203      	movs	r2, #3
 8006820:	fa02 f303 	lsl.w	r3, r2, r3
 8006824:	43db      	mvns	r3, r3
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4013      	ands	r3, r2
 800682a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	fa02 f303 	lsl.w	r3, r2, r3
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	4313      	orrs	r3, r2
 800683c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 80c1 	beq.w	80069d4 <HAL_GPIO_Init+0x4f4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006852:	4b2c      	ldr	r3, [pc, #176]	; (8006904 <HAL_GPIO_Init+0x424>)
 8006854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006856:	4a2b      	ldr	r2, [pc, #172]	; (8006904 <HAL_GPIO_Init+0x424>)
 8006858:	f043 0301 	orr.w	r3, r3, #1
 800685c:	6613      	str	r3, [r2, #96]	; 0x60
 800685e:	4b29      	ldr	r3, [pc, #164]	; (8006904 <HAL_GPIO_Init+0x424>)
 8006860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	60bb      	str	r3, [r7, #8]
 8006868:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800686a:	4a27      	ldr	r2, [pc, #156]	; (8006908 <HAL_GPIO_Init+0x428>)
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	089b      	lsrs	r3, r3, #2
 8006870:	3302      	adds	r3, #2
 8006872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006876:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f003 0303 	and.w	r3, r3, #3
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	220f      	movs	r2, #15
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	43db      	mvns	r3, r3
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4013      	ands	r3, r2
 800688c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006894:	d03a      	beq.n	800690c <HAL_GPIO_Init+0x42c>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a12      	ldr	r2, [pc, #72]	; (80068e4 <HAL_GPIO_Init+0x404>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d01f      	beq.n	80068de <HAL_GPIO_Init+0x3fe>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a11      	ldr	r2, [pc, #68]	; (80068e8 <HAL_GPIO_Init+0x408>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d019      	beq.n	80068da <HAL_GPIO_Init+0x3fa>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a10      	ldr	r2, [pc, #64]	; (80068ec <HAL_GPIO_Init+0x40c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <HAL_GPIO_Init+0x3f6>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a0f      	ldr	r2, [pc, #60]	; (80068f0 <HAL_GPIO_Init+0x410>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00d      	beq.n	80068d2 <HAL_GPIO_Init+0x3f2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a0e      	ldr	r2, [pc, #56]	; (80068f4 <HAL_GPIO_Init+0x414>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d007      	beq.n	80068ce <HAL_GPIO_Init+0x3ee>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a0d      	ldr	r2, [pc, #52]	; (80068f8 <HAL_GPIO_Init+0x418>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d101      	bne.n	80068ca <HAL_GPIO_Init+0x3ea>
 80068c6:	2306      	movs	r3, #6
 80068c8:	e021      	b.n	800690e <HAL_GPIO_Init+0x42e>
 80068ca:	2307      	movs	r3, #7
 80068cc:	e01f      	b.n	800690e <HAL_GPIO_Init+0x42e>
 80068ce:	2305      	movs	r3, #5
 80068d0:	e01d      	b.n	800690e <HAL_GPIO_Init+0x42e>
 80068d2:	2304      	movs	r3, #4
 80068d4:	e01b      	b.n	800690e <HAL_GPIO_Init+0x42e>
 80068d6:	2303      	movs	r3, #3
 80068d8:	e019      	b.n	800690e <HAL_GPIO_Init+0x42e>
 80068da:	2302      	movs	r3, #2
 80068dc:	e017      	b.n	800690e <HAL_GPIO_Init+0x42e>
 80068de:	2301      	movs	r3, #1
 80068e0:	e015      	b.n	800690e <HAL_GPIO_Init+0x42e>
 80068e2:	bf00      	nop
 80068e4:	48000400 	.word	0x48000400
 80068e8:	48000800 	.word	0x48000800
 80068ec:	48000c00 	.word	0x48000c00
 80068f0:	48001000 	.word	0x48001000
 80068f4:	48001400 	.word	0x48001400
 80068f8:	48001800 	.word	0x48001800
 80068fc:	48001c00 	.word	0x48001c00
 8006900:	0800b9b4 	.word	0x0800b9b4
 8006904:	40021000 	.word	0x40021000
 8006908:	40010000 	.word	0x40010000
 800690c:	2300      	movs	r3, #0
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	f002 0203 	and.w	r2, r2, #3
 8006914:	0092      	lsls	r2, r2, #2
 8006916:	4093      	lsls	r3, r2
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800691e:	4935      	ldr	r1, [pc, #212]	; (80069f4 <HAL_GPIO_Init+0x514>)
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	089b      	lsrs	r3, r3, #2
 8006924:	3302      	adds	r3, #2
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800692c:	4b32      	ldr	r3, [pc, #200]	; (80069f8 <HAL_GPIO_Init+0x518>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	43db      	mvns	r3, r3
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4013      	ands	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <HAL_GPIO_Init+0x470>
        {
          temp |= iocurrent;
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4313      	orrs	r3, r2
 800694e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006950:	4a29      	ldr	r2, [pc, #164]	; (80069f8 <HAL_GPIO_Init+0x518>)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006956:	4b28      	ldr	r3, [pc, #160]	; (80069f8 <HAL_GPIO_Init+0x518>)
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	43db      	mvns	r3, r3
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	4013      	ands	r3, r2
 8006964:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <HAL_GPIO_Init+0x49a>
        {
          temp |= iocurrent;
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4313      	orrs	r3, r2
 8006978:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800697a:	4a1f      	ldr	r2, [pc, #124]	; (80069f8 <HAL_GPIO_Init+0x518>)
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006980:	4b1d      	ldr	r3, [pc, #116]	; (80069f8 <HAL_GPIO_Init+0x518>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	43db      	mvns	r3, r3
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	4013      	ands	r3, r2
 800698e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <HAL_GPIO_Init+0x4c4>
        {
          temp |= iocurrent;
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80069a4:	4a14      	ldr	r2, [pc, #80]	; (80069f8 <HAL_GPIO_Init+0x518>)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80069aa:	4b13      	ldr	r3, [pc, #76]	; (80069f8 <HAL_GPIO_Init+0x518>)
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	43db      	mvns	r3, r3
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4013      	ands	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_GPIO_Init+0x4ee>
        {
          temp |= iocurrent;
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80069ce:	4a0a      	ldr	r2, [pc, #40]	; (80069f8 <HAL_GPIO_Init+0x518>)
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	3301      	adds	r3, #1
 80069d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	fa22 f303 	lsr.w	r3, r2, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f47f ae23 	bne.w	8006630 <HAL_GPIO_Init+0x150>
  }
}
 80069ea:	bf00      	nop
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	40010000 	.word	0x40010000
 80069f8:	40010400 	.word	0x40010400

080069fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	807b      	strh	r3, [r7, #2]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006a0c:	887b      	ldrh	r3, [r7, #2]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d004      	beq.n	8006a1c <HAL_GPIO_WritePin+0x20>
 8006a12:	887b      	ldrh	r3, [r7, #2]
 8006a14:	0c1b      	lsrs	r3, r3, #16
 8006a16:	041b      	lsls	r3, r3, #16
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d004      	beq.n	8006a26 <HAL_GPIO_WritePin+0x2a>
 8006a1c:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8006a20:	480d      	ldr	r0, [pc, #52]	; (8006a58 <HAL_GPIO_WritePin+0x5c>)
 8006a22:	f7fe f97c 	bl	8004d1e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006a26:	787b      	ldrb	r3, [r7, #1]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d007      	beq.n	8006a3c <HAL_GPIO_WritePin+0x40>
 8006a2c:	787b      	ldrb	r3, [r7, #1]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d004      	beq.n	8006a3c <HAL_GPIO_WritePin+0x40>
 8006a32:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006a36:	4808      	ldr	r0, [pc, #32]	; (8006a58 <HAL_GPIO_WritePin+0x5c>)
 8006a38:	f7fe f971 	bl	8004d1e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8006a3c:	787b      	ldrb	r3, [r7, #1]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a42:	887a      	ldrh	r2, [r7, #2]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006a48:	e002      	b.n	8006a50 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006a4a:	887a      	ldrh	r2, [r7, #2]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006a50:	bf00      	nop
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	0800b9b4 	.word	0x0800b9b4

08006a5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006a66:	4b08      	ldr	r3, [pc, #32]	; (8006a88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a68:	695a      	ldr	r2, [r3, #20]
 8006a6a:	88fb      	ldrh	r3, [r7, #6]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d006      	beq.n	8006a80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a72:	4a05      	ldr	r2, [pc, #20]	; (8006a88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a74:	88fb      	ldrh	r3, [r7, #6]
 8006a76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a78:	88fb      	ldrh	r3, [r7, #6]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fa fb7c 	bl	8001178 <HAL_GPIO_EXTI_Callback>
  }
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	40010400 	.word	0x40010400

08006a8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006a90:	4b04      	ldr	r3, [pc, #16]	; (8006aa4 <HAL_PWREx_GetVoltageRange+0x18>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40007000 	.word	0x40007000

08006aa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ab6:	d007      	beq.n	8006ac8 <HAL_PWREx_ControlVoltageScaling+0x20>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006abe:	d003      	beq.n	8006ac8 <HAL_PWREx_ControlVoltageScaling+0x20>
 8006ac0:	21a8      	movs	r1, #168	; 0xa8
 8006ac2:	4826      	ldr	r0, [pc, #152]	; (8006b5c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006ac4:	f7fe f92b 	bl	8004d1e <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ace:	d130      	bne.n	8006b32 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ad0:	4b23      	ldr	r3, [pc, #140]	; (8006b60 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006adc:	d038      	beq.n	8006b50 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ade:	4b20      	ldr	r3, [pc, #128]	; (8006b60 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ae6:	4a1e      	ldr	r2, [pc, #120]	; (8006b60 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006ae8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006aee:	4b1d      	ldr	r3, [pc, #116]	; (8006b64 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2232      	movs	r2, #50	; 0x32
 8006af4:	fb02 f303 	mul.w	r3, r2, r3
 8006af8:	4a1b      	ldr	r2, [pc, #108]	; (8006b68 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8006afa:	fba2 2303 	umull	r2, r3, r2, r3
 8006afe:	0c9b      	lsrs	r3, r3, #18
 8006b00:	3301      	adds	r3, #1
 8006b02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b04:	e002      	b.n	8006b0c <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b0c:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b18:	d102      	bne.n	8006b20 <HAL_PWREx_ControlVoltageScaling+0x78>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1f2      	bne.n	8006b06 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b20:	4b0f      	ldr	r3, [pc, #60]	; (8006b60 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b2c:	d110      	bne.n	8006b50 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e00f      	b.n	8006b52 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b32:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b3e:	d007      	beq.n	8006b50 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006b40:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006b48:	4a05      	ldr	r2, [pc, #20]	; (8006b60 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	0800b9f0 	.word	0x0800b9f0
 8006b60:	40007000 	.word	0x40007000
 8006b64:	20000048 	.word	0x20000048
 8006b68:	431bde83 	.word	0x431bde83

08006b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d102      	bne.n	8006b80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f000 bcdc 	b.w	8007538 <HAL_RCC_OscConfig+0x9cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d022      	beq.n	8006bce <HAL_RCC_OscConfig+0x62>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d11c      	bne.n	8006bce <HAL_RCC_OscConfig+0x62>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d116      	bne.n	8006bce <HAL_RCC_OscConfig+0x62>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d110      	bne.n	8006bce <HAL_RCC_OscConfig+0x62>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10a      	bne.n	8006bce <HAL_RCC_OscConfig+0x62>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0304 	and.w	r3, r3, #4
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <HAL_RCC_OscConfig+0x62>
 8006bc4:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8006bc8:	48a0      	ldr	r0, [pc, #640]	; (8006e4c <HAL_RCC_OscConfig+0x2e0>)
 8006bca:	f7fe f8a8 	bl	8004d1e <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bce:	4ba0      	ldr	r3, [pc, #640]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f003 030c 	and.w	r3, r3, #12
 8006bd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bd8:	4b9d      	ldr	r3, [pc, #628]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f003 0303 	and.w	r3, r3, #3
 8006be0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0310 	and.w	r3, r3, #16
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 8139 	beq.w	8006e62 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <HAL_RCC_OscConfig+0x9e>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d004      	beq.n	8006c0a <HAL_RCC_OscConfig+0x9e>
 8006c00:	f240 11a7 	movw	r1, #423	; 0x1a7
 8006c04:	4891      	ldr	r0, [pc, #580]	; (8006e4c <HAL_RCC_OscConfig+0x2e0>)
 8006c06:	f7fe f88a 	bl	8004d1e <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	2bff      	cmp	r3, #255	; 0xff
 8006c10:	d904      	bls.n	8006c1c <HAL_RCC_OscConfig+0xb0>
 8006c12:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8006c16:	488d      	ldr	r0, [pc, #564]	; (8006e4c <HAL_RCC_OscConfig+0x2e0>)
 8006c18:	f7fe f881 	bl	8004d1e <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d030      	beq.n	8006c86 <HAL_RCC_OscConfig+0x11a>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	2b10      	cmp	r3, #16
 8006c2a:	d02c      	beq.n	8006c86 <HAL_RCC_OscConfig+0x11a>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	2b20      	cmp	r3, #32
 8006c32:	d028      	beq.n	8006c86 <HAL_RCC_OscConfig+0x11a>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	2b30      	cmp	r3, #48	; 0x30
 8006c3a:	d024      	beq.n	8006c86 <HAL_RCC_OscConfig+0x11a>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	2b40      	cmp	r3, #64	; 0x40
 8006c42:	d020      	beq.n	8006c86 <HAL_RCC_OscConfig+0x11a>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	2b50      	cmp	r3, #80	; 0x50
 8006c4a:	d01c      	beq.n	8006c86 <HAL_RCC_OscConfig+0x11a>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	2b60      	cmp	r3, #96	; 0x60
 8006c52:	d018      	beq.n	8006c86 <HAL_RCC_OscConfig+0x11a>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	2b70      	cmp	r3, #112	; 0x70
 8006c5a:	d014      	beq.n	8006c86 <HAL_RCC_OscConfig+0x11a>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	2b80      	cmp	r3, #128	; 0x80
 8006c62:	d010      	beq.n	8006c86 <HAL_RCC_OscConfig+0x11a>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	2b90      	cmp	r3, #144	; 0x90
 8006c6a:	d00c      	beq.n	8006c86 <HAL_RCC_OscConfig+0x11a>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	2ba0      	cmp	r3, #160	; 0xa0
 8006c72:	d008      	beq.n	8006c86 <HAL_RCC_OscConfig+0x11a>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	2bb0      	cmp	r3, #176	; 0xb0
 8006c7a:	d004      	beq.n	8006c86 <HAL_RCC_OscConfig+0x11a>
 8006c7c:	f240 11a9 	movw	r1, #425	; 0x1a9
 8006c80:	4872      	ldr	r0, [pc, #456]	; (8006e4c <HAL_RCC_OscConfig+0x2e0>)
 8006c82:	f7fe f84c 	bl	8004d1e <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d007      	beq.n	8006c9c <HAL_RCC_OscConfig+0x130>
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	2b0c      	cmp	r3, #12
 8006c90:	f040 808a 	bne.w	8006da8 <HAL_RCC_OscConfig+0x23c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	f040 8086 	bne.w	8006da8 <HAL_RCC_OscConfig+0x23c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c9c:	4b6c      	ldr	r3, [pc, #432]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d006      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x14a>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d102      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x14a>
      {
        return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	f000 bc41 	b.w	8007538 <HAL_RCC_OscConfig+0x9cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1a      	ldr	r2, [r3, #32]
 8006cba:	4b65      	ldr	r3, [pc, #404]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0308 	and.w	r3, r3, #8
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d004      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x164>
 8006cc6:	4b62      	ldr	r3, [pc, #392]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cce:	e005      	b.n	8006cdc <HAL_RCC_OscConfig+0x170>
 8006cd0:	4b5f      	ldr	r3, [pc, #380]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cd6:	091b      	lsrs	r3, r3, #4
 8006cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d224      	bcs.n	8006d2a <HAL_RCC_OscConfig+0x1be>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fe73 	bl	80079d0 <RCC_SetFlashLatencyFromMSIRange>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	f000 bc21 	b.w	8007538 <HAL_RCC_OscConfig+0x9cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006cf6:	4b56      	ldr	r3, [pc, #344]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a55      	ldr	r2, [pc, #340]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006cfc:	f043 0308 	orr.w	r3, r3, #8
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	4b53      	ldr	r3, [pc, #332]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	4950      	ldr	r1, [pc, #320]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d14:	4b4e      	ldr	r3, [pc, #312]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	494b      	ldr	r1, [pc, #300]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	604b      	str	r3, [r1, #4]
 8006d28:	e022      	b.n	8006d70 <HAL_RCC_OscConfig+0x204>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d2a:	4b49      	ldr	r3, [pc, #292]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a48      	ldr	r2, [pc, #288]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006d30:	f043 0308 	orr.w	r3, r3, #8
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	4b46      	ldr	r3, [pc, #280]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	4943      	ldr	r1, [pc, #268]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d48:	4b41      	ldr	r3, [pc, #260]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	493e      	ldr	r1, [pc, #248]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fe35 	bl	80079d0 <RCC_SetFlashLatencyFromMSIRange>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e3e3      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d70:	f000 fd6c 	bl	800784c <HAL_RCC_GetSysClockFreq>
 8006d74:	4601      	mov	r1, r0
 8006d76:	4b36      	ldr	r3, [pc, #216]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	091b      	lsrs	r3, r3, #4
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	4a34      	ldr	r2, [pc, #208]	; (8006e54 <HAL_RCC_OscConfig+0x2e8>)
 8006d82:	5cd3      	ldrb	r3, [r2, r3]
 8006d84:	f003 031f 	and.w	r3, r3, #31
 8006d88:	fa21 f303 	lsr.w	r3, r1, r3
 8006d8c:	4a32      	ldr	r2, [pc, #200]	; (8006e58 <HAL_RCC_OscConfig+0x2ec>)
 8006d8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006d90:	4b32      	ldr	r3, [pc, #200]	; (8006e5c <HAL_RCC_OscConfig+0x2f0>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7ff f9e9 	bl	800616c <HAL_InitTick>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d05d      	beq.n	8006e60 <HAL_RCC_OscConfig+0x2f4>
        {
          return status;
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	e3c7      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d032      	beq.n	8006e16 <HAL_RCC_OscConfig+0x2aa>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006db0:	4b27      	ldr	r3, [pc, #156]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a26      	ldr	r2, [pc, #152]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006db6:	f043 0301 	orr.w	r3, r3, #1
 8006dba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006dbc:	f7ff fa22 	bl	8006204 <HAL_GetTick>
 8006dc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006dc2:	e008      	b.n	8006dd6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006dc4:	f7ff fa1e 	bl	8006204 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d901      	bls.n	8006dd6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e3b0      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006dd6:	4b1e      	ldr	r3, [pc, #120]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d0f0      	beq.n	8006dc4 <HAL_RCC_OscConfig+0x258>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006de2:	4b1b      	ldr	r3, [pc, #108]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1a      	ldr	r2, [pc, #104]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006de8:	f043 0308 	orr.w	r3, r3, #8
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	4b18      	ldr	r3, [pc, #96]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	4915      	ldr	r1, [pc, #84]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e00:	4b13      	ldr	r3, [pc, #76]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	4910      	ldr	r1, [pc, #64]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	604b      	str	r3, [r1, #4]
 8006e14:	e025      	b.n	8006e62 <HAL_RCC_OscConfig+0x2f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006e16:	4b0e      	ldr	r3, [pc, #56]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a0d      	ldr	r2, [pc, #52]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006e1c:	f023 0301 	bic.w	r3, r3, #1
 8006e20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006e22:	f7ff f9ef 	bl	8006204 <HAL_GetTick>
 8006e26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e28:	e008      	b.n	8006e3c <HAL_RCC_OscConfig+0x2d0>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e2a:	f7ff f9eb 	bl	8006204 <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d901      	bls.n	8006e3c <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e37d      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e3c:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <HAL_RCC_OscConfig+0x2e4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0302 	and.w	r3, r3, #2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1f0      	bne.n	8006e2a <HAL_RCC_OscConfig+0x2be>
 8006e48:	e00b      	b.n	8006e62 <HAL_RCC_OscConfig+0x2f6>
 8006e4a:	bf00      	nop
 8006e4c:	0800ba2c 	.word	0x0800ba2c
 8006e50:	40021000 	.word	0x40021000
 8006e54:	0800cd54 	.word	0x0800cd54
 8006e58:	20000048 	.word	0x20000048
 8006e5c:	2000004c 	.word	0x2000004c
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d07e      	beq.n	8006f6c <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00e      	beq.n	8006e94 <HAL_RCC_OscConfig+0x328>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e7e:	d009      	beq.n	8006e94 <HAL_RCC_OscConfig+0x328>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e88:	d004      	beq.n	8006e94 <HAL_RCC_OscConfig+0x328>
 8006e8a:	f240 2111 	movw	r1, #529	; 0x211
 8006e8e:	489b      	ldr	r0, [pc, #620]	; (80070fc <HAL_RCC_OscConfig+0x590>)
 8006e90:	f7fd ff45 	bl	8004d1e <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	2b08      	cmp	r3, #8
 8006e98:	d005      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x33a>
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	2b0c      	cmp	r3, #12
 8006e9e:	d10e      	bne.n	8006ebe <HAL_RCC_OscConfig+0x352>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d10b      	bne.n	8006ebe <HAL_RCC_OscConfig+0x352>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ea6:	4b96      	ldr	r3, [pc, #600]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d05b      	beq.n	8006f6a <HAL_RCC_OscConfig+0x3fe>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d157      	bne.n	8006f6a <HAL_RCC_OscConfig+0x3fe>
      {
        return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e33c      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec6:	d106      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x36a>
 8006ec8:	4b8d      	ldr	r3, [pc, #564]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a8c      	ldr	r2, [pc, #560]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	e01d      	b.n	8006f12 <HAL_RCC_OscConfig+0x3a6>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ede:	d10c      	bne.n	8006efa <HAL_RCC_OscConfig+0x38e>
 8006ee0:	4b87      	ldr	r3, [pc, #540]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a86      	ldr	r2, [pc, #536]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006ee6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	4b84      	ldr	r3, [pc, #528]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a83      	ldr	r2, [pc, #524]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	e00b      	b.n	8006f12 <HAL_RCC_OscConfig+0x3a6>
 8006efa:	4b81      	ldr	r3, [pc, #516]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a80      	ldr	r2, [pc, #512]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	4b7e      	ldr	r3, [pc, #504]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a7d      	ldr	r2, [pc, #500]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d013      	beq.n	8006f42 <HAL_RCC_OscConfig+0x3d6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f1a:	f7ff f973 	bl	8006204 <HAL_GetTick>
 8006f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f20:	e008      	b.n	8006f34 <HAL_RCC_OscConfig+0x3c8>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f22:	f7ff f96f 	bl	8006204 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b64      	cmp	r3, #100	; 0x64
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCC_OscConfig+0x3c8>
          {
            return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e301      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f34:	4b72      	ldr	r3, [pc, #456]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d0f0      	beq.n	8006f22 <HAL_RCC_OscConfig+0x3b6>
 8006f40:	e014      	b.n	8006f6c <HAL_RCC_OscConfig+0x400>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f42:	f7ff f95f 	bl	8006204 <HAL_GetTick>
 8006f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f48:	e008      	b.n	8006f5c <HAL_RCC_OscConfig+0x3f0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f4a:	f7ff f95b 	bl	8006204 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b64      	cmp	r3, #100	; 0x64
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x3f0>
          {
            return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e2ed      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f5c:	4b68      	ldr	r3, [pc, #416]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1f0      	bne.n	8006f4a <HAL_RCC_OscConfig+0x3de>
 8006f68:	e000      	b.n	8006f6c <HAL_RCC_OscConfig+0x400>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f6a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d077      	beq.n	8007068 <HAL_RCC_OscConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d009      	beq.n	8006f94 <HAL_RCC_OscConfig+0x428>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f88:	d004      	beq.n	8006f94 <HAL_RCC_OscConfig+0x428>
 8006f8a:	f44f 7111 	mov.w	r1, #580	; 0x244
 8006f8e:	485b      	ldr	r0, [pc, #364]	; (80070fc <HAL_RCC_OscConfig+0x590>)
 8006f90:	f7fd fec5 	bl	8004d1e <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	2b1f      	cmp	r3, #31
 8006f9a:	d904      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x43a>
 8006f9c:	f240 2145 	movw	r1, #581	; 0x245
 8006fa0:	4856      	ldr	r0, [pc, #344]	; (80070fc <HAL_RCC_OscConfig+0x590>)
 8006fa2:	f7fd febc 	bl	8004d1e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	d005      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x44c>
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	2b0c      	cmp	r3, #12
 8006fb0:	d119      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x47a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d116      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fb8:	4b51      	ldr	r3, [pc, #324]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d005      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x464>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e2b3      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fd0:	4b4b      	ldr	r3, [pc, #300]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	061b      	lsls	r3, r3, #24
 8006fde:	4948      	ldr	r1, [pc, #288]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fe4:	e040      	b.n	8007068 <HAL_RCC_OscConfig+0x4fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d023      	beq.n	8007036 <HAL_RCC_OscConfig+0x4ca>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fee:	4b44      	ldr	r3, [pc, #272]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a43      	ldr	r2, [pc, #268]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8006ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffa:	f7ff f903 	bl	8006204 <HAL_GetTick>
 8006ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007000:	e008      	b.n	8007014 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007002:	f7ff f8ff 	bl	8006204 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d901      	bls.n	8007014 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e291      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007014:	4b3a      	ldr	r3, [pc, #232]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0f0      	beq.n	8007002 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007020:	4b37      	ldr	r3, [pc, #220]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	061b      	lsls	r3, r3, #24
 800702e:	4934      	ldr	r1, [pc, #208]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8007030:	4313      	orrs	r3, r2
 8007032:	604b      	str	r3, [r1, #4]
 8007034:	e018      	b.n	8007068 <HAL_RCC_OscConfig+0x4fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007036:	4b32      	ldr	r3, [pc, #200]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a31      	ldr	r2, [pc, #196]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 800703c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007042:	f7ff f8df 	bl	8006204 <HAL_GetTick>
 8007046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007048:	e008      	b.n	800705c <HAL_RCC_OscConfig+0x4f0>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800704a:	f7ff f8db 	bl	8006204 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b02      	cmp	r3, #2
 8007056:	d901      	bls.n	800705c <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e26d      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800705c:	4b28      	ldr	r3, [pc, #160]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1f0      	bne.n	800704a <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b00      	cmp	r3, #0
 8007072:	d04e      	beq.n	8007112 <HAL_RCC_OscConfig+0x5a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d008      	beq.n	800708e <HAL_RCC_OscConfig+0x522>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d004      	beq.n	800708e <HAL_RCC_OscConfig+0x522>
 8007084:	f240 2185 	movw	r1, #645	; 0x285
 8007088:	481c      	ldr	r0, [pc, #112]	; (80070fc <HAL_RCC_OscConfig+0x590>)
 800708a:	f7fd fe48 	bl	8004d1e <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d01c      	beq.n	80070d0 <HAL_RCC_OscConfig+0x564>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007096:	4b1a      	ldr	r3, [pc, #104]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 8007098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800709c:	4a18      	ldr	r2, [pc, #96]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 800709e:	f043 0301 	orr.w	r3, r3, #1
 80070a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070a6:	f7ff f8ad 	bl	8006204 <HAL_GetTick>
 80070aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070ac:	e008      	b.n	80070c0 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070ae:	f7ff f8a9 	bl	8006204 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d901      	bls.n	80070c0 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e23b      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070c0:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 80070c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0ef      	beq.n	80070ae <HAL_RCC_OscConfig+0x542>
 80070ce:	e020      	b.n	8007112 <HAL_RCC_OscConfig+0x5a6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070d0:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 80070d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070d6:	4a0a      	ldr	r2, [pc, #40]	; (8007100 <HAL_RCC_OscConfig+0x594>)
 80070d8:	f023 0301 	bic.w	r3, r3, #1
 80070dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e0:	f7ff f890 	bl	8006204 <HAL_GetTick>
 80070e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070e6:	e00d      	b.n	8007104 <HAL_RCC_OscConfig+0x598>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070e8:	f7ff f88c 	bl	8006204 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d906      	bls.n	8007104 <HAL_RCC_OscConfig+0x598>
        {
          return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e21e      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
 80070fa:	bf00      	nop
 80070fc:	0800ba2c 	.word	0x0800ba2c
 8007100:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007104:	4ba7      	ldr	r3, [pc, #668]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 8007106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1ea      	bne.n	80070e8 <HAL_RCC_OscConfig+0x57c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 80b2 	beq.w	8007284 <HAL_RCC_OscConfig+0x718>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007120:	2300      	movs	r3, #0
 8007122:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00c      	beq.n	8007146 <HAL_RCC_OscConfig+0x5da>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d008      	beq.n	8007146 <HAL_RCC_OscConfig+0x5da>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	2b05      	cmp	r3, #5
 800713a:	d004      	beq.n	8007146 <HAL_RCC_OscConfig+0x5da>
 800713c:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 8007140:	4899      	ldr	r0, [pc, #612]	; (80073a8 <HAL_RCC_OscConfig+0x83c>)
 8007142:	f7fd fdec 	bl	8004d1e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007146:	4b97      	ldr	r3, [pc, #604]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 8007148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10d      	bne.n	800716e <HAL_RCC_OscConfig+0x602>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007152:	4b94      	ldr	r3, [pc, #592]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 8007154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007156:	4a93      	ldr	r2, [pc, #588]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 8007158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800715c:	6593      	str	r3, [r2, #88]	; 0x58
 800715e:	4b91      	ldr	r3, [pc, #580]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 8007160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007166:	60bb      	str	r3, [r7, #8]
 8007168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800716a:	2301      	movs	r3, #1
 800716c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800716e:	4b8f      	ldr	r3, [pc, #572]	; (80073ac <HAL_RCC_OscConfig+0x840>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007176:	2b00      	cmp	r3, #0
 8007178:	d118      	bne.n	80071ac <HAL_RCC_OscConfig+0x640>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800717a:	4b8c      	ldr	r3, [pc, #560]	; (80073ac <HAL_RCC_OscConfig+0x840>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a8b      	ldr	r2, [pc, #556]	; (80073ac <HAL_RCC_OscConfig+0x840>)
 8007180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007186:	f7ff f83d 	bl	8006204 <HAL_GetTick>
 800718a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800718c:	e008      	b.n	80071a0 <HAL_RCC_OscConfig+0x634>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800718e:	f7ff f839 	bl	8006204 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d901      	bls.n	80071a0 <HAL_RCC_OscConfig+0x634>
        {
          return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e1cb      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071a0:	4b82      	ldr	r3, [pc, #520]	; (80073ac <HAL_RCC_OscConfig+0x840>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d0f0      	beq.n	800718e <HAL_RCC_OscConfig+0x622>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d108      	bne.n	80071c6 <HAL_RCC_OscConfig+0x65a>
 80071b4:	4b7b      	ldr	r3, [pc, #492]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 80071b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ba:	4a7a      	ldr	r2, [pc, #488]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 80071bc:	f043 0301 	orr.w	r3, r3, #1
 80071c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071c4:	e024      	b.n	8007210 <HAL_RCC_OscConfig+0x6a4>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	2b05      	cmp	r3, #5
 80071cc:	d110      	bne.n	80071f0 <HAL_RCC_OscConfig+0x684>
 80071ce:	4b75      	ldr	r3, [pc, #468]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 80071d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d4:	4a73      	ldr	r2, [pc, #460]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 80071d6:	f043 0304 	orr.w	r3, r3, #4
 80071da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071de:	4b71      	ldr	r3, [pc, #452]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 80071e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e4:	4a6f      	ldr	r2, [pc, #444]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 80071e6:	f043 0301 	orr.w	r3, r3, #1
 80071ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071ee:	e00f      	b.n	8007210 <HAL_RCC_OscConfig+0x6a4>
 80071f0:	4b6c      	ldr	r3, [pc, #432]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 80071f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f6:	4a6b      	ldr	r2, [pc, #428]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 80071f8:	f023 0301 	bic.w	r3, r3, #1
 80071fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007200:	4b68      	ldr	r3, [pc, #416]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 8007202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007206:	4a67      	ldr	r2, [pc, #412]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 8007208:	f023 0304 	bic.w	r3, r3, #4
 800720c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d016      	beq.n	8007246 <HAL_RCC_OscConfig+0x6da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007218:	f7fe fff4 	bl	8006204 <HAL_GetTick>
 800721c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800721e:	e00a      	b.n	8007236 <HAL_RCC_OscConfig+0x6ca>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007220:	f7fe fff0 	bl	8006204 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	f241 3288 	movw	r2, #5000	; 0x1388
 800722e:	4293      	cmp	r3, r2
 8007230:	d901      	bls.n	8007236 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e180      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007236:	4b5b      	ldr	r3, [pc, #364]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 8007238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d0ed      	beq.n	8007220 <HAL_RCC_OscConfig+0x6b4>
 8007244:	e015      	b.n	8007272 <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007246:	f7fe ffdd 	bl	8006204 <HAL_GetTick>
 800724a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800724c:	e00a      	b.n	8007264 <HAL_RCC_OscConfig+0x6f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800724e:	f7fe ffd9 	bl	8006204 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	f241 3288 	movw	r2, #5000	; 0x1388
 800725c:	4293      	cmp	r3, r2
 800725e:	d901      	bls.n	8007264 <HAL_RCC_OscConfig+0x6f8>
        {
          return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e169      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007264:	4b4f      	ldr	r3, [pc, #316]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 8007266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1ed      	bne.n	800724e <HAL_RCC_OscConfig+0x6e2>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007272:	7ffb      	ldrb	r3, [r7, #31]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d105      	bne.n	8007284 <HAL_RCC_OscConfig+0x718>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007278:	4b4a      	ldr	r3, [pc, #296]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 800727a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727c:	4a49      	ldr	r2, [pc, #292]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 800727e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007282:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00c      	beq.n	80072a6 <HAL_RCC_OscConfig+0x73a>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007290:	2b01      	cmp	r3, #1
 8007292:	d008      	beq.n	80072a6 <HAL_RCC_OscConfig+0x73a>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	2b02      	cmp	r3, #2
 800729a:	d004      	beq.n	80072a6 <HAL_RCC_OscConfig+0x73a>
 800729c:	f240 3166 	movw	r1, #870	; 0x366
 80072a0:	4841      	ldr	r0, [pc, #260]	; (80073a8 <HAL_RCC_OscConfig+0x83c>)
 80072a2:	f7fd fd3c 	bl	8004d1e <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 8143 	beq.w	8007536 <HAL_RCC_OscConfig+0x9ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	2b0c      	cmp	r3, #12
 80072b4:	f000 80fc 	beq.w	80074b0 <HAL_RCC_OscConfig+0x944>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072bc:	2b02      	cmp	r3, #2
 80072be:	f040 80c9 	bne.w	8007454 <HAL_RCC_OscConfig+0x8e8>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d010      	beq.n	80072ec <HAL_RCC_OscConfig+0x780>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d00c      	beq.n	80072ec <HAL_RCC_OscConfig+0x780>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d008      	beq.n	80072ec <HAL_RCC_OscConfig+0x780>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d004      	beq.n	80072ec <HAL_RCC_OscConfig+0x780>
 80072e2:	f44f 715c 	mov.w	r1, #880	; 0x370
 80072e6:	4830      	ldr	r0, [pc, #192]	; (80073a8 <HAL_RCC_OscConfig+0x83c>)
 80072e8:	f7fd fd19 	bl	8004d1e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <HAL_RCC_OscConfig+0x790>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f8:	2b08      	cmp	r3, #8
 80072fa:	d904      	bls.n	8007306 <HAL_RCC_OscConfig+0x79a>
 80072fc:	f240 3171 	movw	r1, #881	; 0x371
 8007300:	4829      	ldr	r0, [pc, #164]	; (80073a8 <HAL_RCC_OscConfig+0x83c>)
 8007302:	f7fd fd0c 	bl	8004d1e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730a:	2b07      	cmp	r3, #7
 800730c:	d903      	bls.n	8007316 <HAL_RCC_OscConfig+0x7aa>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007312:	2b56      	cmp	r3, #86	; 0x56
 8007314:	d904      	bls.n	8007320 <HAL_RCC_OscConfig+0x7b4>
 8007316:	f240 3172 	movw	r1, #882	; 0x372
 800731a:	4823      	ldr	r0, [pc, #140]	; (80073a8 <HAL_RCC_OscConfig+0x83c>)
 800731c:	f7fd fcff 	bl	8004d1e <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007324:	2b07      	cmp	r3, #7
 8007326:	d008      	beq.n	800733a <HAL_RCC_OscConfig+0x7ce>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732c:	2b11      	cmp	r3, #17
 800732e:	d004      	beq.n	800733a <HAL_RCC_OscConfig+0x7ce>
 8007330:	f44f 715d 	mov.w	r1, #884	; 0x374
 8007334:	481c      	ldr	r0, [pc, #112]	; (80073a8 <HAL_RCC_OscConfig+0x83c>)
 8007336:	f7fd fcf2 	bl	8004d1e <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733e:	2b02      	cmp	r3, #2
 8007340:	d010      	beq.n	8007364 <HAL_RCC_OscConfig+0x7f8>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007346:	2b04      	cmp	r3, #4
 8007348:	d00c      	beq.n	8007364 <HAL_RCC_OscConfig+0x7f8>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734e:	2b06      	cmp	r3, #6
 8007350:	d008      	beq.n	8007364 <HAL_RCC_OscConfig+0x7f8>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007356:	2b08      	cmp	r3, #8
 8007358:	d004      	beq.n	8007364 <HAL_RCC_OscConfig+0x7f8>
 800735a:	f240 3176 	movw	r1, #886	; 0x376
 800735e:	4812      	ldr	r0, [pc, #72]	; (80073a8 <HAL_RCC_OscConfig+0x83c>)
 8007360:	f7fd fcdd 	bl	8004d1e <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	2b02      	cmp	r3, #2
 800736a:	d010      	beq.n	800738e <HAL_RCC_OscConfig+0x822>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007370:	2b04      	cmp	r3, #4
 8007372:	d00c      	beq.n	800738e <HAL_RCC_OscConfig+0x822>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007378:	2b06      	cmp	r3, #6
 800737a:	d008      	beq.n	800738e <HAL_RCC_OscConfig+0x822>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	2b08      	cmp	r3, #8
 8007382:	d004      	beq.n	800738e <HAL_RCC_OscConfig+0x822>
 8007384:	f240 3177 	movw	r1, #887	; 0x377
 8007388:	4807      	ldr	r0, [pc, #28]	; (80073a8 <HAL_RCC_OscConfig+0x83c>)
 800738a:	f7fd fcc8 	bl	8004d1e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800738e:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a04      	ldr	r2, [pc, #16]	; (80073a4 <HAL_RCC_OscConfig+0x838>)
 8007394:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800739a:	f7fe ff33 	bl	8006204 <HAL_GetTick>
 800739e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073a0:	e00f      	b.n	80073c2 <HAL_RCC_OscConfig+0x856>
 80073a2:	bf00      	nop
 80073a4:	40021000 	.word	0x40021000
 80073a8:	0800ba2c 	.word	0x0800ba2c
 80073ac:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b0:	f7fe ff28 	bl	8006204 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0x856>
          {
            return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e0ba      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073c2:	4b5f      	ldr	r3, [pc, #380]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1f0      	bne.n	80073b0 <HAL_RCC_OscConfig+0x844>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073ce:	4b5c      	ldr	r3, [pc, #368]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	4b5c      	ldr	r3, [pc, #368]	; (8007544 <HAL_RCC_OscConfig+0x9d8>)
 80073d4:	4013      	ands	r3, r2
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80073de:	3a01      	subs	r2, #1
 80073e0:	0112      	lsls	r2, r2, #4
 80073e2:	4311      	orrs	r1, r2
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80073e8:	0212      	lsls	r2, r2, #8
 80073ea:	4311      	orrs	r1, r2
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80073f0:	0852      	lsrs	r2, r2, #1
 80073f2:	3a01      	subs	r2, #1
 80073f4:	0552      	lsls	r2, r2, #21
 80073f6:	4311      	orrs	r1, r2
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80073fc:	0852      	lsrs	r2, r2, #1
 80073fe:	3a01      	subs	r2, #1
 8007400:	0652      	lsls	r2, r2, #25
 8007402:	4311      	orrs	r1, r2
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007408:	0912      	lsrs	r2, r2, #4
 800740a:	0452      	lsls	r2, r2, #17
 800740c:	430a      	orrs	r2, r1
 800740e:	494c      	ldr	r1, [pc, #304]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 8007410:	4313      	orrs	r3, r2
 8007412:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007414:	4b4a      	ldr	r3, [pc, #296]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a49      	ldr	r2, [pc, #292]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 800741a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800741e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007420:	4b47      	ldr	r3, [pc, #284]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	4a46      	ldr	r2, [pc, #280]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 8007426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800742a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742c:	f7fe feea 	bl	8006204 <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007432:	e008      	b.n	8007446 <HAL_RCC_OscConfig+0x8da>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007434:	f7fe fee6 	bl	8006204 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b02      	cmp	r3, #2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x8da>
          {
            return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e078      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007446:	4b3e      	ldr	r3, [pc, #248]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0f0      	beq.n	8007434 <HAL_RCC_OscConfig+0x8c8>
 8007452:	e070      	b.n	8007536 <HAL_RCC_OscConfig+0x9ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007454:	4b3a      	ldr	r3, [pc, #232]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a39      	ldr	r2, [pc, #228]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 800745a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800745e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007460:	4b37      	ldr	r3, [pc, #220]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d105      	bne.n	8007478 <HAL_RCC_OscConfig+0x90c>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800746c:	4b34      	ldr	r3, [pc, #208]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	4a33      	ldr	r2, [pc, #204]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 8007472:	f023 0303 	bic.w	r3, r3, #3
 8007476:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007478:	4b31      	ldr	r3, [pc, #196]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	4a30      	ldr	r2, [pc, #192]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 800747e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007486:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007488:	f7fe febc 	bl	8006204 <HAL_GetTick>
 800748c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800748e:	e008      	b.n	80074a2 <HAL_RCC_OscConfig+0x936>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007490:	f7fe feb8 	bl	8006204 <HAL_GetTick>
 8007494:	4602      	mov	r2, r0
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	2b02      	cmp	r3, #2
 800749c:	d901      	bls.n	80074a2 <HAL_RCC_OscConfig+0x936>
          {
            return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e04a      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074a2:	4b27      	ldr	r3, [pc, #156]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1f0      	bne.n	8007490 <HAL_RCC_OscConfig+0x924>
 80074ae:	e042      	b.n	8007536 <HAL_RCC_OscConfig+0x9ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_RCC_OscConfig+0x950>
      {
        return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e03d      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80074bc:	4b20      	ldr	r3, [pc, #128]	; (8007540 <HAL_RCC_OscConfig+0x9d4>)
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f003 0203 	and.w	r2, r3, #3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d130      	bne.n	8007532 <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074da:	3b01      	subs	r3, #1
 80074dc:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074de:	429a      	cmp	r2, r3
 80074e0:	d127      	bne.n	8007532 <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ec:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d11f      	bne.n	8007532 <HAL_RCC_OscConfig+0x9c6>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074fc:	2a07      	cmp	r2, #7
 80074fe:	bf14      	ite	ne
 8007500:	2201      	movne	r2, #1
 8007502:	2200      	moveq	r2, #0
 8007504:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007506:	4293      	cmp	r3, r2
 8007508:	d113      	bne.n	8007532 <HAL_RCC_OscConfig+0x9c6>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007514:	085b      	lsrs	r3, r3, #1
 8007516:	3b01      	subs	r3, #1
 8007518:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800751a:	429a      	cmp	r2, r3
 800751c:	d109      	bne.n	8007532 <HAL_RCC_OscConfig+0x9c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007528:	085b      	lsrs	r3, r3, #1
 800752a:	3b01      	subs	r3, #1
 800752c:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800752e:	429a      	cmp	r2, r3
 8007530:	d001      	beq.n	8007536 <HAL_RCC_OscConfig+0x9ca>
        {
          return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e000      	b.n	8007538 <HAL_RCC_OscConfig+0x9cc>
        }
      }
    }
  }
  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3720      	adds	r7, #32
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	40021000 	.word	0x40021000
 8007544:	f99d808c 	.word	0xf99d808c

08007548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e168      	b.n	800782e <HAL_RCC_ClockConfig+0x2e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d003      	beq.n	800756c <HAL_RCC_ClockConfig+0x24>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b0f      	cmp	r3, #15
 800756a:	d904      	bls.n	8007576 <HAL_RCC_ClockConfig+0x2e>
 800756c:	f240 412e 	movw	r1, #1070	; 0x42e
 8007570:	4873      	ldr	r0, [pc, #460]	; (8007740 <HAL_RCC_ClockConfig+0x1f8>)
 8007572:	f7fd fbd4 	bl	8004d1e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d010      	beq.n	800759e <HAL_RCC_ClockConfig+0x56>
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d00d      	beq.n	800759e <HAL_RCC_ClockConfig+0x56>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b02      	cmp	r3, #2
 8007586:	d00a      	beq.n	800759e <HAL_RCC_ClockConfig+0x56>
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2b03      	cmp	r3, #3
 800758c:	d007      	beq.n	800759e <HAL_RCC_ClockConfig+0x56>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b04      	cmp	r3, #4
 8007592:	d004      	beq.n	800759e <HAL_RCC_ClockConfig+0x56>
 8007594:	f240 412f 	movw	r1, #1071	; 0x42f
 8007598:	4869      	ldr	r0, [pc, #420]	; (8007740 <HAL_RCC_ClockConfig+0x1f8>)
 800759a:	f7fd fbc0 	bl	8004d1e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800759e:	4b69      	ldr	r3, [pc, #420]	; (8007744 <HAL_RCC_ClockConfig+0x1fc>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d910      	bls.n	80075ce <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ac:	4b65      	ldr	r3, [pc, #404]	; (8007744 <HAL_RCC_ClockConfig+0x1fc>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f023 0207 	bic.w	r2, r3, #7
 80075b4:	4963      	ldr	r1, [pc, #396]	; (8007744 <HAL_RCC_ClockConfig+0x1fc>)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075bc:	4b61      	ldr	r3, [pc, #388]	; (8007744 <HAL_RCC_ClockConfig+0x1fc>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0307 	and.w	r3, r3, #7
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d001      	beq.n	80075ce <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e12f      	b.n	800782e <HAL_RCC_ClockConfig+0x2e6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d061      	beq.n	800769e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d010      	beq.n	8007604 <HAL_RCC_ClockConfig+0xbc>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d00c      	beq.n	8007604 <HAL_RCC_ClockConfig+0xbc>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d008      	beq.n	8007604 <HAL_RCC_ClockConfig+0xbc>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d004      	beq.n	8007604 <HAL_RCC_ClockConfig+0xbc>
 80075fa:	f240 4146 	movw	r1, #1094	; 0x446
 80075fe:	4850      	ldr	r0, [pc, #320]	; (8007740 <HAL_RCC_ClockConfig+0x1f8>)
 8007600:	f7fd fb8d 	bl	8004d1e <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	2b03      	cmp	r3, #3
 800760a:	d107      	bne.n	800761c <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800760c:	4b4e      	ldr	r3, [pc, #312]	; (8007748 <HAL_RCC_ClockConfig+0x200>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d121      	bne.n	800765c <HAL_RCC_ClockConfig+0x114>
      {
        return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e108      	b.n	800782e <HAL_RCC_ClockConfig+0x2e6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2b02      	cmp	r3, #2
 8007622:	d107      	bne.n	8007634 <HAL_RCC_ClockConfig+0xec>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007624:	4b48      	ldr	r3, [pc, #288]	; (8007748 <HAL_RCC_ClockConfig+0x200>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d115      	bne.n	800765c <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e0fc      	b.n	800782e <HAL_RCC_ClockConfig+0x2e6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d107      	bne.n	800764c <HAL_RCC_ClockConfig+0x104>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800763c:	4b42      	ldr	r3, [pc, #264]	; (8007748 <HAL_RCC_ClockConfig+0x200>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d109      	bne.n	800765c <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e0f0      	b.n	800782e <HAL_RCC_ClockConfig+0x2e6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800764c:	4b3e      	ldr	r3, [pc, #248]	; (8007748 <HAL_RCC_ClockConfig+0x200>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e0e8      	b.n	800782e <HAL_RCC_ClockConfig+0x2e6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800765c:	4b3a      	ldr	r3, [pc, #232]	; (8007748 <HAL_RCC_ClockConfig+0x200>)
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f023 0203 	bic.w	r2, r3, #3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	4937      	ldr	r1, [pc, #220]	; (8007748 <HAL_RCC_ClockConfig+0x200>)
 800766a:	4313      	orrs	r3, r2
 800766c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800766e:	f7fe fdc9 	bl	8006204 <HAL_GetTick>
 8007672:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007674:	e00a      	b.n	800768c <HAL_RCC_ClockConfig+0x144>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007676:	f7fe fdc5 	bl	8006204 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	f241 3288 	movw	r2, #5000	; 0x1388
 8007684:	4293      	cmp	r3, r2
 8007686:	d901      	bls.n	800768c <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e0d0      	b.n	800782e <HAL_RCC_ClockConfig+0x2e6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800768c:	4b2e      	ldr	r3, [pc, #184]	; (8007748 <HAL_RCC_ClockConfig+0x200>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f003 020c 	and.w	r2, r3, #12
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	429a      	cmp	r2, r3
 800769c:	d1eb      	bne.n	8007676 <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d031      	beq.n	800770e <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d024      	beq.n	80076fc <HAL_RCC_ClockConfig+0x1b4>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	2b80      	cmp	r3, #128	; 0x80
 80076b8:	d020      	beq.n	80076fc <HAL_RCC_ClockConfig+0x1b4>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	2b90      	cmp	r3, #144	; 0x90
 80076c0:	d01c      	beq.n	80076fc <HAL_RCC_ClockConfig+0x1b4>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	2ba0      	cmp	r3, #160	; 0xa0
 80076c8:	d018      	beq.n	80076fc <HAL_RCC_ClockConfig+0x1b4>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	2bb0      	cmp	r3, #176	; 0xb0
 80076d0:	d014      	beq.n	80076fc <HAL_RCC_ClockConfig+0x1b4>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2bc0      	cmp	r3, #192	; 0xc0
 80076d8:	d010      	beq.n	80076fc <HAL_RCC_ClockConfig+0x1b4>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	2bd0      	cmp	r3, #208	; 0xd0
 80076e0:	d00c      	beq.n	80076fc <HAL_RCC_ClockConfig+0x1b4>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	2be0      	cmp	r3, #224	; 0xe0
 80076e8:	d008      	beq.n	80076fc <HAL_RCC_ClockConfig+0x1b4>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	2bf0      	cmp	r3, #240	; 0xf0
 80076f0:	d004      	beq.n	80076fc <HAL_RCC_ClockConfig+0x1b4>
 80076f2:	f240 41a2 	movw	r1, #1186	; 0x4a2
 80076f6:	4812      	ldr	r0, [pc, #72]	; (8007740 <HAL_RCC_ClockConfig+0x1f8>)
 80076f8:	f7fd fb11 	bl	8004d1e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076fc:	4b12      	ldr	r3, [pc, #72]	; (8007748 <HAL_RCC_ClockConfig+0x200>)
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	490f      	ldr	r1, [pc, #60]	; (8007748 <HAL_RCC_ClockConfig+0x200>)
 800770a:	4313      	orrs	r3, r2
 800770c:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800770e:	4b0d      	ldr	r3, [pc, #52]	; (8007744 <HAL_RCC_ClockConfig+0x1fc>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	429a      	cmp	r2, r3
 800771a:	d217      	bcs.n	800774c <HAL_RCC_ClockConfig+0x204>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800771c:	4b09      	ldr	r3, [pc, #36]	; (8007744 <HAL_RCC_ClockConfig+0x1fc>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f023 0207 	bic.w	r2, r3, #7
 8007724:	4907      	ldr	r1, [pc, #28]	; (8007744 <HAL_RCC_ClockConfig+0x1fc>)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	4313      	orrs	r3, r2
 800772a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800772c:	4b05      	ldr	r3, [pc, #20]	; (8007744 <HAL_RCC_ClockConfig+0x1fc>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d008      	beq.n	800774c <HAL_RCC_ClockConfig+0x204>
    {
      return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e077      	b.n	800782e <HAL_RCC_ClockConfig+0x2e6>
 800773e:	bf00      	nop
 8007740:	0800ba2c 	.word	0x0800ba2c
 8007744:	40022000 	.word	0x40022000
 8007748:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b00      	cmp	r3, #0
 8007756:	d025      	beq.n	80077a4 <HAL_RCC_ClockConfig+0x25c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d018      	beq.n	8007792 <HAL_RCC_ClockConfig+0x24a>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007768:	d013      	beq.n	8007792 <HAL_RCC_ClockConfig+0x24a>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007772:	d00e      	beq.n	8007792 <HAL_RCC_ClockConfig+0x24a>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800777c:	d009      	beq.n	8007792 <HAL_RCC_ClockConfig+0x24a>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007786:	d004      	beq.n	8007792 <HAL_RCC_ClockConfig+0x24a>
 8007788:	f240 41c1 	movw	r1, #1217	; 0x4c1
 800778c:	482a      	ldr	r0, [pc, #168]	; (8007838 <HAL_RCC_ClockConfig+0x2f0>)
 800778e:	f7fd fac6 	bl	8004d1e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007792:	4b2a      	ldr	r3, [pc, #168]	; (800783c <HAL_RCC_ClockConfig+0x2f4>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	4927      	ldr	r1, [pc, #156]	; (800783c <HAL_RCC_ClockConfig+0x2f4>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0308 	and.w	r3, r3, #8
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d026      	beq.n	80077fe <HAL_RCC_ClockConfig+0x2b6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d018      	beq.n	80077ea <HAL_RCC_ClockConfig+0x2a2>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c0:	d013      	beq.n	80077ea <HAL_RCC_ClockConfig+0x2a2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80077ca:	d00e      	beq.n	80077ea <HAL_RCC_ClockConfig+0x2a2>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80077d4:	d009      	beq.n	80077ea <HAL_RCC_ClockConfig+0x2a2>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077de:	d004      	beq.n	80077ea <HAL_RCC_ClockConfig+0x2a2>
 80077e0:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 80077e4:	4814      	ldr	r0, [pc, #80]	; (8007838 <HAL_RCC_ClockConfig+0x2f0>)
 80077e6:	f7fd fa9a 	bl	8004d1e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077ea:	4b14      	ldr	r3, [pc, #80]	; (800783c <HAL_RCC_ClockConfig+0x2f4>)
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	4910      	ldr	r1, [pc, #64]	; (800783c <HAL_RCC_ClockConfig+0x2f4>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077fe:	f000 f825 	bl	800784c <HAL_RCC_GetSysClockFreq>
 8007802:	4601      	mov	r1, r0
 8007804:	4b0d      	ldr	r3, [pc, #52]	; (800783c <HAL_RCC_ClockConfig+0x2f4>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	091b      	lsrs	r3, r3, #4
 800780a:	f003 030f 	and.w	r3, r3, #15
 800780e:	4a0c      	ldr	r2, [pc, #48]	; (8007840 <HAL_RCC_ClockConfig+0x2f8>)
 8007810:	5cd3      	ldrb	r3, [r2, r3]
 8007812:	f003 031f 	and.w	r3, r3, #31
 8007816:	fa21 f303 	lsr.w	r3, r1, r3
 800781a:	4a0a      	ldr	r2, [pc, #40]	; (8007844 <HAL_RCC_ClockConfig+0x2fc>)
 800781c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800781e:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <HAL_RCC_ClockConfig+0x300>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fca2 	bl	800616c <HAL_InitTick>
 8007828:	4603      	mov	r3, r0
 800782a:	72fb      	strb	r3, [r7, #11]

  return status;
 800782c:	7afb      	ldrb	r3, [r7, #11]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	0800ba2c 	.word	0x0800ba2c
 800783c:	40021000 	.word	0x40021000
 8007840:	0800cd54 	.word	0x0800cd54
 8007844:	20000048 	.word	0x20000048
 8007848:	2000004c 	.word	0x2000004c

0800784c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800784c:	b480      	push	{r7}
 800784e:	b089      	sub	sp, #36	; 0x24
 8007850:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	2300      	movs	r3, #0
 8007858:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800785a:	4b3d      	ldr	r3, [pc, #244]	; (8007950 <HAL_RCC_GetSysClockFreq+0x104>)
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f003 030c 	and.w	r3, r3, #12
 8007862:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007864:	4b3a      	ldr	r3, [pc, #232]	; (8007950 <HAL_RCC_GetSysClockFreq+0x104>)
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f003 0303 	and.w	r3, r3, #3
 800786c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d005      	beq.n	8007880 <HAL_RCC_GetSysClockFreq+0x34>
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	2b0c      	cmp	r3, #12
 8007878:	d121      	bne.n	80078be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d11e      	bne.n	80078be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007880:	4b33      	ldr	r3, [pc, #204]	; (8007950 <HAL_RCC_GetSysClockFreq+0x104>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0308 	and.w	r3, r3, #8
 8007888:	2b00      	cmp	r3, #0
 800788a:	d107      	bne.n	800789c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800788c:	4b30      	ldr	r3, [pc, #192]	; (8007950 <HAL_RCC_GetSysClockFreq+0x104>)
 800788e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007892:	0a1b      	lsrs	r3, r3, #8
 8007894:	f003 030f 	and.w	r3, r3, #15
 8007898:	61fb      	str	r3, [r7, #28]
 800789a:	e005      	b.n	80078a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800789c:	4b2c      	ldr	r3, [pc, #176]	; (8007950 <HAL_RCC_GetSysClockFreq+0x104>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	091b      	lsrs	r3, r3, #4
 80078a2:	f003 030f 	and.w	r3, r3, #15
 80078a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80078a8:	4a2a      	ldr	r2, [pc, #168]	; (8007954 <HAL_RCC_GetSysClockFreq+0x108>)
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10d      	bne.n	80078d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078bc:	e00a      	b.n	80078d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	2b04      	cmp	r3, #4
 80078c2:	d102      	bne.n	80078ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80078c4:	4b24      	ldr	r3, [pc, #144]	; (8007958 <HAL_RCC_GetSysClockFreq+0x10c>)
 80078c6:	61bb      	str	r3, [r7, #24]
 80078c8:	e004      	b.n	80078d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	2b08      	cmp	r3, #8
 80078ce:	d101      	bne.n	80078d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80078d0:	4b22      	ldr	r3, [pc, #136]	; (800795c <HAL_RCC_GetSysClockFreq+0x110>)
 80078d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2b0c      	cmp	r3, #12
 80078d8:	d133      	bne.n	8007942 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078da:	4b1d      	ldr	r3, [pc, #116]	; (8007950 <HAL_RCC_GetSysClockFreq+0x104>)
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d002      	beq.n	80078f0 <HAL_RCC_GetSysClockFreq+0xa4>
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d003      	beq.n	80078f6 <HAL_RCC_GetSysClockFreq+0xaa>
 80078ee:	e005      	b.n	80078fc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80078f0:	4b19      	ldr	r3, [pc, #100]	; (8007958 <HAL_RCC_GetSysClockFreq+0x10c>)
 80078f2:	617b      	str	r3, [r7, #20]
      break;
 80078f4:	e005      	b.n	8007902 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80078f6:	4b19      	ldr	r3, [pc, #100]	; (800795c <HAL_RCC_GetSysClockFreq+0x110>)
 80078f8:	617b      	str	r3, [r7, #20]
      break;
 80078fa:	e002      	b.n	8007902 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	617b      	str	r3, [r7, #20]
      break;
 8007900:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007902:	4b13      	ldr	r3, [pc, #76]	; (8007950 <HAL_RCC_GetSysClockFreq+0x104>)
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	091b      	lsrs	r3, r3, #4
 8007908:	f003 0307 	and.w	r3, r3, #7
 800790c:	3301      	adds	r3, #1
 800790e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007910:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <HAL_RCC_GetSysClockFreq+0x104>)
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	0a1b      	lsrs	r3, r3, #8
 8007916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	fb02 f203 	mul.w	r2, r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	fbb2 f3f3 	udiv	r3, r2, r3
 8007926:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007928:	4b09      	ldr	r3, [pc, #36]	; (8007950 <HAL_RCC_GetSysClockFreq+0x104>)
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	0e5b      	lsrs	r3, r3, #25
 800792e:	f003 0303 	and.w	r3, r3, #3
 8007932:	3301      	adds	r3, #1
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007940:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007942:	69bb      	ldr	r3, [r7, #24]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3724      	adds	r7, #36	; 0x24
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	40021000 	.word	0x40021000
 8007954:	0800cd6c 	.word	0x0800cd6c
 8007958:	00f42400 	.word	0x00f42400
 800795c:	007a1200 	.word	0x007a1200

08007960 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007960:	b480      	push	{r7}
 8007962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007964:	4b03      	ldr	r3, [pc, #12]	; (8007974 <HAL_RCC_GetHCLKFreq+0x14>)
 8007966:	681b      	ldr	r3, [r3, #0]
}
 8007968:	4618      	mov	r0, r3
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	20000048 	.word	0x20000048

08007978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800797c:	f7ff fff0 	bl	8007960 <HAL_RCC_GetHCLKFreq>
 8007980:	4601      	mov	r1, r0
 8007982:	4b06      	ldr	r3, [pc, #24]	; (800799c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	0a1b      	lsrs	r3, r3, #8
 8007988:	f003 0307 	and.w	r3, r3, #7
 800798c:	4a04      	ldr	r2, [pc, #16]	; (80079a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800798e:	5cd3      	ldrb	r3, [r2, r3]
 8007990:	f003 031f 	and.w	r3, r3, #31
 8007994:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007998:	4618      	mov	r0, r3
 800799a:	bd80      	pop	{r7, pc}
 800799c:	40021000 	.word	0x40021000
 80079a0:	0800cd64 	.word	0x0800cd64

080079a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80079a8:	f7ff ffda 	bl	8007960 <HAL_RCC_GetHCLKFreq>
 80079ac:	4601      	mov	r1, r0
 80079ae:	4b06      	ldr	r3, [pc, #24]	; (80079c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	0adb      	lsrs	r3, r3, #11
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	4a04      	ldr	r2, [pc, #16]	; (80079cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80079ba:	5cd3      	ldrb	r3, [r2, r3]
 80079bc:	f003 031f 	and.w	r3, r3, #31
 80079c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	40021000 	.word	0x40021000
 80079cc:	0800cd64 	.word	0x0800cd64

080079d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80079d8:	2300      	movs	r3, #0
 80079da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80079dc:	4b2a      	ldr	r3, [pc, #168]	; (8007a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d003      	beq.n	80079f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80079e8:	f7ff f850 	bl	8006a8c <HAL_PWREx_GetVoltageRange>
 80079ec:	6178      	str	r0, [r7, #20]
 80079ee:	e014      	b.n	8007a1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80079f0:	4b25      	ldr	r3, [pc, #148]	; (8007a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f4:	4a24      	ldr	r2, [pc, #144]	; (8007a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079fa:	6593      	str	r3, [r2, #88]	; 0x58
 80079fc:	4b22      	ldr	r3, [pc, #136]	; (8007a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a08:	f7ff f840 	bl	8006a8c <HAL_PWREx_GetVoltageRange>
 8007a0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a0e:	4b1e      	ldr	r3, [pc, #120]	; (8007a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a12:	4a1d      	ldr	r2, [pc, #116]	; (8007a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a20:	d10b      	bne.n	8007a3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b80      	cmp	r3, #128	; 0x80
 8007a26:	d919      	bls.n	8007a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2ba0      	cmp	r3, #160	; 0xa0
 8007a2c:	d902      	bls.n	8007a34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a2e:	2302      	movs	r3, #2
 8007a30:	613b      	str	r3, [r7, #16]
 8007a32:	e013      	b.n	8007a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a34:	2301      	movs	r3, #1
 8007a36:	613b      	str	r3, [r7, #16]
 8007a38:	e010      	b.n	8007a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b80      	cmp	r3, #128	; 0x80
 8007a3e:	d902      	bls.n	8007a46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007a40:	2303      	movs	r3, #3
 8007a42:	613b      	str	r3, [r7, #16]
 8007a44:	e00a      	b.n	8007a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b80      	cmp	r3, #128	; 0x80
 8007a4a:	d102      	bne.n	8007a52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	613b      	str	r3, [r7, #16]
 8007a50:	e004      	b.n	8007a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b70      	cmp	r3, #112	; 0x70
 8007a56:	d101      	bne.n	8007a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a58:	2301      	movs	r3, #1
 8007a5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a5c:	4b0b      	ldr	r3, [pc, #44]	; (8007a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f023 0207 	bic.w	r2, r3, #7
 8007a64:	4909      	ldr	r1, [pc, #36]	; (8007a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007a6c:	4b07      	ldr	r3, [pc, #28]	; (8007a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0307 	and.w	r3, r3, #7
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d001      	beq.n	8007a7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e000      	b.n	8007a80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	40021000 	.word	0x40021000
 8007a8c:	40022000 	.word	0x40022000

08007a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a98:	2300      	movs	r3, #0
 8007a9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d175      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d16f      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0304 	and.w	r3, r3, #4
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d169      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0308 	and.w	r3, r3, #8
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d163      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0310 	and.w	r3, r3, #16
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d15d      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0320 	and.w	r3, r3, #32
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d157      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d151      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d14b      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d145      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d13f      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d139      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d133      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d12d      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d127      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d121      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d11b      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d115      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10f      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d109      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d103      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b90:	21cb      	movs	r1, #203	; 0xcb
 8007b92:	48ab      	ldr	r0, [pc, #684]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8007b94:	f7fd f8c3 	bl	8004d1e <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d056      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d012      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bb4:	d00d      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bbe:	d008      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007bc8:	d003      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007bca:	21d3      	movs	r1, #211	; 0xd3
 8007bcc:	489c      	ldr	r0, [pc, #624]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8007bce:	f7fd f8a6 	bl	8004d1e <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bda:	d01c      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007bdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007be0:	d802      	bhi.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00e      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8007be6:	e01f      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007be8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bec:	d003      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007bee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007bf2:	d01c      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8007bf4:	e018      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007bf6:	4b93      	ldr	r3, [pc, #588]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	4a92      	ldr	r2, [pc, #584]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c00:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c02:	e015      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1a0>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3304      	adds	r3, #4
 8007c08:	2100      	movs	r1, #0
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fc64 	bl	80084d8 <RCCEx_PLLSAI1_Config>
 8007c10:	4603      	mov	r3, r0
 8007c12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c14:	e00c      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1a0>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3320      	adds	r3, #32
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fdd7 	bl	80087d0 <RCCEx_PLLSAI2_Config>
 8007c22:	4603      	mov	r3, r0
 8007c24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c26:	e003      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	74fb      	strb	r3, [r7, #19]
      break;
 8007c2c:	e000      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      break;
 8007c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c30:	7cfb      	ldrb	r3, [r7, #19]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10b      	bne.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c36:	4b83      	ldr	r3, [pc, #524]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c44:	497f      	ldr	r1, [pc, #508]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007c4c:	e001      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c4e:	7cfb      	ldrb	r3, [r7, #19]
 8007c50:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d057      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d013      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c6e:	d00e      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c78:	d009      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c82:	d004      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007c84:	f240 1111 	movw	r1, #273	; 0x111
 8007c88:	486d      	ldr	r0, [pc, #436]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8007c8a:	f7fd f848 	bl	8004d1e <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c96:	d01c      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c9c:	d802      	bhi.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00e      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007ca2:	e01f      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007ca4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ca8:	d003      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8007caa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007cae:	d01c      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007cb0:	e018      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007cb2:	4b64      	ldr	r3, [pc, #400]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	4a63      	ldr	r2, [pc, #396]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cbc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007cbe:	e015      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x25c>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 fc06 	bl	80084d8 <RCCEx_PLLSAI1_Config>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007cd0:	e00c      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x25c>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3320      	adds	r3, #32
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 fd79 	bl	80087d0 <RCCEx_PLLSAI2_Config>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007ce2:	e003      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x25c>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	74fb      	strb	r3, [r7, #19]
      break;
 8007ce8:	e000      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x25c>
      break;
 8007cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cec:	7cfb      	ldrb	r3, [r7, #19]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10b      	bne.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007cf2:	4b54      	ldr	r3, [pc, #336]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d00:	4950      	ldr	r1, [pc, #320]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007d08:	e001      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d0a:	7cfb      	ldrb	r3, [r7, #19]
 8007d0c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 80bf 	beq.w	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d016      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d34:	d010      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d40:	d00a      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d4c:	d004      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8007d4e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007d52:	483b      	ldr	r0, [pc, #236]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8007d54:	f7fc ffe3 	bl	8004d1e <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007d58:	4b3a      	ldr	r3, [pc, #232]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007d64:	2301      	movs	r3, #1
 8007d66:	e000      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00d      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d6e:	4b35      	ldr	r3, [pc, #212]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d72:	4a34      	ldr	r2, [pc, #208]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d78:	6593      	str	r3, [r2, #88]	; 0x58
 8007d7a:	4b32      	ldr	r3, [pc, #200]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d82:	60bb      	str	r3, [r7, #8]
 8007d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d86:	2301      	movs	r3, #1
 8007d88:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d8a:	4b2f      	ldr	r3, [pc, #188]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a2e      	ldr	r2, [pc, #184]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8007d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d96:	f7fe fa35 	bl	8006204 <HAL_GetTick>
 8007d9a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007d9c:	e009      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x322>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d9e:	f7fe fa31 	bl	8006204 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d902      	bls.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x322>
      {
        ret = HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	74fb      	strb	r3, [r7, #19]
        break;
 8007db0:	e005      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x32e>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007db2:	4b25      	ldr	r3, [pc, #148]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0ef      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      }
    }

    if(ret == HAL_OK)
 8007dbe:	7cfb      	ldrb	r3, [r7, #19]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d15f      	bne.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007dc4:	4b1f      	ldr	r3, [pc, #124]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dce:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d01f      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d019      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x386>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007de2:	4b18      	ldr	r3, [pc, #96]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007dee:	4b15      	ldr	r3, [pc, #84]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df4:	4a13      	ldr	r2, [pc, #76]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007dfe:	4b11      	ldr	r3, [pc, #68]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e04:	4a0f      	ldr	r2, [pc, #60]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007e0e:	4a0d      	ldr	r2, [pc, #52]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01c      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e20:	f7fe f9f0 	bl	8006204 <HAL_GetTick>
 8007e24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e26:	e011      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e28:	f7fe f9ec 	bl	8006204 <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d908      	bls.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
          {
            ret = HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	74fb      	strb	r3, [r7, #19]
            break;
 8007e3e:	e00c      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8007e40:	0800ba64 	.word	0x0800ba64
 8007e44:	40021000 	.word	0x40021000
 8007e48:	40007000 	.word	0x40007000
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e4c:	4b0c      	ldr	r3, [pc, #48]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8007e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0e6      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x398>
          }
        }
      }

      if(ret == HAL_OK)
 8007e5a:	7cfb      	ldrb	r3, [r7, #19]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10c      	bne.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e60:	4b07      	ldr	r3, [pc, #28]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8007e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e70:	4903      	ldr	r1, [pc, #12]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007e78:	e006      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e7a:	7cfb      	ldrb	r3, [r7, #19]
 8007e7c:	74bb      	strb	r3, [r7, #18]
 8007e7e:	e003      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007e80:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e84:	7cfb      	ldrb	r3, [r7, #19]
 8007e86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e88:	7c7b      	ldrb	r3, [r7, #17]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d105      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e8e:	4ba1      	ldr	r3, [pc, #644]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e92:	4aa0      	ldr	r2, [pc, #640]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d01f      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d010      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d00c      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d008      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d004      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007ec6:	f240 119b 	movw	r1, #411	; 0x19b
 8007eca:	4893      	ldr	r0, [pc, #588]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8007ecc:	f7fc ff27 	bl	8004d1e <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ed0:	4b90      	ldr	r3, [pc, #576]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed6:	f023 0203 	bic.w	r2, r3, #3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ede:	498d      	ldr	r1, [pc, #564]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0302 	and.w	r3, r3, #2
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d01f      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d010      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	d00c      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f06:	2b0c      	cmp	r3, #12
 8007f08:	d008      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0e:	2b08      	cmp	r3, #8
 8007f10:	d004      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007f12:	f240 11a5 	movw	r1, #421	; 0x1a5
 8007f16:	4880      	ldr	r0, [pc, #512]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8007f18:	f7fc ff01 	bl	8004d1e <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f1c:	4b7d      	ldr	r3, [pc, #500]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f22:	f023 020c 	bic.w	r2, r3, #12
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2a:	497a      	ldr	r1, [pc, #488]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0304 	and.w	r3, r3, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d01f      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d010      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	2b10      	cmp	r3, #16
 8007f4c:	d00c      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f52:	2b30      	cmp	r3, #48	; 0x30
 8007f54:	d008      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5a:	2b20      	cmp	r3, #32
 8007f5c:	d004      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007f5e:	f240 11b1 	movw	r1, #433	; 0x1b1
 8007f62:	486d      	ldr	r0, [pc, #436]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8007f64:	f7fc fedb 	bl	8004d1e <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f68:	4b6a      	ldr	r3, [pc, #424]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f76:	4967      	ldr	r1, [pc, #412]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0308 	and.w	r3, r3, #8
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d01f      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x53a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d010      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f96:	2b40      	cmp	r3, #64	; 0x40
 8007f98:	d00c      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f9e:	2bc0      	cmp	r3, #192	; 0xc0
 8007fa0:	d008      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa6:	2b80      	cmp	r3, #128	; 0x80
 8007fa8:	d004      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007faa:	f240 11bf 	movw	r1, #447	; 0x1bf
 8007fae:	485a      	ldr	r0, [pc, #360]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8007fb0:	f7fc feb5 	bl	8004d1e <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007fb4:	4b57      	ldr	r3, [pc, #348]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc2:	4954      	ldr	r1, [pc, #336]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0310 	and.w	r3, r3, #16
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d022      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x58c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d013      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fe6:	d00e      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ff0:	d009      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ffa:	d004      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8007ffc:	f240 11cd 	movw	r1, #461	; 0x1cd
 8008000:	4845      	ldr	r0, [pc, #276]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8008002:	f7fc fe8c 	bl	8004d1e <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008006:	4b43      	ldr	r3, [pc, #268]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8008008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008014:	493f      	ldr	r1, [pc, #252]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8008016:	4313      	orrs	r3, r2
 8008018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0320 	and.w	r3, r3, #32
 8008024:	2b00      	cmp	r3, #0
 8008026:	d022      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x5de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802c:	2b00      	cmp	r3, #0
 800802e:	d013      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008038:	d00e      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008042:	d009      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800804c:	d004      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800804e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008052:	4831      	ldr	r0, [pc, #196]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 8008054:	f7fc fe63 	bl	8004d1e <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008058:	4b2e      	ldr	r3, [pc, #184]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 800805a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008066:	492b      	ldr	r1, [pc, #172]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 8008068:	4313      	orrs	r3, r2
 800806a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008076:	2b00      	cmp	r3, #0
 8008078:	d022      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x630>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800807e:	2b00      	cmp	r3, #0
 8008080:	d013      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008086:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800808a:	d00e      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x61a>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008090:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008094:	d009      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800809a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800809e:	d004      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x61a>
 80080a0:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80080a4:	481c      	ldr	r0, [pc, #112]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 80080a6:	f7fc fe3a 	bl	8004d1e <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080aa:	4b1a      	ldr	r3, [pc, #104]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 80080ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b8:	4916      	ldr	r1, [pc, #88]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d027      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d013      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080dc:	d00e      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080e6:	d009      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080f0:	d004      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80080f2:	f240 11e9 	movw	r1, #489	; 0x1e9
 80080f6:	4808      	ldr	r0, [pc, #32]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x688>)
 80080f8:	f7fc fe11 	bl	8004d1e <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80080fc:	4b05      	ldr	r3, [pc, #20]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 80080fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008102:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800810a:	4902      	ldr	r1, [pc, #8]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x684>)
 800810c:	4313      	orrs	r3, r2
 800810e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008112:	e003      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8008114:	40021000 	.word	0x40021000
 8008118:	0800ba64 	.word	0x0800ba64
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01d      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00e      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008138:	d009      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x6be>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800813e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008142:	d004      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8008144:	f240 11f1 	movw	r1, #497	; 0x1f1
 8008148:	488c      	ldr	r0, [pc, #560]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800814a:	f7fc fde8 	bl	8004d1e <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800814e:	4b8c      	ldr	r3, [pc, #560]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008154:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800815c:	4988      	ldr	r1, [pc, #544]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800815e:	4313      	orrs	r3, r2
 8008160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800816c:	2b00      	cmp	r3, #0
 800816e:	d01d      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x71c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00e      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x706>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800817c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008180:	d009      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x706>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800818a:	d004      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x706>
 800818c:	f240 11fd 	movw	r1, #509	; 0x1fd
 8008190:	487a      	ldr	r0, [pc, #488]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008192:	f7fc fdc4 	bl	8004d1e <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008196:	4b7a      	ldr	r3, [pc, #488]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800819c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a4:	4976      	ldr	r1, [pc, #472]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d01d      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x764>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00e      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081c8:	d009      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081d2:	d004      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80081d4:	f240 2109 	movw	r1, #521	; 0x209
 80081d8:	4868      	ldr	r0, [pc, #416]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80081da:	f7fc fda0 	bl	8004d1e <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081de:	4b68      	ldr	r3, [pc, #416]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80081e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ec:	4964      	ldr	r1, [pc, #400]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d040      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008204:	2b00      	cmp	r3, #0
 8008206:	d013      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800820c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008210:	d00e      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800821a:	d009      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008220:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008224:	d004      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 8008226:	f240 2122 	movw	r1, #546	; 0x222
 800822a:	4854      	ldr	r0, [pc, #336]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800822c:	f7fc fd77 	bl	8004d1e <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008230:	4b53      	ldr	r3, [pc, #332]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008236:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800823e:	4950      	ldr	r1, [pc, #320]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008240:	4313      	orrs	r3, r2
 8008242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800824a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800824e:	d106      	bne.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008250:	4b4b      	ldr	r3, [pc, #300]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	4a4a      	ldr	r2, [pc, #296]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800825a:	60d3      	str	r3, [r2, #12]
 800825c:	e011      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008262:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008266:	d10c      	bne.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	3304      	adds	r3, #4
 800826c:	2101      	movs	r1, #1
 800826e:	4618      	mov	r0, r3
 8008270:	f000 f932 	bl	80084d8 <RCCEx_PLLSAI1_Config>
 8008274:	4603      	mov	r3, r0
 8008276:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008278:	7cfb      	ldrb	r3, [r7, #19]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
        {
          /* set overall return value */
          status = ret;
 800827e:	7cfb      	ldrb	r3, [r7, #19]
 8008280:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d040      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x880>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008292:	2b00      	cmp	r3, #0
 8008294:	d013      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800829e:	d00e      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082a8:	d009      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80082b2:	d004      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80082b4:	f240 2143 	movw	r1, #579	; 0x243
 80082b8:	4830      	ldr	r0, [pc, #192]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80082ba:	f7fc fd30 	bl	8004d1e <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80082be:	4b30      	ldr	r3, [pc, #192]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80082c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082cc:	492c      	ldr	r1, [pc, #176]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082dc:	d106      	bne.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082de:	4b28      	ldr	r3, [pc, #160]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	4a27      	ldr	r2, [pc, #156]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80082e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082e8:	60d3      	str	r3, [r2, #12]
 80082ea:	e011      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x880>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082f4:	d10c      	bne.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x880>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3304      	adds	r3, #4
 80082fa:	2101      	movs	r1, #1
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 f8eb 	bl	80084d8 <RCCEx_PLLSAI1_Config>
 8008302:	4603      	mov	r3, r0
 8008304:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008306:	7cfb      	ldrb	r3, [r7, #19]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x880>
      {
        /* set overall return value */
        status = ret;
 800830c:	7cfb      	ldrb	r3, [r7, #19]
 800830e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008318:	2b00      	cmp	r3, #0
 800831a:	d045      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x918>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008320:	2b00      	cmp	r3, #0
 8008322:	d013      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800832c:	d00e      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008336:	d009      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800833c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008340:	d004      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008342:	f44f 711a 	mov.w	r1, #616	; 0x268
 8008346:	480d      	ldr	r0, [pc, #52]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008348:	f7fc fce9 	bl	8004d1e <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800834c:	4b0c      	ldr	r3, [pc, #48]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800834e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008352:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800835a:	4909      	ldr	r1, [pc, #36]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800835c:	4313      	orrs	r3, r2
 800835e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800836a:	d10b      	bne.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800836c:	4b04      	ldr	r3, [pc, #16]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	4a03      	ldr	r2, [pc, #12]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008376:	60d3      	str	r3, [r2, #12]
 8008378:	e016      	b.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x918>
 800837a:	bf00      	nop
 800837c:	0800ba64 	.word	0x0800ba64
 8008380:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800838c:	d10c      	bne.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x918>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	3304      	adds	r3, #4
 8008392:	2101      	movs	r1, #1
 8008394:	4618      	mov	r0, r3
 8008396:	f000 f89f 	bl	80084d8 <RCCEx_PLLSAI1_Config>
 800839a:	4603      	mov	r3, r0
 800839c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800839e:	7cfb      	ldrb	r3, [r7, #19]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x918>
      {
        /* set overall return value */
        status = ret;
 80083a4:	7cfb      	ldrb	r3, [r7, #19]
 80083a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d047      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d013      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x954>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083c4:	d00e      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x954>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ce:	d009      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x954>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083d8:	d004      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x954>
 80083da:	f44f 7122 	mov.w	r1, #648	; 0x288
 80083de:	483c      	ldr	r0, [pc, #240]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 80083e0:	f7fc fc9d 	bl	8004d1e <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083e4:	4b3b      	ldr	r3, [pc, #236]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 80083e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083f2:	4938      	ldr	r1, [pc, #224]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 80083f4:	4313      	orrs	r3, r2
 80083f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008402:	d10d      	bne.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	3304      	adds	r3, #4
 8008408:	2102      	movs	r1, #2
 800840a:	4618      	mov	r0, r3
 800840c:	f000 f864 	bl	80084d8 <RCCEx_PLLSAI1_Config>
 8008410:	4603      	mov	r3, r0
 8008412:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008414:	7cfb      	ldrb	r3, [r7, #19]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d014      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
      {
        /* set overall return value */
        status = ret;
 800841a:	7cfb      	ldrb	r3, [r7, #19]
 800841c:	74bb      	strb	r3, [r7, #18]
 800841e:	e011      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008428:	d10c      	bne.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	3320      	adds	r3, #32
 800842e:	2102      	movs	r1, #2
 8008430:	4618      	mov	r0, r3
 8008432:	f000 f9cd 	bl	80087d0 <RCCEx_PLLSAI2_Config>
 8008436:	4603      	mov	r3, r0
 8008438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800843a:	7cfb      	ldrb	r3, [r7, #19]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
      {
        /* set overall return value */
        status = ret;
 8008440:	7cfb      	ldrb	r3, [r7, #19]
 8008442:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d018      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008454:	2b00      	cmp	r3, #0
 8008456:	d009      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800845c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008460:	d004      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8008462:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8008466:	481a      	ldr	r0, [pc, #104]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8008468:	f7fc fc59 	bl	8004d1e <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800846c:	4b19      	ldr	r3, [pc, #100]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 800846e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008472:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800847a:	4916      	ldr	r1, [pc, #88]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 800847c:	4313      	orrs	r3, r2
 800847e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01b      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00a      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800849e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084a2:	d004      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80084a4:	f240 21c2 	movw	r1, #706	; 0x2c2
 80084a8:	4809      	ldr	r0, [pc, #36]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 80084aa:	f7fc fc38 	bl	8004d1e <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084ae:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 80084b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084be:	4905      	ldr	r1, [pc, #20]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80084c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	0800ba64 	.word	0x0800ba64
 80084d4:	40021000 	.word	0x40021000

080084d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d010      	beq.n	8008510 <RCCEx_PLLSAI1_Config+0x38>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d00c      	beq.n	8008510 <RCCEx_PLLSAI1_Config+0x38>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d008      	beq.n	8008510 <RCCEx_PLLSAI1_Config+0x38>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b03      	cmp	r3, #3
 8008504:	d004      	beq.n	8008510 <RCCEx_PLLSAI1_Config+0x38>
 8008506:	f640 314f 	movw	r1, #2895	; 0xb4f
 800850a:	48a3      	ldr	r0, [pc, #652]	; (8008798 <RCCEx_PLLSAI1_Config+0x2c0>)
 800850c:	f7fc fc07 	bl	8004d1e <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d003      	beq.n	8008520 <RCCEx_PLLSAI1_Config+0x48>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	2b08      	cmp	r3, #8
 800851e:	d904      	bls.n	800852a <RCCEx_PLLSAI1_Config+0x52>
 8008520:	f44f 6135 	mov.w	r1, #2896	; 0xb50
 8008524:	489c      	ldr	r0, [pc, #624]	; (8008798 <RCCEx_PLLSAI1_Config+0x2c0>)
 8008526:	f7fc fbfa 	bl	8004d1e <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	2b07      	cmp	r3, #7
 8008530:	d903      	bls.n	800853a <RCCEx_PLLSAI1_Config+0x62>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	2b56      	cmp	r3, #86	; 0x56
 8008538:	d904      	bls.n	8008544 <RCCEx_PLLSAI1_Config+0x6c>
 800853a:	f640 3151 	movw	r1, #2897	; 0xb51
 800853e:	4896      	ldr	r0, [pc, #600]	; (8008798 <RCCEx_PLLSAI1_Config+0x2c0>)
 8008540:	f7fc fbed 	bl	8004d1e <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10b      	bne.n	8008568 <RCCEx_PLLSAI1_Config+0x90>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d105      	bne.n	8008568 <RCCEx_PLLSAI1_Config+0x90>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d007      	beq.n	8008578 <RCCEx_PLLSAI1_Config+0xa0>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d004      	beq.n	8008582 <RCCEx_PLLSAI1_Config+0xaa>
 8008578:	f640 3152 	movw	r1, #2898	; 0xb52
 800857c:	4886      	ldr	r0, [pc, #536]	; (8008798 <RCCEx_PLLSAI1_Config+0x2c0>)
 800857e:	f7fc fbce 	bl	8004d1e <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008582:	4b86      	ldr	r3, [pc, #536]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f003 0303 	and.w	r3, r3, #3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d018      	beq.n	80085c0 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800858e:	4b83      	ldr	r3, [pc, #524]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	f003 0203 	and.w	r2, r3, #3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	d10d      	bne.n	80085ba <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
       ||
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d009      	beq.n	80085ba <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80085a6:	4b7d      	ldr	r3, [pc, #500]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	091b      	lsrs	r3, r3, #4
 80085ac:	f003 0307 	and.w	r3, r3, #7
 80085b0:	1c5a      	adds	r2, r3, #1
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
       ||
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d044      	beq.n	8008644 <RCCEx_PLLSAI1_Config+0x16c>
#endif
      )
    {
      status = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	73fb      	strb	r3, [r7, #15]
 80085be:	e041      	b.n	8008644 <RCCEx_PLLSAI1_Config+0x16c>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d00c      	beq.n	80085e2 <RCCEx_PLLSAI1_Config+0x10a>
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d013      	beq.n	80085f4 <RCCEx_PLLSAI1_Config+0x11c>
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d120      	bne.n	8008612 <RCCEx_PLLSAI1_Config+0x13a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80085d0:	4b72      	ldr	r3, [pc, #456]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0302 	and.w	r3, r3, #2
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d11d      	bne.n	8008618 <RCCEx_PLLSAI1_Config+0x140>
      {
        status = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085e0:	e01a      	b.n	8008618 <RCCEx_PLLSAI1_Config+0x140>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80085e2:	4b6e      	ldr	r3, [pc, #440]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d116      	bne.n	800861c <RCCEx_PLLSAI1_Config+0x144>
      {
        status = HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085f2:	e013      	b.n	800861c <RCCEx_PLLSAI1_Config+0x144>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80085f4:	4b69      	ldr	r3, [pc, #420]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10f      	bne.n	8008620 <RCCEx_PLLSAI1_Config+0x148>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008600:	4b66      	ldr	r3, [pc, #408]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d109      	bne.n	8008620 <RCCEx_PLLSAI1_Config+0x148>
        {
          status = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008610:	e006      	b.n	8008620 <RCCEx_PLLSAI1_Config+0x148>
    default:
      status = HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	73fb      	strb	r3, [r7, #15]
      break;
 8008616:	e004      	b.n	8008622 <RCCEx_PLLSAI1_Config+0x14a>
      break;
 8008618:	bf00      	nop
 800861a:	e002      	b.n	8008622 <RCCEx_PLLSAI1_Config+0x14a>
      break;
 800861c:	bf00      	nop
 800861e:	e000      	b.n	8008622 <RCCEx_PLLSAI1_Config+0x14a>
      break;
 8008620:	bf00      	nop
    }

    if(status == HAL_OK)
 8008622:	7bfb      	ldrb	r3, [r7, #15]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10d      	bne.n	8008644 <RCCEx_PLLSAI1_Config+0x16c>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008628:	4b5c      	ldr	r3, [pc, #368]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6819      	ldr	r1, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	3b01      	subs	r3, #1
 800863a:	011b      	lsls	r3, r3, #4
 800863c:	430b      	orrs	r3, r1
 800863e:	4957      	ldr	r1, [pc, #348]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 8008640:	4313      	orrs	r3, r2
 8008642:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008644:	7bfb      	ldrb	r3, [r7, #15]
 8008646:	2b00      	cmp	r3, #0
 8008648:	f040 80ba 	bne.w	80087c0 <RCCEx_PLLSAI1_Config+0x2e8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800864c:	4b53      	ldr	r3, [pc, #332]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a52      	ldr	r2, [pc, #328]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 8008652:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008658:	f7fd fdd4 	bl	8006204 <HAL_GetTick>
 800865c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800865e:	e009      	b.n	8008674 <RCCEx_PLLSAI1_Config+0x19c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008660:	f7fd fdd0 	bl	8006204 <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	2b02      	cmp	r3, #2
 800866c:	d902      	bls.n	8008674 <RCCEx_PLLSAI1_Config+0x19c>
      {
        status = HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	73fb      	strb	r3, [r7, #15]
        break;
 8008672:	e005      	b.n	8008680 <RCCEx_PLLSAI1_Config+0x1a8>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008674:	4b49      	ldr	r3, [pc, #292]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1ef      	bne.n	8008660 <RCCEx_PLLSAI1_Config+0x188>
      }
    }

    if(status == HAL_OK)
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	2b00      	cmp	r3, #0
 8008684:	f040 809c 	bne.w	80087c0 <RCCEx_PLLSAI1_Config+0x2e8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d11e      	bne.n	80086cc <RCCEx_PLLSAI1_Config+0x1f4>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	2b07      	cmp	r3, #7
 8008694:	d008      	beq.n	80086a8 <RCCEx_PLLSAI1_Config+0x1d0>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	2b11      	cmp	r3, #17
 800869c:	d004      	beq.n	80086a8 <RCCEx_PLLSAI1_Config+0x1d0>
 800869e:	f640 31a5 	movw	r1, #2981	; 0xba5
 80086a2:	483d      	ldr	r0, [pc, #244]	; (8008798 <RCCEx_PLLSAI1_Config+0x2c0>)
 80086a4:	f7fc fb3b 	bl	8004d1e <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086a8:	4b3c      	ldr	r3, [pc, #240]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80086b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	6892      	ldr	r2, [r2, #8]
 80086b8:	0211      	lsls	r1, r2, #8
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	68d2      	ldr	r2, [r2, #12]
 80086be:	0912      	lsrs	r2, r2, #4
 80086c0:	0452      	lsls	r2, r2, #17
 80086c2:	430a      	orrs	r2, r1
 80086c4:	4935      	ldr	r1, [pc, #212]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	610b      	str	r3, [r1, #16]
 80086ca:	e051      	b.n	8008770 <RCCEx_PLLSAI1_Config+0x298>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d127      	bne.n	8008722 <RCCEx_PLLSAI1_Config+0x24a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d010      	beq.n	80086fc <RCCEx_PLLSAI1_Config+0x224>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	2b04      	cmp	r3, #4
 80086e0:	d00c      	beq.n	80086fc <RCCEx_PLLSAI1_Config+0x224>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	2b06      	cmp	r3, #6
 80086e8:	d008      	beq.n	80086fc <RCCEx_PLLSAI1_Config+0x224>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	2b08      	cmp	r3, #8
 80086f0:	d004      	beq.n	80086fc <RCCEx_PLLSAI1_Config+0x224>
 80086f2:	f640 31c9 	movw	r1, #3017	; 0xbc9
 80086f6:	4828      	ldr	r0, [pc, #160]	; (8008798 <RCCEx_PLLSAI1_Config+0x2c0>)
 80086f8:	f7fc fb11 	bl	8004d1e <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086fc:	4b27      	ldr	r3, [pc, #156]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008704:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	6892      	ldr	r2, [r2, #8]
 800870c:	0211      	lsls	r1, r2, #8
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	6912      	ldr	r2, [r2, #16]
 8008712:	0852      	lsrs	r2, r2, #1
 8008714:	3a01      	subs	r2, #1
 8008716:	0552      	lsls	r2, r2, #21
 8008718:	430a      	orrs	r2, r1
 800871a:	4920      	ldr	r1, [pc, #128]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 800871c:	4313      	orrs	r3, r2
 800871e:	610b      	str	r3, [r1, #16]
 8008720:	e026      	b.n	8008770 <RCCEx_PLLSAI1_Config+0x298>
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d010      	beq.n	800874c <RCCEx_PLLSAI1_Config+0x274>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	2b04      	cmp	r3, #4
 8008730:	d00c      	beq.n	800874c <RCCEx_PLLSAI1_Config+0x274>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	2b06      	cmp	r3, #6
 8008738:	d008      	beq.n	800874c <RCCEx_PLLSAI1_Config+0x274>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	2b08      	cmp	r3, #8
 8008740:	d004      	beq.n	800874c <RCCEx_PLLSAI1_Config+0x274>
 8008742:	f640 31db 	movw	r1, #3035	; 0xbdb
 8008746:	4814      	ldr	r0, [pc, #80]	; (8008798 <RCCEx_PLLSAI1_Config+0x2c0>)
 8008748:	f7fc fae9 	bl	8004d1e <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800874c:	4b13      	ldr	r3, [pc, #76]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008754:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	6892      	ldr	r2, [r2, #8]
 800875c:	0211      	lsls	r1, r2, #8
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	6952      	ldr	r2, [r2, #20]
 8008762:	0852      	lsrs	r2, r2, #1
 8008764:	3a01      	subs	r2, #1
 8008766:	0652      	lsls	r2, r2, #25
 8008768:	430a      	orrs	r2, r1
 800876a:	490c      	ldr	r1, [pc, #48]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 800876c:	4313      	orrs	r3, r2
 800876e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008770:	4b0a      	ldr	r3, [pc, #40]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a09      	ldr	r2, [pc, #36]	; (800879c <RCCEx_PLLSAI1_Config+0x2c4>)
 8008776:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800877a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800877c:	f7fd fd42 	bl	8006204 <HAL_GetTick>
 8008780:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008782:	e00d      	b.n	80087a0 <RCCEx_PLLSAI1_Config+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008784:	f7fd fd3e 	bl	8006204 <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	2b02      	cmp	r3, #2
 8008790:	d906      	bls.n	80087a0 <RCCEx_PLLSAI1_Config+0x2c8>
        {
          status = HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	73fb      	strb	r3, [r7, #15]
          break;
 8008796:	e009      	b.n	80087ac <RCCEx_PLLSAI1_Config+0x2d4>
 8008798:	0800ba64 	.word	0x0800ba64
 800879c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80087a0:	4b0a      	ldr	r3, [pc, #40]	; (80087cc <RCCEx_PLLSAI1_Config+0x2f4>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d0eb      	beq.n	8008784 <RCCEx_PLLSAI1_Config+0x2ac>
        }
      }

      if(status == HAL_OK)
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d106      	bne.n	80087c0 <RCCEx_PLLSAI1_Config+0x2e8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80087b2:	4b06      	ldr	r3, [pc, #24]	; (80087cc <RCCEx_PLLSAI1_Config+0x2f4>)
 80087b4:	691a      	ldr	r2, [r3, #16]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	4904      	ldr	r1, [pc, #16]	; (80087cc <RCCEx_PLLSAI1_Config+0x2f4>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	40021000 	.word	0x40021000

080087d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d010      	beq.n	8008808 <RCCEx_PLLSAI2_Config+0x38>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d00c      	beq.n	8008808 <RCCEx_PLLSAI2_Config+0x38>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d008      	beq.n	8008808 <RCCEx_PLLSAI2_Config+0x38>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	d004      	beq.n	8008808 <RCCEx_PLLSAI2_Config+0x38>
 80087fe:	f640 411c 	movw	r1, #3100	; 0xc1c
 8008802:	4895      	ldr	r0, [pc, #596]	; (8008a58 <RCCEx_PLLSAI2_Config+0x288>)
 8008804:	f7fc fa8b 	bl	8004d1e <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <RCCEx_PLLSAI2_Config+0x48>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	2b08      	cmp	r3, #8
 8008816:	d904      	bls.n	8008822 <RCCEx_PLLSAI2_Config+0x52>
 8008818:	f640 411d 	movw	r1, #3101	; 0xc1d
 800881c:	488e      	ldr	r0, [pc, #568]	; (8008a58 <RCCEx_PLLSAI2_Config+0x288>)
 800881e:	f7fc fa7e 	bl	8004d1e <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	2b07      	cmp	r3, #7
 8008828:	d903      	bls.n	8008832 <RCCEx_PLLSAI2_Config+0x62>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	2b56      	cmp	r3, #86	; 0x56
 8008830:	d904      	bls.n	800883c <RCCEx_PLLSAI2_Config+0x6c>
 8008832:	f640 411e 	movw	r1, #3102	; 0xc1e
 8008836:	4888      	ldr	r0, [pc, #544]	; (8008a58 <RCCEx_PLLSAI2_Config+0x288>)
 8008838:	f7fc fa71 	bl	8004d1e <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d105      	bne.n	8008854 <RCCEx_PLLSAI2_Config+0x84>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d007      	beq.n	8008864 <RCCEx_PLLSAI2_Config+0x94>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800885c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d004      	beq.n	800886e <RCCEx_PLLSAI2_Config+0x9e>
 8008864:	f640 411f 	movw	r1, #3103	; 0xc1f
 8008868:	487b      	ldr	r0, [pc, #492]	; (8008a58 <RCCEx_PLLSAI2_Config+0x288>)
 800886a:	f7fc fa58 	bl	8004d1e <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800886e:	4b7b      	ldr	r3, [pc, #492]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f003 0303 	and.w	r3, r3, #3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d018      	beq.n	80088ac <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800887a:	4b78      	ldr	r3, [pc, #480]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	f003 0203 	and.w	r2, r3, #3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	429a      	cmp	r2, r3
 8008888:	d10d      	bne.n	80088a6 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
       ||
 800888e:	2b00      	cmp	r3, #0
 8008890:	d009      	beq.n	80088a6 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008892:	4b72      	ldr	r3, [pc, #456]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	091b      	lsrs	r3, r3, #4
 8008898:	f003 0307 	and.w	r3, r3, #7
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
       ||
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d044      	beq.n	8008930 <RCCEx_PLLSAI2_Config+0x160>
#endif
      )
    {
      status = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	73fb      	strb	r3, [r7, #15]
 80088aa:	e041      	b.n	8008930 <RCCEx_PLLSAI2_Config+0x160>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d00c      	beq.n	80088ce <RCCEx_PLLSAI2_Config+0xfe>
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	d013      	beq.n	80088e0 <RCCEx_PLLSAI2_Config+0x110>
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d120      	bne.n	80088fe <RCCEx_PLLSAI2_Config+0x12e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80088bc:	4b67      	ldr	r3, [pc, #412]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0302 	and.w	r3, r3, #2
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d11d      	bne.n	8008904 <RCCEx_PLLSAI2_Config+0x134>
      {
        status = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088cc:	e01a      	b.n	8008904 <RCCEx_PLLSAI2_Config+0x134>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80088ce:	4b63      	ldr	r3, [pc, #396]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d116      	bne.n	8008908 <RCCEx_PLLSAI2_Config+0x138>
      {
        status = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088de:	e013      	b.n	8008908 <RCCEx_PLLSAI2_Config+0x138>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80088e0:	4b5e      	ldr	r3, [pc, #376]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10f      	bne.n	800890c <RCCEx_PLLSAI2_Config+0x13c>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80088ec:	4b5b      	ldr	r3, [pc, #364]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d109      	bne.n	800890c <RCCEx_PLLSAI2_Config+0x13c>
        {
          status = HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80088fc:	e006      	b.n	800890c <RCCEx_PLLSAI2_Config+0x13c>
    default:
      status = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	73fb      	strb	r3, [r7, #15]
      break;
 8008902:	e004      	b.n	800890e <RCCEx_PLLSAI2_Config+0x13e>
      break;
 8008904:	bf00      	nop
 8008906:	e002      	b.n	800890e <RCCEx_PLLSAI2_Config+0x13e>
      break;
 8008908:	bf00      	nop
 800890a:	e000      	b.n	800890e <RCCEx_PLLSAI2_Config+0x13e>
      break;
 800890c:	bf00      	nop
    }

    if(status == HAL_OK)
 800890e:	7bfb      	ldrb	r3, [r7, #15]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10d      	bne.n	8008930 <RCCEx_PLLSAI2_Config+0x160>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008914:	4b51      	ldr	r3, [pc, #324]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6819      	ldr	r1, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	3b01      	subs	r3, #1
 8008926:	011b      	lsls	r3, r3, #4
 8008928:	430b      	orrs	r3, r1
 800892a:	494c      	ldr	r1, [pc, #304]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 800892c:	4313      	orrs	r3, r2
 800892e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	2b00      	cmp	r3, #0
 8008934:	f040 808a 	bne.w	8008a4c <RCCEx_PLLSAI2_Config+0x27c>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008938:	4b48      	ldr	r3, [pc, #288]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a47      	ldr	r2, [pc, #284]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 800893e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008944:	f7fd fc5e 	bl	8006204 <HAL_GetTick>
 8008948:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800894a:	e009      	b.n	8008960 <RCCEx_PLLSAI2_Config+0x190>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800894c:	f7fd fc5a 	bl	8006204 <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	2b02      	cmp	r3, #2
 8008958:	d902      	bls.n	8008960 <RCCEx_PLLSAI2_Config+0x190>
      {
        status = HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	73fb      	strb	r3, [r7, #15]
        break;
 800895e:	e005      	b.n	800896c <RCCEx_PLLSAI2_Config+0x19c>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008960:	4b3e      	ldr	r3, [pc, #248]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1ef      	bne.n	800894c <RCCEx_PLLSAI2_Config+0x17c>
      }
    }

    if(status == HAL_OK)
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d16c      	bne.n	8008a4c <RCCEx_PLLSAI2_Config+0x27c>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d11e      	bne.n	80089b6 <RCCEx_PLLSAI2_Config+0x1e6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	2b07      	cmp	r3, #7
 800897e:	d008      	beq.n	8008992 <RCCEx_PLLSAI2_Config+0x1c2>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	2b11      	cmp	r3, #17
 8008986:	d004      	beq.n	8008992 <RCCEx_PLLSAI2_Config+0x1c2>
 8008988:	f640 4172 	movw	r1, #3186	; 0xc72
 800898c:	4832      	ldr	r0, [pc, #200]	; (8008a58 <RCCEx_PLLSAI2_Config+0x288>)
 800898e:	f7fc f9c6 	bl	8004d1e <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008992:	4b32      	ldr	r3, [pc, #200]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800899a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	6892      	ldr	r2, [r2, #8]
 80089a2:	0211      	lsls	r1, r2, #8
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	68d2      	ldr	r2, [r2, #12]
 80089a8:	0912      	lsrs	r2, r2, #4
 80089aa:	0452      	lsls	r2, r2, #17
 80089ac:	430a      	orrs	r2, r1
 80089ae:	492b      	ldr	r1, [pc, #172]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	614b      	str	r3, [r1, #20]
 80089b4:	e026      	b.n	8008a04 <RCCEx_PLLSAI2_Config+0x234>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d010      	beq.n	80089e0 <RCCEx_PLLSAI2_Config+0x210>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	2b04      	cmp	r3, #4
 80089c4:	d00c      	beq.n	80089e0 <RCCEx_PLLSAI2_Config+0x210>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	2b06      	cmp	r3, #6
 80089cc:	d008      	beq.n	80089e0 <RCCEx_PLLSAI2_Config+0x210>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	2b08      	cmp	r3, #8
 80089d4:	d004      	beq.n	80089e0 <RCCEx_PLLSAI2_Config+0x210>
 80089d6:	f640 41aa 	movw	r1, #3242	; 0xcaa
 80089da:	481f      	ldr	r0, [pc, #124]	; (8008a58 <RCCEx_PLLSAI2_Config+0x288>)
 80089dc:	f7fc f99f 	bl	8004d1e <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80089e0:	4b1e      	ldr	r3, [pc, #120]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80089e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	6892      	ldr	r2, [r2, #8]
 80089f0:	0211      	lsls	r1, r2, #8
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	6912      	ldr	r2, [r2, #16]
 80089f6:	0852      	lsrs	r2, r2, #1
 80089f8:	3a01      	subs	r2, #1
 80089fa:	0652      	lsls	r2, r2, #25
 80089fc:	430a      	orrs	r2, r1
 80089fe:	4917      	ldr	r1, [pc, #92]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008a04:	4b15      	ldr	r3, [pc, #84]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a14      	ldr	r2, [pc, #80]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 8008a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a10:	f7fd fbf8 	bl	8006204 <HAL_GetTick>
 8008a14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a16:	e009      	b.n	8008a2c <RCCEx_PLLSAI2_Config+0x25c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008a18:	f7fd fbf4 	bl	8006204 <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d902      	bls.n	8008a2c <RCCEx_PLLSAI2_Config+0x25c>
        {
          status = HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	73fb      	strb	r3, [r7, #15]
          break;
 8008a2a:	e005      	b.n	8008a38 <RCCEx_PLLSAI2_Config+0x268>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a2c:	4b0b      	ldr	r3, [pc, #44]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d0ef      	beq.n	8008a18 <RCCEx_PLLSAI2_Config+0x248>
        }
      }

      if(status == HAL_OK)
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d106      	bne.n	8008a4c <RCCEx_PLLSAI2_Config+0x27c>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008a3e:	4b07      	ldr	r3, [pc, #28]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 8008a40:	695a      	ldr	r2, [r3, #20]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	4905      	ldr	r1, [pc, #20]	; (8008a5c <RCCEx_PLLSAI2_Config+0x28c>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	0800ba64 	.word	0x0800ba64
 8008a5c:	40021000 	.word	0x40021000

08008a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d101      	bne.n	8008a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e17c      	b.n	8008d6c <HAL_SPI_Init+0x30c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a9b      	ldr	r2, [pc, #620]	; (8008ce4 <HAL_SPI_Init+0x284>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d00e      	beq.n	8008a9a <HAL_SPI_Init+0x3a>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a99      	ldr	r2, [pc, #612]	; (8008ce8 <HAL_SPI_Init+0x288>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d009      	beq.n	8008a9a <HAL_SPI_Init+0x3a>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a98      	ldr	r2, [pc, #608]	; (8008cec <HAL_SPI_Init+0x28c>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d004      	beq.n	8008a9a <HAL_SPI_Init+0x3a>
 8008a90:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8008a94:	4896      	ldr	r0, [pc, #600]	; (8008cf0 <HAL_SPI_Init+0x290>)
 8008a96:	f7fc f942 	bl	8004d1e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d009      	beq.n	8008ab6 <HAL_SPI_Init+0x56>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aaa:	d004      	beq.n	8008ab6 <HAL_SPI_Init+0x56>
 8008aac:	f240 1145 	movw	r1, #325	; 0x145
 8008ab0:	488f      	ldr	r0, [pc, #572]	; (8008cf0 <HAL_SPI_Init+0x290>)
 8008ab2:	f7fc f934 	bl	8004d1e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00e      	beq.n	8008adc <HAL_SPI_Init+0x7c>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ac6:	d009      	beq.n	8008adc <HAL_SPI_Init+0x7c>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ad0:	d004      	beq.n	8008adc <HAL_SPI_Init+0x7c>
 8008ad2:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8008ad6:	4886      	ldr	r0, [pc, #536]	; (8008cf0 <HAL_SPI_Init+0x290>)
 8008ad8:	f7fc f921 	bl	8004d1e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008ae4:	d040      	beq.n	8008b68 <HAL_SPI_Init+0x108>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008aee:	d03b      	beq.n	8008b68 <HAL_SPI_Init+0x108>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8008af8:	d036      	beq.n	8008b68 <HAL_SPI_Init+0x108>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b02:	d031      	beq.n	8008b68 <HAL_SPI_Init+0x108>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8008b0c:	d02c      	beq.n	8008b68 <HAL_SPI_Init+0x108>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008b16:	d027      	beq.n	8008b68 <HAL_SPI_Init+0x108>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8008b20:	d022      	beq.n	8008b68 <HAL_SPI_Init+0x108>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b2a:	d01d      	beq.n	8008b68 <HAL_SPI_Init+0x108>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b34:	d018      	beq.n	8008b68 <HAL_SPI_Init+0x108>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008b3e:	d013      	beq.n	8008b68 <HAL_SPI_Init+0x108>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008b48:	d00e      	beq.n	8008b68 <HAL_SPI_Init+0x108>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b52:	d009      	beq.n	8008b68 <HAL_SPI_Init+0x108>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b5c:	d004      	beq.n	8008b68 <HAL_SPI_Init+0x108>
 8008b5e:	f240 1147 	movw	r1, #327	; 0x147
 8008b62:	4863      	ldr	r0, [pc, #396]	; (8008cf0 <HAL_SPI_Init+0x290>)
 8008b64:	f7fc f8db 	bl	8004d1e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b70:	d00d      	beq.n	8008b8e <HAL_SPI_Init+0x12e>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	699b      	ldr	r3, [r3, #24]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d009      	beq.n	8008b8e <HAL_SPI_Init+0x12e>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b82:	d004      	beq.n	8008b8e <HAL_SPI_Init+0x12e>
 8008b84:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008b88:	4859      	ldr	r0, [pc, #356]	; (8008cf0 <HAL_SPI_Init+0x290>)
 8008b8a:	f7fc f8c8 	bl	8004d1e <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b92:	2b08      	cmp	r3, #8
 8008b94:	d008      	beq.n	8008ba8 <HAL_SPI_Init+0x148>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d004      	beq.n	8008ba8 <HAL_SPI_Init+0x148>
 8008b9e:	f240 1149 	movw	r1, #329	; 0x149
 8008ba2:	4853      	ldr	r0, [pc, #332]	; (8008cf0 <HAL_SPI_Init+0x290>)
 8008ba4:	f7fc f8bb 	bl	8004d1e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d020      	beq.n	8008bf2 <HAL_SPI_Init+0x192>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	d01c      	beq.n	8008bf2 <HAL_SPI_Init+0x192>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	69db      	ldr	r3, [r3, #28]
 8008bbc:	2b10      	cmp	r3, #16
 8008bbe:	d018      	beq.n	8008bf2 <HAL_SPI_Init+0x192>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	2b18      	cmp	r3, #24
 8008bc6:	d014      	beq.n	8008bf2 <HAL_SPI_Init+0x192>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	2b20      	cmp	r3, #32
 8008bce:	d010      	beq.n	8008bf2 <HAL_SPI_Init+0x192>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	69db      	ldr	r3, [r3, #28]
 8008bd4:	2b28      	cmp	r3, #40	; 0x28
 8008bd6:	d00c      	beq.n	8008bf2 <HAL_SPI_Init+0x192>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	69db      	ldr	r3, [r3, #28]
 8008bdc:	2b30      	cmp	r3, #48	; 0x30
 8008bde:	d008      	beq.n	8008bf2 <HAL_SPI_Init+0x192>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	69db      	ldr	r3, [r3, #28]
 8008be4:	2b38      	cmp	r3, #56	; 0x38
 8008be6:	d004      	beq.n	8008bf2 <HAL_SPI_Init+0x192>
 8008be8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008bec:	4840      	ldr	r0, [pc, #256]	; (8008cf0 <HAL_SPI_Init+0x290>)
 8008bee:	f7fc f896 	bl	8004d1e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d008      	beq.n	8008c0c <HAL_SPI_Init+0x1ac>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	2b80      	cmp	r3, #128	; 0x80
 8008c00:	d004      	beq.n	8008c0c <HAL_SPI_Init+0x1ac>
 8008c02:	f240 114b 	movw	r1, #331	; 0x14b
 8008c06:	483a      	ldr	r0, [pc, #232]	; (8008cf0 <HAL_SPI_Init+0x290>)
 8008c08:	f7fc f889 	bl	8004d1e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d008      	beq.n	8008c26 <HAL_SPI_Init+0x1c6>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	2b10      	cmp	r3, #16
 8008c1a:	d004      	beq.n	8008c26 <HAL_SPI_Init+0x1c6>
 8008c1c:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8008c20:	4833      	ldr	r0, [pc, #204]	; (8008cf0 <HAL_SPI_Init+0x290>)
 8008c22:	f7fc f87c 	bl	8004d1e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d119      	bne.n	8008c62 <HAL_SPI_Init+0x202>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d008      	beq.n	8008c48 <HAL_SPI_Init+0x1e8>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d004      	beq.n	8008c48 <HAL_SPI_Init+0x1e8>
 8008c3e:	f240 114f 	movw	r1, #335	; 0x14f
 8008c42:	482b      	ldr	r0, [pc, #172]	; (8008cf0 <HAL_SPI_Init+0x290>)
 8008c44:	f7fc f86b 	bl	8004d1e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	695b      	ldr	r3, [r3, #20]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d008      	beq.n	8008c62 <HAL_SPI_Init+0x202>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d004      	beq.n	8008c62 <HAL_SPI_Init+0x202>
 8008c58:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8008c5c:	4824      	ldr	r0, [pc, #144]	; (8008cf0 <HAL_SPI_Init+0x290>)
 8008c5e:	f7fc f85e 	bl	8004d1e <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d106      	bne.n	8008c82 <HAL_SPI_Init+0x222>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7fd f8cd 	bl	8005e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2202      	movs	r2, #2
 8008c86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c98:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ca2:	d902      	bls.n	8008caa <HAL_SPI_Init+0x24a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	e002      	b.n	8008cb0 <HAL_SPI_Init+0x250>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008cb8:	d007      	beq.n	8008cca <HAL_SPI_Init+0x26a>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cc2:	d002      	beq.n	8008cca <HAL_SPI_Init+0x26a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d113      	bne.n	8008cfa <HAL_SPI_Init+0x29a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cda:	d90b      	bls.n	8008cf4 <HAL_SPI_Init+0x294>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	631a      	str	r2, [r3, #48]	; 0x30
 8008ce2:	e00a      	b.n	8008cfa <HAL_SPI_Init+0x29a>
 8008ce4:	40013000 	.word	0x40013000
 8008ce8:	40003800 	.word	0x40003800
 8008cec:	40003c00 	.word	0x40003c00
 8008cf0:	0800baa0 	.word	0x0800baa0
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	431a      	orrs	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	431a      	orrs	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	431a      	orrs	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d18:	431a      	orrs	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a1b      	ldr	r3, [r3, #32]
 8008d24:	ea42 0103 	orr.w	r1, r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	430a      	orrs	r2, r1
 8008d32:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	0c1b      	lsrs	r3, r3, #16
 8008d3a:	f003 0204 	and.w	r2, r3, #4
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d42:	431a      	orrs	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d48:	431a      	orrs	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	ea42 0103 	orr.w	r1, r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08a      	sub	sp, #40	; 0x28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d82:	2301      	movs	r3, #1
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d004      	beq.n	8008d9e <HAL_SPI_TransmitReceive+0x2a>
 8008d94:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8008d98:	4895      	ldr	r0, [pc, #596]	; (8008ff0 <HAL_SPI_TransmitReceive+0x27c>)
 8008d9a:	f7fb ffc0 	bl	8004d1e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d101      	bne.n	8008dac <HAL_SPI_TransmitReceive+0x38>
 8008da8:	2302      	movs	r3, #2
 8008daa:	e1fd      	b.n	80091a8 <HAL_SPI_TransmitReceive+0x434>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008db4:	f7fd fa26 	bl	8006204 <HAL_GetTick>
 8008db8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008dc0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008dc8:	887b      	ldrh	r3, [r7, #2]
 8008dca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008dcc:	887b      	ldrh	r3, [r7, #2]
 8008dce:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008dd0:	7efb      	ldrb	r3, [r7, #27]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d00e      	beq.n	8008df4 <HAL_SPI_TransmitReceive+0x80>
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ddc:	d106      	bne.n	8008dec <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <HAL_SPI_TransmitReceive+0x78>
 8008de6:	7efb      	ldrb	r3, [r7, #27]
 8008de8:	2b04      	cmp	r3, #4
 8008dea:	d003      	beq.n	8008df4 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8008dec:	2302      	movs	r3, #2
 8008dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008df2:	e1cf      	b.n	8009194 <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d005      	beq.n	8008e06 <HAL_SPI_TransmitReceive+0x92>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <HAL_SPI_TransmitReceive+0x92>
 8008e00:	887b      	ldrh	r3, [r7, #2]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d103      	bne.n	8008e0e <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008e0c:	e1c2      	b.n	8009194 <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	d003      	beq.n	8008e22 <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2205      	movs	r2, #5
 8008e1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	887a      	ldrh	r2, [r7, #2]
 8008e32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	887a      	ldrh	r2, [r7, #2]
 8008e3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	887a      	ldrh	r2, [r7, #2]
 8008e48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	887a      	ldrh	r2, [r7, #2]
 8008e4e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e64:	d802      	bhi.n	8008e6c <HAL_SPI_TransmitReceive+0xf8>
 8008e66:	8a3b      	ldrh	r3, [r7, #16]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d908      	bls.n	8008e7e <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e7a:	605a      	str	r2, [r3, #4]
 8008e7c:	e007      	b.n	8008e8e <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e8c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e98:	2b40      	cmp	r3, #64	; 0x40
 8008e9a:	d007      	beq.n	8008eac <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eaa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008eb4:	d97c      	bls.n	8008fb0 <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <HAL_SPI_TransmitReceive+0x150>
 8008ebe:	8a7b      	ldrh	r3, [r7, #18]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d169      	bne.n	8008f98 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec8:	881a      	ldrh	r2, [r3, #0]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed4:	1c9a      	adds	r2, r3, #2
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ee8:	e056      	b.n	8008f98 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f003 0302 	and.w	r3, r3, #2
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d11b      	bne.n	8008f30 <HAL_SPI_TransmitReceive+0x1bc>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d016      	beq.n	8008f30 <HAL_SPI_TransmitReceive+0x1bc>
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d113      	bne.n	8008f30 <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0c:	881a      	ldrh	r2, [r3, #0]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f18:	1c9a      	adds	r2, r3, #2
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	3b01      	subs	r3, #1
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d11c      	bne.n	8008f78 <HAL_SPI_TransmitReceive+0x204>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d016      	beq.n	8008f78 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f54:	b292      	uxth	r2, r2
 8008f56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5c:	1c9a      	adds	r2, r3, #2
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f74:	2301      	movs	r3, #1
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f78:	f7fd f944 	bl	8006204 <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d807      	bhi.n	8008f98 <HAL_SPI_TransmitReceive+0x224>
 8008f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8e:	d003      	beq.n	8008f98 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008f96:	e0fd      	b.n	8009194 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1a3      	bne.n	8008eea <HAL_SPI_TransmitReceive+0x176>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d19d      	bne.n	8008eea <HAL_SPI_TransmitReceive+0x176>
 8008fae:	e0e1      	b.n	8009174 <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d003      	beq.n	8008fc0 <HAL_SPI_TransmitReceive+0x24c>
 8008fb8:	8a7b      	ldrh	r3, [r7, #18]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	f040 80cd 	bne.w	800915a <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d914      	bls.n	8008ff4 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fce:	881a      	ldrh	r2, [r3, #0]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fda:	1c9a      	adds	r2, r3, #2
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	3b02      	subs	r3, #2
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008fee:	e0b4      	b.n	800915a <HAL_SPI_TransmitReceive+0x3e6>
 8008ff0:	0800baa0 	.word	0x0800baa0
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	330c      	adds	r3, #12
 8008ffe:	7812      	ldrb	r2, [r2, #0]
 8009000:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009006:	1c5a      	adds	r2, r3, #1
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009010:	b29b      	uxth	r3, r3
 8009012:	3b01      	subs	r3, #1
 8009014:	b29a      	uxth	r2, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800901a:	e09e      	b.n	800915a <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f003 0302 	and.w	r3, r3, #2
 8009026:	2b02      	cmp	r3, #2
 8009028:	d134      	bne.n	8009094 <HAL_SPI_TransmitReceive+0x320>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800902e:	b29b      	uxth	r3, r3
 8009030:	2b00      	cmp	r3, #0
 8009032:	d02f      	beq.n	8009094 <HAL_SPI_TransmitReceive+0x320>
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	2b01      	cmp	r3, #1
 8009038:	d12c      	bne.n	8009094 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800903e:	b29b      	uxth	r3, r3
 8009040:	2b01      	cmp	r3, #1
 8009042:	d912      	bls.n	800906a <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009048:	881a      	ldrh	r2, [r3, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009054:	1c9a      	adds	r2, r3, #2
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800905e:	b29b      	uxth	r3, r3
 8009060:	3b02      	subs	r3, #2
 8009062:	b29a      	uxth	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009068:	e012      	b.n	8009090 <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	330c      	adds	r3, #12
 8009074:	7812      	ldrb	r2, [r2, #0]
 8009076:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907c:	1c5a      	adds	r2, r3, #1
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009086:	b29b      	uxth	r3, r3
 8009088:	3b01      	subs	r3, #1
 800908a:	b29a      	uxth	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009090:	2300      	movs	r3, #0
 8009092:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d148      	bne.n	8009134 <HAL_SPI_TransmitReceive+0x3c0>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d042      	beq.n	8009134 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d923      	bls.n	8009102 <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68da      	ldr	r2, [r3, #12]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c4:	b292      	uxth	r2, r2
 80090c6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090cc:	1c9a      	adds	r2, r3, #2
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090d8:	b29b      	uxth	r3, r3
 80090da:	3b02      	subs	r3, #2
 80090dc:	b29a      	uxth	r2, r3
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d81f      	bhi.n	8009130 <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090fe:	605a      	str	r2, [r3, #4]
 8009100:	e016      	b.n	8009130 <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f103 020c 	add.w	r2, r3, #12
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910e:	7812      	ldrb	r2, [r2, #0]
 8009110:	b2d2      	uxtb	r2, r2
 8009112:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009124:	b29b      	uxth	r3, r3
 8009126:	3b01      	subs	r3, #1
 8009128:	b29a      	uxth	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009130:	2301      	movs	r3, #1
 8009132:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009134:	f7fd f866 	bl	8006204 <HAL_GetTick>
 8009138:	4602      	mov	r2, r0
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	1ad3      	subs	r3, r2, r3
 800913e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009140:	429a      	cmp	r2, r3
 8009142:	d803      	bhi.n	800914c <HAL_SPI_TransmitReceive+0x3d8>
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914a:	d102      	bne.n	8009152 <HAL_SPI_TransmitReceive+0x3de>
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	2b00      	cmp	r3, #0
 8009150:	d103      	bne.n	800915a <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009158:	e01c      	b.n	8009194 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800915e:	b29b      	uxth	r3, r3
 8009160:	2b00      	cmp	r3, #0
 8009162:	f47f af5b 	bne.w	800901c <HAL_SPI_TransmitReceive+0x2a8>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800916c:	b29b      	uxth	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	f47f af54 	bne.w	800901c <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009174:	69fa      	ldr	r2, [r7, #28]
 8009176:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f000 f8f0 	bl	800935e <SPI_EndRxTxTransaction>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d006      	beq.n	8009192 <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2220      	movs	r2, #32
 800918e:	661a      	str	r2, [r3, #96]	; 0x60
 8009190:	e000      	b.n	8009194 <HAL_SPI_TransmitReceive+0x420>
  }

error :
 8009192:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80091a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3728      	adds	r7, #40	; 0x28
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	603b      	str	r3, [r7, #0]
 80091bc:	4613      	mov	r3, r2
 80091be:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091c0:	e04c      	b.n	800925c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c8:	d048      	beq.n	800925c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80091ca:	f7fd f81b 	bl	8006204 <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	683a      	ldr	r2, [r7, #0]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d902      	bls.n	80091e0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d13d      	bne.n	800925c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80091ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091f8:	d111      	bne.n	800921e <SPI_WaitFlagStateUntilTimeout+0x6e>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009202:	d004      	beq.n	800920e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800920c:	d107      	bne.n	800921e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800921c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009226:	d10f      	bne.n	8009248 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009246:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e00f      	b.n	800927c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	4013      	ands	r3, r2
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	429a      	cmp	r2, r3
 800926a:	bf0c      	ite	eq
 800926c:	2301      	moveq	r3, #1
 800926e:	2300      	movne	r3, #0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	461a      	mov	r2, r3
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	429a      	cmp	r2, r3
 8009278:	d1a3      	bne.n	80091c2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
 8009290:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8009292:	e057      	b.n	8009344 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800929a:	d106      	bne.n	80092aa <SPI_WaitFifoStateUntilTimeout+0x26>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d103      	bne.n	80092aa <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	330c      	adds	r3, #12
 80092a8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b0:	d048      	beq.n	8009344 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80092b2:	f7fc ffa7 	bl	8006204 <HAL_GetTick>
 80092b6:	4602      	mov	r2, r0
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	1ad3      	subs	r3, r2, r3
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d902      	bls.n	80092c8 <SPI_WaitFifoStateUntilTimeout+0x44>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d13d      	bne.n	8009344 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092e0:	d111      	bne.n	8009306 <SPI_WaitFifoStateUntilTimeout+0x82>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092ea:	d004      	beq.n	80092f6 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092f4:	d107      	bne.n	8009306 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009304:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800930e:	d10f      	bne.n	8009330 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800932e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009340:	2303      	movs	r3, #3
 8009342:	e008      	b.n	8009356 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689a      	ldr	r2, [r3, #8]
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	4013      	ands	r3, r2
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	429a      	cmp	r2, r3
 8009352:	d19f      	bne.n	8009294 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b086      	sub	sp, #24
 8009362:	af02      	add	r7, sp, #8
 8009364:	60f8      	str	r0, [r7, #12]
 8009366:	60b9      	str	r1, [r7, #8]
 8009368:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2200      	movs	r2, #0
 8009372:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f7ff ff84 	bl	8009284 <SPI_WaitFifoStateUntilTimeout>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d007      	beq.n	8009392 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009386:	f043 0220 	orr.w	r2, r3, #32
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e027      	b.n	80093e2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	2200      	movs	r2, #0
 800939a:	2180      	movs	r1, #128	; 0x80
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f7ff ff07 	bl	80091b0 <SPI_WaitFlagStateUntilTimeout>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d007      	beq.n	80093b8 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093ac:	f043 0220 	orr.w	r2, r3, #32
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e014      	b.n	80093e2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2200      	movs	r2, #0
 80093c0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f7ff ff5d 	bl	8009284 <SPI_WaitFifoStateUntilTimeout>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d007      	beq.n	80093e0 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093d4:	f043 0220 	orr.w	r2, r3, #32
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80093dc:	2303      	movs	r3, #3
 80093de:	e000      	b.n	80093e2 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
	...

080093ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a2d      	ldr	r2, [pc, #180]	; (80094b0 <HAL_TIM_Base_Start_IT+0xc4>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d036      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009406:	d031      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a29      	ldr	r2, [pc, #164]	; (80094b4 <HAL_TIM_Base_Start_IT+0xc8>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d02c      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a28      	ldr	r2, [pc, #160]	; (80094b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d027      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a26      	ldr	r2, [pc, #152]	; (80094bc <HAL_TIM_Base_Start_IT+0xd0>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d022      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a25      	ldr	r2, [pc, #148]	; (80094c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d01d      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a23      	ldr	r2, [pc, #140]	; (80094c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d018      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a22      	ldr	r2, [pc, #136]	; (80094c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d013      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a20      	ldr	r2, [pc, #128]	; (80094cc <HAL_TIM_Base_Start_IT+0xe0>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d00e      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a1f      	ldr	r2, [pc, #124]	; (80094d0 <HAL_TIM_Base_Start_IT+0xe4>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d009      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a1d      	ldr	r2, [pc, #116]	; (80094d4 <HAL_TIM_Base_Start_IT+0xe8>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d004      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x80>
 8009462:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8009466:	481c      	ldr	r0, [pc, #112]	; (80094d8 <HAL_TIM_Base_Start_IT+0xec>)
 8009468:	f7fb fc59 	bl	8004d1e <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f042 0201 	orr.w	r2, r2, #1
 800947a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689a      	ldr	r2, [r3, #8]
 8009482:	4b16      	ldr	r3, [pc, #88]	; (80094dc <HAL_TIM_Base_Start_IT+0xf0>)
 8009484:	4013      	ands	r3, r2
 8009486:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2b06      	cmp	r3, #6
 800948c:	d00b      	beq.n	80094a6 <HAL_TIM_Base_Start_IT+0xba>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009494:	d007      	beq.n	80094a6 <HAL_TIM_Base_Start_IT+0xba>
  {
    __HAL_TIM_ENABLE(htim);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f042 0201 	orr.w	r2, r2, #1
 80094a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	40012c00 	.word	0x40012c00
 80094b4:	40000400 	.word	0x40000400
 80094b8:	40000800 	.word	0x40000800
 80094bc:	40000c00 	.word	0x40000c00
 80094c0:	40001000 	.word	0x40001000
 80094c4:	40001400 	.word	0x40001400
 80094c8:	40013400 	.word	0x40013400
 80094cc:	40014000 	.word	0x40014000
 80094d0:	40014400 	.word	0x40014400
 80094d4:	40014800 	.word	0x40014800
 80094d8:	0800bad8 	.word	0x0800bad8
 80094dc:	00010007 	.word	0x00010007

080094e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d101      	bne.n	80094f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e092      	b.n	8009618 <HAL_TIM_OC_Init+0x138>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a4a      	ldr	r2, [pc, #296]	; (8009620 <HAL_TIM_OC_Init+0x140>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d036      	beq.n	800956a <HAL_TIM_OC_Init+0x8a>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009504:	d031      	beq.n	800956a <HAL_TIM_OC_Init+0x8a>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a46      	ldr	r2, [pc, #280]	; (8009624 <HAL_TIM_OC_Init+0x144>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d02c      	beq.n	800956a <HAL_TIM_OC_Init+0x8a>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a44      	ldr	r2, [pc, #272]	; (8009628 <HAL_TIM_OC_Init+0x148>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d027      	beq.n	800956a <HAL_TIM_OC_Init+0x8a>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a43      	ldr	r2, [pc, #268]	; (800962c <HAL_TIM_OC_Init+0x14c>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d022      	beq.n	800956a <HAL_TIM_OC_Init+0x8a>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a41      	ldr	r2, [pc, #260]	; (8009630 <HAL_TIM_OC_Init+0x150>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d01d      	beq.n	800956a <HAL_TIM_OC_Init+0x8a>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a40      	ldr	r2, [pc, #256]	; (8009634 <HAL_TIM_OC_Init+0x154>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d018      	beq.n	800956a <HAL_TIM_OC_Init+0x8a>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a3e      	ldr	r2, [pc, #248]	; (8009638 <HAL_TIM_OC_Init+0x158>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d013      	beq.n	800956a <HAL_TIM_OC_Init+0x8a>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a3d      	ldr	r2, [pc, #244]	; (800963c <HAL_TIM_OC_Init+0x15c>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d00e      	beq.n	800956a <HAL_TIM_OC_Init+0x8a>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a3b      	ldr	r2, [pc, #236]	; (8009640 <HAL_TIM_OC_Init+0x160>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d009      	beq.n	800956a <HAL_TIM_OC_Init+0x8a>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a3a      	ldr	r2, [pc, #232]	; (8009644 <HAL_TIM_OC_Init+0x164>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d004      	beq.n	800956a <HAL_TIM_OC_Init+0x8a>
 8009560:	f240 2161 	movw	r1, #609	; 0x261
 8009564:	4838      	ldr	r0, [pc, #224]	; (8009648 <HAL_TIM_OC_Init+0x168>)
 8009566:	f7fb fbda 	bl	8004d1e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d014      	beq.n	800959c <HAL_TIM_OC_Init+0xbc>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	2b10      	cmp	r3, #16
 8009578:	d010      	beq.n	800959c <HAL_TIM_OC_Init+0xbc>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	2b20      	cmp	r3, #32
 8009580:	d00c      	beq.n	800959c <HAL_TIM_OC_Init+0xbc>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	2b40      	cmp	r3, #64	; 0x40
 8009588:	d008      	beq.n	800959c <HAL_TIM_OC_Init+0xbc>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	2b60      	cmp	r3, #96	; 0x60
 8009590:	d004      	beq.n	800959c <HAL_TIM_OC_Init+0xbc>
 8009592:	f240 2162 	movw	r1, #610	; 0x262
 8009596:	482c      	ldr	r0, [pc, #176]	; (8009648 <HAL_TIM_OC_Init+0x168>)
 8009598:	f7fb fbc1 	bl	8004d1e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00e      	beq.n	80095c2 <HAL_TIM_OC_Init+0xe2>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ac:	d009      	beq.n	80095c2 <HAL_TIM_OC_Init+0xe2>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095b6:	d004      	beq.n	80095c2 <HAL_TIM_OC_Init+0xe2>
 80095b8:	f240 2163 	movw	r1, #611	; 0x263
 80095bc:	4822      	ldr	r0, [pc, #136]	; (8009648 <HAL_TIM_OC_Init+0x168>)
 80095be:	f7fb fbae 	bl	8004d1e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d008      	beq.n	80095dc <HAL_TIM_OC_Init+0xfc>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	2b80      	cmp	r3, #128	; 0x80
 80095d0:	d004      	beq.n	80095dc <HAL_TIM_OC_Init+0xfc>
 80095d2:	f44f 7119 	mov.w	r1, #612	; 0x264
 80095d6:	481c      	ldr	r0, [pc, #112]	; (8009648 <HAL_TIM_OC_Init+0x168>)
 80095d8:	f7fb fba1 	bl	8004d1e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d106      	bne.n	80095f6 <HAL_TIM_OC_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7fc fc55 	bl	8005ea0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2202      	movs	r2, #2
 80095fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	3304      	adds	r3, #4
 8009606:	4619      	mov	r1, r3
 8009608:	4610      	mov	r0, r2
 800960a:	f000 fb0b 	bl	8009c24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	40012c00 	.word	0x40012c00
 8009624:	40000400 	.word	0x40000400
 8009628:	40000800 	.word	0x40000800
 800962c:	40000c00 	.word	0x40000c00
 8009630:	40001000 	.word	0x40001000
 8009634:	40001400 	.word	0x40001400
 8009638:	40013400 	.word	0x40013400
 800963c:	40014000 	.word	0x40014000
 8009640:	40014400 	.word	0x40014400
 8009644:	40014800 	.word	0x40014800
 8009648:	0800bad8 	.word	0x0800bad8

0800964c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	f003 0302 	and.w	r3, r3, #2
 800965e:	2b02      	cmp	r3, #2
 8009660:	d122      	bne.n	80096a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f003 0302 	and.w	r3, r3, #2
 800966c:	2b02      	cmp	r3, #2
 800966e:	d11b      	bne.n	80096a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f06f 0202 	mvn.w	r2, #2
 8009678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	f003 0303 	and.w	r3, r3, #3
 800968a:	2b00      	cmp	r3, #0
 800968c:	d003      	beq.n	8009696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 faaa 	bl	8009be8 <HAL_TIM_IC_CaptureCallback>
 8009694:	e005      	b.n	80096a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fa9c 	bl	8009bd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 faad 	bl	8009bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	f003 0304 	and.w	r3, r3, #4
 80096b2:	2b04      	cmp	r3, #4
 80096b4:	d122      	bne.n	80096fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	f003 0304 	and.w	r3, r3, #4
 80096c0:	2b04      	cmp	r3, #4
 80096c2:	d11b      	bne.n	80096fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f06f 0204 	mvn.w	r2, #4
 80096cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2202      	movs	r2, #2
 80096d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d003      	beq.n	80096ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fa80 	bl	8009be8 <HAL_TIM_IC_CaptureCallback>
 80096e8:	e005      	b.n	80096f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fa72 	bl	8009bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fa83 	bl	8009bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	f003 0308 	and.w	r3, r3, #8
 8009706:	2b08      	cmp	r3, #8
 8009708:	d122      	bne.n	8009750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	f003 0308 	and.w	r3, r3, #8
 8009714:	2b08      	cmp	r3, #8
 8009716:	d11b      	bne.n	8009750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f06f 0208 	mvn.w	r2, #8
 8009720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2204      	movs	r2, #4
 8009726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	f003 0303 	and.w	r3, r3, #3
 8009732:	2b00      	cmp	r3, #0
 8009734:	d003      	beq.n	800973e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fa56 	bl	8009be8 <HAL_TIM_IC_CaptureCallback>
 800973c:	e005      	b.n	800974a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fa48 	bl	8009bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fa59 	bl	8009bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	f003 0310 	and.w	r3, r3, #16
 800975a:	2b10      	cmp	r3, #16
 800975c:	d122      	bne.n	80097a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	f003 0310 	and.w	r3, r3, #16
 8009768:	2b10      	cmp	r3, #16
 800976a:	d11b      	bne.n	80097a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f06f 0210 	mvn.w	r2, #16
 8009774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2208      	movs	r2, #8
 800977a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009786:	2b00      	cmp	r3, #0
 8009788:	d003      	beq.n	8009792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fa2c 	bl	8009be8 <HAL_TIM_IC_CaptureCallback>
 8009790:	e005      	b.n	800979e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fa1e 	bl	8009bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fa2f 	bl	8009bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d10e      	bne.n	80097d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	f003 0301 	and.w	r3, r3, #1
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d107      	bne.n	80097d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f06f 0201 	mvn.w	r2, #1
 80097c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7f7 fdba 	bl	8001344 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097da:	2b80      	cmp	r3, #128	; 0x80
 80097dc:	d10e      	bne.n	80097fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097e8:	2b80      	cmp	r3, #128	; 0x80
 80097ea:	d107      	bne.n	80097fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 ff3e 	bl	800a678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800980a:	d10e      	bne.n	800982a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009816:	2b80      	cmp	r3, #128	; 0x80
 8009818:	d107      	bne.n	800982a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 ff31 	bl	800a68c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009834:	2b40      	cmp	r3, #64	; 0x40
 8009836:	d10e      	bne.n	8009856 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009842:	2b40      	cmp	r3, #64	; 0x40
 8009844:	d107      	bne.n	8009856 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800984e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f9dd 	bl	8009c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	f003 0320 	and.w	r3, r3, #32
 8009860:	2b20      	cmp	r3, #32
 8009862:	d10e      	bne.n	8009882 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b20      	cmp	r3, #32
 8009870:	d107      	bne.n	8009882 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f06f 0220 	mvn.w	r2, #32
 800987a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fef1 	bl	800a664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009882:	bf00      	nop
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
	...

0800988c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d016      	beq.n	80098cc <HAL_TIM_OC_ConfigChannel+0x40>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b04      	cmp	r3, #4
 80098a2:	d013      	beq.n	80098cc <HAL_TIM_OC_ConfigChannel+0x40>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2b08      	cmp	r3, #8
 80098a8:	d010      	beq.n	80098cc <HAL_TIM_OC_ConfigChannel+0x40>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b0c      	cmp	r3, #12
 80098ae:	d00d      	beq.n	80098cc <HAL_TIM_OC_ConfigChannel+0x40>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b10      	cmp	r3, #16
 80098b4:	d00a      	beq.n	80098cc <HAL_TIM_OC_ConfigChannel+0x40>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b14      	cmp	r3, #20
 80098ba:	d007      	beq.n	80098cc <HAL_TIM_OC_ConfigChannel+0x40>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b3c      	cmp	r3, #60	; 0x3c
 80098c0:	d004      	beq.n	80098cc <HAL_TIM_OC_ConfigChannel+0x40>
 80098c2:	f640 5155 	movw	r1, #3413	; 0xd55
 80098c6:	4899      	ldr	r0, [pc, #612]	; (8009b2c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 80098c8:	f7fb fa29 	bl	8004d1e <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d022      	beq.n	800991a <HAL_TIM_OC_ConfigChannel+0x8e>
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b10      	cmp	r3, #16
 80098da:	d01e      	beq.n	800991a <HAL_TIM_OC_ConfigChannel+0x8e>
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b20      	cmp	r3, #32
 80098e2:	d01a      	beq.n	800991a <HAL_TIM_OC_ConfigChannel+0x8e>
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b30      	cmp	r3, #48	; 0x30
 80098ea:	d016      	beq.n	800991a <HAL_TIM_OC_ConfigChannel+0x8e>
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b50      	cmp	r3, #80	; 0x50
 80098f2:	d012      	beq.n	800991a <HAL_TIM_OC_ConfigChannel+0x8e>
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b40      	cmp	r3, #64	; 0x40
 80098fa:	d00e      	beq.n	800991a <HAL_TIM_OC_ConfigChannel+0x8e>
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009904:	d009      	beq.n	800991a <HAL_TIM_OC_ConfigChannel+0x8e>
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a89      	ldr	r2, [pc, #548]	; (8009b30 <HAL_TIM_OC_ConfigChannel+0x2a4>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d004      	beq.n	800991a <HAL_TIM_OC_ConfigChannel+0x8e>
 8009910:	f640 5156 	movw	r1, #3414	; 0xd56
 8009914:	4885      	ldr	r0, [pc, #532]	; (8009b2c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 8009916:	f7fb fa02 	bl	8004d1e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d008      	beq.n	8009934 <HAL_TIM_OC_ConfigChannel+0xa8>
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	2b02      	cmp	r3, #2
 8009928:	d004      	beq.n	8009934 <HAL_TIM_OC_ConfigChannel+0xa8>
 800992a:	f640 5157 	movw	r1, #3415	; 0xd57
 800992e:	487f      	ldr	r0, [pc, #508]	; (8009b2c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 8009930:	f7fb f9f5 	bl	8004d1e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800993a:	2b01      	cmp	r3, #1
 800993c:	d101      	bne.n	8009942 <HAL_TIM_OC_ConfigChannel+0xb6>
 800993e:	2302      	movs	r3, #2
 8009940:	e13e      	b.n	8009bc0 <HAL_TIM_OC_ConfigChannel+0x334>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2202      	movs	r2, #2
 800994e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2b14      	cmp	r3, #20
 8009956:	f200 8129 	bhi.w	8009bac <HAL_TIM_OC_ConfigChannel+0x320>
 800995a:	a201      	add	r2, pc, #4	; (adr r2, 8009960 <HAL_TIM_OC_ConfigChannel+0xd4>)
 800995c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009960:	080099b5 	.word	0x080099b5
 8009964:	08009bad 	.word	0x08009bad
 8009968:	08009bad 	.word	0x08009bad
 800996c:	08009bad 	.word	0x08009bad
 8009970:	08009a27 	.word	0x08009a27
 8009974:	08009bad 	.word	0x08009bad
 8009978:	08009bad 	.word	0x08009bad
 800997c:	08009bad 	.word	0x08009bad
 8009980:	08009a85 	.word	0x08009a85
 8009984:	08009bad 	.word	0x08009bad
 8009988:	08009bad 	.word	0x08009bad
 800998c:	08009bad 	.word	0x08009bad
 8009990:	08009ad9 	.word	0x08009ad9
 8009994:	08009bad 	.word	0x08009bad
 8009998:	08009bad 	.word	0x08009bad
 800999c:	08009bad 	.word	0x08009bad
 80099a0:	08009b55 	.word	0x08009b55
 80099a4:	08009bad 	.word	0x08009bad
 80099a8:	08009bad 	.word	0x08009bad
 80099ac:	08009bad 	.word	0x08009bad
 80099b0:	08009b81 	.word	0x08009b81
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a5e      	ldr	r2, [pc, #376]	; (8009b34 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d02c      	beq.n	8009a18 <HAL_TIM_OC_ConfigChannel+0x18c>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099c6:	d027      	beq.n	8009a18 <HAL_TIM_OC_ConfigChannel+0x18c>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a5a      	ldr	r2, [pc, #360]	; (8009b38 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d022      	beq.n	8009a18 <HAL_TIM_OC_ConfigChannel+0x18c>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a59      	ldr	r2, [pc, #356]	; (8009b3c <HAL_TIM_OC_ConfigChannel+0x2b0>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d01d      	beq.n	8009a18 <HAL_TIM_OC_ConfigChannel+0x18c>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a57      	ldr	r2, [pc, #348]	; (8009b40 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d018      	beq.n	8009a18 <HAL_TIM_OC_ConfigChannel+0x18c>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a56      	ldr	r2, [pc, #344]	; (8009b44 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d013      	beq.n	8009a18 <HAL_TIM_OC_ConfigChannel+0x18c>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a54      	ldr	r2, [pc, #336]	; (8009b48 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d00e      	beq.n	8009a18 <HAL_TIM_OC_ConfigChannel+0x18c>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a53      	ldr	r2, [pc, #332]	; (8009b4c <HAL_TIM_OC_ConfigChannel+0x2c0>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d009      	beq.n	8009a18 <HAL_TIM_OC_ConfigChannel+0x18c>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a51      	ldr	r2, [pc, #324]	; (8009b50 <HAL_TIM_OC_ConfigChannel+0x2c4>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d004      	beq.n	8009a18 <HAL_TIM_OC_ConfigChannel+0x18c>
 8009a0e:	f640 5163 	movw	r1, #3427	; 0xd63
 8009a12:	4846      	ldr	r0, [pc, #280]	; (8009b2c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 8009a14:	f7fb f983 	bl	8004d1e <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68b9      	ldr	r1, [r7, #8]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 f99a 	bl	8009d58 <TIM_OC1_SetConfig>
      break;
 8009a24:	e0c3      	b.n	8009bae <HAL_TIM_OC_ConfigChannel+0x322>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a42      	ldr	r2, [pc, #264]	; (8009b34 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d022      	beq.n	8009a76 <HAL_TIM_OC_ConfigChannel+0x1ea>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a38:	d01d      	beq.n	8009a76 <HAL_TIM_OC_ConfigChannel+0x1ea>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a3e      	ldr	r2, [pc, #248]	; (8009b38 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d018      	beq.n	8009a76 <HAL_TIM_OC_ConfigChannel+0x1ea>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a3c      	ldr	r2, [pc, #240]	; (8009b3c <HAL_TIM_OC_ConfigChannel+0x2b0>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d013      	beq.n	8009a76 <HAL_TIM_OC_ConfigChannel+0x1ea>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a3b      	ldr	r2, [pc, #236]	; (8009b40 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d00e      	beq.n	8009a76 <HAL_TIM_OC_ConfigChannel+0x1ea>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a39      	ldr	r2, [pc, #228]	; (8009b44 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d009      	beq.n	8009a76 <HAL_TIM_OC_ConfigChannel+0x1ea>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a38      	ldr	r2, [pc, #224]	; (8009b48 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d004      	beq.n	8009a76 <HAL_TIM_OC_ConfigChannel+0x1ea>
 8009a6c:	f640 516d 	movw	r1, #3437	; 0xd6d
 8009a70:	482e      	ldr	r0, [pc, #184]	; (8009b2c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 8009a72:	f7fb f954 	bl	8004d1e <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68b9      	ldr	r1, [r7, #8]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 fa25 	bl	8009ecc <TIM_OC2_SetConfig>
      break;
 8009a82:	e094      	b.n	8009bae <HAL_TIM_OC_ConfigChannel+0x322>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a2a      	ldr	r2, [pc, #168]	; (8009b34 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d01d      	beq.n	8009aca <HAL_TIM_OC_ConfigChannel+0x23e>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a96:	d018      	beq.n	8009aca <HAL_TIM_OC_ConfigChannel+0x23e>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a26      	ldr	r2, [pc, #152]	; (8009b38 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d013      	beq.n	8009aca <HAL_TIM_OC_ConfigChannel+0x23e>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a25      	ldr	r2, [pc, #148]	; (8009b3c <HAL_TIM_OC_ConfigChannel+0x2b0>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d00e      	beq.n	8009aca <HAL_TIM_OC_ConfigChannel+0x23e>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a23      	ldr	r2, [pc, #140]	; (8009b40 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d009      	beq.n	8009aca <HAL_TIM_OC_ConfigChannel+0x23e>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a22      	ldr	r2, [pc, #136]	; (8009b44 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d004      	beq.n	8009aca <HAL_TIM_OC_ConfigChannel+0x23e>
 8009ac0:	f640 5177 	movw	r1, #3447	; 0xd77
 8009ac4:	4819      	ldr	r0, [pc, #100]	; (8009b2c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 8009ac6:	f7fb f92a 	bl	8004d1e <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68b9      	ldr	r1, [r7, #8]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f000 faad 	bl	800a030 <TIM_OC3_SetConfig>
      break;
 8009ad6:	e06a      	b.n	8009bae <HAL_TIM_OC_ConfigChannel+0x322>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a15      	ldr	r2, [pc, #84]	; (8009b34 <HAL_TIM_OC_ConfigChannel+0x2a8>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d01d      	beq.n	8009b1e <HAL_TIM_OC_ConfigChannel+0x292>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aea:	d018      	beq.n	8009b1e <HAL_TIM_OC_ConfigChannel+0x292>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a11      	ldr	r2, [pc, #68]	; (8009b38 <HAL_TIM_OC_ConfigChannel+0x2ac>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d013      	beq.n	8009b1e <HAL_TIM_OC_ConfigChannel+0x292>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a10      	ldr	r2, [pc, #64]	; (8009b3c <HAL_TIM_OC_ConfigChannel+0x2b0>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d00e      	beq.n	8009b1e <HAL_TIM_OC_ConfigChannel+0x292>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a0e      	ldr	r2, [pc, #56]	; (8009b40 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d009      	beq.n	8009b1e <HAL_TIM_OC_ConfigChannel+0x292>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a0d      	ldr	r2, [pc, #52]	; (8009b44 <HAL_TIM_OC_ConfigChannel+0x2b8>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d004      	beq.n	8009b1e <HAL_TIM_OC_ConfigChannel+0x292>
 8009b14:	f640 5181 	movw	r1, #3457	; 0xd81
 8009b18:	4804      	ldr	r0, [pc, #16]	; (8009b2c <HAL_TIM_OC_ConfigChannel+0x2a0>)
 8009b1a:	f7fb f900 	bl	8004d1e <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68b9      	ldr	r1, [r7, #8]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 fb35 	bl	800a194 <TIM_OC4_SetConfig>
      break;
 8009b2a:	e040      	b.n	8009bae <HAL_TIM_OC_ConfigChannel+0x322>
 8009b2c:	0800bad8 	.word	0x0800bad8
 8009b30:	00010010 	.word	0x00010010
 8009b34:	40012c00 	.word	0x40012c00
 8009b38:	40000400 	.word	0x40000400
 8009b3c:	40000800 	.word	0x40000800
 8009b40:	40000c00 	.word	0x40000c00
 8009b44:	40013400 	.word	0x40013400
 8009b48:	40014000 	.word	0x40014000
 8009b4c:	40014400 	.word	0x40014400
 8009b50:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a1b      	ldr	r2, [pc, #108]	; (8009bc8 <HAL_TIM_OC_ConfigChannel+0x33c>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d009      	beq.n	8009b72 <HAL_TIM_OC_ConfigChannel+0x2e6>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a1a      	ldr	r2, [pc, #104]	; (8009bcc <HAL_TIM_OC_ConfigChannel+0x340>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d004      	beq.n	8009b72 <HAL_TIM_OC_ConfigChannel+0x2e6>
 8009b68:	f640 518b 	movw	r1, #3467	; 0xd8b
 8009b6c:	4818      	ldr	r0, [pc, #96]	; (8009bd0 <HAL_TIM_OC_ConfigChannel+0x344>)
 8009b6e:	f7fb f8d6 	bl	8004d1e <assert_failed>

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68b9      	ldr	r1, [r7, #8]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 fb83 	bl	800a284 <TIM_OC5_SetConfig>
      break;
 8009b7e:	e016      	b.n	8009bae <HAL_TIM_OC_ConfigChannel+0x322>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a10      	ldr	r2, [pc, #64]	; (8009bc8 <HAL_TIM_OC_ConfigChannel+0x33c>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d009      	beq.n	8009b9e <HAL_TIM_OC_ConfigChannel+0x312>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a0f      	ldr	r2, [pc, #60]	; (8009bcc <HAL_TIM_OC_ConfigChannel+0x340>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d004      	beq.n	8009b9e <HAL_TIM_OC_ConfigChannel+0x312>
 8009b94:	f640 5195 	movw	r1, #3477	; 0xd95
 8009b98:	480d      	ldr	r0, [pc, #52]	; (8009bd0 <HAL_TIM_OC_ConfigChannel+0x344>)
 8009b9a:	f7fb f8c0 	bl	8004d1e <assert_failed>

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68b9      	ldr	r1, [r7, #8]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f000 fbd1 	bl	800a34c <TIM_OC6_SetConfig>
      break;
 8009baa:	e000      	b.n	8009bae <HAL_TIM_OC_ConfigChannel+0x322>
    }

    default:
      break;
 8009bac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	40012c00 	.word	0x40012c00
 8009bcc:	40013400 	.word	0x40013400
 8009bd0:	0800bad8 	.word	0x0800bad8

08009bd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a40      	ldr	r2, [pc, #256]	; (8009d38 <TIM_Base_SetConfig+0x114>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d013      	beq.n	8009c64 <TIM_Base_SetConfig+0x40>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c42:	d00f      	beq.n	8009c64 <TIM_Base_SetConfig+0x40>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a3d      	ldr	r2, [pc, #244]	; (8009d3c <TIM_Base_SetConfig+0x118>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d00b      	beq.n	8009c64 <TIM_Base_SetConfig+0x40>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a3c      	ldr	r2, [pc, #240]	; (8009d40 <TIM_Base_SetConfig+0x11c>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d007      	beq.n	8009c64 <TIM_Base_SetConfig+0x40>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a3b      	ldr	r2, [pc, #236]	; (8009d44 <TIM_Base_SetConfig+0x120>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d003      	beq.n	8009c64 <TIM_Base_SetConfig+0x40>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a3a      	ldr	r2, [pc, #232]	; (8009d48 <TIM_Base_SetConfig+0x124>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d108      	bne.n	8009c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	4313      	orrs	r3, r2
 8009c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a2f      	ldr	r2, [pc, #188]	; (8009d38 <TIM_Base_SetConfig+0x114>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d01f      	beq.n	8009cbe <TIM_Base_SetConfig+0x9a>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c84:	d01b      	beq.n	8009cbe <TIM_Base_SetConfig+0x9a>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a2c      	ldr	r2, [pc, #176]	; (8009d3c <TIM_Base_SetConfig+0x118>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d017      	beq.n	8009cbe <TIM_Base_SetConfig+0x9a>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a2b      	ldr	r2, [pc, #172]	; (8009d40 <TIM_Base_SetConfig+0x11c>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d013      	beq.n	8009cbe <TIM_Base_SetConfig+0x9a>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a2a      	ldr	r2, [pc, #168]	; (8009d44 <TIM_Base_SetConfig+0x120>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d00f      	beq.n	8009cbe <TIM_Base_SetConfig+0x9a>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a29      	ldr	r2, [pc, #164]	; (8009d48 <TIM_Base_SetConfig+0x124>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d00b      	beq.n	8009cbe <TIM_Base_SetConfig+0x9a>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a28      	ldr	r2, [pc, #160]	; (8009d4c <TIM_Base_SetConfig+0x128>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d007      	beq.n	8009cbe <TIM_Base_SetConfig+0x9a>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a27      	ldr	r2, [pc, #156]	; (8009d50 <TIM_Base_SetConfig+0x12c>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d003      	beq.n	8009cbe <TIM_Base_SetConfig+0x9a>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a26      	ldr	r2, [pc, #152]	; (8009d54 <TIM_Base_SetConfig+0x130>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d108      	bne.n	8009cd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	689a      	ldr	r2, [r3, #8]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a10      	ldr	r2, [pc, #64]	; (8009d38 <TIM_Base_SetConfig+0x114>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d00f      	beq.n	8009d1c <TIM_Base_SetConfig+0xf8>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a12      	ldr	r2, [pc, #72]	; (8009d48 <TIM_Base_SetConfig+0x124>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d00b      	beq.n	8009d1c <TIM_Base_SetConfig+0xf8>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a11      	ldr	r2, [pc, #68]	; (8009d4c <TIM_Base_SetConfig+0x128>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d007      	beq.n	8009d1c <TIM_Base_SetConfig+0xf8>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a10      	ldr	r2, [pc, #64]	; (8009d50 <TIM_Base_SetConfig+0x12c>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d003      	beq.n	8009d1c <TIM_Base_SetConfig+0xf8>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a0f      	ldr	r2, [pc, #60]	; (8009d54 <TIM_Base_SetConfig+0x130>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d103      	bne.n	8009d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	691a      	ldr	r2, [r3, #16]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	615a      	str	r2, [r3, #20]
}
 8009d2a:	bf00      	nop
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	40012c00 	.word	0x40012c00
 8009d3c:	40000400 	.word	0x40000400
 8009d40:	40000800 	.word	0x40000800
 8009d44:	40000c00 	.word	0x40000c00
 8009d48:	40013400 	.word	0x40013400
 8009d4c:	40014000 	.word	0x40014000
 8009d50:	40014400 	.word	0x40014400
 8009d54:	40014800 	.word	0x40014800

08009d58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	f023 0201 	bic.w	r2, r3, #1
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f023 0303 	bic.w	r3, r3, #3
 8009d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f023 0302 	bic.w	r3, r3, #2
 8009da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a40      	ldr	r2, [pc, #256]	; (8009eb4 <TIM_OC1_SetConfig+0x15c>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d00f      	beq.n	8009dd8 <TIM_OC1_SetConfig+0x80>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a3f      	ldr	r2, [pc, #252]	; (8009eb8 <TIM_OC1_SetConfig+0x160>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d00b      	beq.n	8009dd8 <TIM_OC1_SetConfig+0x80>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a3e      	ldr	r2, [pc, #248]	; (8009ebc <TIM_OC1_SetConfig+0x164>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d007      	beq.n	8009dd8 <TIM_OC1_SetConfig+0x80>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a3d      	ldr	r2, [pc, #244]	; (8009ec0 <TIM_OC1_SetConfig+0x168>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d003      	beq.n	8009dd8 <TIM_OC1_SetConfig+0x80>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a3c      	ldr	r2, [pc, #240]	; (8009ec4 <TIM_OC1_SetConfig+0x16c>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d119      	bne.n	8009e0c <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d008      	beq.n	8009df2 <TIM_OC1_SetConfig+0x9a>
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	2b08      	cmp	r3, #8
 8009de6:	d004      	beq.n	8009df2 <TIM_OC1_SetConfig+0x9a>
 8009de8:	f241 718e 	movw	r1, #6030	; 0x178e
 8009dec:	4836      	ldr	r0, [pc, #216]	; (8009ec8 <TIM_OC1_SetConfig+0x170>)
 8009dee:	f7fa ff96 	bl	8004d1e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f023 0308 	bic.w	r3, r3, #8
 8009df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f023 0304 	bic.w	r3, r3, #4
 8009e0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a29      	ldr	r2, [pc, #164]	; (8009eb4 <TIM_OC1_SetConfig+0x15c>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d00f      	beq.n	8009e34 <TIM_OC1_SetConfig+0xdc>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a28      	ldr	r2, [pc, #160]	; (8009eb8 <TIM_OC1_SetConfig+0x160>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d00b      	beq.n	8009e34 <TIM_OC1_SetConfig+0xdc>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a27      	ldr	r2, [pc, #156]	; (8009ebc <TIM_OC1_SetConfig+0x164>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d007      	beq.n	8009e34 <TIM_OC1_SetConfig+0xdc>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a26      	ldr	r2, [pc, #152]	; (8009ec0 <TIM_OC1_SetConfig+0x168>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d003      	beq.n	8009e34 <TIM_OC1_SetConfig+0xdc>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a25      	ldr	r2, [pc, #148]	; (8009ec4 <TIM_OC1_SetConfig+0x16c>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d12d      	bne.n	8009e90 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e3c:	d008      	beq.n	8009e50 <TIM_OC1_SetConfig+0xf8>
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d004      	beq.n	8009e50 <TIM_OC1_SetConfig+0xf8>
 8009e46:	f241 719b 	movw	r1, #6043	; 0x179b
 8009e4a:	481f      	ldr	r0, [pc, #124]	; (8009ec8 <TIM_OC1_SetConfig+0x170>)
 8009e4c:	f7fa ff67 	bl	8004d1e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	695b      	ldr	r3, [r3, #20]
 8009e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e58:	d008      	beq.n	8009e6c <TIM_OC1_SetConfig+0x114>
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	695b      	ldr	r3, [r3, #20]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d004      	beq.n	8009e6c <TIM_OC1_SetConfig+0x114>
 8009e62:	f241 719c 	movw	r1, #6044	; 0x179c
 8009e66:	4818      	ldr	r0, [pc, #96]	; (8009ec8 <TIM_OC1_SetConfig+0x170>)
 8009e68:	f7fa ff59 	bl	8004d1e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	693a      	ldr	r2, [r7, #16]
 8009e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	685a      	ldr	r2, [r3, #4]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	697a      	ldr	r2, [r7, #20]
 8009ea8:	621a      	str	r2, [r3, #32]
}
 8009eaa:	bf00      	nop
 8009eac:	3718      	adds	r7, #24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	40012c00 	.word	0x40012c00
 8009eb8:	40013400 	.word	0x40013400
 8009ebc:	40014000 	.word	0x40014000
 8009ec0:	40014400 	.word	0x40014400
 8009ec4:	40014800 	.word	0x40014800
 8009ec8:	0800bad8 	.word	0x0800bad8

08009ecc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	f023 0210 	bic.w	r2, r3, #16
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	699b      	ldr	r3, [r3, #24]
 8009ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	021b      	lsls	r3, r3, #8
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	f023 0320 	bic.w	r3, r3, #32
 8009f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	011b      	lsls	r3, r3, #4
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a3b      	ldr	r2, [pc, #236]	; (800a018 <TIM_OC2_SetConfig+0x14c>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d003      	beq.n	8009f38 <TIM_OC2_SetConfig+0x6c>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a3a      	ldr	r2, [pc, #232]	; (800a01c <TIM_OC2_SetConfig+0x150>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d11a      	bne.n	8009f6e <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d008      	beq.n	8009f52 <TIM_OC2_SetConfig+0x86>
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	2b08      	cmp	r3, #8
 8009f46:	d004      	beq.n	8009f52 <TIM_OC2_SetConfig+0x86>
 8009f48:	f241 71d9 	movw	r1, #6105	; 0x17d9
 8009f4c:	4834      	ldr	r0, [pc, #208]	; (800a020 <TIM_OC2_SetConfig+0x154>)
 8009f4e:	f7fa fee6 	bl	8004d1e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	011b      	lsls	r3, r3, #4
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f6c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a29      	ldr	r2, [pc, #164]	; (800a018 <TIM_OC2_SetConfig+0x14c>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d00f      	beq.n	8009f96 <TIM_OC2_SetConfig+0xca>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a28      	ldr	r2, [pc, #160]	; (800a01c <TIM_OC2_SetConfig+0x150>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d00b      	beq.n	8009f96 <TIM_OC2_SetConfig+0xca>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4a28      	ldr	r2, [pc, #160]	; (800a024 <TIM_OC2_SetConfig+0x158>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d007      	beq.n	8009f96 <TIM_OC2_SetConfig+0xca>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a27      	ldr	r2, [pc, #156]	; (800a028 <TIM_OC2_SetConfig+0x15c>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d003      	beq.n	8009f96 <TIM_OC2_SetConfig+0xca>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4a26      	ldr	r2, [pc, #152]	; (800a02c <TIM_OC2_SetConfig+0x160>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d12f      	bne.n	8009ff6 <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f9e:	d008      	beq.n	8009fb2 <TIM_OC2_SetConfig+0xe6>
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d004      	beq.n	8009fb2 <TIM_OC2_SetConfig+0xe6>
 8009fa8:	f241 71e7 	movw	r1, #6119	; 0x17e7
 8009fac:	481c      	ldr	r0, [pc, #112]	; (800a020 <TIM_OC2_SetConfig+0x154>)
 8009fae:	f7fa feb6 	bl	8004d1e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fba:	d008      	beq.n	8009fce <TIM_OC2_SetConfig+0x102>
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	695b      	ldr	r3, [r3, #20]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d004      	beq.n	8009fce <TIM_OC2_SetConfig+0x102>
 8009fc4:	f241 71e8 	movw	r1, #6120	; 0x17e8
 8009fc8:	4815      	ldr	r0, [pc, #84]	; (800a020 <TIM_OC2_SetConfig+0x154>)
 8009fca:	f7fa fea8 	bl	8004d1e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	699b      	ldr	r3, [r3, #24]
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	693a      	ldr	r2, [r7, #16]
 8009ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	685a      	ldr	r2, [r3, #4]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	621a      	str	r2, [r3, #32]
}
 800a010:	bf00      	nop
 800a012:	3718      	adds	r7, #24
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	40012c00 	.word	0x40012c00
 800a01c:	40013400 	.word	0x40013400
 800a020:	0800bad8 	.word	0x0800bad8
 800a024:	40014000 	.word	0x40014000
 800a028:	40014400 	.word	0x40014400
 800a02c:	40014800 	.word	0x40014800

0800a030 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a1b      	ldr	r3, [r3, #32]
 800a03e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	69db      	ldr	r3, [r3, #28]
 800a056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a05e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f023 0303 	bic.w	r3, r3, #3
 800a06a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	4313      	orrs	r3, r2
 800a074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a07c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	021b      	lsls	r3, r3, #8
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	4313      	orrs	r3, r2
 800a088:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a3b      	ldr	r2, [pc, #236]	; (800a17c <TIM_OC3_SetConfig+0x14c>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d003      	beq.n	800a09a <TIM_OC3_SetConfig+0x6a>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a3a      	ldr	r2, [pc, #232]	; (800a180 <TIM_OC3_SetConfig+0x150>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d11a      	bne.n	800a0d0 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d008      	beq.n	800a0b4 <TIM_OC3_SetConfig+0x84>
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	2b08      	cmp	r3, #8
 800a0a8:	d004      	beq.n	800a0b4 <TIM_OC3_SetConfig+0x84>
 800a0aa:	f641 0124 	movw	r1, #6180	; 0x1824
 800a0ae:	4835      	ldr	r0, [pc, #212]	; (800a184 <TIM_OC3_SetConfig+0x154>)
 800a0b0:	f7fa fe35 	bl	8004d1e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	021b      	lsls	r3, r3, #8
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a2a      	ldr	r2, [pc, #168]	; (800a17c <TIM_OC3_SetConfig+0x14c>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d00f      	beq.n	800a0f8 <TIM_OC3_SetConfig+0xc8>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a29      	ldr	r2, [pc, #164]	; (800a180 <TIM_OC3_SetConfig+0x150>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d00b      	beq.n	800a0f8 <TIM_OC3_SetConfig+0xc8>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a29      	ldr	r2, [pc, #164]	; (800a188 <TIM_OC3_SetConfig+0x158>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d007      	beq.n	800a0f8 <TIM_OC3_SetConfig+0xc8>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a28      	ldr	r2, [pc, #160]	; (800a18c <TIM_OC3_SetConfig+0x15c>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d003      	beq.n	800a0f8 <TIM_OC3_SetConfig+0xc8>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a27      	ldr	r2, [pc, #156]	; (800a190 <TIM_OC3_SetConfig+0x160>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d12f      	bne.n	800a158 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	699b      	ldr	r3, [r3, #24]
 800a0fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a100:	d008      	beq.n	800a114 <TIM_OC3_SetConfig+0xe4>
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d004      	beq.n	800a114 <TIM_OC3_SetConfig+0xe4>
 800a10a:	f641 0131 	movw	r1, #6193	; 0x1831
 800a10e:	481d      	ldr	r0, [pc, #116]	; (800a184 <TIM_OC3_SetConfig+0x154>)
 800a110:	f7fa fe05 	bl	8004d1e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a11c:	d008      	beq.n	800a130 <TIM_OC3_SetConfig+0x100>
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	695b      	ldr	r3, [r3, #20]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d004      	beq.n	800a130 <TIM_OC3_SetConfig+0x100>
 800a126:	f641 0132 	movw	r1, #6194	; 0x1832
 800a12a:	4816      	ldr	r0, [pc, #88]	; (800a184 <TIM_OC3_SetConfig+0x154>)
 800a12c:	f7fa fdf7 	bl	8004d1e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a13e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	695b      	ldr	r3, [r3, #20]
 800a144:	011b      	lsls	r3, r3, #4
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	4313      	orrs	r3, r2
 800a14a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	011b      	lsls	r3, r3, #4
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	4313      	orrs	r3, r2
 800a156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	621a      	str	r2, [r3, #32]
}
 800a172:	bf00      	nop
 800a174:	3718      	adds	r7, #24
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	40012c00 	.word	0x40012c00
 800a180:	40013400 	.word	0x40013400
 800a184:	0800bad8 	.word	0x0800bad8
 800a188:	40014000 	.word	0x40014000
 800a18c:	40014400 	.word	0x40014400
 800a190:	40014800 	.word	0x40014800

0800a194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a1b      	ldr	r3, [r3, #32]
 800a1ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	69db      	ldr	r3, [r3, #28]
 800a1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	021b      	lsls	r3, r3, #8
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	031b      	lsls	r3, r3, #12
 800a1ea:	693a      	ldr	r2, [r7, #16]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a1e      	ldr	r2, [pc, #120]	; (800a26c <TIM_OC4_SetConfig+0xd8>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d00f      	beq.n	800a218 <TIM_OC4_SetConfig+0x84>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a1d      	ldr	r2, [pc, #116]	; (800a270 <TIM_OC4_SetConfig+0xdc>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d00b      	beq.n	800a218 <TIM_OC4_SetConfig+0x84>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a1c      	ldr	r2, [pc, #112]	; (800a274 <TIM_OC4_SetConfig+0xe0>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d007      	beq.n	800a218 <TIM_OC4_SetConfig+0x84>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a1b      	ldr	r2, [pc, #108]	; (800a278 <TIM_OC4_SetConfig+0xe4>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d003      	beq.n	800a218 <TIM_OC4_SetConfig+0x84>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a1a      	ldr	r2, [pc, #104]	; (800a27c <TIM_OC4_SetConfig+0xe8>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d117      	bne.n	800a248 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a220:	d008      	beq.n	800a234 <TIM_OC4_SetConfig+0xa0>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d004      	beq.n	800a234 <TIM_OC4_SetConfig+0xa0>
 800a22a:	f641 0170 	movw	r1, #6256	; 0x1870
 800a22e:	4814      	ldr	r0, [pc, #80]	; (800a280 <TIM_OC4_SetConfig+0xec>)
 800a230:	f7fa fd75 	bl	8004d1e <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a23a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	019b      	lsls	r3, r3, #6
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	4313      	orrs	r3, r2
 800a246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	621a      	str	r2, [r3, #32]
}
 800a262:	bf00      	nop
 800a264:	3718      	adds	r7, #24
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	40012c00 	.word	0x40012c00
 800a270:	40013400 	.word	0x40013400
 800a274:	40014000 	.word	0x40014000
 800a278:	40014400 	.word	0x40014400
 800a27c:	40014800 	.word	0x40014800
 800a280:	0800bad8 	.word	0x0800bad8

0800a284 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a284:	b480      	push	{r7}
 800a286:	b087      	sub	sp, #28
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a2c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	041b      	lsls	r3, r3, #16
 800a2d0:	693a      	ldr	r2, [r7, #16]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a17      	ldr	r2, [pc, #92]	; (800a338 <TIM_OC5_SetConfig+0xb4>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d00f      	beq.n	800a2fe <TIM_OC5_SetConfig+0x7a>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4a16      	ldr	r2, [pc, #88]	; (800a33c <TIM_OC5_SetConfig+0xb8>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d00b      	beq.n	800a2fe <TIM_OC5_SetConfig+0x7a>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a15      	ldr	r2, [pc, #84]	; (800a340 <TIM_OC5_SetConfig+0xbc>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d007      	beq.n	800a2fe <TIM_OC5_SetConfig+0x7a>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a14      	ldr	r2, [pc, #80]	; (800a344 <TIM_OC5_SetConfig+0xc0>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d003      	beq.n	800a2fe <TIM_OC5_SetConfig+0x7a>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a13      	ldr	r2, [pc, #76]	; (800a348 <TIM_OC5_SetConfig+0xc4>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d109      	bne.n	800a312 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a304:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	021b      	lsls	r3, r3, #8
 800a30c:	697a      	ldr	r2, [r7, #20]
 800a30e:	4313      	orrs	r3, r2
 800a310:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	693a      	ldr	r2, [r7, #16]
 800a32a:	621a      	str	r2, [r3, #32]
}
 800a32c:	bf00      	nop
 800a32e:	371c      	adds	r7, #28
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr
 800a338:	40012c00 	.word	0x40012c00
 800a33c:	40013400 	.word	0x40013400
 800a340:	40014000 	.word	0x40014000
 800a344:	40014400 	.word	0x40014400
 800a348:	40014800 	.word	0x40014800

0800a34c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b087      	sub	sp, #28
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a37a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a37e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	021b      	lsls	r3, r3, #8
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	4313      	orrs	r3, r2
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a392:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	051b      	lsls	r3, r3, #20
 800a39a:	693a      	ldr	r2, [r7, #16]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a18      	ldr	r2, [pc, #96]	; (800a404 <TIM_OC6_SetConfig+0xb8>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d00f      	beq.n	800a3c8 <TIM_OC6_SetConfig+0x7c>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a17      	ldr	r2, [pc, #92]	; (800a408 <TIM_OC6_SetConfig+0xbc>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d00b      	beq.n	800a3c8 <TIM_OC6_SetConfig+0x7c>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a16      	ldr	r2, [pc, #88]	; (800a40c <TIM_OC6_SetConfig+0xc0>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d007      	beq.n	800a3c8 <TIM_OC6_SetConfig+0x7c>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a15      	ldr	r2, [pc, #84]	; (800a410 <TIM_OC6_SetConfig+0xc4>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d003      	beq.n	800a3c8 <TIM_OC6_SetConfig+0x7c>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a14      	ldr	r2, [pc, #80]	; (800a414 <TIM_OC6_SetConfig+0xc8>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d109      	bne.n	800a3dc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	695b      	ldr	r3, [r3, #20]
 800a3d4:	029b      	lsls	r3, r3, #10
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	621a      	str	r2, [r3, #32]
}
 800a3f6:	bf00      	nop
 800a3f8:	371c      	adds	r7, #28
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	40012c00 	.word	0x40012c00
 800a408:	40013400 	.word	0x40013400
 800a40c:	40014000 	.word	0x40014000
 800a410:	40014400 	.word	0x40014400
 800a414:	40014800 	.word	0x40014800

0800a418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a86      	ldr	r2, [pc, #536]	; (800a640 <HAL_TIMEx_MasterConfigSynchronization+0x228>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d02c      	beq.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a434:	d027      	beq.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a82      	ldr	r2, [pc, #520]	; (800a644 <HAL_TIMEx_MasterConfigSynchronization+0x22c>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d022      	beq.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a80      	ldr	r2, [pc, #512]	; (800a648 <HAL_TIMEx_MasterConfigSynchronization+0x230>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d01d      	beq.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a7f      	ldr	r2, [pc, #508]	; (800a64c <HAL_TIMEx_MasterConfigSynchronization+0x234>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d018      	beq.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a7d      	ldr	r2, [pc, #500]	; (800a650 <HAL_TIMEx_MasterConfigSynchronization+0x238>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d013      	beq.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a7c      	ldr	r2, [pc, #496]	; (800a654 <HAL_TIMEx_MasterConfigSynchronization+0x23c>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d00e      	beq.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a7a      	ldr	r2, [pc, #488]	; (800a658 <HAL_TIMEx_MasterConfigSynchronization+0x240>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d009      	beq.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a79      	ldr	r2, [pc, #484]	; (800a65c <HAL_TIMEx_MasterConfigSynchronization+0x244>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d004      	beq.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800a47c:	f240 6167 	movw	r1, #1639	; 0x667
 800a480:	4877      	ldr	r0, [pc, #476]	; (800a660 <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 800a482:	f7fa fc4c 	bl	8004d1e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d020      	beq.n	800a4d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b10      	cmp	r3, #16
 800a494:	d01c      	beq.n	800a4d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b20      	cmp	r3, #32
 800a49c:	d018      	beq.n	800a4d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b30      	cmp	r3, #48	; 0x30
 800a4a4:	d014      	beq.n	800a4d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b40      	cmp	r3, #64	; 0x40
 800a4ac:	d010      	beq.n	800a4d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b50      	cmp	r3, #80	; 0x50
 800a4b4:	d00c      	beq.n	800a4d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b60      	cmp	r3, #96	; 0x60
 800a4bc:	d008      	beq.n	800a4d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b70      	cmp	r3, #112	; 0x70
 800a4c4:	d004      	beq.n	800a4d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4c6:	f44f 61cd 	mov.w	r1, #1640	; 0x668
 800a4ca:	4865      	ldr	r0, [pc, #404]	; (800a660 <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 800a4cc:	f7fa fc27 	bl	8004d1e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	2b80      	cmp	r3, #128	; 0x80
 800a4d6:	d008      	beq.n	800a4ea <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d004      	beq.n	800a4ea <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800a4e0:	f240 6169 	movw	r1, #1641	; 0x669
 800a4e4:	485e      	ldr	r0, [pc, #376]	; (800a660 <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 800a4e6:	f7fa fc1a 	bl	8004d1e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d101      	bne.n	800a4f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	e09e      	b.n	800a636 <HAL_TIMEx_MasterConfigSynchronization+0x21e>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2202      	movs	r2, #2
 800a504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a48      	ldr	r2, [pc, #288]	; (800a640 <HAL_TIMEx_MasterConfigSynchronization+0x228>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d004      	beq.n	800a52c <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a4c      	ldr	r2, [pc, #304]	; (800a658 <HAL_TIMEx_MasterConfigSynchronization+0x240>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d161      	bne.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d054      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a53c:	d04f      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a546:	d04a      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a550:	d045      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a55a:	d040      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800a564:	d03b      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a56e:	d036      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a578:	d031      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800a582:	d02c      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a58c:	d027      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 800a596:	d022      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a5a0:	d01d      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 800a5aa:	d018      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a5b4:	d013      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 800a5be:	d00e      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 800a5c8:	d009      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800a5d2:	d004      	beq.n	800a5de <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800a5d4:	f240 617b 	movw	r1, #1659	; 0x67b
 800a5d8:	4821      	ldr	r0, [pc, #132]	; (800a660 <HAL_TIMEx_MasterConfigSynchronization+0x248>)
 800a5da:	f7fa fba0 	bl	8004d1e <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a5e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a608:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	4313      	orrs	r3, r2
 800a612:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	40012c00 	.word	0x40012c00
 800a644:	40000400 	.word	0x40000400
 800a648:	40000800 	.word	0x40000800
 800a64c:	40000c00 	.word	0x40000c00
 800a650:	40001000 	.word	0x40001000
 800a654:	40001400 	.word	0x40001400
 800a658:	40013400 	.word	0x40013400
 800a65c:	40014000 	.word	0x40014000
 800a660:	0800bb10 	.word	0x0800bb10

0800a664 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a694:	bf00      	nop
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d101      	bne.n	800a6b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e08b      	b.n	800a7ca <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d023      	beq.n	800a702 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a45      	ldr	r2, [pc, #276]	; (800a7d4 <HAL_UART_Init+0x134>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d041      	beq.n	800a748 <HAL_UART_Init+0xa8>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a43      	ldr	r2, [pc, #268]	; (800a7d8 <HAL_UART_Init+0x138>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d03c      	beq.n	800a748 <HAL_UART_Init+0xa8>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a42      	ldr	r2, [pc, #264]	; (800a7dc <HAL_UART_Init+0x13c>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d037      	beq.n	800a748 <HAL_UART_Init+0xa8>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a40      	ldr	r2, [pc, #256]	; (800a7e0 <HAL_UART_Init+0x140>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d032      	beq.n	800a748 <HAL_UART_Init+0xa8>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a3f      	ldr	r2, [pc, #252]	; (800a7e4 <HAL_UART_Init+0x144>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d02d      	beq.n	800a748 <HAL_UART_Init+0xa8>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a3d      	ldr	r2, [pc, #244]	; (800a7e8 <HAL_UART_Init+0x148>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d028      	beq.n	800a748 <HAL_UART_Init+0xa8>
 800a6f6:	f240 113f 	movw	r1, #319	; 0x13f
 800a6fa:	483c      	ldr	r0, [pc, #240]	; (800a7ec <HAL_UART_Init+0x14c>)
 800a6fc:	f7fa fb0f 	bl	8004d1e <assert_failed>
 800a700:	e022      	b.n	800a748 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a33      	ldr	r2, [pc, #204]	; (800a7d4 <HAL_UART_Init+0x134>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d01d      	beq.n	800a748 <HAL_UART_Init+0xa8>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a31      	ldr	r2, [pc, #196]	; (800a7d8 <HAL_UART_Init+0x138>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d018      	beq.n	800a748 <HAL_UART_Init+0xa8>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a30      	ldr	r2, [pc, #192]	; (800a7dc <HAL_UART_Init+0x13c>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d013      	beq.n	800a748 <HAL_UART_Init+0xa8>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a2e      	ldr	r2, [pc, #184]	; (800a7e0 <HAL_UART_Init+0x140>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d00e      	beq.n	800a748 <HAL_UART_Init+0xa8>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a2d      	ldr	r2, [pc, #180]	; (800a7e4 <HAL_UART_Init+0x144>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d009      	beq.n	800a748 <HAL_UART_Init+0xa8>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a2b      	ldr	r2, [pc, #172]	; (800a7e8 <HAL_UART_Init+0x148>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d004      	beq.n	800a748 <HAL_UART_Init+0xa8>
 800a73e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800a742:	482a      	ldr	r0, [pc, #168]	; (800a7ec <HAL_UART_Init+0x14c>)
 800a744:	f7fa faeb 	bl	8004d1e <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d106      	bne.n	800a75e <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7fb fbc7 	bl	8005eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2224      	movs	r2, #36	; 0x24
 800a762:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f022 0201 	bic.w	r2, r2, #1
 800a772:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f99b 	bl	800aab0 <UART_SetConfig>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d101      	bne.n	800a784 <HAL_UART_Init+0xe4>
  {
    return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e022      	b.n	800a7ca <HAL_UART_Init+0x12a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d002      	beq.n	800a792 <HAL_UART_Init+0xf2>
  {
    UART_AdvFeatureConfig(huart);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fd7f 	bl	800b290 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	685a      	ldr	r2, [r3, #4]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	689a      	ldr	r2, [r3, #8]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f042 0201 	orr.w	r2, r2, #1
 800a7c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fec2 	bl	800b54c <UART_CheckIdleState>
 800a7c8:	4603      	mov	r3, r0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	40013800 	.word	0x40013800
 800a7d8:	40004400 	.word	0x40004400
 800a7dc:	40004800 	.word	0x40004800
 800a7e0:	40004c00 	.word	0x40004c00
 800a7e4:	40005000 	.word	0x40005000
 800a7e8:	40008000 	.word	0x40008000
 800a7ec:	0800bb4c 	.word	0x0800bb4c

0800a7f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b08a      	sub	sp, #40	; 0x28
 800a7f4:	af02      	add	r7, sp, #8
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	603b      	str	r3, [r7, #0]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a804:	2b20      	cmp	r3, #32
 800a806:	f040 8081 	bne.w	800a90c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d002      	beq.n	800a816 <HAL_UART_Transmit+0x26>
 800a810:	88fb      	ldrh	r3, [r7, #6]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d101      	bne.n	800a81a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	e079      	b.n	800a90e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a820:	2b01      	cmp	r3, #1
 800a822:	d101      	bne.n	800a828 <HAL_UART_Transmit+0x38>
 800a824:	2302      	movs	r3, #2
 800a826:	e072      	b.n	800a90e <HAL_UART_Transmit+0x11e>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2221      	movs	r2, #33	; 0x21
 800a83a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a83c:	f7fb fce2 	bl	8006204 <HAL_GetTick>
 800a840:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	88fa      	ldrh	r2, [r7, #6]
 800a846:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	88fa      	ldrh	r2, [r7, #6]
 800a84e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a85a:	d108      	bne.n	800a86e <HAL_UART_Transmit+0x7e>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d104      	bne.n	800a86e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800a864:	2300      	movs	r3, #0
 800a866:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	61bb      	str	r3, [r7, #24]
 800a86c:	e003      	b.n	800a876 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a872:	2300      	movs	r3, #0
 800a874:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a876:	e02d      	b.n	800a8d4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	2200      	movs	r2, #0
 800a880:	2180      	movs	r1, #128	; 0x80
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f000 fea7 	bl	800b5d6 <UART_WaitOnFlagUntilTimeout>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800a88e:	2303      	movs	r3, #3
 800a890:	e03d      	b.n	800a90e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10b      	bne.n	800a8b0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	881a      	ldrh	r2, [r3, #0]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8a4:	b292      	uxth	r2, r2
 800a8a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	3302      	adds	r3, #2
 800a8ac:	61bb      	str	r3, [r7, #24]
 800a8ae:	e008      	b.n	800a8c2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	781a      	ldrb	r2, [r3, #0]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	b292      	uxth	r2, r2
 800a8ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1cb      	bne.n	800a878 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	2140      	movs	r1, #64	; 0x40
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f000 fe73 	bl	800b5d6 <UART_WaitOnFlagUntilTimeout>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d001      	beq.n	800a8fa <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800a8f6:	2303      	movs	r3, #3
 800a8f8:	e009      	b.n	800a90e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2220      	movs	r2, #32
 800a8fe:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	e000      	b.n	800a90e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800a90c:	2302      	movs	r3, #2
  }
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3720      	adds	r7, #32
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b08a      	sub	sp, #40	; 0x28
 800a91a:	af02      	add	r7, sp, #8
 800a91c:	60f8      	str	r0, [r7, #12]
 800a91e:	60b9      	str	r1, [r7, #8]
 800a920:	603b      	str	r3, [r7, #0]
 800a922:	4613      	mov	r3, r2
 800a924:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a92a:	2b20      	cmp	r3, #32
 800a92c:	f040 80bb 	bne.w	800aaa6 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d002      	beq.n	800a93c <HAL_UART_Receive+0x26>
 800a936:	88fb      	ldrh	r3, [r7, #6]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d101      	bne.n	800a940 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	e0b3      	b.n	800aaa8 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a946:	2b01      	cmp	r3, #1
 800a948:	d101      	bne.n	800a94e <HAL_UART_Receive+0x38>
 800a94a:	2302      	movs	r3, #2
 800a94c:	e0ac      	b.n	800aaa8 <HAL_UART_Receive+0x192>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2222      	movs	r2, #34	; 0x22
 800a960:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a962:	f7fb fc4f 	bl	8006204 <HAL_GetTick>
 800a966:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	88fa      	ldrh	r2, [r7, #6]
 800a96c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	88fa      	ldrh	r2, [r7, #6]
 800a974:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a980:	d10e      	bne.n	800a9a0 <HAL_UART_Receive+0x8a>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d105      	bne.n	800a996 <HAL_UART_Receive+0x80>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a990:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a994:	e02d      	b.n	800a9f2 <HAL_UART_Receive+0xdc>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	22ff      	movs	r2, #255	; 0xff
 800a99a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a99e:	e028      	b.n	800a9f2 <HAL_UART_Receive+0xdc>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10d      	bne.n	800a9c4 <HAL_UART_Receive+0xae>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d104      	bne.n	800a9ba <HAL_UART_Receive+0xa4>
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	22ff      	movs	r2, #255	; 0xff
 800a9b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9b8:	e01b      	b.n	800a9f2 <HAL_UART_Receive+0xdc>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	227f      	movs	r2, #127	; 0x7f
 800a9be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9c2:	e016      	b.n	800a9f2 <HAL_UART_Receive+0xdc>
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9cc:	d10d      	bne.n	800a9ea <HAL_UART_Receive+0xd4>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d104      	bne.n	800a9e0 <HAL_UART_Receive+0xca>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	227f      	movs	r2, #127	; 0x7f
 800a9da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9de:	e008      	b.n	800a9f2 <HAL_UART_Receive+0xdc>
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	223f      	movs	r2, #63	; 0x3f
 800a9e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9e8:	e003      	b.n	800a9f2 <HAL_UART_Receive+0xdc>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a9f8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa02:	d108      	bne.n	800aa16 <HAL_UART_Receive+0x100>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d104      	bne.n	800aa16 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	61bb      	str	r3, [r7, #24]
 800aa14:	e003      	b.n	800aa1e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800aa1e:	e033      	b.n	800aa88 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	2200      	movs	r2, #0
 800aa28:	2120      	movs	r1, #32
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f000 fdd3 	bl	800b5d6 <UART_WaitOnFlagUntilTimeout>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 800aa36:	2303      	movs	r3, #3
 800aa38:	e036      	b.n	800aaa8 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10c      	bne.n	800aa5a <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	8a7b      	ldrh	r3, [r7, #18]
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	b29a      	uxth	r2, r3
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	3302      	adds	r3, #2
 800aa56:	61bb      	str	r3, [r7, #24]
 800aa58:	e00d      	b.n	800aa76 <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	8a7b      	ldrh	r3, [r7, #18]
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	4013      	ands	r3, r2
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	3301      	adds	r3, #1
 800aa74:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	b29a      	uxth	r2, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1c5      	bne.n	800aa20 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2220      	movs	r2, #32
 800aa98:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	e000      	b.n	800aaa8 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800aaa6:	2302      	movs	r3, #2
  }
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3720      	adds	r7, #32
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aab0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800aab4:	b088      	sub	sp, #32
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800aaba:	2300      	movs	r3, #0
 800aabc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800aac2:	2300      	movs	r3, #0
 800aac4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	4aab      	ldr	r2, [pc, #684]	; (800ad78 <UART_SetConfig+0x2c8>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d904      	bls.n	800aada <UART_SetConfig+0x2a>
 800aad0:	f640 312d 	movw	r1, #2861	; 0xb2d
 800aad4:	48a9      	ldr	r0, [pc, #676]	; (800ad7c <UART_SetConfig+0x2cc>)
 800aad6:	f7fa f922 	bl	8004d1e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aae2:	d00d      	beq.n	800ab00 <UART_SetConfig+0x50>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d009      	beq.n	800ab00 <UART_SetConfig+0x50>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaf4:	d004      	beq.n	800ab00 <UART_SetConfig+0x50>
 800aaf6:	f640 312e 	movw	r1, #2862	; 0xb2e
 800aafa:	48a0      	ldr	r0, [pc, #640]	; (800ad7c <UART_SetConfig+0x2cc>)
 800aafc:	f7fa f90f 	bl	8004d1e <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a9e      	ldr	r2, [pc, #632]	; (800ad80 <UART_SetConfig+0x2d0>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d10e      	bne.n	800ab28 <UART_SetConfig+0x78>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d030      	beq.n	800ab74 <UART_SetConfig+0xc4>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab1a:	d02b      	beq.n	800ab74 <UART_SetConfig+0xc4>
 800ab1c:	f640 3131 	movw	r1, #2865	; 0xb31
 800ab20:	4896      	ldr	r0, [pc, #600]	; (800ad7c <UART_SetConfig+0x2cc>)
 800ab22:	f7fa f8fc 	bl	8004d1e <assert_failed>
 800ab26:	e025      	b.n	800ab74 <UART_SetConfig+0xc4>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab30:	d012      	beq.n	800ab58 <UART_SetConfig+0xa8>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00e      	beq.n	800ab58 <UART_SetConfig+0xa8>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab42:	d009      	beq.n	800ab58 <UART_SetConfig+0xa8>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab4c:	d004      	beq.n	800ab58 <UART_SetConfig+0xa8>
 800ab4e:	f640 3135 	movw	r1, #2869	; 0xb35
 800ab52:	488a      	ldr	r0, [pc, #552]	; (800ad7c <UART_SetConfig+0x2cc>)
 800ab54:	f7fa f8e3 	bl	8004d1e <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a1b      	ldr	r3, [r3, #32]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d009      	beq.n	800ab74 <UART_SetConfig+0xc4>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a1b      	ldr	r3, [r3, #32]
 800ab64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab68:	d004      	beq.n	800ab74 <UART_SetConfig+0xc4>
 800ab6a:	f640 3136 	movw	r1, #2870	; 0xb36
 800ab6e:	4883      	ldr	r0, [pc, #524]	; (800ad7c <UART_SetConfig+0x2cc>)
 800ab70:	f7fa f8d5 	bl	8004d1e <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00e      	beq.n	800ab9a <UART_SetConfig+0xea>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab84:	d009      	beq.n	800ab9a <UART_SetConfig+0xea>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ab8e:	d004      	beq.n	800ab9a <UART_SetConfig+0xea>
 800ab90:	f640 3139 	movw	r1, #2873	; 0xb39
 800ab94:	4879      	ldr	r0, [pc, #484]	; (800ad7c <UART_SetConfig+0x2cc>)
 800ab96:	f7fa f8c2 	bl	8004d1e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	695b      	ldr	r3, [r3, #20]
 800ab9e:	f023 030c 	bic.w	r3, r3, #12
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d103      	bne.n	800abae <UART_SetConfig+0xfe>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d104      	bne.n	800abb8 <UART_SetConfig+0x108>
 800abae:	f640 313a 	movw	r1, #2874	; 0xb3a
 800abb2:	4872      	ldr	r0, [pc, #456]	; (800ad7c <UART_SetConfig+0x2cc>)
 800abb4:	f7fa f8b3 	bl	8004d1e <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	699b      	ldr	r3, [r3, #24]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d013      	beq.n	800abe8 <UART_SetConfig+0x138>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abc8:	d00e      	beq.n	800abe8 <UART_SetConfig+0x138>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	699b      	ldr	r3, [r3, #24]
 800abce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abd2:	d009      	beq.n	800abe8 <UART_SetConfig+0x138>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	699b      	ldr	r3, [r3, #24]
 800abd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abdc:	d004      	beq.n	800abe8 <UART_SetConfig+0x138>
 800abde:	f640 313b 	movw	r1, #2875	; 0xb3b
 800abe2:	4866      	ldr	r0, [pc, #408]	; (800ad7c <UART_SetConfig+0x2cc>)
 800abe4:	f7fa f89b 	bl	8004d1e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	69db      	ldr	r3, [r3, #28]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d009      	beq.n	800ac04 <UART_SetConfig+0x154>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	69db      	ldr	r3, [r3, #28]
 800abf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abf8:	d004      	beq.n	800ac04 <UART_SetConfig+0x154>
 800abfa:	f640 313c 	movw	r1, #2876	; 0xb3c
 800abfe:	485f      	ldr	r0, [pc, #380]	; (800ad7c <UART_SetConfig+0x2cc>)
 800ac00:	f7fa f88d 	bl	8004d1e <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	689a      	ldr	r2, [r3, #8]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	431a      	orrs	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	695b      	ldr	r3, [r3, #20]
 800ac12:	431a      	orrs	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	69db      	ldr	r3, [r3, #28]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	4b58      	ldr	r3, [pc, #352]	; (800ad84 <UART_SetConfig+0x2d4>)
 800ac24:	4013      	ands	r3, r2
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	6812      	ldr	r2, [r2, #0]
 800ac2a:	69f9      	ldr	r1, [r7, #28]
 800ac2c:	430b      	orrs	r3, r1
 800ac2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	68da      	ldr	r2, [r3, #12]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	430a      	orrs	r2, r1
 800ac44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a4b      	ldr	r2, [pc, #300]	; (800ad80 <UART_SetConfig+0x2d0>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d004      	beq.n	800ac60 <UART_SetConfig+0x1b0>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a1b      	ldr	r3, [r3, #32]
 800ac5a:	69fa      	ldr	r2, [r7, #28]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	69fa      	ldr	r2, [r7, #28]
 800ac70:	430a      	orrs	r2, r1
 800ac72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a43      	ldr	r2, [pc, #268]	; (800ad88 <UART_SetConfig+0x2d8>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d122      	bne.n	800acc4 <UART_SetConfig+0x214>
 800ac7e:	4b43      	ldr	r3, [pc, #268]	; (800ad8c <UART_SetConfig+0x2dc>)
 800ac80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac84:	f003 0303 	and.w	r3, r3, #3
 800ac88:	2b03      	cmp	r3, #3
 800ac8a:	d817      	bhi.n	800acbc <UART_SetConfig+0x20c>
 800ac8c:	a201      	add	r2, pc, #4	; (adr r2, 800ac94 <UART_SetConfig+0x1e4>)
 800ac8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac92:	bf00      	nop
 800ac94:	0800aca5 	.word	0x0800aca5
 800ac98:	0800acb1 	.word	0x0800acb1
 800ac9c:	0800acab 	.word	0x0800acab
 800aca0:	0800acb7 	.word	0x0800acb7
 800aca4:	2301      	movs	r3, #1
 800aca6:	76fb      	strb	r3, [r7, #27]
 800aca8:	e0f9      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800acaa:	2302      	movs	r3, #2
 800acac:	76fb      	strb	r3, [r7, #27]
 800acae:	e0f6      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800acb0:	2304      	movs	r3, #4
 800acb2:	76fb      	strb	r3, [r7, #27]
 800acb4:	e0f3      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800acb6:	2308      	movs	r3, #8
 800acb8:	76fb      	strb	r3, [r7, #27]
 800acba:	e0f0      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800acbc:	2310      	movs	r3, #16
 800acbe:	76fb      	strb	r3, [r7, #27]
 800acc0:	bf00      	nop
 800acc2:	e0ec      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a31      	ldr	r2, [pc, #196]	; (800ad90 <UART_SetConfig+0x2e0>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d134      	bne.n	800ad38 <UART_SetConfig+0x288>
 800acce:	4b2f      	ldr	r3, [pc, #188]	; (800ad8c <UART_SetConfig+0x2dc>)
 800acd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acd4:	f003 030c 	and.w	r3, r3, #12
 800acd8:	2b0c      	cmp	r3, #12
 800acda:	d829      	bhi.n	800ad30 <UART_SetConfig+0x280>
 800acdc:	a201      	add	r2, pc, #4	; (adr r2, 800ace4 <UART_SetConfig+0x234>)
 800acde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace2:	bf00      	nop
 800ace4:	0800ad19 	.word	0x0800ad19
 800ace8:	0800ad31 	.word	0x0800ad31
 800acec:	0800ad31 	.word	0x0800ad31
 800acf0:	0800ad31 	.word	0x0800ad31
 800acf4:	0800ad25 	.word	0x0800ad25
 800acf8:	0800ad31 	.word	0x0800ad31
 800acfc:	0800ad31 	.word	0x0800ad31
 800ad00:	0800ad31 	.word	0x0800ad31
 800ad04:	0800ad1f 	.word	0x0800ad1f
 800ad08:	0800ad31 	.word	0x0800ad31
 800ad0c:	0800ad31 	.word	0x0800ad31
 800ad10:	0800ad31 	.word	0x0800ad31
 800ad14:	0800ad2b 	.word	0x0800ad2b
 800ad18:	2300      	movs	r3, #0
 800ad1a:	76fb      	strb	r3, [r7, #27]
 800ad1c:	e0bf      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ad1e:	2302      	movs	r3, #2
 800ad20:	76fb      	strb	r3, [r7, #27]
 800ad22:	e0bc      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ad24:	2304      	movs	r3, #4
 800ad26:	76fb      	strb	r3, [r7, #27]
 800ad28:	e0b9      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ad2a:	2308      	movs	r3, #8
 800ad2c:	76fb      	strb	r3, [r7, #27]
 800ad2e:	e0b6      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ad30:	2310      	movs	r3, #16
 800ad32:	76fb      	strb	r3, [r7, #27]
 800ad34:	bf00      	nop
 800ad36:	e0b2      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a15      	ldr	r2, [pc, #84]	; (800ad94 <UART_SetConfig+0x2e4>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d131      	bne.n	800ada6 <UART_SetConfig+0x2f6>
 800ad42:	4b12      	ldr	r3, [pc, #72]	; (800ad8c <UART_SetConfig+0x2dc>)
 800ad44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ad4c:	2b10      	cmp	r3, #16
 800ad4e:	d00f      	beq.n	800ad70 <UART_SetConfig+0x2c0>
 800ad50:	2b10      	cmp	r3, #16
 800ad52:	d802      	bhi.n	800ad5a <UART_SetConfig+0x2aa>
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d005      	beq.n	800ad64 <UART_SetConfig+0x2b4>
 800ad58:	e021      	b.n	800ad9e <UART_SetConfig+0x2ee>
 800ad5a:	2b20      	cmp	r3, #32
 800ad5c:	d005      	beq.n	800ad6a <UART_SetConfig+0x2ba>
 800ad5e:	2b30      	cmp	r3, #48	; 0x30
 800ad60:	d01a      	beq.n	800ad98 <UART_SetConfig+0x2e8>
 800ad62:	e01c      	b.n	800ad9e <UART_SetConfig+0x2ee>
 800ad64:	2300      	movs	r3, #0
 800ad66:	76fb      	strb	r3, [r7, #27]
 800ad68:	e099      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	76fb      	strb	r3, [r7, #27]
 800ad6e:	e096      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ad70:	2304      	movs	r3, #4
 800ad72:	76fb      	strb	r3, [r7, #27]
 800ad74:	e093      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ad76:	bf00      	nop
 800ad78:	00989680 	.word	0x00989680
 800ad7c:	0800bb4c 	.word	0x0800bb4c
 800ad80:	40008000 	.word	0x40008000
 800ad84:	efff69f3 	.word	0xefff69f3
 800ad88:	40013800 	.word	0x40013800
 800ad8c:	40021000 	.word	0x40021000
 800ad90:	40004400 	.word	0x40004400
 800ad94:	40004800 	.word	0x40004800
 800ad98:	2308      	movs	r3, #8
 800ad9a:	76fb      	strb	r3, [r7, #27]
 800ad9c:	e07f      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ad9e:	2310      	movs	r3, #16
 800ada0:	76fb      	strb	r3, [r7, #27]
 800ada2:	bf00      	nop
 800ada4:	e07b      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4ab3      	ldr	r2, [pc, #716]	; (800b078 <UART_SetConfig+0x5c8>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d120      	bne.n	800adf2 <UART_SetConfig+0x342>
 800adb0:	4bb2      	ldr	r3, [pc, #712]	; (800b07c <UART_SetConfig+0x5cc>)
 800adb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800adba:	2b40      	cmp	r3, #64	; 0x40
 800adbc:	d00f      	beq.n	800adde <UART_SetConfig+0x32e>
 800adbe:	2b40      	cmp	r3, #64	; 0x40
 800adc0:	d802      	bhi.n	800adc8 <UART_SetConfig+0x318>
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d005      	beq.n	800add2 <UART_SetConfig+0x322>
 800adc6:	e010      	b.n	800adea <UART_SetConfig+0x33a>
 800adc8:	2b80      	cmp	r3, #128	; 0x80
 800adca:	d005      	beq.n	800add8 <UART_SetConfig+0x328>
 800adcc:	2bc0      	cmp	r3, #192	; 0xc0
 800adce:	d009      	beq.n	800ade4 <UART_SetConfig+0x334>
 800add0:	e00b      	b.n	800adea <UART_SetConfig+0x33a>
 800add2:	2300      	movs	r3, #0
 800add4:	76fb      	strb	r3, [r7, #27]
 800add6:	e062      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800add8:	2302      	movs	r3, #2
 800adda:	76fb      	strb	r3, [r7, #27]
 800addc:	e05f      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800adde:	2304      	movs	r3, #4
 800ade0:	76fb      	strb	r3, [r7, #27]
 800ade2:	e05c      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ade4:	2308      	movs	r3, #8
 800ade6:	76fb      	strb	r3, [r7, #27]
 800ade8:	e059      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800adea:	2310      	movs	r3, #16
 800adec:	76fb      	strb	r3, [r7, #27]
 800adee:	bf00      	nop
 800adf0:	e055      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4aa2      	ldr	r2, [pc, #648]	; (800b080 <UART_SetConfig+0x5d0>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d124      	bne.n	800ae46 <UART_SetConfig+0x396>
 800adfc:	4b9f      	ldr	r3, [pc, #636]	; (800b07c <UART_SetConfig+0x5cc>)
 800adfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae0a:	d012      	beq.n	800ae32 <UART_SetConfig+0x382>
 800ae0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae10:	d802      	bhi.n	800ae18 <UART_SetConfig+0x368>
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d007      	beq.n	800ae26 <UART_SetConfig+0x376>
 800ae16:	e012      	b.n	800ae3e <UART_SetConfig+0x38e>
 800ae18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae1c:	d006      	beq.n	800ae2c <UART_SetConfig+0x37c>
 800ae1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae22:	d009      	beq.n	800ae38 <UART_SetConfig+0x388>
 800ae24:	e00b      	b.n	800ae3e <UART_SetConfig+0x38e>
 800ae26:	2300      	movs	r3, #0
 800ae28:	76fb      	strb	r3, [r7, #27]
 800ae2a:	e038      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	76fb      	strb	r3, [r7, #27]
 800ae30:	e035      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ae32:	2304      	movs	r3, #4
 800ae34:	76fb      	strb	r3, [r7, #27]
 800ae36:	e032      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ae38:	2308      	movs	r3, #8
 800ae3a:	76fb      	strb	r3, [r7, #27]
 800ae3c:	e02f      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ae3e:	2310      	movs	r3, #16
 800ae40:	76fb      	strb	r3, [r7, #27]
 800ae42:	bf00      	nop
 800ae44:	e02b      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a8e      	ldr	r2, [pc, #568]	; (800b084 <UART_SetConfig+0x5d4>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d124      	bne.n	800ae9a <UART_SetConfig+0x3ea>
 800ae50:	4b8a      	ldr	r3, [pc, #552]	; (800b07c <UART_SetConfig+0x5cc>)
 800ae52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae56:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ae5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae5e:	d012      	beq.n	800ae86 <UART_SetConfig+0x3d6>
 800ae60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae64:	d802      	bhi.n	800ae6c <UART_SetConfig+0x3bc>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d007      	beq.n	800ae7a <UART_SetConfig+0x3ca>
 800ae6a:	e012      	b.n	800ae92 <UART_SetConfig+0x3e2>
 800ae6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae70:	d006      	beq.n	800ae80 <UART_SetConfig+0x3d0>
 800ae72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae76:	d009      	beq.n	800ae8c <UART_SetConfig+0x3dc>
 800ae78:	e00b      	b.n	800ae92 <UART_SetConfig+0x3e2>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	76fb      	strb	r3, [r7, #27]
 800ae7e:	e00e      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ae80:	2302      	movs	r3, #2
 800ae82:	76fb      	strb	r3, [r7, #27]
 800ae84:	e00b      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ae86:	2304      	movs	r3, #4
 800ae88:	76fb      	strb	r3, [r7, #27]
 800ae8a:	e008      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ae8c:	2308      	movs	r3, #8
 800ae8e:	76fb      	strb	r3, [r7, #27]
 800ae90:	e005      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ae92:	2310      	movs	r3, #16
 800ae94:	76fb      	strb	r3, [r7, #27]
 800ae96:	bf00      	nop
 800ae98:	e001      	b.n	800ae9e <UART_SetConfig+0x3ee>
 800ae9a:	2310      	movs	r3, #16
 800ae9c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a78      	ldr	r2, [pc, #480]	; (800b084 <UART_SetConfig+0x5d4>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	f040 80f3 	bne.w	800b090 <UART_SetConfig+0x5e0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aeaa:	7efb      	ldrb	r3, [r7, #27]
 800aeac:	2b08      	cmp	r3, #8
 800aeae:	d824      	bhi.n	800aefa <UART_SetConfig+0x44a>
 800aeb0:	a201      	add	r2, pc, #4	; (adr r2, 800aeb8 <UART_SetConfig+0x408>)
 800aeb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb6:	bf00      	nop
 800aeb8:	0800aedd 	.word	0x0800aedd
 800aebc:	0800aefb 	.word	0x0800aefb
 800aec0:	0800aee5 	.word	0x0800aee5
 800aec4:	0800aefb 	.word	0x0800aefb
 800aec8:	0800aeeb 	.word	0x0800aeeb
 800aecc:	0800aefb 	.word	0x0800aefb
 800aed0:	0800aefb 	.word	0x0800aefb
 800aed4:	0800aefb 	.word	0x0800aefb
 800aed8:	0800aef3 	.word	0x0800aef3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800aedc:	f7fc fd4c 	bl	8007978 <HAL_RCC_GetPCLK1Freq>
 800aee0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800aee2:	e00d      	b.n	800af00 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800aee4:	4b68      	ldr	r3, [pc, #416]	; (800b088 <UART_SetConfig+0x5d8>)
 800aee6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800aee8:	e00a      	b.n	800af00 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800aeea:	f7fc fcaf 	bl	800784c <HAL_RCC_GetSysClockFreq>
 800aeee:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800aef0:	e006      	b.n	800af00 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800aef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aef6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800aef8:	e002      	b.n	800af00 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	74fb      	strb	r3, [r7, #19]
        break;
 800aefe:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2b00      	cmp	r3, #0
 800af04:	f000 81b7 	beq.w	800b276 <UART_SetConfig+0x7c6>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	4613      	mov	r3, r2
 800af0e:	005b      	lsls	r3, r3, #1
 800af10:	4413      	add	r3, r2
 800af12:	68fa      	ldr	r2, [r7, #12]
 800af14:	429a      	cmp	r2, r3
 800af16:	d305      	bcc.n	800af24 <UART_SetConfig+0x474>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	429a      	cmp	r2, r3
 800af22:	d902      	bls.n	800af2a <UART_SetConfig+0x47a>
      {
        ret = HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	74fb      	strb	r3, [r7, #19]
 800af28:	e1a5      	b.n	800b276 <UART_SetConfig+0x7c6>
      }
      else
      {
        switch (clocksource)
 800af2a:	7efb      	ldrb	r3, [r7, #27]
 800af2c:	2b08      	cmp	r3, #8
 800af2e:	f200 8090 	bhi.w	800b052 <UART_SetConfig+0x5a2>
 800af32:	a201      	add	r2, pc, #4	; (adr r2, 800af38 <UART_SetConfig+0x488>)
 800af34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af38:	0800af5d 	.word	0x0800af5d
 800af3c:	0800b053 	.word	0x0800b053
 800af40:	0800afa9 	.word	0x0800afa9
 800af44:	0800b053 	.word	0x0800b053
 800af48:	0800afdd 	.word	0x0800afdd
 800af4c:	0800b053 	.word	0x0800b053
 800af50:	0800b053 	.word	0x0800b053
 800af54:	0800b053 	.word	0x0800b053
 800af58:	0800b029 	.word	0x0800b029
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800af5c:	f7fc fd0c 	bl	8007978 <HAL_RCC_GetPCLK1Freq>
 800af60:	4603      	mov	r3, r0
 800af62:	4619      	mov	r1, r3
 800af64:	f04f 0200 	mov.w	r2, #0
 800af68:	f04f 0300 	mov.w	r3, #0
 800af6c:	f04f 0400 	mov.w	r4, #0
 800af70:	0214      	lsls	r4, r2, #8
 800af72:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800af76:	020b      	lsls	r3, r1, #8
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	6852      	ldr	r2, [r2, #4]
 800af7c:	0852      	lsrs	r2, r2, #1
 800af7e:	4611      	mov	r1, r2
 800af80:	f04f 0200 	mov.w	r2, #0
 800af84:	eb13 0b01 	adds.w	fp, r3, r1
 800af88:	eb44 0c02 	adc.w	ip, r4, r2
 800af8c:	4658      	mov	r0, fp
 800af8e:	4661      	mov	r1, ip
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	f04f 0400 	mov.w	r4, #0
 800af98:	461a      	mov	r2, r3
 800af9a:	4623      	mov	r3, r4
 800af9c:	f7f5 f964 	bl	8000268 <__aeabi_uldivmod>
 800afa0:	4603      	mov	r3, r0
 800afa2:	460c      	mov	r4, r1
 800afa4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800afa6:	e057      	b.n	800b058 <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	085b      	lsrs	r3, r3, #1
 800afae:	f04f 0400 	mov.w	r4, #0
 800afb2:	4936      	ldr	r1, [pc, #216]	; (800b08c <UART_SetConfig+0x5dc>)
 800afb4:	f04f 0200 	mov.w	r2, #0
 800afb8:	eb13 0b01 	adds.w	fp, r3, r1
 800afbc:	eb44 0c02 	adc.w	ip, r4, r2
 800afc0:	4658      	mov	r0, fp
 800afc2:	4661      	mov	r1, ip
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	f04f 0400 	mov.w	r4, #0
 800afcc:	461a      	mov	r2, r3
 800afce:	4623      	mov	r3, r4
 800afd0:	f7f5 f94a 	bl	8000268 <__aeabi_uldivmod>
 800afd4:	4603      	mov	r3, r0
 800afd6:	460c      	mov	r4, r1
 800afd8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800afda:	e03d      	b.n	800b058 <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800afdc:	f7fc fc36 	bl	800784c <HAL_RCC_GetSysClockFreq>
 800afe0:	4603      	mov	r3, r0
 800afe2:	4619      	mov	r1, r3
 800afe4:	f04f 0200 	mov.w	r2, #0
 800afe8:	f04f 0300 	mov.w	r3, #0
 800afec:	f04f 0400 	mov.w	r4, #0
 800aff0:	0214      	lsls	r4, r2, #8
 800aff2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800aff6:	020b      	lsls	r3, r1, #8
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	6852      	ldr	r2, [r2, #4]
 800affc:	0852      	lsrs	r2, r2, #1
 800affe:	4611      	mov	r1, r2
 800b000:	f04f 0200 	mov.w	r2, #0
 800b004:	eb13 0b01 	adds.w	fp, r3, r1
 800b008:	eb44 0c02 	adc.w	ip, r4, r2
 800b00c:	4658      	mov	r0, fp
 800b00e:	4661      	mov	r1, ip
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	f04f 0400 	mov.w	r4, #0
 800b018:	461a      	mov	r2, r3
 800b01a:	4623      	mov	r3, r4
 800b01c:	f7f5 f924 	bl	8000268 <__aeabi_uldivmod>
 800b020:	4603      	mov	r3, r0
 800b022:	460c      	mov	r4, r1
 800b024:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800b026:	e017      	b.n	800b058 <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	085b      	lsrs	r3, r3, #1
 800b02e:	f04f 0400 	mov.w	r4, #0
 800b032:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800b036:	f144 0100 	adc.w	r1, r4, #0
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	f04f 0400 	mov.w	r4, #0
 800b042:	461a      	mov	r2, r3
 800b044:	4623      	mov	r3, r4
 800b046:	f7f5 f90f 	bl	8000268 <__aeabi_uldivmod>
 800b04a:	4603      	mov	r3, r0
 800b04c:	460c      	mov	r4, r1
 800b04e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800b050:	e002      	b.n	800b058 <UART_SetConfig+0x5a8>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	74fb      	strb	r3, [r7, #19]
            break;
 800b056:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b05e:	d308      	bcc.n	800b072 <UART_SetConfig+0x5c2>
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b066:	d204      	bcs.n	800b072 <UART_SetConfig+0x5c2>
        {
          huart->Instance->BRR = usartdiv;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	697a      	ldr	r2, [r7, #20]
 800b06e:	60da      	str	r2, [r3, #12]
 800b070:	e101      	b.n	800b276 <UART_SetConfig+0x7c6>
        }
        else
        {
          ret = HAL_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	74fb      	strb	r3, [r7, #19]
 800b076:	e0fe      	b.n	800b276 <UART_SetConfig+0x7c6>
 800b078:	40004c00 	.word	0x40004c00
 800b07c:	40021000 	.word	0x40021000
 800b080:	40005000 	.word	0x40005000
 800b084:	40008000 	.word	0x40008000
 800b088:	00f42400 	.word	0x00f42400
 800b08c:	f4240000 	.word	0xf4240000
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	69db      	ldr	r3, [r3, #28]
 800b094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b098:	d17f      	bne.n	800b19a <UART_SetConfig+0x6ea>
  {
    switch (clocksource)
 800b09a:	7efb      	ldrb	r3, [r7, #27]
 800b09c:	2b08      	cmp	r3, #8
 800b09e:	d85c      	bhi.n	800b15a <UART_SetConfig+0x6aa>
 800b0a0:	a201      	add	r2, pc, #4	; (adr r2, 800b0a8 <UART_SetConfig+0x5f8>)
 800b0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a6:	bf00      	nop
 800b0a8:	0800b0cd 	.word	0x0800b0cd
 800b0ac:	0800b0eb 	.word	0x0800b0eb
 800b0b0:	0800b109 	.word	0x0800b109
 800b0b4:	0800b15b 	.word	0x0800b15b
 800b0b8:	0800b125 	.word	0x0800b125
 800b0bc:	0800b15b 	.word	0x0800b15b
 800b0c0:	0800b15b 	.word	0x0800b15b
 800b0c4:	0800b15b 	.word	0x0800b15b
 800b0c8:	0800b143 	.word	0x0800b143
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800b0cc:	f7fc fc54 	bl	8007978 <HAL_RCC_GetPCLK1Freq>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	005a      	lsls	r2, r3, #1
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	085b      	lsrs	r3, r3, #1
 800b0da:	441a      	add	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b0e8:	e03a      	b.n	800b160 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800b0ea:	f7fc fc5b 	bl	80079a4 <HAL_RCC_GetPCLK2Freq>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	005a      	lsls	r2, r3, #1
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	085b      	lsrs	r3, r3, #1
 800b0f8:	441a      	add	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b102:	b29b      	uxth	r3, r3
 800b104:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b106:	e02b      	b.n	800b160 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	085b      	lsrs	r3, r3, #1
 800b10e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800b112:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	6852      	ldr	r2, [r2, #4]
 800b11a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b11e:	b29b      	uxth	r3, r3
 800b120:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b122:	e01d      	b.n	800b160 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800b124:	f7fc fb92 	bl	800784c <HAL_RCC_GetSysClockFreq>
 800b128:	4603      	mov	r3, r0
 800b12a:	005a      	lsls	r2, r3, #1
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	085b      	lsrs	r3, r3, #1
 800b132:	441a      	add	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	fbb2 f3f3 	udiv	r3, r2, r3
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b140:	e00e      	b.n	800b160 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	085b      	lsrs	r3, r3, #1
 800b148:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	fbb2 f3f3 	udiv	r3, r2, r3
 800b154:	b29b      	uxth	r3, r3
 800b156:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b158:	e002      	b.n	800b160 <UART_SetConfig+0x6b0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	74fb      	strb	r3, [r7, #19]
        break;
 800b15e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	2b0f      	cmp	r3, #15
 800b164:	d916      	bls.n	800b194 <UART_SetConfig+0x6e4>
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b16c:	d212      	bcs.n	800b194 <UART_SetConfig+0x6e4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	b29b      	uxth	r3, r3
 800b172:	f023 030f 	bic.w	r3, r3, #15
 800b176:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	085b      	lsrs	r3, r3, #1
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	f003 0307 	and.w	r3, r3, #7
 800b182:	b29a      	uxth	r2, r3
 800b184:	897b      	ldrh	r3, [r7, #10]
 800b186:	4313      	orrs	r3, r2
 800b188:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	897a      	ldrh	r2, [r7, #10]
 800b190:	60da      	str	r2, [r3, #12]
 800b192:	e070      	b.n	800b276 <UART_SetConfig+0x7c6>
    }
    else
    {
      ret = HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	74fb      	strb	r3, [r7, #19]
 800b198:	e06d      	b.n	800b276 <UART_SetConfig+0x7c6>
    }
  }
  else
  {
    switch (clocksource)
 800b19a:	7efb      	ldrb	r3, [r7, #27]
 800b19c:	2b08      	cmp	r3, #8
 800b19e:	d859      	bhi.n	800b254 <UART_SetConfig+0x7a4>
 800b1a0:	a201      	add	r2, pc, #4	; (adr r2, 800b1a8 <UART_SetConfig+0x6f8>)
 800b1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a6:	bf00      	nop
 800b1a8:	0800b1cd 	.word	0x0800b1cd
 800b1ac:	0800b1e9 	.word	0x0800b1e9
 800b1b0:	0800b205 	.word	0x0800b205
 800b1b4:	0800b255 	.word	0x0800b255
 800b1b8:	0800b221 	.word	0x0800b221
 800b1bc:	0800b255 	.word	0x0800b255
 800b1c0:	0800b255 	.word	0x0800b255
 800b1c4:	0800b255 	.word	0x0800b255
 800b1c8:	0800b23d 	.word	0x0800b23d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800b1cc:	f7fc fbd4 	bl	8007978 <HAL_RCC_GetPCLK1Freq>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	085b      	lsrs	r3, r3, #1
 800b1d8:	441a      	add	r2, r3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b1e6:	e038      	b.n	800b25a <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800b1e8:	f7fc fbdc 	bl	80079a4 <HAL_RCC_GetPCLK2Freq>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	085b      	lsrs	r3, r3, #1
 800b1f4:	441a      	add	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b202:	e02a      	b.n	800b25a <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	085b      	lsrs	r3, r3, #1
 800b20a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800b20e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	6852      	ldr	r2, [r2, #4]
 800b216:	fbb3 f3f2 	udiv	r3, r3, r2
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b21e:	e01c      	b.n	800b25a <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800b220:	f7fc fb14 	bl	800784c <HAL_RCC_GetSysClockFreq>
 800b224:	4602      	mov	r2, r0
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	085b      	lsrs	r3, r3, #1
 800b22c:	441a      	add	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	fbb2 f3f3 	udiv	r3, r2, r3
 800b236:	b29b      	uxth	r3, r3
 800b238:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b23a:	e00e      	b.n	800b25a <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	085b      	lsrs	r3, r3, #1
 800b242:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b24e:	b29b      	uxth	r3, r3
 800b250:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b252:	e002      	b.n	800b25a <UART_SetConfig+0x7aa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	74fb      	strb	r3, [r7, #19]
        break;
 800b258:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	2b0f      	cmp	r3, #15
 800b25e:	d908      	bls.n	800b272 <UART_SetConfig+0x7c2>
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b266:	d204      	bcs.n	800b272 <UART_SetConfig+0x7c2>
    {
      huart->Instance->BRR = usartdiv;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	697a      	ldr	r2, [r7, #20]
 800b26e:	60da      	str	r2, [r3, #12]
 800b270:	e001      	b.n	800b276 <UART_SetConfig+0x7c6>
    }
    else
    {
      ret = HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b282:	7cfb      	ldrb	r3, [r7, #19]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3720      	adds	r7, #32
 800b288:	46bd      	mov	sp, r7
 800b28a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b28e:	bf00      	nop

0800b290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29c:	2bff      	cmp	r3, #255	; 0xff
 800b29e:	d904      	bls.n	800b2aa <UART_AdvFeatureConfig+0x1a>
 800b2a0:	f640 4155 	movw	r1, #3157	; 0xc55
 800b2a4:	489b      	ldr	r0, [pc, #620]	; (800b514 <UART_AdvFeatureConfig+0x284>)
 800b2a6:	f7f9 fd3a 	bl	8004d1e <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d018      	beq.n	800b2e8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d009      	beq.n	800b2d2 <UART_AdvFeatureConfig+0x42>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2c6:	d004      	beq.n	800b2d2 <UART_AdvFeatureConfig+0x42>
 800b2c8:	f640 415a 	movw	r1, #3162	; 0xc5a
 800b2cc:	4891      	ldr	r0, [pc, #580]	; (800b514 <UART_AdvFeatureConfig+0x284>)
 800b2ce:	f7f9 fd26 	bl	8004d1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	430a      	orrs	r2, r1
 800b2e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ec:	f003 0302 	and.w	r3, r3, #2
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d018      	beq.n	800b326 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d009      	beq.n	800b310 <UART_AdvFeatureConfig+0x80>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b304:	d004      	beq.n	800b310 <UART_AdvFeatureConfig+0x80>
 800b306:	f640 4161 	movw	r1, #3169	; 0xc61
 800b30a:	4882      	ldr	r0, [pc, #520]	; (800b514 <UART_AdvFeatureConfig+0x284>)
 800b30c:	f7f9 fd07 	bl	8004d1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	430a      	orrs	r2, r1
 800b324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32a:	f003 0304 	and.w	r3, r3, #4
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d018      	beq.n	800b364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b336:	2b00      	cmp	r3, #0
 800b338:	d009      	beq.n	800b34e <UART_AdvFeatureConfig+0xbe>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b33e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b342:	d004      	beq.n	800b34e <UART_AdvFeatureConfig+0xbe>
 800b344:	f640 4168 	movw	r1, #3176	; 0xc68
 800b348:	4872      	ldr	r0, [pc, #456]	; (800b514 <UART_AdvFeatureConfig+0x284>)
 800b34a:	f7f9 fce8 	bl	8004d1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	430a      	orrs	r2, r1
 800b362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b368:	f003 0308 	and.w	r3, r3, #8
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d018      	beq.n	800b3a2 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b374:	2b00      	cmp	r3, #0
 800b376:	d009      	beq.n	800b38c <UART_AdvFeatureConfig+0xfc>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b37c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b380:	d004      	beq.n	800b38c <UART_AdvFeatureConfig+0xfc>
 800b382:	f640 416f 	movw	r1, #3183	; 0xc6f
 800b386:	4863      	ldr	r0, [pc, #396]	; (800b514 <UART_AdvFeatureConfig+0x284>)
 800b388:	f7f9 fcc9 	bl	8004d1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	430a      	orrs	r2, r1
 800b3a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a6:	f003 0310 	and.w	r3, r3, #16
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d018      	beq.n	800b3e0 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d009      	beq.n	800b3ca <UART_AdvFeatureConfig+0x13a>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3be:	d004      	beq.n	800b3ca <UART_AdvFeatureConfig+0x13a>
 800b3c0:	f640 4176 	movw	r1, #3190	; 0xc76
 800b3c4:	4853      	ldr	r0, [pc, #332]	; (800b514 <UART_AdvFeatureConfig+0x284>)
 800b3c6:	f7f9 fcaa 	bl	8004d1e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	430a      	orrs	r2, r1
 800b3de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e4:	f003 0320 	and.w	r3, r3, #32
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d018      	beq.n	800b41e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d009      	beq.n	800b408 <UART_AdvFeatureConfig+0x178>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3fc:	d004      	beq.n	800b408 <UART_AdvFeatureConfig+0x178>
 800b3fe:	f640 417d 	movw	r1, #3197	; 0xc7d
 800b402:	4844      	ldr	r0, [pc, #272]	; (800b514 <UART_AdvFeatureConfig+0x284>)
 800b404:	f7f9 fc8b 	bl	8004d1e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	430a      	orrs	r2, r1
 800b41c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b426:	2b00      	cmp	r3, #0
 800b428:	d05e      	beq.n	800b4e8 <UART_AdvFeatureConfig+0x258>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a3a      	ldr	r2, [pc, #232]	; (800b518 <UART_AdvFeatureConfig+0x288>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d018      	beq.n	800b466 <UART_AdvFeatureConfig+0x1d6>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a38      	ldr	r2, [pc, #224]	; (800b51c <UART_AdvFeatureConfig+0x28c>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d013      	beq.n	800b466 <UART_AdvFeatureConfig+0x1d6>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4a37      	ldr	r2, [pc, #220]	; (800b520 <UART_AdvFeatureConfig+0x290>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d00e      	beq.n	800b466 <UART_AdvFeatureConfig+0x1d6>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a35      	ldr	r2, [pc, #212]	; (800b524 <UART_AdvFeatureConfig+0x294>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d009      	beq.n	800b466 <UART_AdvFeatureConfig+0x1d6>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a34      	ldr	r2, [pc, #208]	; (800b528 <UART_AdvFeatureConfig+0x298>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d004      	beq.n	800b466 <UART_AdvFeatureConfig+0x1d6>
 800b45c:	f640 4184 	movw	r1, #3204	; 0xc84
 800b460:	482c      	ldr	r0, [pc, #176]	; (800b514 <UART_AdvFeatureConfig+0x284>)
 800b462:	f7f9 fc5c 	bl	8004d1e <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d009      	beq.n	800b482 <UART_AdvFeatureConfig+0x1f2>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b476:	d004      	beq.n	800b482 <UART_AdvFeatureConfig+0x1f2>
 800b478:	f640 4185 	movw	r1, #3205	; 0xc85
 800b47c:	4825      	ldr	r0, [pc, #148]	; (800b514 <UART_AdvFeatureConfig+0x284>)
 800b47e:	f7f9 fc4e 	bl	8004d1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	430a      	orrs	r2, r1
 800b496:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b49c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4a0:	d122      	bne.n	800b4e8 <UART_AdvFeatureConfig+0x258>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d013      	beq.n	800b4d2 <UART_AdvFeatureConfig+0x242>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4b2:	d00e      	beq.n	800b4d2 <UART_AdvFeatureConfig+0x242>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4bc:	d009      	beq.n	800b4d2 <UART_AdvFeatureConfig+0x242>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b4c6:	d004      	beq.n	800b4d2 <UART_AdvFeatureConfig+0x242>
 800b4c8:	f640 418a 	movw	r1, #3210	; 0xc8a
 800b4cc:	4811      	ldr	r0, [pc, #68]	; (800b514 <UART_AdvFeatureConfig+0x284>)
 800b4ce:	f7f9 fc26 	bl	8004d1e <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	430a      	orrs	r2, r1
 800b4e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d026      	beq.n	800b542 <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d017      	beq.n	800b52c <UART_AdvFeatureConfig+0x29c>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b500:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b504:	d012      	beq.n	800b52c <UART_AdvFeatureConfig+0x29c>
 800b506:	f640 4192 	movw	r1, #3218	; 0xc92
 800b50a:	4802      	ldr	r0, [pc, #8]	; (800b514 <UART_AdvFeatureConfig+0x284>)
 800b50c:	f7f9 fc07 	bl	8004d1e <assert_failed>
 800b510:	e00c      	b.n	800b52c <UART_AdvFeatureConfig+0x29c>
 800b512:	bf00      	nop
 800b514:	0800bb4c 	.word	0x0800bb4c
 800b518:	40013800 	.word	0x40013800
 800b51c:	40004400 	.word	0x40004400
 800b520:	40004800 	.word	0x40004800
 800b524:	40004c00 	.word	0x40004c00
 800b528:	40005000 	.word	0x40005000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	430a      	orrs	r2, r1
 800b540:	605a      	str	r2, [r3, #4]
  }
}
 800b542:	bf00      	nop
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop

0800b54c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b086      	sub	sp, #24
 800b550:	af02      	add	r7, sp, #8
 800b552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b55a:	f7fa fe53 	bl	8006204 <HAL_GetTick>
 800b55e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 0308 	and.w	r3, r3, #8
 800b56a:	2b08      	cmp	r3, #8
 800b56c:	d10e      	bne.n	800b58c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b56e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b572:	9300      	str	r3, [sp, #0]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2200      	movs	r2, #0
 800b578:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 f82a 	bl	800b5d6 <UART_WaitOnFlagUntilTimeout>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d001      	beq.n	800b58c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b588:	2303      	movs	r3, #3
 800b58a:	e020      	b.n	800b5ce <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f003 0304 	and.w	r3, r3, #4
 800b596:	2b04      	cmp	r3, #4
 800b598:	d10e      	bne.n	800b5b8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b59a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 f814 	bl	800b5d6 <UART_WaitOnFlagUntilTimeout>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d001      	beq.n	800b5b8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e00a      	b.n	800b5ce <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2220      	movs	r2, #32
 800b5bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2220      	movs	r2, #32
 800b5c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b084      	sub	sp, #16
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	60f8      	str	r0, [r7, #12]
 800b5de:	60b9      	str	r1, [r7, #8]
 800b5e0:	603b      	str	r3, [r7, #0]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5e6:	e02a      	b.n	800b63e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ee:	d026      	beq.n	800b63e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5f0:	f7fa fe08 	bl	8006204 <HAL_GetTick>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	1ad3      	subs	r3, r2, r3
 800b5fa:	69ba      	ldr	r2, [r7, #24]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d302      	bcc.n	800b606 <UART_WaitOnFlagUntilTimeout+0x30>
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d11b      	bne.n	800b63e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b614:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	689a      	ldr	r2, [r3, #8]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f022 0201 	bic.w	r2, r2, #1
 800b624:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2220      	movs	r2, #32
 800b62a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2220      	movs	r2, #32
 800b630:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2200      	movs	r2, #0
 800b636:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b63a:	2303      	movs	r3, #3
 800b63c:	e00f      	b.n	800b65e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	69da      	ldr	r2, [r3, #28]
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	4013      	ands	r3, r2
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	bf0c      	ite	eq
 800b64e:	2301      	moveq	r3, #1
 800b650:	2300      	movne	r3, #0
 800b652:	b2db      	uxtb	r3, r3
 800b654:	461a      	mov	r2, r3
 800b656:	79fb      	ldrb	r3, [r7, #7]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d0c5      	beq.n	800b5e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
	...

0800b668 <__libc_init_array>:
 800b668:	b570      	push	{r4, r5, r6, lr}
 800b66a:	4e0d      	ldr	r6, [pc, #52]	; (800b6a0 <__libc_init_array+0x38>)
 800b66c:	4c0d      	ldr	r4, [pc, #52]	; (800b6a4 <__libc_init_array+0x3c>)
 800b66e:	1ba4      	subs	r4, r4, r6
 800b670:	10a4      	asrs	r4, r4, #2
 800b672:	2500      	movs	r5, #0
 800b674:	42a5      	cmp	r5, r4
 800b676:	d109      	bne.n	800b68c <__libc_init_array+0x24>
 800b678:	4e0b      	ldr	r6, [pc, #44]	; (800b6a8 <__libc_init_array+0x40>)
 800b67a:	4c0c      	ldr	r4, [pc, #48]	; (800b6ac <__libc_init_array+0x44>)
 800b67c:	f000 f82c 	bl	800b6d8 <_init>
 800b680:	1ba4      	subs	r4, r4, r6
 800b682:	10a4      	asrs	r4, r4, #2
 800b684:	2500      	movs	r5, #0
 800b686:	42a5      	cmp	r5, r4
 800b688:	d105      	bne.n	800b696 <__libc_init_array+0x2e>
 800b68a:	bd70      	pop	{r4, r5, r6, pc}
 800b68c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b690:	4798      	blx	r3
 800b692:	3501      	adds	r5, #1
 800b694:	e7ee      	b.n	800b674 <__libc_init_array+0xc>
 800b696:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b69a:	4798      	blx	r3
 800b69c:	3501      	adds	r5, #1
 800b69e:	e7f2      	b.n	800b686 <__libc_init_array+0x1e>
 800b6a0:	0800cdcc 	.word	0x0800cdcc
 800b6a4:	0800cdcc 	.word	0x0800cdcc
 800b6a8:	0800cdcc 	.word	0x0800cdcc
 800b6ac:	0800cdd0 	.word	0x0800cdd0

0800b6b0 <memcpy>:
 800b6b0:	b510      	push	{r4, lr}
 800b6b2:	1e43      	subs	r3, r0, #1
 800b6b4:	440a      	add	r2, r1
 800b6b6:	4291      	cmp	r1, r2
 800b6b8:	d100      	bne.n	800b6bc <memcpy+0xc>
 800b6ba:	bd10      	pop	{r4, pc}
 800b6bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6c4:	e7f7      	b.n	800b6b6 <memcpy+0x6>

0800b6c6 <memset>:
 800b6c6:	4402      	add	r2, r0
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d100      	bne.n	800b6d0 <memset+0xa>
 800b6ce:	4770      	bx	lr
 800b6d0:	f803 1b01 	strb.w	r1, [r3], #1
 800b6d4:	e7f9      	b.n	800b6ca <memset+0x4>
	...

0800b6d8 <_init>:
 800b6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6da:	bf00      	nop
 800b6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6de:	bc08      	pop	{r3}
 800b6e0:	469e      	mov	lr, r3
 800b6e2:	4770      	bx	lr

0800b6e4 <_fini>:
 800b6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e6:	bf00      	nop
 800b6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ea:	bc08      	pop	{r3}
 800b6ec:	469e      	mov	lr, r3
 800b6ee:	4770      	bx	lr
